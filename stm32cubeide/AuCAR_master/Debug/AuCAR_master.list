
AuCAR_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008974  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08008b38  08008b38  00018b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bac  08008bac  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  08008bac  08008bac  00018bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bb4  08008bb4  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bb4  08008bb4  00018bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bb8  08008bb8  00018bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08008bbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ac0  200001f0  08008dac  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001cb0  08008dac  00021cb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cd0c  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003edd  00000000  00000000  0003cf2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001580  00000000  00000000  00040e10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001388  00000000  00000000  00042390  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000267a5  00000000  00000000  00043718  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001465e  00000000  00000000  00069ebd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d584d  00000000  00000000  0007e51b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00153d68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059b4  00000000  00000000  00153de4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200001f0 	.word	0x200001f0
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08008b20 	.word	0x08008b20

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200001f4 	.word	0x200001f4
 8000200:	08008b20 	.word	0x08008b20

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b972 	b.w	8000510 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9e08      	ldr	r6, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	4688      	mov	r8, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14b      	bne.n	80002ea <__udivmoddi4+0xa6>
 8000252:	428a      	cmp	r2, r1
 8000254:	4615      	mov	r5, r2
 8000256:	d967      	bls.n	8000328 <__udivmoddi4+0xe4>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b14a      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 800025e:	f1c2 0720 	rsb	r7, r2, #32
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	fa20 f707 	lsr.w	r7, r0, r7
 800026a:	4095      	lsls	r5, r2
 800026c:	ea47 0803 	orr.w	r8, r7, r3
 8000270:	4094      	lsls	r4, r2
 8000272:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000276:	0c23      	lsrs	r3, r4, #16
 8000278:	fbb8 f7fe 	udiv	r7, r8, lr
 800027c:	fa1f fc85 	uxth.w	ip, r5
 8000280:	fb0e 8817 	mls	r8, lr, r7, r8
 8000284:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000288:	fb07 f10c 	mul.w	r1, r7, ip
 800028c:	4299      	cmp	r1, r3
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x60>
 8000290:	18eb      	adds	r3, r5, r3
 8000292:	f107 30ff 	add.w	r0, r7, #4294967295
 8000296:	f080 811b 	bcs.w	80004d0 <__udivmoddi4+0x28c>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 8118 	bls.w	80004d0 <__udivmoddi4+0x28c>
 80002a0:	3f02      	subs	r7, #2
 80002a2:	442b      	add	r3, r5
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b8:	45a4      	cmp	ip, r4
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x8c>
 80002bc:	192c      	adds	r4, r5, r4
 80002be:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x290>
 80002c6:	45a4      	cmp	ip, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x290>
 80002cc:	3802      	subs	r0, #2
 80002ce:	442c      	add	r4, r5
 80002d0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d4:	eba4 040c 	sub.w	r4, r4, ip
 80002d8:	2700      	movs	r7, #0
 80002da:	b11e      	cbz	r6, 80002e4 <__udivmoddi4+0xa0>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c6 4300 	strd	r4, r3, [r6]
 80002e4:	4639      	mov	r1, r7
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xbe>
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f000 80eb 	beq.w	80004ca <__udivmoddi4+0x286>
 80002f4:	2700      	movs	r7, #0
 80002f6:	e9c6 0100 	strd	r0, r1, [r6]
 80002fa:	4638      	mov	r0, r7
 80002fc:	4639      	mov	r1, r7
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f783 	clz	r7, r3
 8000306:	2f00      	cmp	r7, #0
 8000308:	d147      	bne.n	800039a <__udivmoddi4+0x156>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd0>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80fa 	bhi.w	8000508 <__udivmoddi4+0x2c4>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	4698      	mov	r8, r3
 800031e:	2e00      	cmp	r6, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa0>
 8000322:	e9c6 4800 	strd	r4, r8, [r6]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa0>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xe8>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 808f 	bne.w	8000454 <__udivmoddi4+0x210>
 8000336:	1b49      	subs	r1, r1, r5
 8000338:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033c:	fa1f f885 	uxth.w	r8, r5
 8000340:	2701      	movs	r7, #1
 8000342:	fbb1 fcfe 	udiv	ip, r1, lr
 8000346:	0c23      	lsrs	r3, r4, #16
 8000348:	fb0e 111c 	mls	r1, lr, ip, r1
 800034c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000350:	fb08 f10c 	mul.w	r1, r8, ip
 8000354:	4299      	cmp	r1, r3
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x124>
 8000358:	18eb      	adds	r3, r5, r3
 800035a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x122>
 8000360:	4299      	cmp	r1, r3
 8000362:	f200 80cd 	bhi.w	8000500 <__udivmoddi4+0x2bc>
 8000366:	4684      	mov	ip, r0
 8000368:	1a59      	subs	r1, r3, r1
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000370:	fb0e 1410 	mls	r4, lr, r0, r1
 8000374:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000378:	fb08 f800 	mul.w	r8, r8, r0
 800037c:	45a0      	cmp	r8, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x14c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x14a>
 8000388:	45a0      	cmp	r8, r4
 800038a:	f200 80b6 	bhi.w	80004fa <__udivmoddi4+0x2b6>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 0408 	sub.w	r4, r4, r8
 8000394:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000398:	e79f      	b.n	80002da <__udivmoddi4+0x96>
 800039a:	f1c7 0c20 	rsb	ip, r7, #32
 800039e:	40bb      	lsls	r3, r7
 80003a0:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a4:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a8:	fa01 f407 	lsl.w	r4, r1, r7
 80003ac:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b8:	4325      	orrs	r5, r4
 80003ba:	fbb3 f9f8 	udiv	r9, r3, r8
 80003be:	0c2c      	lsrs	r4, r5, #16
 80003c0:	fb08 3319 	mls	r3, r8, r9, r3
 80003c4:	fa1f fa8e 	uxth.w	sl, lr
 80003c8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003cc:	fb09 f40a 	mul.w	r4, r9, sl
 80003d0:	429c      	cmp	r4, r3
 80003d2:	fa02 f207 	lsl.w	r2, r2, r7
 80003d6:	fa00 f107 	lsl.w	r1, r0, r7
 80003da:	d90b      	bls.n	80003f4 <__udivmoddi4+0x1b0>
 80003dc:	eb1e 0303 	adds.w	r3, lr, r3
 80003e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e4:	f080 8087 	bcs.w	80004f6 <__udivmoddi4+0x2b2>
 80003e8:	429c      	cmp	r4, r3
 80003ea:	f240 8084 	bls.w	80004f6 <__udivmoddi4+0x2b2>
 80003ee:	f1a9 0902 	sub.w	r9, r9, #2
 80003f2:	4473      	add	r3, lr
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	b2ad      	uxth	r5, r5
 80003f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000400:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000404:	fb00 fa0a 	mul.w	sl, r0, sl
 8000408:	45a2      	cmp	sl, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1da>
 800040c:	eb1e 0404 	adds.w	r4, lr, r4
 8000410:	f100 33ff 	add.w	r3, r0, #4294967295
 8000414:	d26b      	bcs.n	80004ee <__udivmoddi4+0x2aa>
 8000416:	45a2      	cmp	sl, r4
 8000418:	d969      	bls.n	80004ee <__udivmoddi4+0x2aa>
 800041a:	3802      	subs	r0, #2
 800041c:	4474      	add	r4, lr
 800041e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000422:	fba0 8902 	umull	r8, r9, r0, r2
 8000426:	eba4 040a 	sub.w	r4, r4, sl
 800042a:	454c      	cmp	r4, r9
 800042c:	46c2      	mov	sl, r8
 800042e:	464b      	mov	r3, r9
 8000430:	d354      	bcc.n	80004dc <__udivmoddi4+0x298>
 8000432:	d051      	beq.n	80004d8 <__udivmoddi4+0x294>
 8000434:	2e00      	cmp	r6, #0
 8000436:	d069      	beq.n	800050c <__udivmoddi4+0x2c8>
 8000438:	ebb1 050a 	subs.w	r5, r1, sl
 800043c:	eb64 0403 	sbc.w	r4, r4, r3
 8000440:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000444:	40fd      	lsrs	r5, r7
 8000446:	40fc      	lsrs	r4, r7
 8000448:	ea4c 0505 	orr.w	r5, ip, r5
 800044c:	e9c6 5400 	strd	r5, r4, [r6]
 8000450:	2700      	movs	r7, #0
 8000452:	e747      	b.n	80002e4 <__udivmoddi4+0xa0>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f703 	lsr.w	r7, r0, r3
 800045c:	4095      	lsls	r5, r2
 800045e:	fa01 f002 	lsl.w	r0, r1, r2
 8000462:	fa21 f303 	lsr.w	r3, r1, r3
 8000466:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046a:	4338      	orrs	r0, r7
 800046c:	0c01      	lsrs	r1, r0, #16
 800046e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000472:	fa1f f885 	uxth.w	r8, r5
 8000476:	fb0e 3317 	mls	r3, lr, r7, r3
 800047a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047e:	fb07 f308 	mul.w	r3, r7, r8
 8000482:	428b      	cmp	r3, r1
 8000484:	fa04 f402 	lsl.w	r4, r4, r2
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x256>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000490:	d22f      	bcs.n	80004f2 <__udivmoddi4+0x2ae>
 8000492:	428b      	cmp	r3, r1
 8000494:	d92d      	bls.n	80004f2 <__udivmoddi4+0x2ae>
 8000496:	3f02      	subs	r7, #2
 8000498:	4429      	add	r1, r5
 800049a:	1acb      	subs	r3, r1, r3
 800049c:	b281      	uxth	r1, r0
 800049e:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a2:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb00 f308 	mul.w	r3, r0, r8
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x27e>
 80004b2:	1869      	adds	r1, r5, r1
 80004b4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b8:	d217      	bcs.n	80004ea <__udivmoddi4+0x2a6>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d915      	bls.n	80004ea <__udivmoddi4+0x2a6>
 80004be:	3802      	subs	r0, #2
 80004c0:	4429      	add	r1, r5
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c8:	e73b      	b.n	8000342 <__udivmoddi4+0xfe>
 80004ca:	4637      	mov	r7, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e709      	b.n	80002e4 <__udivmoddi4+0xa0>
 80004d0:	4607      	mov	r7, r0
 80004d2:	e6e7      	b.n	80002a4 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x8c>
 80004d8:	4541      	cmp	r1, r8
 80004da:	d2ab      	bcs.n	8000434 <__udivmoddi4+0x1f0>
 80004dc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e0:	eb69 020e 	sbc.w	r2, r9, lr
 80004e4:	3801      	subs	r0, #1
 80004e6:	4613      	mov	r3, r2
 80004e8:	e7a4      	b.n	8000434 <__udivmoddi4+0x1f0>
 80004ea:	4660      	mov	r0, ip
 80004ec:	e7e9      	b.n	80004c2 <__udivmoddi4+0x27e>
 80004ee:	4618      	mov	r0, r3
 80004f0:	e795      	b.n	800041e <__udivmoddi4+0x1da>
 80004f2:	4667      	mov	r7, ip
 80004f4:	e7d1      	b.n	800049a <__udivmoddi4+0x256>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e77c      	b.n	80003f4 <__udivmoddi4+0x1b0>
 80004fa:	3802      	subs	r0, #2
 80004fc:	442c      	add	r4, r5
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0x14c>
 8000500:	f1ac 0c02 	sub.w	ip, ip, #2
 8000504:	442b      	add	r3, r5
 8000506:	e72f      	b.n	8000368 <__udivmoddi4+0x124>
 8000508:	4638      	mov	r0, r7
 800050a:	e708      	b.n	800031e <__udivmoddi4+0xda>
 800050c:	4637      	mov	r7, r6
 800050e:	e6e9      	b.n	80002e4 <__udivmoddi4+0xa0>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000518:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <HAL_Init+0x40>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a0d      	ldr	r2, [pc, #52]	; (8000554 <HAL_Init+0x40>)
 800051e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000522:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <HAL_Init+0x40>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a0a      	ldr	r2, [pc, #40]	; (8000554 <HAL_Init+0x40>)
 800052a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800052e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000530:	4b08      	ldr	r3, [pc, #32]	; (8000554 <HAL_Init+0x40>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a07      	ldr	r2, [pc, #28]	; (8000554 <HAL_Init+0x40>)
 8000536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800053a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 fc7b 	bl	8000e38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f000 f808 	bl	8000558 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000548:	f007 f850 	bl	80075ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40023c00 	.word	0x40023c00

08000558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <HAL_InitTick+0x54>)
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <HAL_InitTick+0x58>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	4619      	mov	r1, r3
 800056a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000572:	fbb2 f3f3 	udiv	r3, r2, r3
 8000576:	4618      	mov	r0, r3
 8000578:	f000 fc93 	bl	8000ea2 <HAL_SYSTICK_Config>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000582:	2301      	movs	r3, #1
 8000584:	e00e      	b.n	80005a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2b0f      	cmp	r3, #15
 800058a:	d80a      	bhi.n	80005a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800058c:	2200      	movs	r2, #0
 800058e:	6879      	ldr	r1, [r7, #4]
 8000590:	f04f 30ff 	mov.w	r0, #4294967295
 8000594:	f000 fc5b 	bl	8000e4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000598:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <HAL_InitTick+0x5c>)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800059e:	2300      	movs	r3, #0
 80005a0:	e000      	b.n	80005a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005a2:	2301      	movs	r3, #1
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000118 	.word	0x20000118
 80005b0:	20000004 	.word	0x20000004
 80005b4:	20000000 	.word	0x20000000

080005b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <HAL_IncTick+0x20>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <HAL_IncTick+0x24>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4413      	add	r3, r2
 80005c8:	4a04      	ldr	r2, [pc, #16]	; (80005dc <HAL_IncTick+0x24>)
 80005ca:	6013      	str	r3, [r2, #0]
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000004 	.word	0x20000004
 80005dc:	2000021c 	.word	0x2000021c

080005e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  return uwTick;
 80005e4:	4b03      	ldr	r3, [pc, #12]	; (80005f4 <HAL_GetTick+0x14>)
 80005e6:	681b      	ldr	r3, [r3, #0]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	2000021c 	.word	0x2000021c

080005f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000600:	f7ff ffee 	bl	80005e0 <HAL_GetTick>
 8000604:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000610:	d005      	beq.n	800061e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <HAL_Delay+0x40>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	461a      	mov	r2, r3
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	4413      	add	r3, r2
 800061c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800061e:	bf00      	nop
 8000620:	f7ff ffde 	bl	80005e0 <HAL_GetTick>
 8000624:	4602      	mov	r2, r0
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	1ad3      	subs	r3, r2, r3
 800062a:	68fa      	ldr	r2, [r7, #12]
 800062c:	429a      	cmp	r2, r3
 800062e:	d8f7      	bhi.n	8000620 <HAL_Delay+0x28>
  {
  }
}
 8000630:	bf00      	nop
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000004 	.word	0x20000004

0800063c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d101      	bne.n	800064e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800064a:	2301      	movs	r3, #1
 800064c:	e0ed      	b.n	800082a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000654:	b2db      	uxtb	r3, r3
 8000656:	2b00      	cmp	r3, #0
 8000658:	d102      	bne.n	8000660 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f006 fd72 	bl	8007144 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f022 0202 	bic.w	r2, r2, #2
 800066e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000670:	f7ff ffb6 	bl	80005e0 <HAL_GetTick>
 8000674:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000676:	e012      	b.n	800069e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000678:	f7ff ffb2 	bl	80005e0 <HAL_GetTick>
 800067c:	4602      	mov	r2, r0
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	1ad3      	subs	r3, r2, r3
 8000682:	2b0a      	cmp	r3, #10
 8000684:	d90b      	bls.n	800069e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800068a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	2205      	movs	r2, #5
 8000696:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800069a:	2301      	movs	r3, #1
 800069c:	e0c5      	b.n	800082a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	685b      	ldr	r3, [r3, #4]
 80006a4:	f003 0302 	and.w	r3, r3, #2
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d1e5      	bne.n	8000678 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f042 0201 	orr.w	r2, r2, #1
 80006ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80006bc:	f7ff ff90 	bl	80005e0 <HAL_GetTick>
 80006c0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80006c2:	e012      	b.n	80006ea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80006c4:	f7ff ff8c 	bl	80005e0 <HAL_GetTick>
 80006c8:	4602      	mov	r2, r0
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	2b0a      	cmp	r3, #10
 80006d0:	d90b      	bls.n	80006ea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2205      	movs	r2, #5
 80006e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80006e6:	2301      	movs	r3, #1
 80006e8:	e09f      	b.n	800082a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	685b      	ldr	r3, [r3, #4]
 80006f0:	f003 0301 	and.w	r3, r3, #1
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d0e5      	beq.n	80006c4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	7e1b      	ldrb	r3, [r3, #24]
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d108      	bne.n	8000712 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	e007      	b.n	8000722 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000720:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	7e5b      	ldrb	r3, [r3, #25]
 8000726:	2b01      	cmp	r3, #1
 8000728:	d108      	bne.n	800073c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	e007      	b.n	800074c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800074a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	7e9b      	ldrb	r3, [r3, #26]
 8000750:	2b01      	cmp	r3, #1
 8000752:	d108      	bne.n	8000766 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f042 0220 	orr.w	r2, r2, #32
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	e007      	b.n	8000776 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f022 0220 	bic.w	r2, r2, #32
 8000774:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	7edb      	ldrb	r3, [r3, #27]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d108      	bne.n	8000790 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f022 0210 	bic.w	r2, r2, #16
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	e007      	b.n	80007a0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f042 0210 	orr.w	r2, r2, #16
 800079e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	7f1b      	ldrb	r3, [r3, #28]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d108      	bne.n	80007ba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	f042 0208 	orr.w	r2, r2, #8
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	e007      	b.n	80007ca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f022 0208 	bic.w	r2, r2, #8
 80007c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	7f5b      	ldrb	r3, [r3, #29]
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d108      	bne.n	80007e4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f042 0204 	orr.w	r2, r2, #4
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	e007      	b.n	80007f4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f022 0204 	bic.w	r2, r2, #4
 80007f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	689a      	ldr	r2, [r3, #8]
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	431a      	orrs	r2, r3
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	691b      	ldr	r3, [r3, #16]
 8000802:	431a      	orrs	r2, r3
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	695b      	ldr	r3, [r3, #20]
 8000808:	ea42 0103 	orr.w	r1, r2, r3
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	1e5a      	subs	r2, r3, #1
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	430a      	orrs	r2, r1
 8000818:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2200      	movs	r2, #0
 800081e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2201      	movs	r2, #1
 8000824:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000828:	2300      	movs	r3, #0
}
 800082a:	4618      	mov	r0, r3
 800082c:	3710      	adds	r7, #16
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b08a      	sub	sp, #40	; 0x28
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	695b      	ldr	r3, [r3, #20]
 8000844:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	689b      	ldr	r3, [r3, #8]
 8000854:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	68db      	ldr	r3, [r3, #12]
 800085c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	691b      	ldr	r3, [r3, #16]
 8000864:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800086e:	6a3b      	ldr	r3, [r7, #32]
 8000870:	f003 0301 	and.w	r3, r3, #1
 8000874:	2b00      	cmp	r3, #0
 8000876:	d07c      	beq.n	8000972 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000878:	69bb      	ldr	r3, [r7, #24]
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	2b00      	cmp	r3, #0
 8000880:	d023      	beq.n	80008ca <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	2201      	movs	r2, #1
 8000888:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800088a:	69bb      	ldr	r3, [r7, #24]
 800088c:	f003 0302 	and.w	r3, r3, #2
 8000890:	2b00      	cmp	r3, #0
 8000892:	d003      	beq.n	800089c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000894:	6878      	ldr	r0, [r7, #4]
 8000896:	f000 f97d 	bl	8000b94 <HAL_CAN_TxMailbox0CompleteCallback>
 800089a:	e016      	b.n	80008ca <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800089c:	69bb      	ldr	r3, [r7, #24]
 800089e:	f003 0304 	and.w	r3, r3, #4
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d004      	beq.n	80008b0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80008a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
 80008ae:	e00c      	b.n	80008ca <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80008b0:	69bb      	ldr	r3, [r7, #24]
 80008b2:	f003 0308 	and.w	r3, r3, #8
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d004      	beq.n	80008c4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80008ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
 80008c2:	e002      	b.n	80008ca <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f000 f983 	bl	8000bd0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80008ca:	69bb      	ldr	r3, [r7, #24]
 80008cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d024      	beq.n	800091e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008dc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80008de:	69bb      	ldr	r3, [r7, #24]
 80008e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d003      	beq.n	80008f0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80008e8:	6878      	ldr	r0, [r7, #4]
 80008ea:	f000 f95d 	bl	8000ba8 <HAL_CAN_TxMailbox1CompleteCallback>
 80008ee:	e016      	b.n	800091e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80008f0:	69bb      	ldr	r3, [r7, #24]
 80008f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d004      	beq.n	8000904 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80008fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
 8000902:	e00c      	b.n	800091e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000904:	69bb      	ldr	r3, [r7, #24]
 8000906:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800090a:	2b00      	cmp	r3, #0
 800090c:	d004      	beq.n	8000918 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800090e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
 8000916:	e002      	b.n	800091e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f000 f963 	bl	8000be4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800091e:	69bb      	ldr	r3, [r7, #24]
 8000920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000924:	2b00      	cmp	r3, #0
 8000926:	d024      	beq.n	8000972 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000930:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000932:	69bb      	ldr	r3, [r7, #24]
 8000934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000938:	2b00      	cmp	r3, #0
 800093a:	d003      	beq.n	8000944 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f000 f93d 	bl	8000bbc <HAL_CAN_TxMailbox2CompleteCallback>
 8000942:	e016      	b.n	8000972 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000944:	69bb      	ldr	r3, [r7, #24]
 8000946:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800094a:	2b00      	cmp	r3, #0
 800094c:	d004      	beq.n	8000958 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800094e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000950:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
 8000956:	e00c      	b.n	8000972 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000958:	69bb      	ldr	r3, [r7, #24]
 800095a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800095e:	2b00      	cmp	r3, #0
 8000960:	d004      	beq.n	800096c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
 800096a:	e002      	b.n	8000972 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f000 f943 	bl	8000bf8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000972:	6a3b      	ldr	r3, [r7, #32]
 8000974:	f003 0308 	and.w	r3, r3, #8
 8000978:	2b00      	cmp	r3, #0
 800097a:	d00c      	beq.n	8000996 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	f003 0310 	and.w	r3, r3, #16
 8000982:	2b00      	cmp	r3, #0
 8000984:	d007      	beq.n	8000996 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000988:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800098c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	2210      	movs	r2, #16
 8000994:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000996:	6a3b      	ldr	r3, [r7, #32]
 8000998:	f003 0304 	and.w	r3, r3, #4
 800099c:	2b00      	cmp	r3, #0
 800099e:	d00b      	beq.n	80009b8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	f003 0308 	and.w	r3, r3, #8
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d006      	beq.n	80009b8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	2208      	movs	r2, #8
 80009b0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f000 f934 	bl	8000c20 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80009b8:	6a3b      	ldr	r3, [r7, #32]
 80009ba:	f003 0302 	and.w	r3, r3, #2
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d009      	beq.n	80009d6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	f003 0303 	and.w	r3, r3, #3
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d002      	beq.n	80009d6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f000 f91b 	bl	8000c0c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80009d6:	6a3b      	ldr	r3, [r7, #32]
 80009d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d00c      	beq.n	80009fa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	f003 0310 	and.w	r3, r3, #16
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d007      	beq.n	80009fa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80009ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2210      	movs	r2, #16
 80009f8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80009fa:	6a3b      	ldr	r3, [r7, #32]
 80009fc:	f003 0320 	and.w	r3, r3, #32
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d00b      	beq.n	8000a1c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	f003 0308 	and.w	r3, r3, #8
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d006      	beq.n	8000a1c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	2208      	movs	r2, #8
 8000a14:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000a16:	6878      	ldr	r0, [r7, #4]
 8000a18:	f000 f916 	bl	8000c48 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000a1c:	6a3b      	ldr	r3, [r7, #32]
 8000a1e:	f003 0310 	and.w	r3, r3, #16
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d009      	beq.n	8000a3a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	691b      	ldr	r3, [r3, #16]
 8000a2c:	f003 0303 	and.w	r3, r3, #3
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d002      	beq.n	8000a3a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f000 f8fd 	bl	8000c34 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000a3a:	6a3b      	ldr	r3, [r7, #32]
 8000a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d00b      	beq.n	8000a5c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000a44:	69fb      	ldr	r3, [r7, #28]
 8000a46:	f003 0310 	and.w	r3, r3, #16
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d006      	beq.n	8000a5c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	2210      	movs	r2, #16
 8000a54:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f000 f900 	bl	8000c5c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000a5c:	6a3b      	ldr	r3, [r7, #32]
 8000a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d00b      	beq.n	8000a7e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	f003 0308 	and.w	r3, r3, #8
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d006      	beq.n	8000a7e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2208      	movs	r2, #8
 8000a76:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f000 f8f9 	bl	8000c70 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000a7e:	6a3b      	ldr	r3, [r7, #32]
 8000a80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d075      	beq.n	8000b74 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	f003 0304 	and.w	r3, r3, #4
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d06c      	beq.n	8000b6c <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000a92:	6a3b      	ldr	r3, [r7, #32]
 8000a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d008      	beq.n	8000aae <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d003      	beq.n	8000aae <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000aae:	6a3b      	ldr	r3, [r7, #32]
 8000ab0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d008      	beq.n	8000aca <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d003      	beq.n	8000aca <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000aca:	6a3b      	ldr	r3, [r7, #32]
 8000acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d008      	beq.n	8000ae6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d003      	beq.n	8000ae6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae0:	f043 0304 	orr.w	r3, r3, #4
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000ae6:	6a3b      	ldr	r3, [r7, #32]
 8000ae8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d03d      	beq.n	8000b6c <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d038      	beq.n	8000b6c <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000b00:	2b30      	cmp	r3, #48	; 0x30
 8000b02:	d017      	beq.n	8000b34 <HAL_CAN_IRQHandler+0x302>
 8000b04:	2b30      	cmp	r3, #48	; 0x30
 8000b06:	d804      	bhi.n	8000b12 <HAL_CAN_IRQHandler+0x2e0>
 8000b08:	2b10      	cmp	r3, #16
 8000b0a:	d009      	beq.n	8000b20 <HAL_CAN_IRQHandler+0x2ee>
 8000b0c:	2b20      	cmp	r3, #32
 8000b0e:	d00c      	beq.n	8000b2a <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8000b10:	e024      	b.n	8000b5c <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8000b12:	2b50      	cmp	r3, #80	; 0x50
 8000b14:	d018      	beq.n	8000b48 <HAL_CAN_IRQHandler+0x316>
 8000b16:	2b60      	cmp	r3, #96	; 0x60
 8000b18:	d01b      	beq.n	8000b52 <HAL_CAN_IRQHandler+0x320>
 8000b1a:	2b40      	cmp	r3, #64	; 0x40
 8000b1c:	d00f      	beq.n	8000b3e <HAL_CAN_IRQHandler+0x30c>
            break;
 8000b1e:	e01d      	b.n	8000b5c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8000b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b22:	f043 0308 	orr.w	r3, r3, #8
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000b28:	e018      	b.n	8000b5c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2c:	f043 0310 	orr.w	r3, r3, #16
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000b32:	e013      	b.n	8000b5c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b36:	f043 0320 	orr.w	r3, r3, #32
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000b3c:	e00e      	b.n	8000b5c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8000b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000b46:	e009      	b.n	8000b5c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8000b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000b50:	e004      	b.n	8000b5c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000b5a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	699a      	ldr	r2, [r3, #24]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000b6a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2204      	movs	r2, #4
 8000b72:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d008      	beq.n	8000b8c <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b80:	431a      	orrs	r2, r3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f000 f87c 	bl	8000c84 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8000b8c:	bf00      	nop
 8000b8e:	3728      	adds	r7, #40	; 0x28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000bc4:	bf00      	nop
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cae:	68ba      	ldr	r2, [r7, #8]
 8000cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cca:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	60d3      	str	r3, [r2, #12]
}
 8000cd0:	bf00      	nop
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce4:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	0a1b      	lsrs	r3, r3, #8
 8000cea:	f003 0307 	and.w	r3, r3, #7
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	db0b      	blt.n	8000d26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	f003 021f 	and.w	r2, r3, #31
 8000d14:	4907      	ldr	r1, [pc, #28]	; (8000d34 <__NVIC_EnableIRQ+0x38>)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	095b      	lsrs	r3, r3, #5
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000e100 	.word	0xe000e100

08000d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	6039      	str	r1, [r7, #0]
 8000d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	db0a      	blt.n	8000d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	b2da      	uxtb	r2, r3
 8000d50:	490c      	ldr	r1, [pc, #48]	; (8000d84 <__NVIC_SetPriority+0x4c>)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	0112      	lsls	r2, r2, #4
 8000d58:	b2d2      	uxtb	r2, r2
 8000d5a:	440b      	add	r3, r1
 8000d5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d60:	e00a      	b.n	8000d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	4908      	ldr	r1, [pc, #32]	; (8000d88 <__NVIC_SetPriority+0x50>)
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	f003 030f 	and.w	r3, r3, #15
 8000d6e:	3b04      	subs	r3, #4
 8000d70:	0112      	lsls	r2, r2, #4
 8000d72:	b2d2      	uxtb	r2, r2
 8000d74:	440b      	add	r3, r1
 8000d76:	761a      	strb	r2, [r3, #24]
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000e100 	.word	0xe000e100
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b089      	sub	sp, #36	; 0x24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	f1c3 0307 	rsb	r3, r3, #7
 8000da6:	2b04      	cmp	r3, #4
 8000da8:	bf28      	it	cs
 8000daa:	2304      	movcs	r3, #4
 8000dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	3304      	adds	r3, #4
 8000db2:	2b06      	cmp	r3, #6
 8000db4:	d902      	bls.n	8000dbc <NVIC_EncodePriority+0x30>
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	3b03      	subs	r3, #3
 8000dba:	e000      	b.n	8000dbe <NVIC_EncodePriority+0x32>
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43da      	mvns	r2, r3
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	401a      	ands	r2, r3
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	fa01 f303 	lsl.w	r3, r1, r3
 8000dde:	43d9      	mvns	r1, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de4:	4313      	orrs	r3, r2
         );
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3724      	adds	r7, #36	; 0x24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
	...

08000df4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e04:	d301      	bcc.n	8000e0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e06:	2301      	movs	r3, #1
 8000e08:	e00f      	b.n	8000e2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <SysTick_Config+0x40>)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e12:	210f      	movs	r1, #15
 8000e14:	f04f 30ff 	mov.w	r0, #4294967295
 8000e18:	f7ff ff8e 	bl	8000d38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <SysTick_Config+0x40>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e22:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <SysTick_Config+0x40>)
 8000e24:	2207      	movs	r2, #7
 8000e26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	e000e010 	.word	0xe000e010

08000e38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f7ff ff29 	bl	8000c98 <__NVIC_SetPriorityGrouping>
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b086      	sub	sp, #24
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	4603      	mov	r3, r0
 8000e56:	60b9      	str	r1, [r7, #8]
 8000e58:	607a      	str	r2, [r7, #4]
 8000e5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e60:	f7ff ff3e 	bl	8000ce0 <__NVIC_GetPriorityGrouping>
 8000e64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	68b9      	ldr	r1, [r7, #8]
 8000e6a:	6978      	ldr	r0, [r7, #20]
 8000e6c:	f7ff ff8e 	bl	8000d8c <NVIC_EncodePriority>
 8000e70:	4602      	mov	r2, r0
 8000e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e76:	4611      	mov	r1, r2
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff5d 	bl	8000d38 <__NVIC_SetPriority>
}
 8000e7e:	bf00      	nop
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ff31 	bl	8000cfc <__NVIC_EnableIRQ>
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f7ff ffa2 	bl	8000df4 <SysTick_Config>
 8000eb0:	4603      	mov	r3, r0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	b083      	sub	sp, #12
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d004      	beq.n	8000ed8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2280      	movs	r2, #128	; 0x80
 8000ed2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e00c      	b.n	8000ef2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2205      	movs	r2, #5
 8000edc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f022 0201 	bic.w	r2, r2, #1
 8000eee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b089      	sub	sp, #36	; 0x24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
 8000f1a:	e165      	b.n	80011e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	697a      	ldr	r2, [r7, #20]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	f040 8154 	bne.w	80011e2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d003      	beq.n	8000f4a <HAL_GPIO_Init+0x4a>
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	2b12      	cmp	r3, #18
 8000f48:	d123      	bne.n	8000f92 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	08da      	lsrs	r2, r3, #3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3208      	adds	r2, #8
 8000f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	220f      	movs	r2, #15
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	691a      	ldr	r2, [r3, #16]
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	f003 0307 	and.w	r3, r3, #7
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	08da      	lsrs	r2, r3, #3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3208      	adds	r2, #8
 8000f8c:	69b9      	ldr	r1, [r7, #24]
 8000f8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 0203 	and.w	r2, r3, #3
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d00b      	beq.n	8000fe6 <HAL_GPIO_Init+0xe6>
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d007      	beq.n	8000fe6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fda:	2b11      	cmp	r3, #17
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	2b12      	cmp	r3, #18
 8000fe4:	d130      	bne.n	8001048 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	2203      	movs	r2, #3
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	68da      	ldr	r2, [r3, #12]
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4313      	orrs	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800101c:	2201      	movs	r2, #1
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	091b      	lsrs	r3, r3, #4
 8001032:	f003 0201 	and.w	r2, r3, #1
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	2203      	movs	r2, #3
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001080:	2b00      	cmp	r3, #0
 8001082:	f000 80ae 	beq.w	80011e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	4b5c      	ldr	r3, [pc, #368]	; (80011fc <HAL_GPIO_Init+0x2fc>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	4a5b      	ldr	r2, [pc, #364]	; (80011fc <HAL_GPIO_Init+0x2fc>)
 8001090:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001094:	6453      	str	r3, [r2, #68]	; 0x44
 8001096:	4b59      	ldr	r3, [pc, #356]	; (80011fc <HAL_GPIO_Init+0x2fc>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010a2:	4a57      	ldr	r2, [pc, #348]	; (8001200 <HAL_GPIO_Init+0x300>)
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	089b      	lsrs	r3, r3, #2
 80010a8:	3302      	adds	r3, #2
 80010aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	f003 0303 	and.w	r3, r3, #3
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	220f      	movs	r2, #15
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43db      	mvns	r3, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4013      	ands	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4e      	ldr	r2, [pc, #312]	; (8001204 <HAL_GPIO_Init+0x304>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d025      	beq.n	800111a <HAL_GPIO_Init+0x21a>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4d      	ldr	r2, [pc, #308]	; (8001208 <HAL_GPIO_Init+0x308>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d01f      	beq.n	8001116 <HAL_GPIO_Init+0x216>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4c      	ldr	r2, [pc, #304]	; (800120c <HAL_GPIO_Init+0x30c>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d019      	beq.n	8001112 <HAL_GPIO_Init+0x212>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4b      	ldr	r2, [pc, #300]	; (8001210 <HAL_GPIO_Init+0x310>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d013      	beq.n	800110e <HAL_GPIO_Init+0x20e>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4a      	ldr	r2, [pc, #296]	; (8001214 <HAL_GPIO_Init+0x314>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d00d      	beq.n	800110a <HAL_GPIO_Init+0x20a>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a49      	ldr	r2, [pc, #292]	; (8001218 <HAL_GPIO_Init+0x318>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d007      	beq.n	8001106 <HAL_GPIO_Init+0x206>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a48      	ldr	r2, [pc, #288]	; (800121c <HAL_GPIO_Init+0x31c>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d101      	bne.n	8001102 <HAL_GPIO_Init+0x202>
 80010fe:	2306      	movs	r3, #6
 8001100:	e00c      	b.n	800111c <HAL_GPIO_Init+0x21c>
 8001102:	2307      	movs	r3, #7
 8001104:	e00a      	b.n	800111c <HAL_GPIO_Init+0x21c>
 8001106:	2305      	movs	r3, #5
 8001108:	e008      	b.n	800111c <HAL_GPIO_Init+0x21c>
 800110a:	2304      	movs	r3, #4
 800110c:	e006      	b.n	800111c <HAL_GPIO_Init+0x21c>
 800110e:	2303      	movs	r3, #3
 8001110:	e004      	b.n	800111c <HAL_GPIO_Init+0x21c>
 8001112:	2302      	movs	r3, #2
 8001114:	e002      	b.n	800111c <HAL_GPIO_Init+0x21c>
 8001116:	2301      	movs	r3, #1
 8001118:	e000      	b.n	800111c <HAL_GPIO_Init+0x21c>
 800111a:	2300      	movs	r3, #0
 800111c:	69fa      	ldr	r2, [r7, #28]
 800111e:	f002 0203 	and.w	r2, r2, #3
 8001122:	0092      	lsls	r2, r2, #2
 8001124:	4093      	lsls	r3, r2
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4313      	orrs	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800112c:	4934      	ldr	r1, [pc, #208]	; (8001200 <HAL_GPIO_Init+0x300>)
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	089b      	lsrs	r3, r3, #2
 8001132:	3302      	adds	r3, #2
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800113a:	4b39      	ldr	r3, [pc, #228]	; (8001220 <HAL_GPIO_Init+0x320>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	43db      	mvns	r3, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4013      	ands	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d003      	beq.n	800115e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800115e:	4a30      	ldr	r2, [pc, #192]	; (8001220 <HAL_GPIO_Init+0x320>)
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001164:	4b2e      	ldr	r3, [pc, #184]	; (8001220 <HAL_GPIO_Init+0x320>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d003      	beq.n	8001188 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	4313      	orrs	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001188:	4a25      	ldr	r2, [pc, #148]	; (8001220 <HAL_GPIO_Init+0x320>)
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800118e:	4b24      	ldr	r3, [pc, #144]	; (8001220 <HAL_GPIO_Init+0x320>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	43db      	mvns	r3, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4013      	ands	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011b2:	4a1b      	ldr	r2, [pc, #108]	; (8001220 <HAL_GPIO_Init+0x320>)
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011b8:	4b19      	ldr	r3, [pc, #100]	; (8001220 <HAL_GPIO_Init+0x320>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d003      	beq.n	80011dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011dc:	4a10      	ldr	r2, [pc, #64]	; (8001220 <HAL_GPIO_Init+0x320>)
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3301      	adds	r3, #1
 80011e6:	61fb      	str	r3, [r7, #28]
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	2b0f      	cmp	r3, #15
 80011ec:	f67f ae96 	bls.w	8000f1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011f0:	bf00      	nop
 80011f2:	3724      	adds	r7, #36	; 0x24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	40023800 	.word	0x40023800
 8001200:	40013800 	.word	0x40013800
 8001204:	40020000 	.word	0x40020000
 8001208:	40020400 	.word	0x40020400
 800120c:	40020800 	.word	0x40020800
 8001210:	40020c00 	.word	0x40020c00
 8001214:	40021000 	.word	0x40021000
 8001218:	40021400 	.word	0x40021400
 800121c:	40021800 	.word	0x40021800
 8001220:	40013c00 	.word	0x40013c00

08001224 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	807b      	strh	r3, [r7, #2]
 8001230:	4613      	mov	r3, r2
 8001232:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001234:	787b      	ldrb	r3, [r7, #1]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800123a:	887a      	ldrh	r2, [r7, #2]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001240:	e003      	b.n	800124a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001242:	887b      	ldrh	r3, [r7, #2]
 8001244:	041a      	lsls	r2, r3, #16
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	619a      	str	r2, [r3, #24]
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001256:	b480      	push	{r7}
 8001258:	b083      	sub	sp, #12
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
 800125e:	460b      	mov	r3, r1
 8001260:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	695a      	ldr	r2, [r3, #20]
 8001266:	887b      	ldrh	r3, [r7, #2]
 8001268:	401a      	ands	r2, r3
 800126a:	887b      	ldrh	r3, [r7, #2]
 800126c:	429a      	cmp	r2, r3
 800126e:	d104      	bne.n	800127a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001270:	887b      	ldrh	r3, [r7, #2]
 8001272:	041a      	lsls	r2, r3, #16
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001278:	e002      	b.n	8001280 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800127a:	887a      	ldrh	r2, [r7, #2]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	619a      	str	r2, [r3, #24]
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800128c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800128e:	b08f      	sub	sp, #60	; 0x3c
 8001290:	af0a      	add	r7, sp, #40	; 0x28
 8001292:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e116      	b.n	80014cc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d106      	bne.n	80012be <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f006 fe87 	bl	8007fcc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2203      	movs	r2, #3
 80012c2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d102      	bne.n	80012d8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f003 f9f0 	bl	80046c2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	603b      	str	r3, [r7, #0]
 80012e8:	687e      	ldr	r6, [r7, #4]
 80012ea:	466d      	mov	r5, sp
 80012ec:	f106 0410 	add.w	r4, r6, #16
 80012f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001300:	1d33      	adds	r3, r6, #4
 8001302:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001304:	6838      	ldr	r0, [r7, #0]
 8001306:	f003 f8c7 	bl	8004498 <USB_CoreInit>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d005      	beq.n	800131c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2202      	movs	r2, #2
 8001314:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e0d7      	b.n	80014cc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2100      	movs	r1, #0
 8001322:	4618      	mov	r0, r3
 8001324:	f003 f9de 	bl	80046e4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001328:	2300      	movs	r3, #0
 800132a:	73fb      	strb	r3, [r7, #15]
 800132c:	e04a      	b.n	80013c4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800132e:	7bfa      	ldrb	r2, [r7, #15]
 8001330:	6879      	ldr	r1, [r7, #4]
 8001332:	4613      	mov	r3, r2
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	1a9b      	subs	r3, r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	440b      	add	r3, r1
 800133c:	333d      	adds	r3, #61	; 0x3d
 800133e:	2201      	movs	r2, #1
 8001340:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001342:	7bfa      	ldrb	r2, [r7, #15]
 8001344:	6879      	ldr	r1, [r7, #4]
 8001346:	4613      	mov	r3, r2
 8001348:	00db      	lsls	r3, r3, #3
 800134a:	1a9b      	subs	r3, r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	440b      	add	r3, r1
 8001350:	333c      	adds	r3, #60	; 0x3c
 8001352:	7bfa      	ldrb	r2, [r7, #15]
 8001354:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001356:	7bfa      	ldrb	r2, [r7, #15]
 8001358:	7bfb      	ldrb	r3, [r7, #15]
 800135a:	b298      	uxth	r0, r3
 800135c:	6879      	ldr	r1, [r7, #4]
 800135e:	4613      	mov	r3, r2
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	1a9b      	subs	r3, r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	440b      	add	r3, r1
 8001368:	3342      	adds	r3, #66	; 0x42
 800136a:	4602      	mov	r2, r0
 800136c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800136e:	7bfa      	ldrb	r2, [r7, #15]
 8001370:	6879      	ldr	r1, [r7, #4]
 8001372:	4613      	mov	r3, r2
 8001374:	00db      	lsls	r3, r3, #3
 8001376:	1a9b      	subs	r3, r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	440b      	add	r3, r1
 800137c:	333f      	adds	r3, #63	; 0x3f
 800137e:	2200      	movs	r2, #0
 8001380:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001382:	7bfa      	ldrb	r2, [r7, #15]
 8001384:	6879      	ldr	r1, [r7, #4]
 8001386:	4613      	mov	r3, r2
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	1a9b      	subs	r3, r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	440b      	add	r3, r1
 8001390:	3344      	adds	r3, #68	; 0x44
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001396:	7bfa      	ldrb	r2, [r7, #15]
 8001398:	6879      	ldr	r1, [r7, #4]
 800139a:	4613      	mov	r3, r2
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	1a9b      	subs	r3, r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	440b      	add	r3, r1
 80013a4:	3348      	adds	r3, #72	; 0x48
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013aa:	7bfa      	ldrb	r2, [r7, #15]
 80013ac:	6879      	ldr	r1, [r7, #4]
 80013ae:	4613      	mov	r3, r2
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	1a9b      	subs	r3, r3, r2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	440b      	add	r3, r1
 80013b8:	3350      	adds	r3, #80	; 0x50
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013be:	7bfb      	ldrb	r3, [r7, #15]
 80013c0:	3301      	adds	r3, #1
 80013c2:	73fb      	strb	r3, [r7, #15]
 80013c4:	7bfa      	ldrb	r2, [r7, #15]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d3af      	bcc.n	800132e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013ce:	2300      	movs	r3, #0
 80013d0:	73fb      	strb	r3, [r7, #15]
 80013d2:	e044      	b.n	800145e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80013d4:	7bfa      	ldrb	r2, [r7, #15]
 80013d6:	6879      	ldr	r1, [r7, #4]
 80013d8:	4613      	mov	r3, r2
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	1a9b      	subs	r3, r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	440b      	add	r3, r1
 80013e2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80013e6:	2200      	movs	r2, #0
 80013e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80013ea:	7bfa      	ldrb	r2, [r7, #15]
 80013ec:	6879      	ldr	r1, [r7, #4]
 80013ee:	4613      	mov	r3, r2
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	1a9b      	subs	r3, r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	440b      	add	r3, r1
 80013f8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80013fc:	7bfa      	ldrb	r2, [r7, #15]
 80013fe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001400:	7bfa      	ldrb	r2, [r7, #15]
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	4613      	mov	r3, r2
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	1a9b      	subs	r3, r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	440b      	add	r3, r1
 800140e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001416:	7bfa      	ldrb	r2, [r7, #15]
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	1a9b      	subs	r3, r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	440b      	add	r3, r1
 8001424:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800142c:	7bfa      	ldrb	r2, [r7, #15]
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	4613      	mov	r3, r2
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	1a9b      	subs	r3, r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	440b      	add	r3, r1
 800143a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001442:	7bfa      	ldrb	r2, [r7, #15]
 8001444:	6879      	ldr	r1, [r7, #4]
 8001446:	4613      	mov	r3, r2
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	1a9b      	subs	r3, r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	440b      	add	r3, r1
 8001450:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001458:	7bfb      	ldrb	r3, [r7, #15]
 800145a:	3301      	adds	r3, #1
 800145c:	73fb      	strb	r3, [r7, #15]
 800145e:	7bfa      	ldrb	r2, [r7, #15]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	429a      	cmp	r2, r3
 8001466:	d3b5      	bcc.n	80013d4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	603b      	str	r3, [r7, #0]
 800146e:	687e      	ldr	r6, [r7, #4]
 8001470:	466d      	mov	r5, sp
 8001472:	f106 0410 	add.w	r4, r6, #16
 8001476:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001478:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800147a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800147c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800147e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001482:	e885 0003 	stmia.w	r5, {r0, r1}
 8001486:	1d33      	adds	r3, r6, #4
 8001488:	cb0e      	ldmia	r3, {r1, r2, r3}
 800148a:	6838      	ldr	r0, [r7, #0]
 800148c:	f003 f954 	bl	8004738 <USB_DevInit>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d005      	beq.n	80014a2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2202      	movs	r2, #2
 800149a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e014      	b.n	80014cc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2201      	movs	r2, #1
 80014ae:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d102      	bne.n	80014c0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f001 f898 	bl	80025f0 <HAL_PCDEx_ActivateLPM>
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f004 f93c 	bl	8005742 <USB_DevDisconnect>

  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014d4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d101      	bne.n	80014f0 <HAL_PCD_Start+0x1c>
 80014ec:	2302      	movs	r3, #2
 80014ee:	e020      	b.n	8001532 <HAL_PCD_Start+0x5e>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2201      	movs	r2, #1
 80014f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d109      	bne.n	8001514 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001504:	2b01      	cmp	r3, #1
 8001506:	d005      	beq.n	8001514 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800150c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f004 f8fa 	bl	8005712 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f003 f8bc 	bl	80046a0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800153a:	b590      	push	{r4, r7, lr}
 800153c:	b08d      	sub	sp, #52	; 0x34
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001548:	6a3b      	ldr	r3, [r7, #32]
 800154a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4618      	mov	r0, r3
 8001552:	f004 f9a1 	bl	8005898 <USB_GetMode>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	f040 83bb 	bne.w	8001cd4 <HAL_PCD_IRQHandler+0x79a>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f004 f905 	bl	8005772 <USB_ReadInterrupts>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	f000 83b1 	beq.w	8001cd2 <HAL_PCD_IRQHandler+0x798>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4618      	mov	r0, r3
 8001576:	f004 f8fc 	bl	8005772 <USB_ReadInterrupts>
 800157a:	4603      	mov	r3, r0
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b02      	cmp	r3, #2
 8001582:	d107      	bne.n	8001594 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	695a      	ldr	r2, [r3, #20]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f002 0202 	and.w	r2, r2, #2
 8001592:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f004 f8ea 	bl	8005772 <USB_ReadInterrupts>
 800159e:	4603      	mov	r3, r0
 80015a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015a4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80015a8:	d17b      	bne.n	80016a2 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 80015aa:	2300      	movs	r3, #0
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f004 f8f0 	bl	8005798 <USB_ReadDevAllOutEpInterrupt>
 80015b8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80015ba:	e06f      	b.n	800169c <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 80015bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d064      	beq.n	8001690 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015cc:	b2d2      	uxtb	r2, r2
 80015ce:	4611      	mov	r1, r2
 80015d0:	4618      	mov	r0, r3
 80015d2:	f004 f915 	bl	8005800 <USB_ReadDevOutEPInterrupt>
 80015d6:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00c      	beq.n	80015fc <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	015a      	lsls	r2, r3, #5
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	4413      	add	r3, r2
 80015ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015ee:	461a      	mov	r2, r3
 80015f0:	2301      	movs	r3, #1
 80015f2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80015f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f000 fe3a 	bl	8002270 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	f003 0308 	and.w	r3, r3, #8
 8001602:	2b00      	cmp	r3, #0
 8001604:	d00c      	beq.n	8001620 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001606:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f000 ff39 	bl	8002480 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	015a      	lsls	r2, r3, #5
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	4413      	add	r3, r2
 8001616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800161a:	461a      	mov	r2, r3
 800161c:	2308      	movs	r3, #8
 800161e:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	f003 0310 	and.w	r3, r3, #16
 8001626:	2b00      	cmp	r3, #0
 8001628:	d008      	beq.n	800163c <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	015a      	lsls	r2, r3, #5
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	4413      	add	r3, r2
 8001632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001636:	461a      	mov	r2, r3
 8001638:	2310      	movs	r3, #16
 800163a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	f003 0320 	and.w	r3, r3, #32
 8001642:	2b00      	cmp	r3, #0
 8001644:	d015      	beq.n	8001672 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d108      	bne.n	8001660 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6818      	ldr	r0, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001658:	461a      	mov	r2, r3
 800165a:	2101      	movs	r1, #1
 800165c:	f004 f960 	bl	8005920 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001662:	015a      	lsls	r2, r3, #5
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	4413      	add	r3, r2
 8001668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800166c:	461a      	mov	r2, r3
 800166e:	2320      	movs	r3, #32
 8001670:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d009      	beq.n	8001690 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167e:	015a      	lsls	r2, r3, #5
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	4413      	add	r3, r2
 8001684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001688:	461a      	mov	r2, r3
 800168a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800168e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001692:	3301      	adds	r3, #1
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001698:	085b      	lsrs	r3, r3, #1
 800169a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800169c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d18c      	bne.n	80015bc <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f004 f863 	bl	8005772 <USB_ReadInterrupts>
 80016ac:	4603      	mov	r3, r0
 80016ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80016b6:	f040 80c4 	bne.w	8001842 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f004 f884 	bl	80057cc <USB_ReadDevAllInEpInterrupt>
 80016c4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80016c6:	2300      	movs	r3, #0
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80016ca:	e0b6      	b.n	800183a <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80016cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f000 80ab 	beq.w	800182e <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	4611      	mov	r1, r2
 80016e2:	4618      	mov	r0, r3
 80016e4:	f004 f8aa 	bl	800583c <USB_ReadDevInEPInterrupt>
 80016e8:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d05b      	beq.n	80017ac <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80016f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f6:	f003 030f 	and.w	r3, r3, #15
 80016fa:	2201      	movs	r2, #1
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001708:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	43db      	mvns	r3, r3
 800170e:	69f9      	ldr	r1, [r7, #28]
 8001710:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001714:	4013      	ands	r3, r2
 8001716:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171a:	015a      	lsls	r2, r3, #5
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	4413      	add	r3, r2
 8001720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001724:	461a      	mov	r2, r3
 8001726:	2301      	movs	r3, #1
 8001728:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d11b      	bne.n	800176a <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001732:	6879      	ldr	r1, [r7, #4]
 8001734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001736:	4613      	mov	r3, r2
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	1a9b      	subs	r3, r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	440b      	add	r3, r1
 8001740:	3348      	adds	r3, #72	; 0x48
 8001742:	6819      	ldr	r1, [r3, #0]
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001748:	4613      	mov	r3, r2
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	1a9b      	subs	r3, r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4403      	add	r3, r0
 8001752:	3344      	adds	r3, #68	; 0x44
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4419      	add	r1, r3
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800175c:	4613      	mov	r3, r2
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	1a9b      	subs	r3, r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4403      	add	r3, r0
 8001766:	3348      	adds	r3, #72	; 0x48
 8001768:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	b2db      	uxtb	r3, r3
 800176e:	4619      	mov	r1, r3
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f006 fcac 	bl	80080ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d116      	bne.n	80017ac <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001780:	2b00      	cmp	r3, #0
 8001782:	d113      	bne.n	80017ac <HAL_PCD_IRQHandler+0x272>
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001788:	4613      	mov	r3, r2
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	1a9b      	subs	r3, r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	440b      	add	r3, r1
 8001792:	3350      	adds	r3, #80	; 0x50
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d108      	bne.n	80017ac <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6818      	ldr	r0, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80017a4:	461a      	mov	r2, r3
 80017a6:	2101      	movs	r1, #1
 80017a8:	f004 f8ba 	bl	8005920 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d008      	beq.n	80017c8 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b8:	015a      	lsls	r2, r3, #5
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	4413      	add	r3, r2
 80017be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017c2:	461a      	mov	r2, r3
 80017c4:	2308      	movs	r3, #8
 80017c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	f003 0310 	and.w	r3, r3, #16
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d008      	beq.n	80017e4 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80017d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d4:	015a      	lsls	r2, r3, #5
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	4413      	add	r3, r2
 80017da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017de:	461a      	mov	r2, r3
 80017e0:	2310      	movs	r3, #16
 80017e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d008      	beq.n	8001800 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	015a      	lsls	r2, r3, #5
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	4413      	add	r3, r2
 80017f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017fa:	461a      	mov	r2, r3
 80017fc:	2340      	movs	r3, #64	; 0x40
 80017fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d008      	beq.n	800181c <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	015a      	lsls	r2, r3, #5
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	4413      	add	r3, r2
 8001812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001816:	461a      	mov	r2, r3
 8001818:	2302      	movs	r3, #2
 800181a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001822:	2b00      	cmp	r3, #0
 8001824:	d003      	beq.n	800182e <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001826:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f000 fc94 	bl	8002156 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800182e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001830:	3301      	adds	r3, #1
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001836:	085b      	lsrs	r3, r3, #1
 8001838:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800183a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800183c:	2b00      	cmp	r3, #0
 800183e:	f47f af45 	bne.w	80016cc <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f003 ff93 	bl	8005772 <USB_ReadInterrupts>
 800184c:	4603      	mov	r3, r0
 800184e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001852:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001856:	d122      	bne.n	800189e <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	69fa      	ldr	r2, [r7, #28]
 8001862:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001866:	f023 0301 	bic.w	r3, r3, #1
 800186a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001872:	2b01      	cmp	r3, #1
 8001874:	d108      	bne.n	8001888 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800187e:	2100      	movs	r1, #0
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f006 fe77 	bl	8008574 <HAL_PCDEx_LPM_Callback>
 8001886:	e002      	b.n	800188e <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f006 fc97 	bl	80081bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	695a      	ldr	r2, [r3, #20]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800189c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f003 ff65 	bl	8005772 <USB_ReadInterrupts>
 80018a8:	4603      	mov	r3, r0
 80018aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018b2:	d112      	bne.n	80018da <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d102      	bne.n	80018ca <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f006 fc53 	bl	8008170 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	695a      	ldr	r2, [r3, #20]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80018d8:	615a      	str	r2, [r3, #20]
    }
    #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f003 ff47 	bl	8005772 <USB_ReadInterrupts>
 80018e4:	4603      	mov	r3, r0
 80018e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80018ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80018ee:	d121      	bne.n	8001934 <HAL_PCD_IRQHandler+0x3fa>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	695a      	ldr	r2, [r3, #20]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80018fe:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001906:	2b00      	cmp	r3, #0
 8001908:	d111      	bne.n	800192e <HAL_PCD_IRQHandler+0x3f4>
      {
        hpcd->LPM_State = LPM_L1;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2201      	movs	r2, #1
 800190e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001918:	089b      	lsrs	r3, r3, #2
 800191a:	f003 020f 	and.w	r2, r3, #15
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001924:	2101      	movs	r1, #1
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f006 fe24 	bl	8008574 <HAL_PCDEx_LPM_Callback>
 800192c:	e002      	b.n	8001934 <HAL_PCD_IRQHandler+0x3fa>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f006 fc1e 	bl	8008170 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f003 ff1a 	bl	8005772 <USB_ReadInterrupts>
 800193e:	4603      	mov	r3, r0
 8001940:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001948:	f040 80a7 	bne.w	8001a9a <HAL_PCD_IRQHandler+0x560>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	69fa      	ldr	r2, [r7, #28]
 8001956:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800195a:	f023 0301 	bic.w	r3, r3, #1
 800195e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2110      	movs	r1, #16
 8001966:	4618      	mov	r0, r3
 8001968:	f003 f852 	bl	8004a10 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800196c:	2300      	movs	r3, #0
 800196e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001970:	e036      	b.n	80019e0 <HAL_PCD_IRQHandler+0x4a6>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001974:	015a      	lsls	r2, r3, #5
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	4413      	add	r3, r2
 800197a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800197e:	461a      	mov	r2, r3
 8001980:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001984:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001988:	015a      	lsls	r2, r3, #5
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	4413      	add	r3, r2
 800198e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001996:	0151      	lsls	r1, r2, #5
 8001998:	69fa      	ldr	r2, [r7, #28]
 800199a:	440a      	add	r2, r1
 800199c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80019a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80019a4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80019a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a8:	015a      	lsls	r2, r3, #5
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	4413      	add	r3, r2
 80019ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019b2:	461a      	mov	r2, r3
 80019b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80019b8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80019ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019bc:	015a      	lsls	r2, r3, #5
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	4413      	add	r3, r2
 80019c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019ca:	0151      	lsls	r1, r2, #5
 80019cc:	69fa      	ldr	r2, [r7, #28]
 80019ce:	440a      	add	r2, r1
 80019d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80019d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80019d8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019dc:	3301      	adds	r3, #1
 80019de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d3c3      	bcc.n	8001972 <HAL_PCD_IRQHandler+0x438>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	69fa      	ldr	r2, [r7, #28]
 80019f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019f8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80019fc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d016      	beq.n	8001a34 <HAL_PCD_IRQHandler+0x4fa>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a10:	69fa      	ldr	r2, [r7, #28]
 8001a12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a16:	f043 030b 	orr.w	r3, r3, #11
 8001a1a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	69fa      	ldr	r2, [r7, #28]
 8001a28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a2c:	f043 030b 	orr.w	r3, r3, #11
 8001a30:	6453      	str	r3, [r2, #68]	; 0x44
 8001a32:	e015      	b.n	8001a60 <HAL_PCD_IRQHandler+0x526>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a3a:	695b      	ldr	r3, [r3, #20]
 8001a3c:	69fa      	ldr	r2, [r7, #28]
 8001a3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a42:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a46:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001a4a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	69fa      	ldr	r2, [r7, #28]
 8001a56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a5a:	f043 030b 	orr.w	r3, r3, #11
 8001a5e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	69fa      	ldr	r2, [r7, #28]
 8001a6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a6e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001a72:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6818      	ldr	r0, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a84:	461a      	mov	r2, r3
 8001a86:	f003 ff4b 	bl	8005920 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	695a      	ldr	r2, [r3, #20]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001a98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f003 fe67 	bl	8005772 <USB_ReadInterrupts>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001aaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001aae:	d124      	bne.n	8001afa <HAL_PCD_IRQHandler+0x5c0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f003 fefd 	bl	80058b4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f003 f807 	bl	8004ad2 <USB_GetDevSpeed>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681c      	ldr	r4, [r3, #0]
 8001ad0:	f000 fe94 	bl	80027fc <HAL_RCC_GetHCLKFreq>
 8001ad4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	461a      	mov	r2, r3
 8001ade:	4620      	mov	r0, r4
 8001ae0:	f002 fd3c 	bl	800455c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f006 fb1a 	bl	800811e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	695a      	ldr	r2, [r3, #20]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001af8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f003 fe37 	bl	8005772 <USB_ReadInterrupts>
 8001b04:	4603      	mov	r3, r0
 8001b06:	f003 0310 	and.w	r3, r3, #16
 8001b0a:	2b10      	cmp	r3, #16
 8001b0c:	d161      	bne.n	8001bd2 <HAL_PCD_IRQHandler+0x698>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	699a      	ldr	r2, [r3, #24]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f022 0210 	bic.w	r2, r2, #16
 8001b1c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001b1e:	6a3b      	ldr	r3, [r7, #32]
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	f003 020f 	and.w	r2, r3, #15
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	1a9b      	subs	r3, r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	4413      	add	r3, r2
 8001b3a:	3304      	adds	r3, #4
 8001b3c:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	0c5b      	lsrs	r3, r3, #17
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d124      	bne.n	8001b94 <HAL_PCD_IRQHandler+0x65a>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001b50:	4013      	ands	r3, r2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d035      	beq.n	8001bc2 <HAL_PCD_IRQHandler+0x688>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	091b      	lsrs	r3, r3, #4
 8001b5e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	461a      	mov	r2, r3
 8001b68:	6a38      	ldr	r0, [r7, #32]
 8001b6a:	f003 fcaf 	bl	80054cc <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	68da      	ldr	r2, [r3, #12]
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	091b      	lsrs	r3, r3, #4
 8001b76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b7a:	441a      	add	r2, r3
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	699a      	ldr	r2, [r3, #24]
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	091b      	lsrs	r3, r3, #4
 8001b88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b8c:	441a      	add	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	619a      	str	r2, [r3, #24]
 8001b92:	e016      	b.n	8001bc2 <HAL_PCD_IRQHandler+0x688>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	0c5b      	lsrs	r3, r3, #17
 8001b98:	f003 030f 	and.w	r3, r3, #15
 8001b9c:	2b06      	cmp	r3, #6
 8001b9e:	d110      	bne.n	8001bc2 <HAL_PCD_IRQHandler+0x688>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001ba6:	2208      	movs	r2, #8
 8001ba8:	4619      	mov	r1, r3
 8001baa:	6a38      	ldr	r0, [r7, #32]
 8001bac:	f003 fc8e 	bl	80054cc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	699a      	ldr	r2, [r3, #24]
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	091b      	lsrs	r3, r3, #4
 8001bb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bbc:	441a      	add	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	699a      	ldr	r2, [r3, #24]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f042 0210 	orr.w	r2, r2, #16
 8001bd0:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f003 fdcb 	bl	8005772 <USB_ReadInterrupts>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	f003 0308 	and.w	r3, r3, #8
 8001be2:	2b08      	cmp	r3, #8
 8001be4:	d10a      	bne.n	8001bfc <HAL_PCD_IRQHandler+0x6c2>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f006 fa8b 	bl	8008102 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	695a      	ldr	r2, [r3, #20]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f002 0208 	and.w	r2, r2, #8
 8001bfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f003 fdb6 	bl	8005772 <USB_ReadInterrupts>
 8001c06:	4603      	mov	r3, r0
 8001c08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c10:	d10f      	bne.n	8001c32 <HAL_PCD_IRQHandler+0x6f8>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f006 faed 	bl	80081fc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	695a      	ldr	r2, [r3, #20]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001c30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f003 fd9b 	bl	8005772 <USB_ReadInterrupts>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c46:	d10f      	bne.n	8001c68 <HAL_PCD_IRQHandler+0x72e>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	4619      	mov	r1, r3
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f006 fac0 	bl	80081d8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	695a      	ldr	r2, [r3, #20]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001c66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f003 fd80 	bl	8005772 <USB_ReadInterrupts>
 8001c72:	4603      	mov	r3, r0
 8001c74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c7c:	d10a      	bne.n	8001c94 <HAL_PCD_IRQHandler+0x75a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f006 face 	bl	8008220 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	695a      	ldr	r2, [r3, #20]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001c92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f003 fd6a 	bl	8005772 <USB_ReadInterrupts>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	2b04      	cmp	r3, #4
 8001ca6:	d115      	bne.n	8001cd4 <HAL_PCD_IRQHandler+0x79a>
    {
      temp = hpcd->Instance->GOTGINT;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	f003 0304 	and.w	r3, r3, #4
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d002      	beq.n	8001cc0 <HAL_PCD_IRQHandler+0x786>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f006 fabe 	bl	800823c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6859      	ldr	r1, [r3, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	605a      	str	r2, [r3, #4]
 8001cd0:	e000      	b.n	8001cd4 <HAL_PCD_IRQHandler+0x79a>
      return;
 8001cd2:	bf00      	nop
    }
  }
}
 8001cd4:	3734      	adds	r7, #52	; 0x34
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd90      	pop	{r4, r7, pc}

08001cda <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d101      	bne.n	8001cf4 <HAL_PCD_SetAddress+0x1a>
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	e013      	b.n	8001d1c <HAL_PCD_SetAddress+0x42>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	78fa      	ldrb	r2, [r7, #3]
 8001d00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	78fa      	ldrb	r2, [r7, #3]
 8001d0a:	4611      	mov	r1, r2
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f003 fcda 	bl	80056c6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	4608      	mov	r0, r1
 8001d2e:	4611      	mov	r1, r2
 8001d30:	461a      	mov	r2, r3
 8001d32:	4603      	mov	r3, r0
 8001d34:	70fb      	strb	r3, [r7, #3]
 8001d36:	460b      	mov	r3, r1
 8001d38:	803b      	strh	r3, [r7, #0]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	da0f      	bge.n	8001d6a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d4a:	78fb      	ldrb	r3, [r7, #3]
 8001d4c:	f003 020f 	and.w	r2, r3, #15
 8001d50:	4613      	mov	r3, r2
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	1a9b      	subs	r3, r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	3338      	adds	r3, #56	; 0x38
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	3304      	adds	r3, #4
 8001d60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2201      	movs	r2, #1
 8001d66:	705a      	strb	r2, [r3, #1]
 8001d68:	e00f      	b.n	8001d8a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d6a:	78fb      	ldrb	r3, [r7, #3]
 8001d6c:	f003 020f 	and.w	r2, r3, #15
 8001d70:	4613      	mov	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	1a9b      	subs	r3, r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	4413      	add	r3, r2
 8001d80:	3304      	adds	r3, #4
 8001d82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d8a:	78fb      	ldrb	r3, [r7, #3]
 8001d8c:	f003 030f 	and.w	r3, r3, #15
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d96:	883a      	ldrh	r2, [r7, #0]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	78ba      	ldrb	r2, [r7, #2]
 8001da0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	785b      	ldrb	r3, [r3, #1]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d004      	beq.n	8001db4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001db4:	78bb      	ldrb	r3, [r7, #2]
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d102      	bne.n	8001dc0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d101      	bne.n	8001dce <HAL_PCD_EP_Open+0xaa>
 8001dca:	2302      	movs	r3, #2
 8001dcc:	e00e      	b.n	8001dec <HAL_PCD_EP_Open+0xc8>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68f9      	ldr	r1, [r7, #12]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f002 fe9d 	bl	8004b1c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001dea:	7afb      	ldrb	r3, [r7, #11]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	da0f      	bge.n	8001e28 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e08:	78fb      	ldrb	r3, [r7, #3]
 8001e0a:	f003 020f 	and.w	r2, r3, #15
 8001e0e:	4613      	mov	r3, r2
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	1a9b      	subs	r3, r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	3338      	adds	r3, #56	; 0x38
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2201      	movs	r2, #1
 8001e24:	705a      	strb	r2, [r3, #1]
 8001e26:	e00f      	b.n	8001e48 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e28:	78fb      	ldrb	r3, [r7, #3]
 8001e2a:	f003 020f 	and.w	r2, r3, #15
 8001e2e:	4613      	mov	r3, r2
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	1a9b      	subs	r3, r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	3304      	adds	r3, #4
 8001e40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2200      	movs	r2, #0
 8001e46:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e48:	78fb      	ldrb	r3, [r7, #3]
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d101      	bne.n	8001e62 <HAL_PCD_EP_Close+0x6e>
 8001e5e:	2302      	movs	r3, #2
 8001e60:	e00e      	b.n	8001e80 <HAL_PCD_EP_Close+0x8c>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68f9      	ldr	r1, [r7, #12]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f002 fedb 	bl	8004c2c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	607a      	str	r2, [r7, #4]
 8001e92:	603b      	str	r3, [r7, #0]
 8001e94:	460b      	mov	r3, r1
 8001e96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e98:	7afb      	ldrb	r3, [r7, #11]
 8001e9a:	f003 020f 	and.w	r2, r3, #15
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	1a9b      	subs	r3, r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	4413      	add	r3, r2
 8001eae:	3304      	adds	r3, #4
 8001eb0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001eca:	7afb      	ldrb	r3, [r7, #11]
 8001ecc:	f003 030f 	and.w	r3, r3, #15
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d102      	bne.n	8001ee4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ee4:	7afb      	ldrb	r3, [r7, #11]
 8001ee6:	f003 030f 	and.w	r3, r3, #15
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d109      	bne.n	8001f02 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6818      	ldr	r0, [r3, #0]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	461a      	mov	r2, r3
 8001efa:	6979      	ldr	r1, [r7, #20]
 8001efc:	f003 f95e 	bl	80051bc <USB_EP0StartXfer>
 8001f00:	e008      	b.n	8001f14 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6818      	ldr	r0, [r3, #0]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	6979      	ldr	r1, [r7, #20]
 8001f10:	f002 ff10 	bl	8004d34 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
 8001f26:	460b      	mov	r3, r1
 8001f28:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f2a:	78fb      	ldrb	r3, [r7, #3]
 8001f2c:	f003 020f 	and.w	r2, r3, #15
 8001f30:	6879      	ldr	r1, [r7, #4]
 8001f32:	4613      	mov	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	1a9b      	subs	r3, r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	440b      	add	r3, r1
 8001f3c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001f40:	681b      	ldr	r3, [r3, #0]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b086      	sub	sp, #24
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	60f8      	str	r0, [r7, #12]
 8001f56:	607a      	str	r2, [r7, #4]
 8001f58:	603b      	str	r3, [r7, #0]
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f5e:	7afb      	ldrb	r3, [r7, #11]
 8001f60:	f003 020f 	and.w	r2, r3, #15
 8001f64:	4613      	mov	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	1a9b      	subs	r3, r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	3338      	adds	r3, #56	; 0x38
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	4413      	add	r3, r2
 8001f72:	3304      	adds	r3, #4
 8001f74:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	2200      	movs	r2, #0
 8001f86:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f8e:	7afb      	ldrb	r3, [r7, #11]
 8001f90:	f003 030f 	and.w	r3, r3, #15
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d102      	bne.n	8001fa8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fa8:	7afb      	ldrb	r3, [r7, #11]
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d109      	bne.n	8001fc6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6818      	ldr	r0, [r3, #0]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	6979      	ldr	r1, [r7, #20]
 8001fc0:	f003 f8fc 	bl	80051bc <USB_EP0StartXfer>
 8001fc4:	e008      	b.n	8001fd8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6818      	ldr	r0, [r3, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	6979      	ldr	r1, [r7, #20]
 8001fd4:	f002 feae 	bl	8004d34 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3718      	adds	r7, #24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b084      	sub	sp, #16
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
 8001fea:	460b      	mov	r3, r1
 8001fec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001fee:	78fb      	ldrb	r3, [r7, #3]
 8001ff0:	f003 020f 	and.w	r2, r3, #15
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d901      	bls.n	8002000 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e050      	b.n	80020a2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002000:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002004:	2b00      	cmp	r3, #0
 8002006:	da0f      	bge.n	8002028 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002008:	78fb      	ldrb	r3, [r7, #3]
 800200a:	f003 020f 	and.w	r2, r3, #15
 800200e:	4613      	mov	r3, r2
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	1a9b      	subs	r3, r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	3338      	adds	r3, #56	; 0x38
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	4413      	add	r3, r2
 800201c:	3304      	adds	r3, #4
 800201e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2201      	movs	r2, #1
 8002024:	705a      	strb	r2, [r3, #1]
 8002026:	e00d      	b.n	8002044 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002028:	78fa      	ldrb	r2, [r7, #3]
 800202a:	4613      	mov	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	1a9b      	subs	r3, r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	4413      	add	r3, r2
 800203a:	3304      	adds	r3, #4
 800203c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2201      	movs	r2, #1
 8002048:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800204a:	78fb      	ldrb	r3, [r7, #3]
 800204c:	f003 030f 	and.w	r3, r3, #15
 8002050:	b2da      	uxtb	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800205c:	2b01      	cmp	r3, #1
 800205e:	d101      	bne.n	8002064 <HAL_PCD_EP_SetStall+0x82>
 8002060:	2302      	movs	r3, #2
 8002062:	e01e      	b.n	80020a2 <HAL_PCD_EP_SetStall+0xc0>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68f9      	ldr	r1, [r7, #12]
 8002072:	4618      	mov	r0, r3
 8002074:	f003 fa53 	bl	800551e <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002078:	78fb      	ldrb	r3, [r7, #3]
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10a      	bne.n	8002098 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6818      	ldr	r0, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	b2d9      	uxtb	r1, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002092:	461a      	mov	r2, r3
 8002094:	f003 fc44 	bl	8005920 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b084      	sub	sp, #16
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	460b      	mov	r3, r1
 80020b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020b6:	78fb      	ldrb	r3, [r7, #3]
 80020b8:	f003 020f 	and.w	r2, r3, #15
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d901      	bls.n	80020c8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e042      	b.n	800214e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	da0f      	bge.n	80020f0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020d0:	78fb      	ldrb	r3, [r7, #3]
 80020d2:	f003 020f 	and.w	r2, r3, #15
 80020d6:	4613      	mov	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	1a9b      	subs	r3, r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	3338      	adds	r3, #56	; 0x38
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	4413      	add	r3, r2
 80020e4:	3304      	adds	r3, #4
 80020e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2201      	movs	r2, #1
 80020ec:	705a      	strb	r2, [r3, #1]
 80020ee:	e00f      	b.n	8002110 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020f0:	78fb      	ldrb	r3, [r7, #3]
 80020f2:	f003 020f 	and.w	r2, r3, #15
 80020f6:	4613      	mov	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	1a9b      	subs	r3, r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	4413      	add	r3, r2
 8002106:	3304      	adds	r3, #4
 8002108:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002116:	78fb      	ldrb	r3, [r7, #3]
 8002118:	f003 030f 	and.w	r3, r3, #15
 800211c:	b2da      	uxtb	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002128:	2b01      	cmp	r3, #1
 800212a:	d101      	bne.n	8002130 <HAL_PCD_EP_ClrStall+0x86>
 800212c:	2302      	movs	r3, #2
 800212e:	e00e      	b.n	800214e <HAL_PCD_EP_ClrStall+0xa4>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68f9      	ldr	r1, [r7, #12]
 800213e:	4618      	mov	r0, r3
 8002140:	f003 fa5b 	bl	80055fa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b08a      	sub	sp, #40	; 0x28
 800215a:	af02      	add	r7, sp, #8
 800215c:	6078      	str	r0, [r7, #4]
 800215e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	4613      	mov	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	1a9b      	subs	r3, r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	3338      	adds	r3, #56	; 0x38
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	4413      	add	r3, r2
 800217a:	3304      	adds	r3, #4
 800217c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	699a      	ldr	r2, [r3, #24]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	429a      	cmp	r2, r3
 8002188:	d901      	bls.n	800218e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e06c      	b.n	8002268 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	695a      	ldr	r2, [r3, #20]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	69fa      	ldr	r2, [r7, #28]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d902      	bls.n	80021aa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	3303      	adds	r3, #3
 80021ae:	089b      	lsrs	r3, r3, #2
 80021b0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021b2:	e02b      	b.n	800220c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	695a      	ldr	r2, [r3, #20]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	69fa      	ldr	r2, [r7, #28]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d902      	bls.n	80021d0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	3303      	adds	r3, #3
 80021d4:	089b      	lsrs	r3, r3, #2
 80021d6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	68d9      	ldr	r1, [r3, #12]
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	4603      	mov	r3, r0
 80021ee:	6978      	ldr	r0, [r7, #20]
 80021f0:	f003 f937 	bl	8005462 <USB_WritePacket>

    ep->xfer_buff  += len;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	68da      	ldr	r2, [r3, #12]
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	441a      	add	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	699a      	ldr	r2, [r3, #24]
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	441a      	add	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	015a      	lsls	r2, r3, #5
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	4413      	add	r3, r2
 8002214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	b29b      	uxth	r3, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	429a      	cmp	r2, r3
 8002220:	d809      	bhi.n	8002236 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	699a      	ldr	r2, [r3, #24]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800222a:	429a      	cmp	r2, r3
 800222c:	d203      	bcs.n	8002236 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1be      	bne.n	80021b4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	695a      	ldr	r2, [r3, #20]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	429a      	cmp	r2, r3
 8002240:	d811      	bhi.n	8002266 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	f003 030f 	and.w	r3, r3, #15
 8002248:	2201      	movs	r2, #1
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002256:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	43db      	mvns	r3, r3
 800225c:	6939      	ldr	r1, [r7, #16]
 800225e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002262:	4013      	ands	r3, r2
 8002264:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3720      	adds	r7, #32
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	333c      	adds	r3, #60	; 0x3c
 8002288:	3304      	adds	r3, #4
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	015a      	lsls	r2, r3, #5
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	4413      	add	r3, r2
 8002296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	f040 80b3 	bne.w	800240e <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	f003 0308 	and.w	r3, r3, #8
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d028      	beq.n	8002304 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	4a70      	ldr	r2, [pc, #448]	; (8002478 <PCD_EP_OutXfrComplete_int+0x208>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d90e      	bls.n	80022d8 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d009      	beq.n	80022d8 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	015a      	lsls	r2, r3, #5
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	4413      	add	r3, r2
 80022cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022d0:	461a      	mov	r2, r3
 80022d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022d6:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f005 fecb 	bl	8008074 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6818      	ldr	r0, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80022e8:	461a      	mov	r2, r3
 80022ea:	2101      	movs	r1, #1
 80022ec:	f003 fb18 	bl	8005920 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	015a      	lsls	r2, r3, #5
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	4413      	add	r3, r2
 80022f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022fc:	461a      	mov	r2, r3
 80022fe:	2308      	movs	r3, #8
 8002300:	6093      	str	r3, [r2, #8]
 8002302:	e0b3      	b.n	800246c <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	f003 0320 	and.w	r3, r3, #32
 800230a:	2b00      	cmp	r3, #0
 800230c:	d009      	beq.n	8002322 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	015a      	lsls	r2, r3, #5
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	4413      	add	r3, r2
 8002316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800231a:	461a      	mov	r2, r3
 800231c:	2320      	movs	r3, #32
 800231e:	6093      	str	r3, [r2, #8]
 8002320:	e0a4      	b.n	800246c <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002328:	2b00      	cmp	r3, #0
 800232a:	f040 809f 	bne.w	800246c <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	4a51      	ldr	r2, [pc, #324]	; (8002478 <PCD_EP_OutXfrComplete_int+0x208>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d90f      	bls.n	8002356 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00a      	beq.n	8002356 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	015a      	lsls	r2, r3, #5
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	4413      	add	r3, r2
 8002348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800234c:	461a      	mov	r2, r3
 800234e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002352:	6093      	str	r3, [r2, #8]
 8002354:	e08a      	b.n	800246c <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	4613      	mov	r3, r2
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	1a9b      	subs	r3, r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	440b      	add	r3, r1
 8002364:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002368:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	0159      	lsls	r1, r3, #5
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	440b      	add	r3, r1
 8002372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800237c:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	4613      	mov	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	1a9b      	subs	r3, r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	4403      	add	r3, r0
 800238c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002390:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	4613      	mov	r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	1a9b      	subs	r3, r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	440b      	add	r3, r1
 80023a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023a4:	6819      	ldr	r1, [r3, #0]
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	4613      	mov	r3, r2
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	1a9b      	subs	r3, r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4403      	add	r3, r0
 80023b4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4419      	add	r1, r3
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	4613      	mov	r3, r2
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	1a9b      	subs	r3, r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4403      	add	r3, r0
 80023ca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023ce:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	4619      	mov	r1, r3
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f005 fe5e 	bl	8008098 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d144      	bne.n	800246c <PCD_EP_OutXfrComplete_int+0x1fc>
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	4613      	mov	r3, r2
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	1a9b      	subs	r3, r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	440b      	add	r3, r1
 80023f0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d138      	bne.n	800246c <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6818      	ldr	r0, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002404:	461a      	mov	r2, r3
 8002406:	2101      	movs	r1, #1
 8002408:	f003 fa8a 	bl	8005920 <USB_EP0_OutStart>
 800240c:	e02e      	b.n	800246c <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	4a1a      	ldr	r2, [pc, #104]	; (800247c <PCD_EP_OutXfrComplete_int+0x20c>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d124      	bne.n	8002460 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00a      	beq.n	8002436 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	015a      	lsls	r2, r3, #5
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	4413      	add	r3, r2
 8002428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800242c:	461a      	mov	r2, r3
 800242e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002432:	6093      	str	r3, [r2, #8]
 8002434:	e01a      	b.n	800246c <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	f003 0320 	and.w	r3, r3, #32
 800243c:	2b00      	cmp	r3, #0
 800243e:	d008      	beq.n	8002452 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	015a      	lsls	r2, r3, #5
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	4413      	add	r3, r2
 8002448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800244c:	461a      	mov	r2, r3
 800244e:	2320      	movs	r3, #32
 8002450:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	b2db      	uxtb	r3, r3
 8002456:	4619      	mov	r1, r3
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f005 fe1d 	bl	8008098 <HAL_PCD_DataOutStageCallback>
 800245e:	e005      	b.n	800246c <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	b2db      	uxtb	r3, r3
 8002464:	4619      	mov	r1, r3
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f005 fe16 	bl	8008098 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3718      	adds	r7, #24
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	4f54300a 	.word	0x4f54300a
 800247c:	4f54310a 	.word	0x4f54310a

08002480 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	333c      	adds	r3, #60	; 0x3c
 8002498:	3304      	adds	r3, #4
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	015a      	lsls	r2, r3, #5
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4413      	add	r3, r2
 80024a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d113      	bne.n	80024de <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	4a1f      	ldr	r2, [pc, #124]	; (8002538 <PCD_EP_OutSetupPacket_int+0xb8>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d922      	bls.n	8002504 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d01d      	beq.n	8002504 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	015a      	lsls	r2, r3, #5
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	4413      	add	r3, r2
 80024d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024d4:	461a      	mov	r2, r3
 80024d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024da:	6093      	str	r3, [r2, #8]
 80024dc:	e012      	b.n	8002504 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	4a16      	ldr	r2, [pc, #88]	; (800253c <PCD_EP_OutSetupPacket_int+0xbc>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d10e      	bne.n	8002504 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d009      	beq.n	8002504 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	015a      	lsls	r2, r3, #5
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024fc:	461a      	mov	r2, r3
 80024fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002502:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f005 fdb5 	bl	8008074 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	4a0a      	ldr	r2, [pc, #40]	; (8002538 <PCD_EP_OutSetupPacket_int+0xb8>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d90c      	bls.n	800252c <PCD_EP_OutSetupPacket_int+0xac>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d108      	bne.n	800252c <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6818      	ldr	r0, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002524:	461a      	mov	r2, r3
 8002526:	2101      	movs	r1, #1
 8002528:	f003 f9fa 	bl	8005920 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3718      	adds	r7, #24
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	4f54300a 	.word	0x4f54300a
 800253c:	4f54310a 	.word	0x4f54310a

08002540 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	70fb      	strb	r3, [r7, #3]
 800254c:	4613      	mov	r3, r2
 800254e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002558:	78fb      	ldrb	r3, [r7, #3]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d107      	bne.n	800256e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800255e:	883b      	ldrh	r3, [r7, #0]
 8002560:	0419      	lsls	r1, r3, #16
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	430a      	orrs	r2, r1
 800256a:	629a      	str	r2, [r3, #40]	; 0x28
 800256c:	e028      	b.n	80025c0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002574:	0c1b      	lsrs	r3, r3, #16
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	4413      	add	r3, r2
 800257a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800257c:	2300      	movs	r3, #0
 800257e:	73fb      	strb	r3, [r7, #15]
 8002580:	e00d      	b.n	800259e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	7bfb      	ldrb	r3, [r7, #15]
 8002588:	3340      	adds	r3, #64	; 0x40
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4413      	add	r3, r2
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	0c1b      	lsrs	r3, r3, #16
 8002592:	68ba      	ldr	r2, [r7, #8]
 8002594:	4413      	add	r3, r2
 8002596:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002598:	7bfb      	ldrb	r3, [r7, #15]
 800259a:	3301      	adds	r3, #1
 800259c:	73fb      	strb	r3, [r7, #15]
 800259e:	7bfa      	ldrb	r2, [r7, #15]
 80025a0:	78fb      	ldrb	r3, [r7, #3]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d3ec      	bcc.n	8002582 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80025a8:	883b      	ldrh	r3, [r7, #0]
 80025aa:	0418      	lsls	r0, r3, #16
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6819      	ldr	r1, [r3, #0]
 80025b0:	78fb      	ldrb	r3, [r7, #3]
 80025b2:	3b01      	subs	r3, #1
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	4302      	orrs	r2, r0
 80025b8:	3340      	adds	r3, #64	; 0x40
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr

080025ce <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
 80025d6:	460b      	mov	r3, r1
 80025d8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	887a      	ldrh	r2, [r7, #2]
 80025e0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2201      	movs	r2, #1
 8002602:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002622:	f043 0303 	orr.w	r3, r3, #3
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d101      	bne.n	800264c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e0ca      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800264c:	4b67      	ldr	r3, [pc, #412]	; (80027ec <HAL_RCC_ClockConfig+0x1b4>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 030f 	and.w	r3, r3, #15
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	429a      	cmp	r2, r3
 8002658:	d90c      	bls.n	8002674 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800265a:	4b64      	ldr	r3, [pc, #400]	; (80027ec <HAL_RCC_ClockConfig+0x1b4>)
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002662:	4b62      	ldr	r3, [pc, #392]	; (80027ec <HAL_RCC_ClockConfig+0x1b4>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	429a      	cmp	r2, r3
 800266e:	d001      	beq.n	8002674 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e0b6      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d020      	beq.n	80026c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	d005      	beq.n	8002698 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800268c:	4b58      	ldr	r3, [pc, #352]	; (80027f0 <HAL_RCC_ClockConfig+0x1b8>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	4a57      	ldr	r2, [pc, #348]	; (80027f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002692:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002696:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0308 	and.w	r3, r3, #8
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d005      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026a4:	4b52      	ldr	r3, [pc, #328]	; (80027f0 <HAL_RCC_ClockConfig+0x1b8>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	4a51      	ldr	r2, [pc, #324]	; (80027f0 <HAL_RCC_ClockConfig+0x1b8>)
 80026aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026b0:	4b4f      	ldr	r3, [pc, #316]	; (80027f0 <HAL_RCC_ClockConfig+0x1b8>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	494c      	ldr	r1, [pc, #304]	; (80027f0 <HAL_RCC_ClockConfig+0x1b8>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d044      	beq.n	8002758 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d107      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d6:	4b46      	ldr	r3, [pc, #280]	; (80027f0 <HAL_RCC_ClockConfig+0x1b8>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d119      	bne.n	8002716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e07d      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d003      	beq.n	80026f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026f2:	2b03      	cmp	r3, #3
 80026f4:	d107      	bne.n	8002706 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f6:	4b3e      	ldr	r3, [pc, #248]	; (80027f0 <HAL_RCC_ClockConfig+0x1b8>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d109      	bne.n	8002716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e06d      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002706:	4b3a      	ldr	r3, [pc, #232]	; (80027f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e065      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002716:	4b36      	ldr	r3, [pc, #216]	; (80027f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f023 0203 	bic.w	r2, r3, #3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	4933      	ldr	r1, [pc, #204]	; (80027f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002724:	4313      	orrs	r3, r2
 8002726:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002728:	f7fd ff5a 	bl	80005e0 <HAL_GetTick>
 800272c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272e:	e00a      	b.n	8002746 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002730:	f7fd ff56 	bl	80005e0 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	f241 3288 	movw	r2, #5000	; 0x1388
 800273e:	4293      	cmp	r3, r2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e04d      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002746:	4b2a      	ldr	r3, [pc, #168]	; (80027f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 020c 	and.w	r2, r3, #12
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	429a      	cmp	r2, r3
 8002756:	d1eb      	bne.n	8002730 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002758:	4b24      	ldr	r3, [pc, #144]	; (80027ec <HAL_RCC_ClockConfig+0x1b4>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 030f 	and.w	r3, r3, #15
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	429a      	cmp	r2, r3
 8002764:	d20c      	bcs.n	8002780 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002766:	4b21      	ldr	r3, [pc, #132]	; (80027ec <HAL_RCC_ClockConfig+0x1b4>)
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800276e:	4b1f      	ldr	r3, [pc, #124]	; (80027ec <HAL_RCC_ClockConfig+0x1b4>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	d001      	beq.n	8002780 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e030      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b00      	cmp	r3, #0
 800278a:	d008      	beq.n	800279e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800278c:	4b18      	ldr	r3, [pc, #96]	; (80027f0 <HAL_RCC_ClockConfig+0x1b8>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	4915      	ldr	r1, [pc, #84]	; (80027f0 <HAL_RCC_ClockConfig+0x1b8>)
 800279a:	4313      	orrs	r3, r2
 800279c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d009      	beq.n	80027be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027aa:	4b11      	ldr	r3, [pc, #68]	; (80027f0 <HAL_RCC_ClockConfig+0x1b8>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	490d      	ldr	r1, [pc, #52]	; (80027f0 <HAL_RCC_ClockConfig+0x1b8>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027be:	f000 fb7b 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 80027c2:	4601      	mov	r1, r0
 80027c4:	4b0a      	ldr	r3, [pc, #40]	; (80027f0 <HAL_RCC_ClockConfig+0x1b8>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	091b      	lsrs	r3, r3, #4
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	4a09      	ldr	r2, [pc, #36]	; (80027f4 <HAL_RCC_ClockConfig+0x1bc>)
 80027d0:	5cd3      	ldrb	r3, [r2, r3]
 80027d2:	fa21 f303 	lsr.w	r3, r1, r3
 80027d6:	4a08      	ldr	r2, [pc, #32]	; (80027f8 <HAL_RCC_ClockConfig+0x1c0>)
 80027d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80027da:	2000      	movs	r0, #0
 80027dc:	f7fd febc 	bl	8000558 <HAL_InitTick>

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40023c00 	.word	0x40023c00
 80027f0:	40023800 	.word	0x40023800
 80027f4:	08008b94 	.word	0x08008b94
 80027f8:	20000118 	.word	0x20000118

080027fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002800:	4b03      	ldr	r3, [pc, #12]	; (8002810 <HAL_RCC_GetHCLKFreq+0x14>)
 8002802:	681b      	ldr	r3, [r3, #0]
}
 8002804:	4618      	mov	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	20000118 	.word	0x20000118

08002814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002818:	f7ff fff0 	bl	80027fc <HAL_RCC_GetHCLKFreq>
 800281c:	4601      	mov	r1, r0
 800281e:	4b05      	ldr	r3, [pc, #20]	; (8002834 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	0a9b      	lsrs	r3, r3, #10
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	4a03      	ldr	r2, [pc, #12]	; (8002838 <HAL_RCC_GetPCLK1Freq+0x24>)
 800282a:	5cd3      	ldrb	r3, [r2, r3]
 800282c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002830:	4618      	mov	r0, r3
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40023800 	.word	0x40023800
 8002838:	08008ba4 	.word	0x08008ba4

0800283c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002840:	f7ff ffdc 	bl	80027fc <HAL_RCC_GetHCLKFreq>
 8002844:	4601      	mov	r1, r0
 8002846:	4b05      	ldr	r3, [pc, #20]	; (800285c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	0b5b      	lsrs	r3, r3, #13
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	4a03      	ldr	r2, [pc, #12]	; (8002860 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002852:	5cd3      	ldrb	r3, [r2, r3]
 8002854:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002858:	4618      	mov	r0, r3
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40023800 	.word	0x40023800
 8002860:	08008ba4 	.word	0x08008ba4

08002864 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b08c      	sub	sp, #48	; 0x30
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002874:	2300      	movs	r3, #0
 8002876:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002878:	2300      	movs	r3, #0
 800287a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800287c:	2300      	movs	r3, #0
 800287e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002880:	2300      	movs	r3, #0
 8002882:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002884:	2300      	movs	r3, #0
 8002886:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800288c:	2300      	movs	r3, #0
 800288e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b00      	cmp	r3, #0
 800289a:	d010      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800289c:	4b6f      	ldr	r3, [pc, #444]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800289e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028a2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028aa:	496c      	ldr	r1, [pc, #432]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80028ba:	2301      	movs	r3, #1
 80028bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d010      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80028ca:	4b64      	ldr	r3, [pc, #400]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028d0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d8:	4960      	ldr	r1, [pc, #384]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80028e8:	2301      	movs	r3, #1
 80028ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d017      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028f8:	4b58      	ldr	r3, [pc, #352]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	4955      	ldr	r1, [pc, #340]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002908:	4313      	orrs	r3, r2
 800290a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002916:	d101      	bne.n	800291c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002918:	2301      	movs	r3, #1
 800291a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002924:	2301      	movs	r3, #1
 8002926:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0308 	and.w	r3, r3, #8
 8002930:	2b00      	cmp	r3, #0
 8002932:	d017      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002934:	4b49      	ldr	r3, [pc, #292]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002936:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800293a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002942:	4946      	ldr	r1, [pc, #280]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002944:	4313      	orrs	r3, r2
 8002946:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800294e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002952:	d101      	bne.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002954:	2301      	movs	r3, #1
 8002956:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002960:	2301      	movs	r3, #1
 8002962:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0320 	and.w	r3, r3, #32
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 808a 	beq.w	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	4b39      	ldr	r3, [pc, #228]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	4a38      	ldr	r2, [pc, #224]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800297c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002980:	6413      	str	r3, [r2, #64]	; 0x40
 8002982:	4b36      	ldr	r3, [pc, #216]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298a:	60bb      	str	r3, [r7, #8]
 800298c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800298e:	4b34      	ldr	r3, [pc, #208]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a33      	ldr	r2, [pc, #204]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002998:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800299a:	f7fd fe21 	bl	80005e0 <HAL_GetTick>
 800299e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80029a0:	e008      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80029a2:	f7fd fe1d 	bl	80005e0 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e278      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80029b4:	4b2a      	ldr	r3, [pc, #168]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d0f0      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029c0:	4b26      	ldr	r3, [pc, #152]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029c8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d02f      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029d8:	6a3a      	ldr	r2, [r7, #32]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d028      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029de:	4b1f      	ldr	r3, [pc, #124]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029e6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029e8:	4b1e      	ldr	r3, [pc, #120]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80029ea:	2201      	movs	r2, #1
 80029ec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029ee:	4b1d      	ldr	r3, [pc, #116]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80029f4:	4a19      	ldr	r2, [pc, #100]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80029fa:	4b18      	ldr	r3, [pc, #96]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d114      	bne.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002a06:	f7fd fdeb 	bl	80005e0 <HAL_GetTick>
 8002a0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a0c:	e00a      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a0e:	f7fd fde7 	bl	80005e0 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e240      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a24:	4b0d      	ldr	r3, [pc, #52]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0ee      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a3c:	d114      	bne.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002a3e:	4b07      	ldr	r3, [pc, #28]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002a4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a52:	4902      	ldr	r1, [pc, #8]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	608b      	str	r3, [r1, #8]
 8002a58:	e00c      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002a5a:	bf00      	nop
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	40007000 	.word	0x40007000
 8002a64:	42470e40 	.word	0x42470e40
 8002a68:	4b4a      	ldr	r3, [pc, #296]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	4a49      	ldr	r2, [pc, #292]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a6e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002a72:	6093      	str	r3, [r2, #8]
 8002a74:	4b47      	ldr	r3, [pc, #284]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a76:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a80:	4944      	ldr	r1, [pc, #272]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0310 	and.w	r3, r3, #16
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d004      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002a98:	4b3f      	ldr	r3, [pc, #252]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002a9a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00a      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002aa8:	4b3a      	ldr	r3, [pc, #232]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab6:	4937      	ldr	r1, [pc, #220]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00a      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002aca:	4b32      	ldr	r3, [pc, #200]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002acc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ad0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ad8:	492e      	ldr	r1, [pc, #184]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d011      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002aec:	4b29      	ldr	r3, [pc, #164]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002af2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afa:	4926      	ldr	r1, [pc, #152]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b0a:	d101      	bne.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00a      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002b1c:	4b1d      	ldr	r3, [pc, #116]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b22:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	491a      	ldr	r1, [pc, #104]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d011      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002b3e:	4b15      	ldr	r3, [pc, #84]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b44:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b4c:	4911      	ldr	r1, [pc, #68]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b5c:	d101      	bne.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d005      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b70:	f040 80ff 	bne.w	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b74:	4b09      	ldr	r3, [pc, #36]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b7a:	f7fd fd31 	bl	80005e0 <HAL_GetTick>
 8002b7e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b80:	e00e      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002b82:	f7fd fd2d 	bl	80005e0 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d907      	bls.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e188      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002b94:	40023800 	.word	0x40023800
 8002b98:	424711e0 	.word	0x424711e0
 8002b9c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ba0:	4b7e      	ldr	r3, [pc, #504]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1ea      	bne.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d009      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d028      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d124      	bne.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002bd4:	4b71      	ldr	r3, [pc, #452]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bda:	0c1b      	lsrs	r3, r3, #16
 8002bdc:	f003 0303 	and.w	r3, r3, #3
 8002be0:	3301      	adds	r3, #1
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002be6:	4b6d      	ldr	r3, [pc, #436]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002be8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bec:	0e1b      	lsrs	r3, r3, #24
 8002bee:	f003 030f 	and.w	r3, r3, #15
 8002bf2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685a      	ldr	r2, [r3, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	019b      	lsls	r3, r3, #6
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	085b      	lsrs	r3, r3, #1
 8002c04:	3b01      	subs	r3, #1
 8002c06:	041b      	lsls	r3, r3, #16
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	061b      	lsls	r3, r3, #24
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	071b      	lsls	r3, r3, #28
 8002c16:	4961      	ldr	r1, [pc, #388]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0304 	and.w	r3, r3, #4
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d004      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c32:	d00a      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d035      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c48:	d130      	bne.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002c4a:	4b54      	ldr	r3, [pc, #336]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c50:	0c1b      	lsrs	r3, r3, #16
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	3301      	adds	r3, #1
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c5c:	4b4f      	ldr	r3, [pc, #316]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c62:	0f1b      	lsrs	r3, r3, #28
 8002c64:	f003 0307 	and.w	r3, r3, #7
 8002c68:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685a      	ldr	r2, [r3, #4]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	019b      	lsls	r3, r3, #6
 8002c74:	431a      	orrs	r2, r3
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	085b      	lsrs	r3, r3, #1
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	041b      	lsls	r3, r3, #16
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	061b      	lsls	r3, r3, #24
 8002c86:	431a      	orrs	r2, r3
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	071b      	lsls	r3, r3, #28
 8002c8c:	4943      	ldr	r1, [pc, #268]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002c94:	4b41      	ldr	r3, [pc, #260]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c9a:	f023 021f 	bic.w	r2, r3, #31
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	493d      	ldr	r1, [pc, #244]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d029      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cc0:	d124      	bne.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002cc2:	4b36      	ldr	r3, [pc, #216]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002cc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cc8:	0c1b      	lsrs	r3, r3, #16
 8002cca:	f003 0303 	and.w	r3, r3, #3
 8002cce:	3301      	adds	r3, #1
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002cd4:	4b31      	ldr	r3, [pc, #196]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cda:	0f1b      	lsrs	r3, r3, #28
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	019b      	lsls	r3, r3, #6
 8002cec:	431a      	orrs	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	085b      	lsrs	r3, r3, #1
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	041b      	lsls	r3, r3, #16
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	061b      	lsls	r3, r3, #24
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	071b      	lsls	r3, r3, #28
 8002d04:	4925      	ldr	r1, [pc, #148]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d016      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	019b      	lsls	r3, r3, #6
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	085b      	lsrs	r3, r3, #1
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	041b      	lsls	r3, r3, #16
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	061b      	lsls	r3, r3, #24
 8002d36:	431a      	orrs	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	071b      	lsls	r3, r3, #28
 8002d3e:	4917      	ldr	r1, [pc, #92]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d46:	4b16      	ldr	r3, [pc, #88]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002d48:	2201      	movs	r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d4c:	f7fd fc48 	bl	80005e0 <HAL_GetTick>
 8002d50:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d52:	e008      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002d54:	f7fd fc44 	bl	80005e0 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e09f      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d66:	4b0d      	ldr	r3, [pc, #52]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d0f0      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	f040 8095 	bne.w	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002d7a:	4b0a      	ldr	r3, [pc, #40]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d80:	f7fd fc2e 	bl	80005e0 <HAL_GetTick>
 8002d84:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d86:	e00f      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002d88:	f7fd fc2a 	bl	80005e0 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d908      	bls.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e085      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002d9a:	bf00      	nop
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	42470068 	.word	0x42470068
 8002da4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002da8:	4b41      	ldr	r3, [pc, #260]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002db0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002db4:	d0e8      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0304 	and.w	r3, r3, #4
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d009      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d02b      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d127      	bne.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002dde:	4b34      	ldr	r3, [pc, #208]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de4:	0c1b      	lsrs	r3, r3, #16
 8002de6:	f003 0303 	and.w	r3, r3, #3
 8002dea:	3301      	adds	r3, #1
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	699a      	ldr	r2, [r3, #24]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	019b      	lsls	r3, r3, #6
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	085b      	lsrs	r3, r3, #1
 8002e00:	3b01      	subs	r3, #1
 8002e02:	041b      	lsls	r3, r3, #16
 8002e04:	431a      	orrs	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	061b      	lsls	r3, r3, #24
 8002e0c:	4928      	ldr	r1, [pc, #160]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002e14:	4b26      	ldr	r3, [pc, #152]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e1a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e22:	3b01      	subs	r3, #1
 8002e24:	021b      	lsls	r3, r3, #8
 8002e26:	4922      	ldr	r1, [pc, #136]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d01d      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e42:	d118      	bne.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e44:	4b1a      	ldr	r3, [pc, #104]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4a:	0e1b      	lsrs	r3, r3, #24
 8002e4c:	f003 030f 	and.w	r3, r3, #15
 8002e50:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	699a      	ldr	r2, [r3, #24]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	019b      	lsls	r3, r3, #6
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	085b      	lsrs	r3, r3, #1
 8002e64:	3b01      	subs	r3, #1
 8002e66:	041b      	lsls	r3, r3, #16
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	061b      	lsls	r3, r3, #24
 8002e6e:	4910      	ldr	r1, [pc, #64]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002e76:	4b0f      	ldr	r3, [pc, #60]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002e78:	2201      	movs	r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e7c:	f7fd fbb0 	bl	80005e0 <HAL_GetTick>
 8002e80:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e82:	e008      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002e84:	f7fd fbac 	bl	80005e0 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e007      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e96:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ea2:	d1ef      	bne.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3730      	adds	r7, #48	; 0x30
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	42470070 	.word	0x42470070

08002eb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eba:	b087      	sub	sp, #28
 8002ebc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ed2:	4bc6      	ldr	r3, [pc, #792]	; (80031ec <HAL_RCC_GetSysClockFreq+0x334>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 030c 	and.w	r3, r3, #12
 8002eda:	2b0c      	cmp	r3, #12
 8002edc:	f200 817e 	bhi.w	80031dc <HAL_RCC_GetSysClockFreq+0x324>
 8002ee0:	a201      	add	r2, pc, #4	; (adr r2, 8002ee8 <HAL_RCC_GetSysClockFreq+0x30>)
 8002ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee6:	bf00      	nop
 8002ee8:	08002f1d 	.word	0x08002f1d
 8002eec:	080031dd 	.word	0x080031dd
 8002ef0:	080031dd 	.word	0x080031dd
 8002ef4:	080031dd 	.word	0x080031dd
 8002ef8:	08002f23 	.word	0x08002f23
 8002efc:	080031dd 	.word	0x080031dd
 8002f00:	080031dd 	.word	0x080031dd
 8002f04:	080031dd 	.word	0x080031dd
 8002f08:	08002f29 	.word	0x08002f29
 8002f0c:	080031dd 	.word	0x080031dd
 8002f10:	080031dd 	.word	0x080031dd
 8002f14:	080031dd 	.word	0x080031dd
 8002f18:	08003085 	.word	0x08003085
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f1c:	4bb4      	ldr	r3, [pc, #720]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x338>)
 8002f1e:	613b      	str	r3, [r7, #16]
       break;
 8002f20:	e15f      	b.n	80031e2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f22:	4bb3      	ldr	r3, [pc, #716]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x338>)
 8002f24:	613b      	str	r3, [r7, #16]
      break;
 8002f26:	e15c      	b.n	80031e2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f28:	4bb0      	ldr	r3, [pc, #704]	; (80031ec <HAL_RCC_GetSysClockFreq+0x334>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f30:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f32:	4bae      	ldr	r3, [pc, #696]	; (80031ec <HAL_RCC_GetSysClockFreq+0x334>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d04a      	beq.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f3e:	4bab      	ldr	r3, [pc, #684]	; (80031ec <HAL_RCC_GetSysClockFreq+0x334>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	099b      	lsrs	r3, r3, #6
 8002f44:	f04f 0400 	mov.w	r4, #0
 8002f48:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	ea03 0501 	and.w	r5, r3, r1
 8002f54:	ea04 0602 	and.w	r6, r4, r2
 8002f58:	4629      	mov	r1, r5
 8002f5a:	4632      	mov	r2, r6
 8002f5c:	f04f 0300 	mov.w	r3, #0
 8002f60:	f04f 0400 	mov.w	r4, #0
 8002f64:	0154      	lsls	r4, r2, #5
 8002f66:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f6a:	014b      	lsls	r3, r1, #5
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4622      	mov	r2, r4
 8002f70:	1b49      	subs	r1, r1, r5
 8002f72:	eb62 0206 	sbc.w	r2, r2, r6
 8002f76:	f04f 0300 	mov.w	r3, #0
 8002f7a:	f04f 0400 	mov.w	r4, #0
 8002f7e:	0194      	lsls	r4, r2, #6
 8002f80:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002f84:	018b      	lsls	r3, r1, #6
 8002f86:	1a5b      	subs	r3, r3, r1
 8002f88:	eb64 0402 	sbc.w	r4, r4, r2
 8002f8c:	f04f 0100 	mov.w	r1, #0
 8002f90:	f04f 0200 	mov.w	r2, #0
 8002f94:	00e2      	lsls	r2, r4, #3
 8002f96:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002f9a:	00d9      	lsls	r1, r3, #3
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	4614      	mov	r4, r2
 8002fa0:	195b      	adds	r3, r3, r5
 8002fa2:	eb44 0406 	adc.w	r4, r4, r6
 8002fa6:	f04f 0100 	mov.w	r1, #0
 8002faa:	f04f 0200 	mov.w	r2, #0
 8002fae:	02a2      	lsls	r2, r4, #10
 8002fb0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002fb4:	0299      	lsls	r1, r3, #10
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	4614      	mov	r4, r2
 8002fba:	4618      	mov	r0, r3
 8002fbc:	4621      	mov	r1, r4
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f04f 0400 	mov.w	r4, #0
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	4623      	mov	r3, r4
 8002fc8:	f7fd f924 	bl	8000214 <__aeabi_uldivmod>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	460c      	mov	r4, r1
 8002fd0:	617b      	str	r3, [r7, #20]
 8002fd2:	e049      	b.n	8003068 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fd4:	4b85      	ldr	r3, [pc, #532]	; (80031ec <HAL_RCC_GetSysClockFreq+0x334>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	099b      	lsrs	r3, r3, #6
 8002fda:	f04f 0400 	mov.w	r4, #0
 8002fde:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002fe2:	f04f 0200 	mov.w	r2, #0
 8002fe6:	ea03 0501 	and.w	r5, r3, r1
 8002fea:	ea04 0602 	and.w	r6, r4, r2
 8002fee:	4629      	mov	r1, r5
 8002ff0:	4632      	mov	r2, r6
 8002ff2:	f04f 0300 	mov.w	r3, #0
 8002ff6:	f04f 0400 	mov.w	r4, #0
 8002ffa:	0154      	lsls	r4, r2, #5
 8002ffc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003000:	014b      	lsls	r3, r1, #5
 8003002:	4619      	mov	r1, r3
 8003004:	4622      	mov	r2, r4
 8003006:	1b49      	subs	r1, r1, r5
 8003008:	eb62 0206 	sbc.w	r2, r2, r6
 800300c:	f04f 0300 	mov.w	r3, #0
 8003010:	f04f 0400 	mov.w	r4, #0
 8003014:	0194      	lsls	r4, r2, #6
 8003016:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800301a:	018b      	lsls	r3, r1, #6
 800301c:	1a5b      	subs	r3, r3, r1
 800301e:	eb64 0402 	sbc.w	r4, r4, r2
 8003022:	f04f 0100 	mov.w	r1, #0
 8003026:	f04f 0200 	mov.w	r2, #0
 800302a:	00e2      	lsls	r2, r4, #3
 800302c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003030:	00d9      	lsls	r1, r3, #3
 8003032:	460b      	mov	r3, r1
 8003034:	4614      	mov	r4, r2
 8003036:	195b      	adds	r3, r3, r5
 8003038:	eb44 0406 	adc.w	r4, r4, r6
 800303c:	f04f 0100 	mov.w	r1, #0
 8003040:	f04f 0200 	mov.w	r2, #0
 8003044:	02a2      	lsls	r2, r4, #10
 8003046:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800304a:	0299      	lsls	r1, r3, #10
 800304c:	460b      	mov	r3, r1
 800304e:	4614      	mov	r4, r2
 8003050:	4618      	mov	r0, r3
 8003052:	4621      	mov	r1, r4
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f04f 0400 	mov.w	r4, #0
 800305a:	461a      	mov	r2, r3
 800305c:	4623      	mov	r3, r4
 800305e:	f7fd f8d9 	bl	8000214 <__aeabi_uldivmod>
 8003062:	4603      	mov	r3, r0
 8003064:	460c      	mov	r4, r1
 8003066:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003068:	4b60      	ldr	r3, [pc, #384]	; (80031ec <HAL_RCC_GetSysClockFreq+0x334>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	0c1b      	lsrs	r3, r3, #16
 800306e:	f003 0303 	and.w	r3, r3, #3
 8003072:	3301      	adds	r3, #1
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003080:	613b      	str	r3, [r7, #16]
      break;
 8003082:	e0ae      	b.n	80031e2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003084:	4b59      	ldr	r3, [pc, #356]	; (80031ec <HAL_RCC_GetSysClockFreq+0x334>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800308c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800308e:	4b57      	ldr	r3, [pc, #348]	; (80031ec <HAL_RCC_GetSysClockFreq+0x334>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d04a      	beq.n	8003130 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800309a:	4b54      	ldr	r3, [pc, #336]	; (80031ec <HAL_RCC_GetSysClockFreq+0x334>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	099b      	lsrs	r3, r3, #6
 80030a0:	f04f 0400 	mov.w	r4, #0
 80030a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80030a8:	f04f 0200 	mov.w	r2, #0
 80030ac:	ea03 0501 	and.w	r5, r3, r1
 80030b0:	ea04 0602 	and.w	r6, r4, r2
 80030b4:	4629      	mov	r1, r5
 80030b6:	4632      	mov	r2, r6
 80030b8:	f04f 0300 	mov.w	r3, #0
 80030bc:	f04f 0400 	mov.w	r4, #0
 80030c0:	0154      	lsls	r4, r2, #5
 80030c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80030c6:	014b      	lsls	r3, r1, #5
 80030c8:	4619      	mov	r1, r3
 80030ca:	4622      	mov	r2, r4
 80030cc:	1b49      	subs	r1, r1, r5
 80030ce:	eb62 0206 	sbc.w	r2, r2, r6
 80030d2:	f04f 0300 	mov.w	r3, #0
 80030d6:	f04f 0400 	mov.w	r4, #0
 80030da:	0194      	lsls	r4, r2, #6
 80030dc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80030e0:	018b      	lsls	r3, r1, #6
 80030e2:	1a5b      	subs	r3, r3, r1
 80030e4:	eb64 0402 	sbc.w	r4, r4, r2
 80030e8:	f04f 0100 	mov.w	r1, #0
 80030ec:	f04f 0200 	mov.w	r2, #0
 80030f0:	00e2      	lsls	r2, r4, #3
 80030f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80030f6:	00d9      	lsls	r1, r3, #3
 80030f8:	460b      	mov	r3, r1
 80030fa:	4614      	mov	r4, r2
 80030fc:	195b      	adds	r3, r3, r5
 80030fe:	eb44 0406 	adc.w	r4, r4, r6
 8003102:	f04f 0100 	mov.w	r1, #0
 8003106:	f04f 0200 	mov.w	r2, #0
 800310a:	02a2      	lsls	r2, r4, #10
 800310c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003110:	0299      	lsls	r1, r3, #10
 8003112:	460b      	mov	r3, r1
 8003114:	4614      	mov	r4, r2
 8003116:	4618      	mov	r0, r3
 8003118:	4621      	mov	r1, r4
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f04f 0400 	mov.w	r4, #0
 8003120:	461a      	mov	r2, r3
 8003122:	4623      	mov	r3, r4
 8003124:	f7fd f876 	bl	8000214 <__aeabi_uldivmod>
 8003128:	4603      	mov	r3, r0
 800312a:	460c      	mov	r4, r1
 800312c:	617b      	str	r3, [r7, #20]
 800312e:	e049      	b.n	80031c4 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003130:	4b2e      	ldr	r3, [pc, #184]	; (80031ec <HAL_RCC_GetSysClockFreq+0x334>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	099b      	lsrs	r3, r3, #6
 8003136:	f04f 0400 	mov.w	r4, #0
 800313a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800313e:	f04f 0200 	mov.w	r2, #0
 8003142:	ea03 0501 	and.w	r5, r3, r1
 8003146:	ea04 0602 	and.w	r6, r4, r2
 800314a:	4629      	mov	r1, r5
 800314c:	4632      	mov	r2, r6
 800314e:	f04f 0300 	mov.w	r3, #0
 8003152:	f04f 0400 	mov.w	r4, #0
 8003156:	0154      	lsls	r4, r2, #5
 8003158:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800315c:	014b      	lsls	r3, r1, #5
 800315e:	4619      	mov	r1, r3
 8003160:	4622      	mov	r2, r4
 8003162:	1b49      	subs	r1, r1, r5
 8003164:	eb62 0206 	sbc.w	r2, r2, r6
 8003168:	f04f 0300 	mov.w	r3, #0
 800316c:	f04f 0400 	mov.w	r4, #0
 8003170:	0194      	lsls	r4, r2, #6
 8003172:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003176:	018b      	lsls	r3, r1, #6
 8003178:	1a5b      	subs	r3, r3, r1
 800317a:	eb64 0402 	sbc.w	r4, r4, r2
 800317e:	f04f 0100 	mov.w	r1, #0
 8003182:	f04f 0200 	mov.w	r2, #0
 8003186:	00e2      	lsls	r2, r4, #3
 8003188:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800318c:	00d9      	lsls	r1, r3, #3
 800318e:	460b      	mov	r3, r1
 8003190:	4614      	mov	r4, r2
 8003192:	195b      	adds	r3, r3, r5
 8003194:	eb44 0406 	adc.w	r4, r4, r6
 8003198:	f04f 0100 	mov.w	r1, #0
 800319c:	f04f 0200 	mov.w	r2, #0
 80031a0:	02a2      	lsls	r2, r4, #10
 80031a2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80031a6:	0299      	lsls	r1, r3, #10
 80031a8:	460b      	mov	r3, r1
 80031aa:	4614      	mov	r4, r2
 80031ac:	4618      	mov	r0, r3
 80031ae:	4621      	mov	r1, r4
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f04f 0400 	mov.w	r4, #0
 80031b6:	461a      	mov	r2, r3
 80031b8:	4623      	mov	r3, r4
 80031ba:	f7fd f82b 	bl	8000214 <__aeabi_uldivmod>
 80031be:	4603      	mov	r3, r0
 80031c0:	460c      	mov	r4, r1
 80031c2:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80031c4:	4b09      	ldr	r3, [pc, #36]	; (80031ec <HAL_RCC_GetSysClockFreq+0x334>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	0f1b      	lsrs	r3, r3, #28
 80031ca:	f003 0307 	and.w	r3, r3, #7
 80031ce:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d8:	613b      	str	r3, [r7, #16]
      break;
 80031da:	e002      	b.n	80031e2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031dc:	4b04      	ldr	r3, [pc, #16]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x338>)
 80031de:	613b      	str	r3, [r7, #16]
      break;
 80031e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031e2:	693b      	ldr	r3, [r7, #16]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	371c      	adds	r7, #28
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031ec:	40023800 	.word	0x40023800
 80031f0:	00f42400 	.word	0x00f42400

080031f4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031fc:	2300      	movs	r3, #0
 80031fe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 8083 	beq.w	8003314 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800320e:	4b95      	ldr	r3, [pc, #596]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 030c 	and.w	r3, r3, #12
 8003216:	2b04      	cmp	r3, #4
 8003218:	d019      	beq.n	800324e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800321a:	4b92      	ldr	r3, [pc, #584]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003222:	2b08      	cmp	r3, #8
 8003224:	d106      	bne.n	8003234 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003226:	4b8f      	ldr	r3, [pc, #572]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800322e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003232:	d00c      	beq.n	800324e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003234:	4b8b      	ldr	r3, [pc, #556]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800323c:	2b0c      	cmp	r3, #12
 800323e:	d112      	bne.n	8003266 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003240:	4b88      	ldr	r3, [pc, #544]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003248:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800324c:	d10b      	bne.n	8003266 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800324e:	4b85      	ldr	r3, [pc, #532]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d05b      	beq.n	8003312 <HAL_RCC_OscConfig+0x11e>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d157      	bne.n	8003312 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e216      	b.n	8003694 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800326e:	d106      	bne.n	800327e <HAL_RCC_OscConfig+0x8a>
 8003270:	4b7c      	ldr	r3, [pc, #496]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a7b      	ldr	r2, [pc, #492]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 8003276:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800327a:	6013      	str	r3, [r2, #0]
 800327c:	e01d      	b.n	80032ba <HAL_RCC_OscConfig+0xc6>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003286:	d10c      	bne.n	80032a2 <HAL_RCC_OscConfig+0xae>
 8003288:	4b76      	ldr	r3, [pc, #472]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a75      	ldr	r2, [pc, #468]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 800328e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003292:	6013      	str	r3, [r2, #0]
 8003294:	4b73      	ldr	r3, [pc, #460]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a72      	ldr	r2, [pc, #456]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 800329a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800329e:	6013      	str	r3, [r2, #0]
 80032a0:	e00b      	b.n	80032ba <HAL_RCC_OscConfig+0xc6>
 80032a2:	4b70      	ldr	r3, [pc, #448]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a6f      	ldr	r2, [pc, #444]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 80032a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ac:	6013      	str	r3, [r2, #0]
 80032ae:	4b6d      	ldr	r3, [pc, #436]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a6c      	ldr	r2, [pc, #432]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 80032b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032b8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d013      	beq.n	80032ea <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c2:	f7fd f98d 	bl	80005e0 <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032ca:	f7fd f989 	bl	80005e0 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b64      	cmp	r3, #100	; 0x64
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e1db      	b.n	8003694 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032dc:	4b61      	ldr	r3, [pc, #388]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d0f0      	beq.n	80032ca <HAL_RCC_OscConfig+0xd6>
 80032e8:	e014      	b.n	8003314 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ea:	f7fd f979 	bl	80005e0 <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032f2:	f7fd f975 	bl	80005e0 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b64      	cmp	r3, #100	; 0x64
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e1c7      	b.n	8003694 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003304:	4b57      	ldr	r3, [pc, #348]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1f0      	bne.n	80032f2 <HAL_RCC_OscConfig+0xfe>
 8003310:	e000      	b.n	8003314 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003312:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d06f      	beq.n	8003400 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003320:	4b50      	ldr	r3, [pc, #320]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 030c 	and.w	r3, r3, #12
 8003328:	2b00      	cmp	r3, #0
 800332a:	d017      	beq.n	800335c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800332c:	4b4d      	ldr	r3, [pc, #308]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003334:	2b08      	cmp	r3, #8
 8003336:	d105      	bne.n	8003344 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003338:	4b4a      	ldr	r3, [pc, #296]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00b      	beq.n	800335c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003344:	4b47      	ldr	r3, [pc, #284]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800334c:	2b0c      	cmp	r3, #12
 800334e:	d11c      	bne.n	800338a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003350:	4b44      	ldr	r3, [pc, #272]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d116      	bne.n	800338a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800335c:	4b41      	ldr	r3, [pc, #260]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d005      	beq.n	8003374 <HAL_RCC_OscConfig+0x180>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d001      	beq.n	8003374 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e18f      	b.n	8003694 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003374:	4b3b      	ldr	r3, [pc, #236]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	4938      	ldr	r1, [pc, #224]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 8003384:	4313      	orrs	r3, r2
 8003386:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003388:	e03a      	b.n	8003400 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d020      	beq.n	80033d4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003392:	4b35      	ldr	r3, [pc, #212]	; (8003468 <HAL_RCC_OscConfig+0x274>)
 8003394:	2201      	movs	r2, #1
 8003396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003398:	f7fd f922 	bl	80005e0 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033a0:	f7fd f91e 	bl	80005e0 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e170      	b.n	8003694 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b2:	4b2c      	ldr	r3, [pc, #176]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d0f0      	beq.n	80033a0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033be:	4b29      	ldr	r3, [pc, #164]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	4925      	ldr	r1, [pc, #148]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	600b      	str	r3, [r1, #0]
 80033d2:	e015      	b.n	8003400 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033d4:	4b24      	ldr	r3, [pc, #144]	; (8003468 <HAL_RCC_OscConfig+0x274>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033da:	f7fd f901 	bl	80005e0 <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033e0:	e008      	b.n	80033f4 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033e2:	f7fd f8fd 	bl	80005e0 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e14f      	b.n	8003694 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033f4:	4b1b      	ldr	r3, [pc, #108]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1f0      	bne.n	80033e2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0308 	and.w	r3, r3, #8
 8003408:	2b00      	cmp	r3, #0
 800340a:	d037      	beq.n	800347c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d016      	beq.n	8003442 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003414:	4b15      	ldr	r3, [pc, #84]	; (800346c <HAL_RCC_OscConfig+0x278>)
 8003416:	2201      	movs	r2, #1
 8003418:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800341a:	f7fd f8e1 	bl	80005e0 <HAL_GetTick>
 800341e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003420:	e008      	b.n	8003434 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003422:	f7fd f8dd 	bl	80005e0 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d901      	bls.n	8003434 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e12f      	b.n	8003694 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003434:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 8003436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d0f0      	beq.n	8003422 <HAL_RCC_OscConfig+0x22e>
 8003440:	e01c      	b.n	800347c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003442:	4b0a      	ldr	r3, [pc, #40]	; (800346c <HAL_RCC_OscConfig+0x278>)
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003448:	f7fd f8ca 	bl	80005e0 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800344e:	e00f      	b.n	8003470 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003450:	f7fd f8c6 	bl	80005e0 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d908      	bls.n	8003470 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e118      	b.n	8003694 <HAL_RCC_OscConfig+0x4a0>
 8003462:	bf00      	nop
 8003464:	40023800 	.word	0x40023800
 8003468:	42470000 	.word	0x42470000
 800346c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003470:	4b8a      	ldr	r3, [pc, #552]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 8003472:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1e9      	bne.n	8003450 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0304 	and.w	r3, r3, #4
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 8097 	beq.w	80035b8 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800348a:	2300      	movs	r3, #0
 800348c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800348e:	4b83      	ldr	r3, [pc, #524]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10f      	bne.n	80034ba <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800349a:	2300      	movs	r3, #0
 800349c:	60fb      	str	r3, [r7, #12]
 800349e:	4b7f      	ldr	r3, [pc, #508]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	4a7e      	ldr	r2, [pc, #504]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 80034a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034a8:	6413      	str	r3, [r2, #64]	; 0x40
 80034aa:	4b7c      	ldr	r3, [pc, #496]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80034b6:	2301      	movs	r3, #1
 80034b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ba:	4b79      	ldr	r3, [pc, #484]	; (80036a0 <HAL_RCC_OscConfig+0x4ac>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d118      	bne.n	80034f8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034c6:	4b76      	ldr	r3, [pc, #472]	; (80036a0 <HAL_RCC_OscConfig+0x4ac>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a75      	ldr	r2, [pc, #468]	; (80036a0 <HAL_RCC_OscConfig+0x4ac>)
 80034cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034d2:	f7fd f885 	bl	80005e0 <HAL_GetTick>
 80034d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d8:	e008      	b.n	80034ec <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034da:	f7fd f881 	bl	80005e0 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e0d3      	b.n	8003694 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ec:	4b6c      	ldr	r3, [pc, #432]	; (80036a0 <HAL_RCC_OscConfig+0x4ac>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0f0      	beq.n	80034da <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d106      	bne.n	800350e <HAL_RCC_OscConfig+0x31a>
 8003500:	4b66      	ldr	r3, [pc, #408]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 8003502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003504:	4a65      	ldr	r2, [pc, #404]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 8003506:	f043 0301 	orr.w	r3, r3, #1
 800350a:	6713      	str	r3, [r2, #112]	; 0x70
 800350c:	e01c      	b.n	8003548 <HAL_RCC_OscConfig+0x354>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	2b05      	cmp	r3, #5
 8003514:	d10c      	bne.n	8003530 <HAL_RCC_OscConfig+0x33c>
 8003516:	4b61      	ldr	r3, [pc, #388]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 8003518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351a:	4a60      	ldr	r2, [pc, #384]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 800351c:	f043 0304 	orr.w	r3, r3, #4
 8003520:	6713      	str	r3, [r2, #112]	; 0x70
 8003522:	4b5e      	ldr	r3, [pc, #376]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 8003524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003526:	4a5d      	ldr	r2, [pc, #372]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 8003528:	f043 0301 	orr.w	r3, r3, #1
 800352c:	6713      	str	r3, [r2, #112]	; 0x70
 800352e:	e00b      	b.n	8003548 <HAL_RCC_OscConfig+0x354>
 8003530:	4b5a      	ldr	r3, [pc, #360]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 8003532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003534:	4a59      	ldr	r2, [pc, #356]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 8003536:	f023 0301 	bic.w	r3, r3, #1
 800353a:	6713      	str	r3, [r2, #112]	; 0x70
 800353c:	4b57      	ldr	r3, [pc, #348]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 800353e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003540:	4a56      	ldr	r2, [pc, #344]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 8003542:	f023 0304 	bic.w	r3, r3, #4
 8003546:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d015      	beq.n	800357c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003550:	f7fd f846 	bl	80005e0 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003556:	e00a      	b.n	800356e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003558:	f7fd f842 	bl	80005e0 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	f241 3288 	movw	r2, #5000	; 0x1388
 8003566:	4293      	cmp	r3, r2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e092      	b.n	8003694 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800356e:	4b4b      	ldr	r3, [pc, #300]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 8003570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0ee      	beq.n	8003558 <HAL_RCC_OscConfig+0x364>
 800357a:	e014      	b.n	80035a6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357c:	f7fd f830 	bl	80005e0 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003582:	e00a      	b.n	800359a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003584:	f7fd f82c 	bl	80005e0 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003592:	4293      	cmp	r3, r2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e07c      	b.n	8003694 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800359a:	4b40      	ldr	r3, [pc, #256]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 800359c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1ee      	bne.n	8003584 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035a6:	7dfb      	ldrb	r3, [r7, #23]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d105      	bne.n	80035b8 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ac:	4b3b      	ldr	r3, [pc, #236]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 80035ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b0:	4a3a      	ldr	r2, [pc, #232]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 80035b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d068      	beq.n	8003692 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035c0:	4b36      	ldr	r3, [pc, #216]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f003 030c 	and.w	r3, r3, #12
 80035c8:	2b08      	cmp	r3, #8
 80035ca:	d060      	beq.n	800368e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d145      	bne.n	8003660 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d4:	4b33      	ldr	r3, [pc, #204]	; (80036a4 <HAL_RCC_OscConfig+0x4b0>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035da:	f7fd f801 	bl	80005e0 <HAL_GetTick>
 80035de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035e0:	e008      	b.n	80035f4 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035e2:	f7fc fffd 	bl	80005e0 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e04f      	b.n	8003694 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035f4:	4b29      	ldr	r3, [pc, #164]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1f0      	bne.n	80035e2 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	69da      	ldr	r2, [r3, #28]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	431a      	orrs	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	019b      	lsls	r3, r3, #6
 8003610:	431a      	orrs	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003616:	085b      	lsrs	r3, r3, #1
 8003618:	3b01      	subs	r3, #1
 800361a:	041b      	lsls	r3, r3, #16
 800361c:	431a      	orrs	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003622:	061b      	lsls	r3, r3, #24
 8003624:	431a      	orrs	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	071b      	lsls	r3, r3, #28
 800362c:	491b      	ldr	r1, [pc, #108]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 800362e:	4313      	orrs	r3, r2
 8003630:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003632:	4b1c      	ldr	r3, [pc, #112]	; (80036a4 <HAL_RCC_OscConfig+0x4b0>)
 8003634:	2201      	movs	r2, #1
 8003636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003638:	f7fc ffd2 	bl	80005e0 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003640:	f7fc ffce 	bl	80005e0 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e020      	b.n	8003694 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003652:	4b12      	ldr	r3, [pc, #72]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0f0      	beq.n	8003640 <HAL_RCC_OscConfig+0x44c>
 800365e:	e018      	b.n	8003692 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003660:	4b10      	ldr	r3, [pc, #64]	; (80036a4 <HAL_RCC_OscConfig+0x4b0>)
 8003662:	2200      	movs	r2, #0
 8003664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003666:	f7fc ffbb 	bl	80005e0 <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800366c:	e008      	b.n	8003680 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800366e:	f7fc ffb7 	bl	80005e0 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e009      	b.n	8003694 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003680:	4b06      	ldr	r3, [pc, #24]	; (800369c <HAL_RCC_OscConfig+0x4a8>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1f0      	bne.n	800366e <HAL_RCC_OscConfig+0x47a>
 800368c:	e001      	b.n	8003692 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e000      	b.n	8003694 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3718      	adds	r7, #24
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40023800 	.word	0x40023800
 80036a0:	40007000 	.word	0x40007000
 80036a4:	42470060 	.word	0x42470060

080036a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e01d      	b.n	80036f6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d106      	bne.n	80036d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f004 f936 	bl	8007940 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2202      	movs	r2, #2
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3304      	adds	r3, #4
 80036e4:	4619      	mov	r1, r3
 80036e6:	4610      	mov	r0, r2
 80036e8:	f000 f95e 	bl	80039a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036fe:	b480      	push	{r7}
 8003700:	b085      	sub	sp, #20
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68da      	ldr	r2, [r3, #12]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f042 0201 	orr.w	r2, r2, #1
 8003714:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2b06      	cmp	r3, #6
 8003726:	d007      	beq.n	8003738 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0201 	orr.w	r2, r2, #1
 8003736:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b082      	sub	sp, #8
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b02      	cmp	r3, #2
 800375a:	d122      	bne.n	80037a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b02      	cmp	r3, #2
 8003768:	d11b      	bne.n	80037a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f06f 0202 	mvn.w	r2, #2
 8003772:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	f003 0303 	and.w	r3, r3, #3
 8003784:	2b00      	cmp	r3, #0
 8003786:	d003      	beq.n	8003790 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 f8ee 	bl	800396a <HAL_TIM_IC_CaptureCallback>
 800378e:	e005      	b.n	800379c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f8e0 	bl	8003956 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f8f1 	bl	800397e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	f003 0304 	and.w	r3, r3, #4
 80037ac:	2b04      	cmp	r3, #4
 80037ae:	d122      	bne.n	80037f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	f003 0304 	and.w	r3, r3, #4
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	d11b      	bne.n	80037f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f06f 0204 	mvn.w	r2, #4
 80037c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2202      	movs	r2, #2
 80037cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d003      	beq.n	80037e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 f8c4 	bl	800396a <HAL_TIM_IC_CaptureCallback>
 80037e2:	e005      	b.n	80037f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 f8b6 	bl	8003956 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f8c7 	bl	800397e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	f003 0308 	and.w	r3, r3, #8
 8003800:	2b08      	cmp	r3, #8
 8003802:	d122      	bne.n	800384a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	f003 0308 	and.w	r3, r3, #8
 800380e:	2b08      	cmp	r3, #8
 8003810:	d11b      	bne.n	800384a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f06f 0208 	mvn.w	r2, #8
 800381a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2204      	movs	r2, #4
 8003820:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	69db      	ldr	r3, [r3, #28]
 8003828:	f003 0303 	and.w	r3, r3, #3
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 f89a 	bl	800396a <HAL_TIM_IC_CaptureCallback>
 8003836:	e005      	b.n	8003844 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 f88c 	bl	8003956 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f89d 	bl	800397e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	f003 0310 	and.w	r3, r3, #16
 8003854:	2b10      	cmp	r3, #16
 8003856:	d122      	bne.n	800389e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	f003 0310 	and.w	r3, r3, #16
 8003862:	2b10      	cmp	r3, #16
 8003864:	d11b      	bne.n	800389e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f06f 0210 	mvn.w	r2, #16
 800386e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2208      	movs	r2, #8
 8003874:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	69db      	ldr	r3, [r3, #28]
 800387c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003880:	2b00      	cmp	r3, #0
 8003882:	d003      	beq.n	800388c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 f870 	bl	800396a <HAL_TIM_IC_CaptureCallback>
 800388a:	e005      	b.n	8003898 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 f862 	bl	8003956 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f873 	bl	800397e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d10e      	bne.n	80038ca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d107      	bne.n	80038ca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f06f 0201 	mvn.w	r2, #1
 80038c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f003 fd61 	bl	800738c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d4:	2b80      	cmp	r3, #128	; 0x80
 80038d6:	d10e      	bne.n	80038f6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e2:	2b80      	cmp	r3, #128	; 0x80
 80038e4:	d107      	bne.n	80038f6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 f948 	bl	8003b86 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003900:	2b40      	cmp	r3, #64	; 0x40
 8003902:	d10e      	bne.n	8003922 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800390e:	2b40      	cmp	r3, #64	; 0x40
 8003910:	d107      	bne.n	8003922 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800391a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 f838 	bl	8003992 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	f003 0320 	and.w	r3, r3, #32
 800392c:	2b20      	cmp	r3, #32
 800392e:	d10e      	bne.n	800394e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	f003 0320 	and.w	r3, r3, #32
 800393a:	2b20      	cmp	r3, #32
 800393c:	d107      	bne.n	800394e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f06f 0220 	mvn.w	r2, #32
 8003946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f912 	bl	8003b72 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800394e:	bf00      	nop
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003956:	b480      	push	{r7}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800395e:	bf00      	nop
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr

0800396a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800396a:	b480      	push	{r7}
 800396c:	b083      	sub	sp, #12
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003972:	bf00      	nop
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800397e:	b480      	push	{r7}
 8003980:	b083      	sub	sp, #12
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003992:	b480      	push	{r7}
 8003994:	b083      	sub	sp, #12
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800399a:	bf00      	nop
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
	...

080039a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a40      	ldr	r2, [pc, #256]	; (8003abc <TIM_Base_SetConfig+0x114>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d013      	beq.n	80039e8 <TIM_Base_SetConfig+0x40>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c6:	d00f      	beq.n	80039e8 <TIM_Base_SetConfig+0x40>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a3d      	ldr	r2, [pc, #244]	; (8003ac0 <TIM_Base_SetConfig+0x118>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d00b      	beq.n	80039e8 <TIM_Base_SetConfig+0x40>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a3c      	ldr	r2, [pc, #240]	; (8003ac4 <TIM_Base_SetConfig+0x11c>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d007      	beq.n	80039e8 <TIM_Base_SetConfig+0x40>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a3b      	ldr	r2, [pc, #236]	; (8003ac8 <TIM_Base_SetConfig+0x120>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d003      	beq.n	80039e8 <TIM_Base_SetConfig+0x40>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a3a      	ldr	r2, [pc, #232]	; (8003acc <TIM_Base_SetConfig+0x124>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d108      	bne.n	80039fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a2f      	ldr	r2, [pc, #188]	; (8003abc <TIM_Base_SetConfig+0x114>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d02b      	beq.n	8003a5a <TIM_Base_SetConfig+0xb2>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a08:	d027      	beq.n	8003a5a <TIM_Base_SetConfig+0xb2>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a2c      	ldr	r2, [pc, #176]	; (8003ac0 <TIM_Base_SetConfig+0x118>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d023      	beq.n	8003a5a <TIM_Base_SetConfig+0xb2>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a2b      	ldr	r2, [pc, #172]	; (8003ac4 <TIM_Base_SetConfig+0x11c>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d01f      	beq.n	8003a5a <TIM_Base_SetConfig+0xb2>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a2a      	ldr	r2, [pc, #168]	; (8003ac8 <TIM_Base_SetConfig+0x120>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d01b      	beq.n	8003a5a <TIM_Base_SetConfig+0xb2>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a29      	ldr	r2, [pc, #164]	; (8003acc <TIM_Base_SetConfig+0x124>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d017      	beq.n	8003a5a <TIM_Base_SetConfig+0xb2>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a28      	ldr	r2, [pc, #160]	; (8003ad0 <TIM_Base_SetConfig+0x128>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d013      	beq.n	8003a5a <TIM_Base_SetConfig+0xb2>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a27      	ldr	r2, [pc, #156]	; (8003ad4 <TIM_Base_SetConfig+0x12c>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d00f      	beq.n	8003a5a <TIM_Base_SetConfig+0xb2>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a26      	ldr	r2, [pc, #152]	; (8003ad8 <TIM_Base_SetConfig+0x130>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d00b      	beq.n	8003a5a <TIM_Base_SetConfig+0xb2>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a25      	ldr	r2, [pc, #148]	; (8003adc <TIM_Base_SetConfig+0x134>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d007      	beq.n	8003a5a <TIM_Base_SetConfig+0xb2>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a24      	ldr	r2, [pc, #144]	; (8003ae0 <TIM_Base_SetConfig+0x138>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d003      	beq.n	8003a5a <TIM_Base_SetConfig+0xb2>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a23      	ldr	r2, [pc, #140]	; (8003ae4 <TIM_Base_SetConfig+0x13c>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d108      	bne.n	8003a6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	689a      	ldr	r2, [r3, #8]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a0a      	ldr	r2, [pc, #40]	; (8003abc <TIM_Base_SetConfig+0x114>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d003      	beq.n	8003aa0 <TIM_Base_SetConfig+0xf8>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a0c      	ldr	r2, [pc, #48]	; (8003acc <TIM_Base_SetConfig+0x124>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d103      	bne.n	8003aa8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	691a      	ldr	r2, [r3, #16]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	615a      	str	r2, [r3, #20]
}
 8003aae:	bf00      	nop
 8003ab0:	3714      	adds	r7, #20
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	40010000 	.word	0x40010000
 8003ac0:	40000400 	.word	0x40000400
 8003ac4:	40000800 	.word	0x40000800
 8003ac8:	40000c00 	.word	0x40000c00
 8003acc:	40010400 	.word	0x40010400
 8003ad0:	40014000 	.word	0x40014000
 8003ad4:	40014400 	.word	0x40014400
 8003ad8:	40014800 	.word	0x40014800
 8003adc:	40001800 	.word	0x40001800
 8003ae0:	40001c00 	.word	0x40001c00
 8003ae4:	40002000 	.word	0x40002000

08003ae8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d101      	bne.n	8003b00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003afc:	2302      	movs	r3, #2
 8003afe:	e032      	b.n	8003b66 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b38:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3714      	adds	r7, #20
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b72:	b480      	push	{r7}
 8003b74:	b083      	sub	sp, #12
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b7a:	bf00      	nop
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b8e:	bf00      	nop
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b082      	sub	sp, #8
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d101      	bne.n	8003bac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e03f      	b.n	8003c2c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d106      	bne.n	8003bc6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f003 ffd5 	bl	8007b70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2224      	movs	r2, #36	; 0x24
 8003bca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bdc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 fa50 	bl	8004084 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	691a      	ldr	r2, [r3, #16]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bf2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	695a      	ldr	r2, [r3, #20]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c02:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68da      	ldr	r2, [r3, #12]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c12:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2220      	movs	r2, #32
 8003c26:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3708      	adds	r7, #8
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b088      	sub	sp, #32
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	f003 030f 	and.w	r3, r3, #15
 8003c62:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10d      	bne.n	8003c86 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	f003 0320 	and.w	r3, r3, #32
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d008      	beq.n	8003c86 <HAL_UART_IRQHandler+0x52>
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	f003 0320 	and.w	r3, r3, #32
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d003      	beq.n	8003c86 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f97e 	bl	8003f80 <UART_Receive_IT>
      return;
 8003c84:	e0cc      	b.n	8003e20 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 80ab 	beq.w	8003de4 <HAL_UART_IRQHandler+0x1b0>
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d105      	bne.n	8003ca4 <HAL_UART_IRQHandler+0x70>
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f000 80a0 	beq.w	8003de4 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00a      	beq.n	8003cc4 <HAL_UART_IRQHandler+0x90>
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d005      	beq.n	8003cc4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cbc:	f043 0201 	orr.w	r2, r3, #1
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	f003 0304 	and.w	r3, r3, #4
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <HAL_UART_IRQHandler+0xb0>
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d005      	beq.n	8003ce4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cdc:	f043 0202 	orr.w	r2, r3, #2
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00a      	beq.n	8003d04 <HAL_UART_IRQHandler+0xd0>
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d005      	beq.n	8003d04 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cfc:	f043 0204 	orr.w	r2, r3, #4
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	f003 0308 	and.w	r3, r3, #8
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00a      	beq.n	8003d24 <HAL_UART_IRQHandler+0xf0>
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d005      	beq.n	8003d24 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d1c:	f043 0208 	orr.w	r2, r3, #8
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d078      	beq.n	8003e1e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	f003 0320 	and.w	r3, r3, #32
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d007      	beq.n	8003d46 <HAL_UART_IRQHandler+0x112>
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	f003 0320 	and.w	r3, r3, #32
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d002      	beq.n	8003d46 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 f91d 	bl	8003f80 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d50:	2b40      	cmp	r3, #64	; 0x40
 8003d52:	bf0c      	ite	eq
 8003d54:	2301      	moveq	r3, #1
 8003d56:	2300      	movne	r3, #0
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d60:	f003 0308 	and.w	r3, r3, #8
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d102      	bne.n	8003d6e <HAL_UART_IRQHandler+0x13a>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d031      	beq.n	8003dd2 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f866 	bl	8003e40 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7e:	2b40      	cmp	r3, #64	; 0x40
 8003d80:	d123      	bne.n	8003dca <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	695a      	ldr	r2, [r3, #20]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d90:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d013      	beq.n	8003dc2 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d9e:	4a22      	ldr	r2, [pc, #136]	; (8003e28 <HAL_UART_IRQHandler+0x1f4>)
 8003da0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fd f887 	bl	8000eba <HAL_DMA_Abort_IT>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d016      	beq.n	8003de0 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003dbc:	4610      	mov	r0, r2
 8003dbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc0:	e00e      	b.n	8003de0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f832 	bl	8003e2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc8:	e00a      	b.n	8003de0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f82e 	bl	8003e2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd0:	e006      	b.n	8003de0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f82a 	bl	8003e2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003dde:	e01e      	b.n	8003e1e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de0:	bf00      	nop
    return;
 8003de2:	e01c      	b.n	8003e1e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d008      	beq.n	8003e00 <HAL_UART_IRQHandler+0x1cc>
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d003      	beq.n	8003e00 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 f853 	bl	8003ea4 <UART_Transmit_IT>
    return;
 8003dfe:	e00f      	b.n	8003e20 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00a      	beq.n	8003e20 <HAL_UART_IRQHandler+0x1ec>
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d005      	beq.n	8003e20 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 f89b 	bl	8003f50 <UART_EndTransmit_IT>
    return;
 8003e1a:	bf00      	nop
 8003e1c:	e000      	b.n	8003e20 <HAL_UART_IRQHandler+0x1ec>
    return;
 8003e1e:	bf00      	nop
  }
}
 8003e20:	3720      	adds	r7, #32
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	08003e7d 	.word	0x08003e7d

08003e2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68da      	ldr	r2, [r3, #12]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e56:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	695a      	ldr	r2, [r3, #20]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 0201 	bic.w	r2, r2, #1
 8003e66:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f7ff ffc8 	bl	8003e2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e9c:	bf00      	nop
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b21      	cmp	r3, #33	; 0x21
 8003eb6:	d144      	bne.n	8003f42 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec0:	d11a      	bne.n	8003ef8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	881b      	ldrh	r3, [r3, #0]
 8003ecc:	461a      	mov	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ed6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d105      	bne.n	8003eec <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a1b      	ldr	r3, [r3, #32]
 8003ee4:	1c9a      	adds	r2, r3, #2
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	621a      	str	r2, [r3, #32]
 8003eea:	e00e      	b.n	8003f0a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	1c5a      	adds	r2, r3, #1
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	621a      	str	r2, [r3, #32]
 8003ef6:	e008      	b.n	8003f0a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	1c59      	adds	r1, r3, #1
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	6211      	str	r1, [r2, #32]
 8003f02:	781a      	ldrb	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	3b01      	subs	r3, #1
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	4619      	mov	r1, r3
 8003f18:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10f      	bne.n	8003f3e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68da      	ldr	r2, [r3, #12]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f2c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68da      	ldr	r2, [r3, #12]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f3c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	e000      	b.n	8003f44 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003f42:	2302      	movs	r3, #2
  }
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3714      	adds	r7, #20
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68da      	ldr	r2, [r3, #12]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f66:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f003 fa2f 	bl	80073d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3708      	adds	r7, #8
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b22      	cmp	r3, #34	; 0x22
 8003f92:	d171      	bne.n	8004078 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f9c:	d123      	bne.n	8003fe6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10e      	bne.n	8003fca <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc2:	1c9a      	adds	r2, r3, #2
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	629a      	str	r2, [r3, #40]	; 0x28
 8003fc8:	e029      	b.n	800401e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fde:	1c5a      	adds	r2, r3, #1
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	629a      	str	r2, [r3, #40]	; 0x28
 8003fe4:	e01b      	b.n	800401e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10a      	bne.n	8004004 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6858      	ldr	r0, [r3, #4]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff8:	1c59      	adds	r1, r3, #1
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	6291      	str	r1, [r2, #40]	; 0x28
 8003ffe:	b2c2      	uxtb	r2, r0
 8004000:	701a      	strb	r2, [r3, #0]
 8004002:	e00c      	b.n	800401e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	b2da      	uxtb	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004010:	1c58      	adds	r0, r3, #1
 8004012:	6879      	ldr	r1, [r7, #4]
 8004014:	6288      	str	r0, [r1, #40]	; 0x28
 8004016:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800401a:	b2d2      	uxtb	r2, r2
 800401c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004022:	b29b      	uxth	r3, r3
 8004024:	3b01      	subs	r3, #1
 8004026:	b29b      	uxth	r3, r3
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	4619      	mov	r1, r3
 800402c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800402e:	2b00      	cmp	r3, #0
 8004030:	d120      	bne.n	8004074 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68da      	ldr	r2, [r3, #12]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 0220 	bic.w	r2, r2, #32
 8004040:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68da      	ldr	r2, [r3, #12]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004050:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	695a      	ldr	r2, [r3, #20]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 0201 	bic.w	r2, r2, #1
 8004060:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2220      	movs	r2, #32
 8004066:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f003 f9bc 	bl	80073e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004070:	2300      	movs	r3, #0
 8004072:	e002      	b.n	800407a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004074:	2300      	movs	r3, #0
 8004076:	e000      	b.n	800407a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004078:	2302      	movs	r3, #2
  }
}
 800407a:	4618      	mov	r0, r3
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
	...

08004084 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004084:	b5b0      	push	{r4, r5, r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68da      	ldr	r2, [r3, #12]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	430a      	orrs	r2, r1
 80040a0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	689a      	ldr	r2, [r3, #8]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	431a      	orrs	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	431a      	orrs	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80040c4:	f023 030c 	bic.w	r3, r3, #12
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	6812      	ldr	r2, [r2, #0]
 80040cc:	68f9      	ldr	r1, [r7, #12]
 80040ce:	430b      	orrs	r3, r1
 80040d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	699a      	ldr	r2, [r3, #24]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	430a      	orrs	r2, r1
 80040e6:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	69db      	ldr	r3, [r3, #28]
 80040ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040f0:	f040 80e4 	bne.w	80042bc <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4aab      	ldr	r2, [pc, #684]	; (80043a8 <UART_SetConfig+0x324>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d004      	beq.n	8004108 <UART_SetConfig+0x84>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4aaa      	ldr	r2, [pc, #680]	; (80043ac <UART_SetConfig+0x328>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d16c      	bne.n	80041e2 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004108:	f7fe fb98 	bl	800283c <HAL_RCC_GetPCLK2Freq>
 800410c:	4602      	mov	r2, r0
 800410e:	4613      	mov	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4413      	add	r3, r2
 8004114:	009a      	lsls	r2, r3, #2
 8004116:	441a      	add	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004122:	4aa3      	ldr	r2, [pc, #652]	; (80043b0 <UART_SetConfig+0x32c>)
 8004124:	fba2 2303 	umull	r2, r3, r2, r3
 8004128:	095b      	lsrs	r3, r3, #5
 800412a:	011c      	lsls	r4, r3, #4
 800412c:	f7fe fb86 	bl	800283c <HAL_RCC_GetPCLK2Freq>
 8004130:	4602      	mov	r2, r0
 8004132:	4613      	mov	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4413      	add	r3, r2
 8004138:	009a      	lsls	r2, r3, #2
 800413a:	441a      	add	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	fbb2 f5f3 	udiv	r5, r2, r3
 8004146:	f7fe fb79 	bl	800283c <HAL_RCC_GetPCLK2Freq>
 800414a:	4602      	mov	r2, r0
 800414c:	4613      	mov	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4413      	add	r3, r2
 8004152:	009a      	lsls	r2, r3, #2
 8004154:	441a      	add	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004160:	4a93      	ldr	r2, [pc, #588]	; (80043b0 <UART_SetConfig+0x32c>)
 8004162:	fba2 2303 	umull	r2, r3, r2, r3
 8004166:	095b      	lsrs	r3, r3, #5
 8004168:	2264      	movs	r2, #100	; 0x64
 800416a:	fb02 f303 	mul.w	r3, r2, r3
 800416e:	1aeb      	subs	r3, r5, r3
 8004170:	00db      	lsls	r3, r3, #3
 8004172:	3332      	adds	r3, #50	; 0x32
 8004174:	4a8e      	ldr	r2, [pc, #568]	; (80043b0 <UART_SetConfig+0x32c>)
 8004176:	fba2 2303 	umull	r2, r3, r2, r3
 800417a:	095b      	lsrs	r3, r3, #5
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004182:	441c      	add	r4, r3
 8004184:	f7fe fb5a 	bl	800283c <HAL_RCC_GetPCLK2Freq>
 8004188:	4602      	mov	r2, r0
 800418a:	4613      	mov	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4413      	add	r3, r2
 8004190:	009a      	lsls	r2, r3, #2
 8004192:	441a      	add	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	fbb2 f5f3 	udiv	r5, r2, r3
 800419e:	f7fe fb4d 	bl	800283c <HAL_RCC_GetPCLK2Freq>
 80041a2:	4602      	mov	r2, r0
 80041a4:	4613      	mov	r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	4413      	add	r3, r2
 80041aa:	009a      	lsls	r2, r3, #2
 80041ac:	441a      	add	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b8:	4a7d      	ldr	r2, [pc, #500]	; (80043b0 <UART_SetConfig+0x32c>)
 80041ba:	fba2 2303 	umull	r2, r3, r2, r3
 80041be:	095b      	lsrs	r3, r3, #5
 80041c0:	2264      	movs	r2, #100	; 0x64
 80041c2:	fb02 f303 	mul.w	r3, r2, r3
 80041c6:	1aeb      	subs	r3, r5, r3
 80041c8:	00db      	lsls	r3, r3, #3
 80041ca:	3332      	adds	r3, #50	; 0x32
 80041cc:	4a78      	ldr	r2, [pc, #480]	; (80043b0 <UART_SetConfig+0x32c>)
 80041ce:	fba2 2303 	umull	r2, r3, r2, r3
 80041d2:	095b      	lsrs	r3, r3, #5
 80041d4:	f003 0207 	and.w	r2, r3, #7
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4422      	add	r2, r4
 80041de:	609a      	str	r2, [r3, #8]
 80041e0:	e154      	b.n	800448c <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80041e2:	f7fe fb17 	bl	8002814 <HAL_RCC_GetPCLK1Freq>
 80041e6:	4602      	mov	r2, r0
 80041e8:	4613      	mov	r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4413      	add	r3, r2
 80041ee:	009a      	lsls	r2, r3, #2
 80041f0:	441a      	add	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	005b      	lsls	r3, r3, #1
 80041f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041fc:	4a6c      	ldr	r2, [pc, #432]	; (80043b0 <UART_SetConfig+0x32c>)
 80041fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004202:	095b      	lsrs	r3, r3, #5
 8004204:	011c      	lsls	r4, r3, #4
 8004206:	f7fe fb05 	bl	8002814 <HAL_RCC_GetPCLK1Freq>
 800420a:	4602      	mov	r2, r0
 800420c:	4613      	mov	r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4413      	add	r3, r2
 8004212:	009a      	lsls	r2, r3, #2
 8004214:	441a      	add	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	005b      	lsls	r3, r3, #1
 800421c:	fbb2 f5f3 	udiv	r5, r2, r3
 8004220:	f7fe faf8 	bl	8002814 <HAL_RCC_GetPCLK1Freq>
 8004224:	4602      	mov	r2, r0
 8004226:	4613      	mov	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4413      	add	r3, r2
 800422c:	009a      	lsls	r2, r3, #2
 800422e:	441a      	add	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	fbb2 f3f3 	udiv	r3, r2, r3
 800423a:	4a5d      	ldr	r2, [pc, #372]	; (80043b0 <UART_SetConfig+0x32c>)
 800423c:	fba2 2303 	umull	r2, r3, r2, r3
 8004240:	095b      	lsrs	r3, r3, #5
 8004242:	2264      	movs	r2, #100	; 0x64
 8004244:	fb02 f303 	mul.w	r3, r2, r3
 8004248:	1aeb      	subs	r3, r5, r3
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	3332      	adds	r3, #50	; 0x32
 800424e:	4a58      	ldr	r2, [pc, #352]	; (80043b0 <UART_SetConfig+0x32c>)
 8004250:	fba2 2303 	umull	r2, r3, r2, r3
 8004254:	095b      	lsrs	r3, r3, #5
 8004256:	005b      	lsls	r3, r3, #1
 8004258:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800425c:	441c      	add	r4, r3
 800425e:	f7fe fad9 	bl	8002814 <HAL_RCC_GetPCLK1Freq>
 8004262:	4602      	mov	r2, r0
 8004264:	4613      	mov	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	009a      	lsls	r2, r3, #2
 800426c:	441a      	add	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	fbb2 f5f3 	udiv	r5, r2, r3
 8004278:	f7fe facc 	bl	8002814 <HAL_RCC_GetPCLK1Freq>
 800427c:	4602      	mov	r2, r0
 800427e:	4613      	mov	r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	4413      	add	r3, r2
 8004284:	009a      	lsls	r2, r3, #2
 8004286:	441a      	add	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	005b      	lsls	r3, r3, #1
 800428e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004292:	4a47      	ldr	r2, [pc, #284]	; (80043b0 <UART_SetConfig+0x32c>)
 8004294:	fba2 2303 	umull	r2, r3, r2, r3
 8004298:	095b      	lsrs	r3, r3, #5
 800429a:	2264      	movs	r2, #100	; 0x64
 800429c:	fb02 f303 	mul.w	r3, r2, r3
 80042a0:	1aeb      	subs	r3, r5, r3
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	3332      	adds	r3, #50	; 0x32
 80042a6:	4a42      	ldr	r2, [pc, #264]	; (80043b0 <UART_SetConfig+0x32c>)
 80042a8:	fba2 2303 	umull	r2, r3, r2, r3
 80042ac:	095b      	lsrs	r3, r3, #5
 80042ae:	f003 0207 	and.w	r2, r3, #7
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4422      	add	r2, r4
 80042b8:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80042ba:	e0e7      	b.n	800448c <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a39      	ldr	r2, [pc, #228]	; (80043a8 <UART_SetConfig+0x324>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d004      	beq.n	80042d0 <UART_SetConfig+0x24c>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a38      	ldr	r2, [pc, #224]	; (80043ac <UART_SetConfig+0x328>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d171      	bne.n	80043b4 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80042d0:	f7fe fab4 	bl	800283c <HAL_RCC_GetPCLK2Freq>
 80042d4:	4602      	mov	r2, r0
 80042d6:	4613      	mov	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4413      	add	r3, r2
 80042dc:	009a      	lsls	r2, r3, #2
 80042de:	441a      	add	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ea:	4a31      	ldr	r2, [pc, #196]	; (80043b0 <UART_SetConfig+0x32c>)
 80042ec:	fba2 2303 	umull	r2, r3, r2, r3
 80042f0:	095b      	lsrs	r3, r3, #5
 80042f2:	011c      	lsls	r4, r3, #4
 80042f4:	f7fe faa2 	bl	800283c <HAL_RCC_GetPCLK2Freq>
 80042f8:	4602      	mov	r2, r0
 80042fa:	4613      	mov	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4413      	add	r3, r2
 8004300:	009a      	lsls	r2, r3, #2
 8004302:	441a      	add	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	fbb2 f5f3 	udiv	r5, r2, r3
 800430e:	f7fe fa95 	bl	800283c <HAL_RCC_GetPCLK2Freq>
 8004312:	4602      	mov	r2, r0
 8004314:	4613      	mov	r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	4413      	add	r3, r2
 800431a:	009a      	lsls	r2, r3, #2
 800431c:	441a      	add	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	fbb2 f3f3 	udiv	r3, r2, r3
 8004328:	4a21      	ldr	r2, [pc, #132]	; (80043b0 <UART_SetConfig+0x32c>)
 800432a:	fba2 2303 	umull	r2, r3, r2, r3
 800432e:	095b      	lsrs	r3, r3, #5
 8004330:	2264      	movs	r2, #100	; 0x64
 8004332:	fb02 f303 	mul.w	r3, r2, r3
 8004336:	1aeb      	subs	r3, r5, r3
 8004338:	011b      	lsls	r3, r3, #4
 800433a:	3332      	adds	r3, #50	; 0x32
 800433c:	4a1c      	ldr	r2, [pc, #112]	; (80043b0 <UART_SetConfig+0x32c>)
 800433e:	fba2 2303 	umull	r2, r3, r2, r3
 8004342:	095b      	lsrs	r3, r3, #5
 8004344:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004348:	441c      	add	r4, r3
 800434a:	f7fe fa77 	bl	800283c <HAL_RCC_GetPCLK2Freq>
 800434e:	4602      	mov	r2, r0
 8004350:	4613      	mov	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	009a      	lsls	r2, r3, #2
 8004358:	441a      	add	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	fbb2 f5f3 	udiv	r5, r2, r3
 8004364:	f7fe fa6a 	bl	800283c <HAL_RCC_GetPCLK2Freq>
 8004368:	4602      	mov	r2, r0
 800436a:	4613      	mov	r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	4413      	add	r3, r2
 8004370:	009a      	lsls	r2, r3, #2
 8004372:	441a      	add	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	fbb2 f3f3 	udiv	r3, r2, r3
 800437e:	4a0c      	ldr	r2, [pc, #48]	; (80043b0 <UART_SetConfig+0x32c>)
 8004380:	fba2 2303 	umull	r2, r3, r2, r3
 8004384:	095b      	lsrs	r3, r3, #5
 8004386:	2264      	movs	r2, #100	; 0x64
 8004388:	fb02 f303 	mul.w	r3, r2, r3
 800438c:	1aeb      	subs	r3, r5, r3
 800438e:	011b      	lsls	r3, r3, #4
 8004390:	3332      	adds	r3, #50	; 0x32
 8004392:	4a07      	ldr	r2, [pc, #28]	; (80043b0 <UART_SetConfig+0x32c>)
 8004394:	fba2 2303 	umull	r2, r3, r2, r3
 8004398:	095b      	lsrs	r3, r3, #5
 800439a:	f003 020f 	and.w	r2, r3, #15
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4422      	add	r2, r4
 80043a4:	609a      	str	r2, [r3, #8]
 80043a6:	e071      	b.n	800448c <UART_SetConfig+0x408>
 80043a8:	40011000 	.word	0x40011000
 80043ac:	40011400 	.word	0x40011400
 80043b0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80043b4:	f7fe fa2e 	bl	8002814 <HAL_RCC_GetPCLK1Freq>
 80043b8:	4602      	mov	r2, r0
 80043ba:	4613      	mov	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	009a      	lsls	r2, r3, #2
 80043c2:	441a      	add	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ce:	4a31      	ldr	r2, [pc, #196]	; (8004494 <UART_SetConfig+0x410>)
 80043d0:	fba2 2303 	umull	r2, r3, r2, r3
 80043d4:	095b      	lsrs	r3, r3, #5
 80043d6:	011c      	lsls	r4, r3, #4
 80043d8:	f7fe fa1c 	bl	8002814 <HAL_RCC_GetPCLK1Freq>
 80043dc:	4602      	mov	r2, r0
 80043de:	4613      	mov	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	4413      	add	r3, r2
 80043e4:	009a      	lsls	r2, r3, #2
 80043e6:	441a      	add	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	fbb2 f5f3 	udiv	r5, r2, r3
 80043f2:	f7fe fa0f 	bl	8002814 <HAL_RCC_GetPCLK1Freq>
 80043f6:	4602      	mov	r2, r0
 80043f8:	4613      	mov	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	4413      	add	r3, r2
 80043fe:	009a      	lsls	r2, r3, #2
 8004400:	441a      	add	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	fbb2 f3f3 	udiv	r3, r2, r3
 800440c:	4a21      	ldr	r2, [pc, #132]	; (8004494 <UART_SetConfig+0x410>)
 800440e:	fba2 2303 	umull	r2, r3, r2, r3
 8004412:	095b      	lsrs	r3, r3, #5
 8004414:	2264      	movs	r2, #100	; 0x64
 8004416:	fb02 f303 	mul.w	r3, r2, r3
 800441a:	1aeb      	subs	r3, r5, r3
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	3332      	adds	r3, #50	; 0x32
 8004420:	4a1c      	ldr	r2, [pc, #112]	; (8004494 <UART_SetConfig+0x410>)
 8004422:	fba2 2303 	umull	r2, r3, r2, r3
 8004426:	095b      	lsrs	r3, r3, #5
 8004428:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800442c:	441c      	add	r4, r3
 800442e:	f7fe f9f1 	bl	8002814 <HAL_RCC_GetPCLK1Freq>
 8004432:	4602      	mov	r2, r0
 8004434:	4613      	mov	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4413      	add	r3, r2
 800443a:	009a      	lsls	r2, r3, #2
 800443c:	441a      	add	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	fbb2 f5f3 	udiv	r5, r2, r3
 8004448:	f7fe f9e4 	bl	8002814 <HAL_RCC_GetPCLK1Freq>
 800444c:	4602      	mov	r2, r0
 800444e:	4613      	mov	r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4413      	add	r3, r2
 8004454:	009a      	lsls	r2, r3, #2
 8004456:	441a      	add	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004462:	4a0c      	ldr	r2, [pc, #48]	; (8004494 <UART_SetConfig+0x410>)
 8004464:	fba2 2303 	umull	r2, r3, r2, r3
 8004468:	095b      	lsrs	r3, r3, #5
 800446a:	2264      	movs	r2, #100	; 0x64
 800446c:	fb02 f303 	mul.w	r3, r2, r3
 8004470:	1aeb      	subs	r3, r5, r3
 8004472:	011b      	lsls	r3, r3, #4
 8004474:	3332      	adds	r3, #50	; 0x32
 8004476:	4a07      	ldr	r2, [pc, #28]	; (8004494 <UART_SetConfig+0x410>)
 8004478:	fba2 2303 	umull	r2, r3, r2, r3
 800447c:	095b      	lsrs	r3, r3, #5
 800447e:	f003 020f 	and.w	r2, r3, #15
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4422      	add	r2, r4
 8004488:	609a      	str	r2, [r3, #8]
}
 800448a:	e7ff      	b.n	800448c <UART_SetConfig+0x408>
 800448c:	bf00      	nop
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bdb0      	pop	{r4, r5, r7, pc}
 8004494:	51eb851f 	.word	0x51eb851f

08004498 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004498:	b084      	sub	sp, #16
 800449a:	b580      	push	{r7, lr}
 800449c:	b084      	sub	sp, #16
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	f107 001c 	add.w	r0, r7, #28
 80044a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d122      	bne.n	80044f6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80044c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80044d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d105      	bne.n	80044ea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f001 fa76 	bl	80059dc <USB_CoreReset>
 80044f0:	4603      	mov	r3, r0
 80044f2:	73fb      	strb	r3, [r7, #15]
 80044f4:	e01a      	b.n	800452c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f001 fa6a 	bl	80059dc <USB_CoreReset>
 8004508:	4603      	mov	r3, r0
 800450a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800450c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800450e:	2b00      	cmp	r3, #0
 8004510:	d106      	bne.n	8004520 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004516:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	639a      	str	r2, [r3, #56]	; 0x38
 800451e:	e005      	b.n	800452c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004524:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800452c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452e:	2b01      	cmp	r3, #1
 8004530:	d10b      	bne.n	800454a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f043 0206 	orr.w	r2, r3, #6
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f043 0220 	orr.w	r2, r3, #32
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800454a:	7bfb      	ldrb	r3, [r7, #15]
}
 800454c:	4618      	mov	r0, r3
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004556:	b004      	add	sp, #16
 8004558:	4770      	bx	lr
	...

0800455c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800455c:	b480      	push	{r7}
 800455e:	b087      	sub	sp, #28
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	4613      	mov	r3, r2
 8004568:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800456a:	79fb      	ldrb	r3, [r7, #7]
 800456c:	2b02      	cmp	r3, #2
 800456e:	d165      	bne.n	800463c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	4a41      	ldr	r2, [pc, #260]	; (8004678 <USB_SetTurnaroundTime+0x11c>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d906      	bls.n	8004586 <USB_SetTurnaroundTime+0x2a>
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	4a40      	ldr	r2, [pc, #256]	; (800467c <USB_SetTurnaroundTime+0x120>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d802      	bhi.n	8004586 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004580:	230f      	movs	r3, #15
 8004582:	617b      	str	r3, [r7, #20]
 8004584:	e062      	b.n	800464c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	4a3c      	ldr	r2, [pc, #240]	; (800467c <USB_SetTurnaroundTime+0x120>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d906      	bls.n	800459c <USB_SetTurnaroundTime+0x40>
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	4a3b      	ldr	r2, [pc, #236]	; (8004680 <USB_SetTurnaroundTime+0x124>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d802      	bhi.n	800459c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004596:	230e      	movs	r3, #14
 8004598:	617b      	str	r3, [r7, #20]
 800459a:	e057      	b.n	800464c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	4a38      	ldr	r2, [pc, #224]	; (8004680 <USB_SetTurnaroundTime+0x124>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d906      	bls.n	80045b2 <USB_SetTurnaroundTime+0x56>
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	4a37      	ldr	r2, [pc, #220]	; (8004684 <USB_SetTurnaroundTime+0x128>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d802      	bhi.n	80045b2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80045ac:	230d      	movs	r3, #13
 80045ae:	617b      	str	r3, [r7, #20]
 80045b0:	e04c      	b.n	800464c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	4a33      	ldr	r2, [pc, #204]	; (8004684 <USB_SetTurnaroundTime+0x128>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d906      	bls.n	80045c8 <USB_SetTurnaroundTime+0x6c>
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	4a32      	ldr	r2, [pc, #200]	; (8004688 <USB_SetTurnaroundTime+0x12c>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d802      	bhi.n	80045c8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80045c2:	230c      	movs	r3, #12
 80045c4:	617b      	str	r3, [r7, #20]
 80045c6:	e041      	b.n	800464c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	4a2f      	ldr	r2, [pc, #188]	; (8004688 <USB_SetTurnaroundTime+0x12c>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d906      	bls.n	80045de <USB_SetTurnaroundTime+0x82>
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	4a2e      	ldr	r2, [pc, #184]	; (800468c <USB_SetTurnaroundTime+0x130>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d802      	bhi.n	80045de <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80045d8:	230b      	movs	r3, #11
 80045da:	617b      	str	r3, [r7, #20]
 80045dc:	e036      	b.n	800464c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	4a2a      	ldr	r2, [pc, #168]	; (800468c <USB_SetTurnaroundTime+0x130>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d906      	bls.n	80045f4 <USB_SetTurnaroundTime+0x98>
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	4a29      	ldr	r2, [pc, #164]	; (8004690 <USB_SetTurnaroundTime+0x134>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d802      	bhi.n	80045f4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80045ee:	230a      	movs	r3, #10
 80045f0:	617b      	str	r3, [r7, #20]
 80045f2:	e02b      	b.n	800464c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	4a26      	ldr	r2, [pc, #152]	; (8004690 <USB_SetTurnaroundTime+0x134>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d906      	bls.n	800460a <USB_SetTurnaroundTime+0xae>
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	4a25      	ldr	r2, [pc, #148]	; (8004694 <USB_SetTurnaroundTime+0x138>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d802      	bhi.n	800460a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004604:	2309      	movs	r3, #9
 8004606:	617b      	str	r3, [r7, #20]
 8004608:	e020      	b.n	800464c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	4a21      	ldr	r2, [pc, #132]	; (8004694 <USB_SetTurnaroundTime+0x138>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d906      	bls.n	8004620 <USB_SetTurnaroundTime+0xc4>
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	4a20      	ldr	r2, [pc, #128]	; (8004698 <USB_SetTurnaroundTime+0x13c>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d802      	bhi.n	8004620 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800461a:	2308      	movs	r3, #8
 800461c:	617b      	str	r3, [r7, #20]
 800461e:	e015      	b.n	800464c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	4a1d      	ldr	r2, [pc, #116]	; (8004698 <USB_SetTurnaroundTime+0x13c>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d906      	bls.n	8004636 <USB_SetTurnaroundTime+0xda>
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	4a1c      	ldr	r2, [pc, #112]	; (800469c <USB_SetTurnaroundTime+0x140>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d802      	bhi.n	8004636 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004630:	2307      	movs	r3, #7
 8004632:	617b      	str	r3, [r7, #20]
 8004634:	e00a      	b.n	800464c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004636:	2306      	movs	r3, #6
 8004638:	617b      	str	r3, [r7, #20]
 800463a:	e007      	b.n	800464c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800463c:	79fb      	ldrb	r3, [r7, #7]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d102      	bne.n	8004648 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004642:	2309      	movs	r3, #9
 8004644:	617b      	str	r3, [r7, #20]
 8004646:	e001      	b.n	800464c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004648:	2309      	movs	r3, #9
 800464a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	68da      	ldr	r2, [r3, #12]
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	029b      	lsls	r3, r3, #10
 8004660:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004664:	431a      	orrs	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	371c      	adds	r7, #28
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr
 8004678:	00d8acbf 	.word	0x00d8acbf
 800467c:	00e4e1bf 	.word	0x00e4e1bf
 8004680:	00f423ff 	.word	0x00f423ff
 8004684:	0106737f 	.word	0x0106737f
 8004688:	011a499f 	.word	0x011a499f
 800468c:	01312cff 	.word	0x01312cff
 8004690:	014ca43f 	.word	0x014ca43f
 8004694:	016e35ff 	.word	0x016e35ff
 8004698:	01a6ab1f 	.word	0x01a6ab1f
 800469c:	01e847ff 	.word	0x01e847ff

080046a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f043 0201 	orr.w	r2, r3, #1
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046c2:	b480      	push	{r7}
 80046c4:	b083      	sub	sp, #12
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f023 0201 	bic.w	r2, r3, #1
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	460b      	mov	r3, r1
 80046ee:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80046fc:	78fb      	ldrb	r3, [r7, #3]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d106      	bne.n	8004710 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	60da      	str	r2, [r3, #12]
 800470e:	e00b      	b.n	8004728 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004710:	78fb      	ldrb	r3, [r7, #3]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d106      	bne.n	8004724 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	60da      	str	r2, [r3, #12]
 8004722:	e001      	b.n	8004728 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e003      	b.n	8004730 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004728:	2032      	movs	r0, #50	; 0x32
 800472a:	f7fb ff65 	bl	80005f8 <HAL_Delay>

  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3708      	adds	r7, #8
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004738:	b084      	sub	sp, #16
 800473a:	b580      	push	{r7, lr}
 800473c:	b086      	sub	sp, #24
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
 8004742:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004746:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800474a:	2300      	movs	r3, #0
 800474c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004752:	2300      	movs	r3, #0
 8004754:	613b      	str	r3, [r7, #16]
 8004756:	e009      	b.n	800476c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	3340      	adds	r3, #64	; 0x40
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	2200      	movs	r2, #0
 8004764:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	3301      	adds	r3, #1
 800476a:	613b      	str	r3, [r7, #16]
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	2b0e      	cmp	r3, #14
 8004770:	d9f2      	bls.n	8004758 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004774:	2b00      	cmp	r3, #0
 8004776:	d112      	bne.n	800479e <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	601a      	str	r2, [r3, #0]
 800479c:	e005      	b.n	80047aa <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80047b0:	461a      	mov	r2, r3
 80047b2:	2300      	movs	r3, #0
 80047b4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047bc:	4619      	mov	r1, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c4:	461a      	mov	r2, r3
 80047c6:	680b      	ldr	r3, [r1, #0]
 80047c8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d10c      	bne.n	80047ea <USB_DevInit+0xb2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80047d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d104      	bne.n	80047e0 <USB_DevInit+0xa8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80047d6:	2100      	movs	r1, #0
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 f961 	bl	8004aa0 <USB_SetDevSpeed>
 80047de:	e008      	b.n	80047f2 <USB_DevInit+0xba>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80047e0:	2101      	movs	r1, #1
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f95c 	bl	8004aa0 <USB_SetDevSpeed>
 80047e8:	e003      	b.n	80047f2 <USB_DevInit+0xba>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80047ea:	2103      	movs	r1, #3
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 f957 	bl	8004aa0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80047f2:	2110      	movs	r1, #16
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 f90b 	bl	8004a10 <USB_FlushTxFifo>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d001      	beq.n	8004804 <USB_DevInit+0xcc>
  {
    ret = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 f929 	bl	8004a5c <USB_FlushRxFifo>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <USB_DevInit+0xdc>
  {
    ret = HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800481a:	461a      	mov	r2, r3
 800481c:	2300      	movs	r3, #0
 800481e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004826:	461a      	mov	r2, r3
 8004828:	2300      	movs	r3, #0
 800482a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004832:	461a      	mov	r2, r3
 8004834:	2300      	movs	r3, #0
 8004836:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004838:	2300      	movs	r3, #0
 800483a:	613b      	str	r3, [r7, #16]
 800483c:	e043      	b.n	80048c6 <USB_DevInit+0x18e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	015a      	lsls	r2, r3, #5
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	4413      	add	r3, r2
 8004846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004850:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004854:	d118      	bne.n	8004888 <USB_DevInit+0x150>
    {
      if (i == 0U)
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10a      	bne.n	8004872 <USB_DevInit+0x13a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	015a      	lsls	r2, r3, #5
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4413      	add	r3, r2
 8004864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004868:	461a      	mov	r2, r3
 800486a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800486e:	6013      	str	r3, [r2, #0]
 8004870:	e013      	b.n	800489a <USB_DevInit+0x162>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	015a      	lsls	r2, r3, #5
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	4413      	add	r3, r2
 800487a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800487e:	461a      	mov	r2, r3
 8004880:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004884:	6013      	str	r3, [r2, #0]
 8004886:	e008      	b.n	800489a <USB_DevInit+0x162>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	015a      	lsls	r2, r3, #5
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	4413      	add	r3, r2
 8004890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004894:	461a      	mov	r2, r3
 8004896:	2300      	movs	r3, #0
 8004898:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	015a      	lsls	r2, r3, #5
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	4413      	add	r3, r2
 80048a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a6:	461a      	mov	r2, r3
 80048a8:	2300      	movs	r3, #0
 80048aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	015a      	lsls	r2, r3, #5
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4413      	add	r3, r2
 80048b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048b8:	461a      	mov	r2, r3
 80048ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	3301      	adds	r3, #1
 80048c4:	613b      	str	r3, [r7, #16]
 80048c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d3b7      	bcc.n	800483e <USB_DevInit+0x106>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048ce:	2300      	movs	r3, #0
 80048d0:	613b      	str	r3, [r7, #16]
 80048d2:	e043      	b.n	800495c <USB_DevInit+0x224>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	015a      	lsls	r2, r3, #5
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	4413      	add	r3, r2
 80048dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048ea:	d118      	bne.n	800491e <USB_DevInit+0x1e6>
    {
      if (i == 0U)
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10a      	bne.n	8004908 <USB_DevInit+0x1d0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	015a      	lsls	r2, r3, #5
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	4413      	add	r3, r2
 80048fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048fe:	461a      	mov	r2, r3
 8004900:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004904:	6013      	str	r3, [r2, #0]
 8004906:	e013      	b.n	8004930 <USB_DevInit+0x1f8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	015a      	lsls	r2, r3, #5
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4413      	add	r3, r2
 8004910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004914:	461a      	mov	r2, r3
 8004916:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800491a:	6013      	str	r3, [r2, #0]
 800491c:	e008      	b.n	8004930 <USB_DevInit+0x1f8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	015a      	lsls	r2, r3, #5
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	4413      	add	r3, r2
 8004926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800492a:	461a      	mov	r2, r3
 800492c:	2300      	movs	r3, #0
 800492e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	015a      	lsls	r2, r3, #5
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4413      	add	r3, r2
 8004938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800493c:	461a      	mov	r2, r3
 800493e:	2300      	movs	r3, #0
 8004940:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	015a      	lsls	r2, r3, #5
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	4413      	add	r3, r2
 800494a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800494e:	461a      	mov	r2, r3
 8004950:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004954:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	3301      	adds	r3, #1
 800495a:	613b      	str	r3, [r7, #16]
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	429a      	cmp	r2, r3
 8004962:	d3b7      	bcc.n	80048d4 <USB_DevInit+0x19c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004972:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004976:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8004978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497a:	2b01      	cmp	r3, #1
 800497c:	d111      	bne.n	80049a2 <USB_DevInit+0x26a>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004984:	461a      	mov	r2, r3
 8004986:	4b20      	ldr	r3, [pc, #128]	; (8004a08 <USB_DevInit+0x2d0>)
 8004988:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800499c:	f043 0303 	orr.w	r3, r3, #3
 80049a0:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80049ae:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80049b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d105      	bne.n	80049c2 <USB_DevInit+0x28a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	f043 0210 	orr.w	r2, r3, #16
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	699a      	ldr	r2, [r3, #24]
 80049c6:	4b11      	ldr	r3, [pc, #68]	; (8004a0c <USB_DevInit+0x2d4>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80049ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d005      	beq.n	80049e0 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	f043 0208 	orr.w	r2, r3, #8
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80049e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d107      	bne.n	80049f6 <USB_DevInit+0x2be>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049ee:	f043 0304 	orr.w	r3, r3, #4
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80049f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3718      	adds	r7, #24
 80049fc:	46bd      	mov	sp, r7
 80049fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a02:	b004      	add	sp, #16
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	00800100 	.word	0x00800100
 8004a0c:	803c3800 	.word	0x803c3800

08004a10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	019b      	lsls	r3, r3, #6
 8004a22:	f043 0220 	orr.w	r2, r3, #32
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	60fb      	str	r3, [r7, #12]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4a09      	ldr	r2, [pc, #36]	; (8004a58 <USB_FlushTxFifo+0x48>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d901      	bls.n	8004a3c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e006      	b.n	8004a4a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	f003 0320 	and.w	r3, r3, #32
 8004a44:	2b20      	cmp	r3, #32
 8004a46:	d0f0      	beq.n	8004a2a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3714      	adds	r7, #20
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	00030d40 	.word	0x00030d40

08004a5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004a64:	2300      	movs	r3, #0
 8004a66:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2210      	movs	r2, #16
 8004a6c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	3301      	adds	r3, #1
 8004a72:	60fb      	str	r3, [r7, #12]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4a09      	ldr	r2, [pc, #36]	; (8004a9c <USB_FlushRxFifo+0x40>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d901      	bls.n	8004a80 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e006      	b.n	8004a8e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	f003 0310 	and.w	r3, r3, #16
 8004a88:	2b10      	cmp	r3, #16
 8004a8a:	d0f0      	beq.n	8004a6e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	00030d40 	.word	0x00030d40

08004aa0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	78fb      	ldrb	r3, [r7, #3]
 8004aba:	68f9      	ldr	r1, [r7, #12]
 8004abc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3714      	adds	r7, #20
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b087      	sub	sp, #28
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f003 0306 	and.w	r3, r3, #6
 8004aea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d102      	bne.n	8004af8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004af2:	2300      	movs	r3, #0
 8004af4:	75fb      	strb	r3, [r7, #23]
 8004af6:	e00a      	b.n	8004b0e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d002      	beq.n	8004b04 <USB_GetDevSpeed+0x32>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2b06      	cmp	r3, #6
 8004b02:	d102      	bne.n	8004b0a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004b04:	2302      	movs	r3, #2
 8004b06:	75fb      	strb	r3, [r7, #23]
 8004b08:	e001      	b.n	8004b0e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004b0a:	230f      	movs	r3, #15
 8004b0c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	371c      	adds	r7, #28
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	785b      	ldrb	r3, [r3, #1]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d13a      	bne.n	8004bae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b3e:	69da      	ldr	r2, [r3, #28]
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	f003 030f 	and.w	r3, r3, #15
 8004b48:	2101      	movs	r1, #1
 8004b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	68f9      	ldr	r1, [r7, #12]
 8004b52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b56:	4313      	orrs	r3, r2
 8004b58:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	015a      	lsls	r2, r3, #5
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	4413      	add	r3, r2
 8004b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d155      	bne.n	8004c1c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	015a      	lsls	r2, r3, #5
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	4413      	add	r3, r2
 8004b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	78db      	ldrb	r3, [r3, #3]
 8004b8a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b8c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	059b      	lsls	r3, r3, #22
 8004b92:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b94:	4313      	orrs	r3, r2
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	0151      	lsls	r1, r2, #5
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	440a      	add	r2, r1
 8004b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004baa:	6013      	str	r3, [r2, #0]
 8004bac:	e036      	b.n	8004c1c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bb4:	69da      	ldr	r2, [r3, #28]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	f003 030f 	and.w	r3, r3, #15
 8004bbe:	2101      	movs	r1, #1
 8004bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8004bc4:	041b      	lsls	r3, r3, #16
 8004bc6:	68f9      	ldr	r1, [r7, #12]
 8004bc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d11a      	bne.n	8004c1c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	015a      	lsls	r2, r3, #5
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	4413      	add	r3, r2
 8004bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	78db      	ldrb	r3, [r3, #3]
 8004c00:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004c02:	430b      	orrs	r3, r1
 8004c04:	4313      	orrs	r3, r2
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	0151      	lsls	r1, r2, #5
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	440a      	add	r2, r1
 8004c0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c1a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3714      	adds	r7, #20
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
	...

08004c2c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	785b      	ldrb	r3, [r3, #1]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d135      	bne.n	8004cb4 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	f003 030f 	and.w	r3, r3, #15
 8004c58:	2101      	movs	r1, #1
 8004c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	43db      	mvns	r3, r3
 8004c62:	68f9      	ldr	r1, [r7, #12]
 8004c64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c68:	4013      	ands	r3, r2
 8004c6a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c72:	69da      	ldr	r2, [r3, #28]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	f003 030f 	and.w	r3, r3, #15
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	43db      	mvns	r3, r3
 8004c86:	68f9      	ldr	r1, [r7, #12]
 8004c88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	015a      	lsls	r2, r3, #5
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4413      	add	r3, r2
 8004c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	0159      	lsls	r1, r3, #5
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	440b      	add	r3, r1
 8004ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004caa:	4619      	mov	r1, r3
 8004cac:	4b1f      	ldr	r3, [pc, #124]	; (8004d2c <USB_DeactivateEndpoint+0x100>)
 8004cae:	4013      	ands	r3, r2
 8004cb0:	600b      	str	r3, [r1, #0]
 8004cb2:	e034      	b.n	8004d1e <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	f003 030f 	and.w	r3, r3, #15
 8004cc4:	2101      	movs	r1, #1
 8004cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cca:	041b      	lsls	r3, r3, #16
 8004ccc:	43db      	mvns	r3, r3
 8004cce:	68f9      	ldr	r1, [r7, #12]
 8004cd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cde:	69da      	ldr	r2, [r3, #28]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	f003 030f 	and.w	r3, r3, #15
 8004ce8:	2101      	movs	r1, #1
 8004cea:	fa01 f303 	lsl.w	r3, r1, r3
 8004cee:	041b      	lsls	r3, r3, #16
 8004cf0:	43db      	mvns	r3, r3
 8004cf2:	68f9      	ldr	r1, [r7, #12]
 8004cf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	015a      	lsls	r2, r3, #5
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4413      	add	r3, r2
 8004d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	0159      	lsls	r1, r3, #5
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	440b      	add	r3, r1
 8004d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d16:	4619      	mov	r1, r3
 8004d18:	4b05      	ldr	r3, [pc, #20]	; (8004d30 <USB_DeactivateEndpoint+0x104>)
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3714      	adds	r7, #20
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr
 8004d2c:	ec337800 	.word	0xec337800
 8004d30:	eff37800 	.word	0xeff37800

08004d34 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b08a      	sub	sp, #40	; 0x28
 8004d38:	af02      	add	r7, sp, #8
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	785b      	ldrb	r3, [r3, #1]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	f040 815c 	bne.w	800500e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d132      	bne.n	8004dc4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	015a      	lsls	r2, r3, #5
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	4413      	add	r3, r2
 8004d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	69ba      	ldr	r2, [r7, #24]
 8004d6e:	0151      	lsls	r1, r2, #5
 8004d70:	69fa      	ldr	r2, [r7, #28]
 8004d72:	440a      	add	r2, r1
 8004d74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d78:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d7c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	015a      	lsls	r2, r3, #5
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	4413      	add	r3, r2
 8004d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	69ba      	ldr	r2, [r7, #24]
 8004d92:	0151      	lsls	r1, r2, #5
 8004d94:	69fa      	ldr	r2, [r7, #28]
 8004d96:	440a      	add	r2, r1
 8004d98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004da0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	015a      	lsls	r2, r3, #5
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	4413      	add	r3, r2
 8004daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	0151      	lsls	r1, r2, #5
 8004db4:	69fa      	ldr	r2, [r7, #28]
 8004db6:	440a      	add	r2, r1
 8004db8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dbc:	0cdb      	lsrs	r3, r3, #19
 8004dbe:	04db      	lsls	r3, r3, #19
 8004dc0:	6113      	str	r3, [r2, #16]
 8004dc2:	e074      	b.n	8004eae <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	015a      	lsls	r2, r3, #5
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	4413      	add	r3, r2
 8004dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	69ba      	ldr	r2, [r7, #24]
 8004dd4:	0151      	lsls	r1, r2, #5
 8004dd6:	69fa      	ldr	r2, [r7, #28]
 8004dd8:	440a      	add	r2, r1
 8004dda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dde:	0cdb      	lsrs	r3, r3, #19
 8004de0:	04db      	lsls	r3, r3, #19
 8004de2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	015a      	lsls	r2, r3, #5
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	4413      	add	r3, r2
 8004dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	69ba      	ldr	r2, [r7, #24]
 8004df4:	0151      	lsls	r1, r2, #5
 8004df6:	69fa      	ldr	r2, [r7, #28]
 8004df8:	440a      	add	r2, r1
 8004dfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dfe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e02:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e06:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	015a      	lsls	r2, r3, #5
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	4413      	add	r3, r2
 8004e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e14:	691a      	ldr	r2, [r3, #16]
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	6959      	ldr	r1, [r3, #20]
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	440b      	add	r3, r1
 8004e20:	1e59      	subs	r1, r3, #1
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e2a:	04d9      	lsls	r1, r3, #19
 8004e2c:	4b9d      	ldr	r3, [pc, #628]	; (80050a4 <USB_EPStartXfer+0x370>)
 8004e2e:	400b      	ands	r3, r1
 8004e30:	69b9      	ldr	r1, [r7, #24]
 8004e32:	0148      	lsls	r0, r1, #5
 8004e34:	69f9      	ldr	r1, [r7, #28]
 8004e36:	4401      	add	r1, r0
 8004e38:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e4c:	691a      	ldr	r2, [r3, #16]
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e56:	69b9      	ldr	r1, [r7, #24]
 8004e58:	0148      	lsls	r0, r1, #5
 8004e5a:	69f9      	ldr	r1, [r7, #28]
 8004e5c:	4401      	add	r1, r0
 8004e5e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e62:	4313      	orrs	r3, r2
 8004e64:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	78db      	ldrb	r3, [r3, #3]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d11f      	bne.n	8004eae <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	015a      	lsls	r2, r3, #5
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	4413      	add	r3, r2
 8004e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	0151      	lsls	r1, r2, #5
 8004e80:	69fa      	ldr	r2, [r7, #28]
 8004e82:	440a      	add	r2, r1
 8004e84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e88:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004e8c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	015a      	lsls	r2, r3, #5
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	4413      	add	r3, r2
 8004e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	0151      	lsls	r1, r2, #5
 8004ea0:	69fa      	ldr	r2, [r7, #28]
 8004ea2:	440a      	add	r2, r1
 8004ea4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ea8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004eac:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004eae:	79fb      	ldrb	r3, [r7, #7]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d14b      	bne.n	8004f4c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d009      	beq.n	8004ed0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec8:	461a      	mov	r2, r3
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	78db      	ldrb	r3, [r3, #3]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d128      	bne.n	8004f2a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d110      	bne.n	8004f0a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	015a      	lsls	r2, r3, #5
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	4413      	add	r3, r2
 8004ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	0151      	lsls	r1, r2, #5
 8004efa:	69fa      	ldr	r2, [r7, #28]
 8004efc:	440a      	add	r2, r1
 8004efe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f06:	6013      	str	r3, [r2, #0]
 8004f08:	e00f      	b.n	8004f2a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	015a      	lsls	r2, r3, #5
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	4413      	add	r3, r2
 8004f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	0151      	lsls	r1, r2, #5
 8004f1c:	69fa      	ldr	r2, [r7, #28]
 8004f1e:	440a      	add	r2, r1
 8004f20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f28:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	015a      	lsls	r2, r3, #5
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	0151      	lsls	r1, r2, #5
 8004f3c:	69fa      	ldr	r2, [r7, #28]
 8004f3e:	440a      	add	r2, r1
 8004f40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f44:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f48:	6013      	str	r3, [r2, #0]
 8004f4a:	e12f      	b.n	80051ac <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	015a      	lsls	r2, r3, #5
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	69ba      	ldr	r2, [r7, #24]
 8004f5c:	0151      	lsls	r1, r2, #5
 8004f5e:	69fa      	ldr	r2, [r7, #28]
 8004f60:	440a      	add	r2, r1
 8004f62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f6a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	78db      	ldrb	r3, [r3, #3]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d015      	beq.n	8004fa0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f000 8117 	beq.w	80051ac <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	f003 030f 	and.w	r3, r3, #15
 8004f8e:	2101      	movs	r1, #1
 8004f90:	fa01 f303 	lsl.w	r3, r1, r3
 8004f94:	69f9      	ldr	r1, [r7, #28]
 8004f96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	634b      	str	r3, [r1, #52]	; 0x34
 8004f9e:	e105      	b.n	80051ac <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d110      	bne.n	8004fd2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	015a      	lsls	r2, r3, #5
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	69ba      	ldr	r2, [r7, #24]
 8004fc0:	0151      	lsls	r1, r2, #5
 8004fc2:	69fa      	ldr	r2, [r7, #28]
 8004fc4:	440a      	add	r2, r1
 8004fc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fce:	6013      	str	r3, [r2, #0]
 8004fd0:	e00f      	b.n	8004ff2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	015a      	lsls	r2, r3, #5
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	4413      	add	r3, r2
 8004fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	0151      	lsls	r1, r2, #5
 8004fe4:	69fa      	ldr	r2, [r7, #28]
 8004fe6:	440a      	add	r2, r1
 8004fe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ff0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	68d9      	ldr	r1, [r3, #12]
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	781a      	ldrb	r2, [r3, #0]
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	b298      	uxth	r0, r3
 8005000:	79fb      	ldrb	r3, [r7, #7]
 8005002:	9300      	str	r3, [sp, #0]
 8005004:	4603      	mov	r3, r0
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f000 fa2b 	bl	8005462 <USB_WritePacket>
 800500c:	e0ce      	b.n	80051ac <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	015a      	lsls	r2, r3, #5
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	4413      	add	r3, r2
 8005016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	0151      	lsls	r1, r2, #5
 8005020:	69fa      	ldr	r2, [r7, #28]
 8005022:	440a      	add	r2, r1
 8005024:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005028:	0cdb      	lsrs	r3, r3, #19
 800502a:	04db      	lsls	r3, r3, #19
 800502c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	015a      	lsls	r2, r3, #5
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	4413      	add	r3, r2
 8005036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	0151      	lsls	r1, r2, #5
 8005040:	69fa      	ldr	r2, [r7, #28]
 8005042:	440a      	add	r2, r1
 8005044:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005048:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800504c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005050:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d126      	bne.n	80050a8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	015a      	lsls	r2, r3, #5
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	4413      	add	r3, r2
 8005062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005066:	691a      	ldr	r2, [r3, #16]
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005070:	69b9      	ldr	r1, [r7, #24]
 8005072:	0148      	lsls	r0, r1, #5
 8005074:	69f9      	ldr	r1, [r7, #28]
 8005076:	4401      	add	r1, r0
 8005078:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800507c:	4313      	orrs	r3, r2
 800507e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	015a      	lsls	r2, r3, #5
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	4413      	add	r3, r2
 8005088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	69ba      	ldr	r2, [r7, #24]
 8005090:	0151      	lsls	r1, r2, #5
 8005092:	69fa      	ldr	r2, [r7, #28]
 8005094:	440a      	add	r2, r1
 8005096:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800509a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800509e:	6113      	str	r3, [r2, #16]
 80050a0:	e036      	b.n	8005110 <USB_EPStartXfer+0x3dc>
 80050a2:	bf00      	nop
 80050a4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	695a      	ldr	r2, [r3, #20]
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	4413      	add	r3, r2
 80050b2:	1e5a      	subs	r2, r3, #1
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050bc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	015a      	lsls	r2, r3, #5
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	4413      	add	r3, r2
 80050c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ca:	691a      	ldr	r2, [r3, #16]
 80050cc:	8afb      	ldrh	r3, [r7, #22]
 80050ce:	04d9      	lsls	r1, r3, #19
 80050d0:	4b39      	ldr	r3, [pc, #228]	; (80051b8 <USB_EPStartXfer+0x484>)
 80050d2:	400b      	ands	r3, r1
 80050d4:	69b9      	ldr	r1, [r7, #24]
 80050d6:	0148      	lsls	r0, r1, #5
 80050d8:	69f9      	ldr	r1, [r7, #28]
 80050da:	4401      	add	r1, r0
 80050dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80050e0:	4313      	orrs	r3, r2
 80050e2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f0:	691a      	ldr	r2, [r3, #16]
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	8af9      	ldrh	r1, [r7, #22]
 80050f8:	fb01 f303 	mul.w	r3, r1, r3
 80050fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005100:	69b9      	ldr	r1, [r7, #24]
 8005102:	0148      	lsls	r0, r1, #5
 8005104:	69f9      	ldr	r1, [r7, #28]
 8005106:	4401      	add	r1, r0
 8005108:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800510c:	4313      	orrs	r3, r2
 800510e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005110:	79fb      	ldrb	r3, [r7, #7]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d10d      	bne.n	8005132 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d009      	beq.n	8005132 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	68d9      	ldr	r1, [r3, #12]
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	015a      	lsls	r2, r3, #5
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	4413      	add	r3, r2
 800512a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800512e:	460a      	mov	r2, r1
 8005130:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	78db      	ldrb	r3, [r3, #3]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d128      	bne.n	800518c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005146:	2b00      	cmp	r3, #0
 8005148:	d110      	bne.n	800516c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	015a      	lsls	r2, r3, #5
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	4413      	add	r3, r2
 8005152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	69ba      	ldr	r2, [r7, #24]
 800515a:	0151      	lsls	r1, r2, #5
 800515c:	69fa      	ldr	r2, [r7, #28]
 800515e:	440a      	add	r2, r1
 8005160:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005164:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005168:	6013      	str	r3, [r2, #0]
 800516a:	e00f      	b.n	800518c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	015a      	lsls	r2, r3, #5
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	4413      	add	r3, r2
 8005174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	69ba      	ldr	r2, [r7, #24]
 800517c:	0151      	lsls	r1, r2, #5
 800517e:	69fa      	ldr	r2, [r7, #28]
 8005180:	440a      	add	r2, r1
 8005182:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005186:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800518a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	015a      	lsls	r2, r3, #5
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	4413      	add	r3, r2
 8005194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	69ba      	ldr	r2, [r7, #24]
 800519c:	0151      	lsls	r1, r2, #5
 800519e:	69fa      	ldr	r2, [r7, #28]
 80051a0:	440a      	add	r2, r1
 80051a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3720      	adds	r7, #32
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	1ff80000 	.word	0x1ff80000

080051bc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80051bc:	b480      	push	{r7}
 80051be:	b087      	sub	sp, #28
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	4613      	mov	r3, r2
 80051c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	785b      	ldrb	r3, [r3, #1]
 80051d8:	2b01      	cmp	r3, #1
 80051da:	f040 80cd 	bne.w	8005378 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d132      	bne.n	800524c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	015a      	lsls	r2, r3, #5
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	4413      	add	r3, r2
 80051ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	0151      	lsls	r1, r2, #5
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	440a      	add	r2, r1
 80051fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005200:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005204:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005208:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	015a      	lsls	r2, r3, #5
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	4413      	add	r3, r2
 8005212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	0151      	lsls	r1, r2, #5
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	440a      	add	r2, r1
 8005220:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005224:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005228:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	015a      	lsls	r2, r3, #5
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	4413      	add	r3, r2
 8005232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	0151      	lsls	r1, r2, #5
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	440a      	add	r2, r1
 8005240:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005244:	0cdb      	lsrs	r3, r3, #19
 8005246:	04db      	lsls	r3, r3, #19
 8005248:	6113      	str	r3, [r2, #16]
 800524a:	e04e      	b.n	80052ea <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	015a      	lsls	r2, r3, #5
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	4413      	add	r3, r2
 8005254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	0151      	lsls	r1, r2, #5
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	440a      	add	r2, r1
 8005262:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005266:	0cdb      	lsrs	r3, r3, #19
 8005268:	04db      	lsls	r3, r3, #19
 800526a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	015a      	lsls	r2, r3, #5
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	4413      	add	r3, r2
 8005274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	0151      	lsls	r1, r2, #5
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	440a      	add	r2, r1
 8005282:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005286:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800528a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800528e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	695a      	ldr	r2, [r3, #20]
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	429a      	cmp	r2, r3
 800529a:	d903      	bls.n	80052a4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	689a      	ldr	r2, [r3, #8]
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	015a      	lsls	r2, r3, #5
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	0151      	lsls	r1, r2, #5
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	440a      	add	r2, r1
 80052ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	015a      	lsls	r2, r3, #5
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	4413      	add	r3, r2
 80052cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d0:	691a      	ldr	r2, [r3, #16]
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052da:	6939      	ldr	r1, [r7, #16]
 80052dc:	0148      	lsls	r0, r1, #5
 80052de:	6979      	ldr	r1, [r7, #20]
 80052e0:	4401      	add	r1, r0
 80052e2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80052e6:	4313      	orrs	r3, r2
 80052e8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80052ea:	79fb      	ldrb	r3, [r7, #7]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d11e      	bne.n	800532e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d009      	beq.n	800530c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	015a      	lsls	r2, r3, #5
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	4413      	add	r3, r2
 8005300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005304:	461a      	mov	r2, r3
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	015a      	lsls	r2, r3, #5
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	4413      	add	r3, r2
 8005314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	0151      	lsls	r1, r2, #5
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	440a      	add	r2, r1
 8005322:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005326:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800532a:	6013      	str	r3, [r2, #0]
 800532c:	e092      	b.n	8005454 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	015a      	lsls	r2, r3, #5
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	4413      	add	r3, r2
 8005336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	0151      	lsls	r1, r2, #5
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	440a      	add	r2, r1
 8005344:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005348:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800534c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d07e      	beq.n	8005454 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800535c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	f003 030f 	and.w	r3, r3, #15
 8005366:	2101      	movs	r1, #1
 8005368:	fa01 f303 	lsl.w	r3, r1, r3
 800536c:	6979      	ldr	r1, [r7, #20]
 800536e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005372:	4313      	orrs	r3, r2
 8005374:	634b      	str	r3, [r1, #52]	; 0x34
 8005376:	e06d      	b.n	8005454 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	015a      	lsls	r2, r3, #5
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	4413      	add	r3, r2
 8005380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	693a      	ldr	r2, [r7, #16]
 8005388:	0151      	lsls	r1, r2, #5
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	440a      	add	r2, r1
 800538e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005392:	0cdb      	lsrs	r3, r3, #19
 8005394:	04db      	lsls	r3, r3, #19
 8005396:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	015a      	lsls	r2, r3, #5
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	4413      	add	r3, r2
 80053a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	0151      	lsls	r1, r2, #5
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	440a      	add	r2, r1
 80053ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053ba:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d003      	beq.n	80053cc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	689a      	ldr	r2, [r3, #8]
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	015a      	lsls	r2, r3, #5
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	4413      	add	r3, r2
 80053d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	0151      	lsls	r1, r2, #5
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	440a      	add	r2, r1
 80053e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053ea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	015a      	lsls	r2, r3, #5
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	4413      	add	r3, r2
 80053f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f8:	691a      	ldr	r2, [r3, #16]
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005402:	6939      	ldr	r1, [r7, #16]
 8005404:	0148      	lsls	r0, r1, #5
 8005406:	6979      	ldr	r1, [r7, #20]
 8005408:	4401      	add	r1, r0
 800540a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800540e:	4313      	orrs	r3, r2
 8005410:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005412:	79fb      	ldrb	r3, [r7, #7]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d10d      	bne.n	8005434 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d009      	beq.n	8005434 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	68d9      	ldr	r1, [r3, #12]
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	4413      	add	r3, r2
 800542c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005430:	460a      	mov	r2, r1
 8005432:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	4413      	add	r3, r2
 800543c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	0151      	lsls	r1, r2, #5
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	440a      	add	r2, r1
 800544a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800544e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005452:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	371c      	adds	r7, #28
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005462:	b480      	push	{r7}
 8005464:	b089      	sub	sp, #36	; 0x24
 8005466:	af00      	add	r7, sp, #0
 8005468:	60f8      	str	r0, [r7, #12]
 800546a:	60b9      	str	r1, [r7, #8]
 800546c:	4611      	mov	r1, r2
 800546e:	461a      	mov	r2, r3
 8005470:	460b      	mov	r3, r1
 8005472:	71fb      	strb	r3, [r7, #7]
 8005474:	4613      	mov	r3, r2
 8005476:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005480:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005484:	2b00      	cmp	r3, #0
 8005486:	d11a      	bne.n	80054be <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005488:	88bb      	ldrh	r3, [r7, #4]
 800548a:	3303      	adds	r3, #3
 800548c:	089b      	lsrs	r3, r3, #2
 800548e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005490:	2300      	movs	r3, #0
 8005492:	61bb      	str	r3, [r7, #24]
 8005494:	e00f      	b.n	80054b6 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005496:	79fb      	ldrb	r3, [r7, #7]
 8005498:	031a      	lsls	r2, r3, #12
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	4413      	add	r3, r2
 800549e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054a2:	461a      	mov	r2, r3
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6013      	str	r3, [r2, #0]
      pSrc++;
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	3304      	adds	r3, #4
 80054ae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	3301      	adds	r3, #1
 80054b4:	61bb      	str	r3, [r7, #24]
 80054b6:	69ba      	ldr	r2, [r7, #24]
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d3eb      	bcc.n	8005496 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3724      	adds	r7, #36	; 0x24
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b089      	sub	sp, #36	; 0x24
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	4613      	mov	r3, r2
 80054d8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80054e2:	88fb      	ldrh	r3, [r7, #6]
 80054e4:	3303      	adds	r3, #3
 80054e6:	089b      	lsrs	r3, r3, #2
 80054e8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80054ea:	2300      	movs	r3, #0
 80054ec:	61bb      	str	r3, [r7, #24]
 80054ee:	e00b      	b.n	8005508 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	601a      	str	r2, [r3, #0]
    pDest++;
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	3304      	adds	r3, #4
 8005500:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	3301      	adds	r3, #1
 8005506:	61bb      	str	r3, [r7, #24]
 8005508:	69ba      	ldr	r2, [r7, #24]
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	429a      	cmp	r2, r3
 800550e:	d3ef      	bcc.n	80054f0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005510:	69fb      	ldr	r3, [r7, #28]
}
 8005512:	4618      	mov	r0, r3
 8005514:	3724      	adds	r7, #36	; 0x24
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800551e:	b480      	push	{r7}
 8005520:	b085      	sub	sp, #20
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
 8005526:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	785b      	ldrb	r3, [r3, #1]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d12c      	bne.n	8005594 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	015a      	lsls	r2, r3, #5
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	4413      	add	r3, r2
 8005542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	db12      	blt.n	8005572 <USB_EPSetStall+0x54>
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00f      	beq.n	8005572 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	015a      	lsls	r2, r3, #5
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	4413      	add	r3, r2
 800555a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	0151      	lsls	r1, r2, #5
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	440a      	add	r2, r1
 8005568:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800556c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005570:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	015a      	lsls	r2, r3, #5
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	4413      	add	r3, r2
 800557a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	0151      	lsls	r1, r2, #5
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	440a      	add	r2, r1
 8005588:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800558c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005590:	6013      	str	r3, [r2, #0]
 8005592:	e02b      	b.n	80055ec <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	015a      	lsls	r2, r3, #5
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	4413      	add	r3, r2
 800559c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	db12      	blt.n	80055cc <USB_EPSetStall+0xae>
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00f      	beq.n	80055cc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	015a      	lsls	r2, r3, #5
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	0151      	lsls	r1, r2, #5
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	440a      	add	r2, r1
 80055c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055ca:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	015a      	lsls	r2, r3, #5
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	4413      	add	r3, r2
 80055d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68ba      	ldr	r2, [r7, #8]
 80055dc:	0151      	lsls	r1, r2, #5
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	440a      	add	r2, r1
 80055e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3714      	adds	r7, #20
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055fa:	b480      	push	{r7}
 80055fc:	b085      	sub	sp, #20
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
 8005602:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	785b      	ldrb	r3, [r3, #1]
 8005612:	2b01      	cmp	r3, #1
 8005614:	d128      	bne.n	8005668 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	015a      	lsls	r2, r3, #5
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	4413      	add	r3, r2
 800561e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68ba      	ldr	r2, [r7, #8]
 8005626:	0151      	lsls	r1, r2, #5
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	440a      	add	r2, r1
 800562c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005630:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005634:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	78db      	ldrb	r3, [r3, #3]
 800563a:	2b03      	cmp	r3, #3
 800563c:	d003      	beq.n	8005646 <USB_EPClearStall+0x4c>
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	78db      	ldrb	r3, [r3, #3]
 8005642:	2b02      	cmp	r3, #2
 8005644:	d138      	bne.n	80056b8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	015a      	lsls	r2, r3, #5
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	4413      	add	r3, r2
 800564e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68ba      	ldr	r2, [r7, #8]
 8005656:	0151      	lsls	r1, r2, #5
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	440a      	add	r2, r1
 800565c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005664:	6013      	str	r3, [r2, #0]
 8005666:	e027      	b.n	80056b8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	4413      	add	r3, r2
 8005670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	0151      	lsls	r1, r2, #5
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	440a      	add	r2, r1
 800567e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005682:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005686:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	78db      	ldrb	r3, [r3, #3]
 800568c:	2b03      	cmp	r3, #3
 800568e:	d003      	beq.n	8005698 <USB_EPClearStall+0x9e>
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	78db      	ldrb	r3, [r3, #3]
 8005694:	2b02      	cmp	r3, #2
 8005696:	d10f      	bne.n	80056b8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	015a      	lsls	r2, r3, #5
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	0151      	lsls	r1, r2, #5
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	440a      	add	r2, r1
 80056ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056b6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3714      	adds	r7, #20
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr

080056c6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b085      	sub	sp, #20
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
 80056ce:	460b      	mov	r3, r1
 80056d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056e4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80056e8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	78fb      	ldrb	r3, [r7, #3]
 80056f4:	011b      	lsls	r3, r3, #4
 80056f6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80056fa:	68f9      	ldr	r1, [r7, #12]
 80056fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005700:	4313      	orrs	r3, r2
 8005702:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3714      	adds	r7, #20
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr

08005712 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005712:	b580      	push	{r7, lr}
 8005714:	b084      	sub	sp, #16
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800572c:	f023 0302 	bic.w	r3, r3, #2
 8005730:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005732:	2003      	movs	r0, #3
 8005734:	f7fa ff60 	bl	80005f8 <HAL_Delay>

  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b084      	sub	sp, #16
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800575c:	f043 0302 	orr.w	r3, r3, #2
 8005760:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005762:	2003      	movs	r0, #3
 8005764:	f7fa ff48 	bl	80005f8 <HAL_Delay>

  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}

08005772 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005772:	b480      	push	{r7}
 8005774:	b085      	sub	sp, #20
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	4013      	ands	r3, r2
 8005788:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800578a:	68fb      	ldr	r3, [r7, #12]
}
 800578c:	4618      	mov	r0, r3
 800578e:	3714      	adds	r7, #20
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057b4:	69db      	ldr	r3, [r3, #28]
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	4013      	ands	r3, r2
 80057ba:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	0c1b      	lsrs	r3, r3, #16
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3714      	adds	r7, #20
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e8:	69db      	ldr	r3, [r3, #28]
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	4013      	ands	r3, r2
 80057ee:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	b29b      	uxth	r3, r3
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3714      	adds	r7, #20
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	460b      	mov	r3, r1
 800580a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005810:	78fb      	ldrb	r3, [r7, #3]
 8005812:	015a      	lsls	r2, r3, #5
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	4413      	add	r3, r2
 8005818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	68ba      	ldr	r2, [r7, #8]
 800582a:	4013      	ands	r3, r2
 800582c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800582e:	68bb      	ldr	r3, [r7, #8]
}
 8005830:	4618      	mov	r0, r3
 8005832:	3714      	adds	r7, #20
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800583c:	b480      	push	{r7}
 800583e:	b087      	sub	sp, #28
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	460b      	mov	r3, r1
 8005846:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800585c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800585e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005860:	78fb      	ldrb	r3, [r7, #3]
 8005862:	f003 030f 	and.w	r3, r3, #15
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	fa22 f303 	lsr.w	r3, r2, r3
 800586c:	01db      	lsls	r3, r3, #7
 800586e:	b2db      	uxtb	r3, r3
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	4313      	orrs	r3, r2
 8005874:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005876:	78fb      	ldrb	r3, [r7, #3]
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	4413      	add	r3, r2
 800587e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	4013      	ands	r3, r2
 8005888:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800588a:	68bb      	ldr	r3, [r7, #8]
}
 800588c:	4618      	mov	r0, r3
 800588e:	371c      	adds	r7, #28
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	695b      	ldr	r3, [r3, #20]
 80058a4:	f003 0301 	and.w	r3, r3, #1
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ce:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80058d2:	f023 0307 	bic.w	r3, r3, #7
 80058d6:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f003 0306 	and.w	r3, r3, #6
 80058e4:	2b04      	cmp	r3, #4
 80058e6:	d109      	bne.n	80058fc <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058f6:	f043 0303 	orr.w	r3, r3, #3
 80058fa:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800590a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800590e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3714      	adds	r7, #20
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
	...

08005920 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005920:	b480      	push	{r7}
 8005922:	b087      	sub	sp, #28
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	460b      	mov	r3, r1
 800592a:	607a      	str	r2, [r7, #4]
 800592c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	333c      	adds	r3, #60	; 0x3c
 8005936:	3304      	adds	r3, #4
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	4a26      	ldr	r2, [pc, #152]	; (80059d8 <USB_EP0_OutStart+0xb8>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d90a      	bls.n	800595a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005950:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005954:	d101      	bne.n	800595a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005956:	2300      	movs	r3, #0
 8005958:	e037      	b.n	80059ca <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005960:	461a      	mov	r2, r3
 8005962:	2300      	movs	r3, #0
 8005964:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005974:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005978:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005988:	f043 0318 	orr.w	r3, r3, #24
 800598c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800599c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80059a0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80059a2:	7afb      	ldrb	r3, [r7, #11]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d10f      	bne.n	80059c8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ae:	461a      	mov	r2, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059c2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80059c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	371c      	adds	r7, #28
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	4f54300a 	.word	0x4f54300a

080059dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80059e4:	2300      	movs	r3, #0
 80059e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	3301      	adds	r3, #1
 80059ec:	60fb      	str	r3, [r7, #12]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	4a13      	ldr	r2, [pc, #76]	; (8005a40 <USB_CoreReset+0x64>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d901      	bls.n	80059fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e01b      	b.n	8005a32 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	daf2      	bge.n	80059e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a02:	2300      	movs	r3, #0
 8005a04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	f043 0201 	orr.w	r2, r3, #1
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	3301      	adds	r3, #1
 8005a16:	60fb      	str	r3, [r7, #12]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	4a09      	ldr	r2, [pc, #36]	; (8005a40 <USB_CoreReset+0x64>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d901      	bls.n	8005a24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e006      	b.n	8005a32 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	f003 0301 	and.w	r3, r3, #1
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d0f0      	beq.n	8005a12 <USB_CoreReset+0x36>

  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3714      	adds	r7, #20
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	00030d40 	.word	0x00030d40

08005a44 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005a50:	2300      	movs	r3, #0
 8005a52:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	7c1b      	ldrb	r3, [r3, #16]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d115      	bne.n	8005a88 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005a5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a60:	2202      	movs	r2, #2
 8005a62:	2181      	movs	r1, #129	; 0x81
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f002 fc5e 	bl	8008326 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005a70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a74:	2202      	movs	r2, #2
 8005a76:	2101      	movs	r1, #1
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f002 fc54 	bl	8008326 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8005a86:	e012      	b.n	8005aae <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005a88:	2340      	movs	r3, #64	; 0x40
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	2181      	movs	r1, #129	; 0x81
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f002 fc49 	bl	8008326 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005a9a:	2340      	movs	r3, #64	; 0x40
 8005a9c:	2202      	movs	r2, #2
 8005a9e:	2101      	movs	r1, #1
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f002 fc40 	bl	8008326 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005aae:	2308      	movs	r3, #8
 8005ab0:	2203      	movs	r2, #3
 8005ab2:	2182      	movs	r1, #130	; 0x82
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f002 fc36 	bl	8008326 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2201      	movs	r2, #1
 8005abe:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8005ac0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005ac4:	f002 ff44 	bl	8008950 <malloc>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	461a      	mov	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d102      	bne.n	8005ae2 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8005adc:	2301      	movs	r3, #1
 8005ade:	73fb      	strb	r3, [r7, #15]
 8005ae0:	e026      	b.n	8005b30 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005ae8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	7c1b      	ldrb	r3, [r3, #16]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d109      	bne.n	8005b20 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b16:	2101      	movs	r1, #1
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f002 fcf5 	bl	8008508 <USBD_LL_PrepareReceive>
 8005b1e:	e007      	b.n	8005b30 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b26:	2340      	movs	r3, #64	; 0x40
 8005b28:	2101      	movs	r1, #1
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f002 fcec 	bl	8008508 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b084      	sub	sp, #16
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
 8005b42:	460b      	mov	r3, r1
 8005b44:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005b46:	2300      	movs	r3, #0
 8005b48:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005b4a:	2181      	movs	r1, #129	; 0x81
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f002 fc10 	bl	8008372 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005b58:	2101      	movs	r1, #1
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f002 fc09 	bl	8008372 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005b68:	2182      	movs	r1, #130	; 0x82
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f002 fc01 	bl	8008372 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d00e      	beq.n	8005b9e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005b90:	4618      	mov	r0, r3
 8005b92:	f002 fee5 	bl	8008960 <free>
    pdev->pClassData = NULL;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8005b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005bb8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d039      	beq.n	8005c46 <USBD_CDC_Setup+0x9e>
 8005bd2:	2b20      	cmp	r3, #32
 8005bd4:	d17c      	bne.n	8005cd0 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	88db      	ldrh	r3, [r3, #6]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d029      	beq.n	8005c32 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	b25b      	sxtb	r3, r3
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	da11      	bge.n	8005c0c <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	683a      	ldr	r2, [r7, #0]
 8005bf2:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8005bf4:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	88d2      	ldrh	r2, [r2, #6]
 8005bfa:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005bfc:	6939      	ldr	r1, [r7, #16]
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	88db      	ldrh	r3, [r3, #6]
 8005c02:	461a      	mov	r2, r3
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f001 f9e5 	bl	8006fd4 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8005c0a:	e068      	b.n	8005cde <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	785a      	ldrb	r2, [r3, #1]
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	88db      	ldrh	r3, [r3, #6]
 8005c1a:	b2da      	uxtb	r2, r3
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005c22:	6939      	ldr	r1, [r7, #16]
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	88db      	ldrh	r3, [r3, #6]
 8005c28:	461a      	mov	r2, r3
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f001 fa00 	bl	8007030 <USBD_CtlPrepareRx>
    break;
 8005c30:	e055      	b.n	8005cde <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	683a      	ldr	r2, [r7, #0]
 8005c3c:	7850      	ldrb	r0, [r2, #1]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	6839      	ldr	r1, [r7, #0]
 8005c42:	4798      	blx	r3
    break;
 8005c44:	e04b      	b.n	8005cde <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	785b      	ldrb	r3, [r3, #1]
 8005c4a:	2b0a      	cmp	r3, #10
 8005c4c:	d017      	beq.n	8005c7e <USBD_CDC_Setup+0xd6>
 8005c4e:	2b0b      	cmp	r3, #11
 8005c50:	d029      	beq.n	8005ca6 <USBD_CDC_Setup+0xfe>
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d133      	bne.n	8005cbe <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005c5c:	2b03      	cmp	r3, #3
 8005c5e:	d107      	bne.n	8005c70 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8005c60:	f107 030c 	add.w	r3, r7, #12
 8005c64:	2202      	movs	r2, #2
 8005c66:	4619      	mov	r1, r3
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f001 f9b3 	bl	8006fd4 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8005c6e:	e02e      	b.n	8005cce <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8005c70:	6839      	ldr	r1, [r7, #0]
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f001 f943 	bl	8006efe <USBD_CtlError>
			  ret = USBD_FAIL;
 8005c78:	2302      	movs	r3, #2
 8005c7a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c7c:	e027      	b.n	8005cce <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005c84:	2b03      	cmp	r3, #3
 8005c86:	d107      	bne.n	8005c98 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8005c88:	f107 030f 	add.w	r3, r7, #15
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	4619      	mov	r1, r3
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f001 f99f 	bl	8006fd4 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8005c96:	e01a      	b.n	8005cce <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8005c98:	6839      	ldr	r1, [r7, #0]
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f001 f92f 	bl	8006efe <USBD_CtlError>
			  ret = USBD_FAIL;
 8005ca0:	2302      	movs	r3, #2
 8005ca2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ca4:	e013      	b.n	8005cce <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005cac:	2b03      	cmp	r3, #3
 8005cae:	d00d      	beq.n	8005ccc <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8005cb0:	6839      	ldr	r1, [r7, #0]
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f001 f923 	bl	8006efe <USBD_CtlError>
			  ret = USBD_FAIL;
 8005cb8:	2302      	movs	r3, #2
 8005cba:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005cbc:	e006      	b.n	8005ccc <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 8005cbe:	6839      	ldr	r1, [r7, #0]
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f001 f91c 	bl	8006efe <USBD_CtlError>
      ret = USBD_FAIL;
 8005cc6:	2302      	movs	r3, #2
 8005cc8:	75fb      	strb	r3, [r7, #23]
      break;
 8005cca:	e000      	b.n	8005cce <USBD_CDC_Setup+0x126>
      break;
 8005ccc:	bf00      	nop
    }
    break;
 8005cce:	e006      	b.n	8005cde <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8005cd0:	6839      	ldr	r1, [r7, #0]
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f001 f913 	bl	8006efe <USBD_CtlError>
    ret = USBD_FAIL;
 8005cd8:	2302      	movs	r3, #2
 8005cda:	75fb      	strb	r3, [r7, #23]
    break;
 8005cdc:	bf00      	nop
  }

  return ret;
 8005cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3718      	adds	r7, #24
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005cfa:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005d02:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d03a      	beq.n	8005d84 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005d0e:	78fa      	ldrb	r2, [r7, #3]
 8005d10:	6879      	ldr	r1, [r7, #4]
 8005d12:	4613      	mov	r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	4413      	add	r3, r2
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	440b      	add	r3, r1
 8005d1c:	331c      	adds	r3, #28
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d029      	beq.n	8005d78 <USBD_CDC_DataIn+0x90>
 8005d24:	78fa      	ldrb	r2, [r7, #3]
 8005d26:	6879      	ldr	r1, [r7, #4]
 8005d28:	4613      	mov	r3, r2
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	4413      	add	r3, r2
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	440b      	add	r3, r1
 8005d32:	331c      	adds	r3, #28
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	78f9      	ldrb	r1, [r7, #3]
 8005d38:	68b8      	ldr	r0, [r7, #8]
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	00db      	lsls	r3, r3, #3
 8005d3e:	1a5b      	subs	r3, r3, r1
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4403      	add	r3, r0
 8005d44:	3344      	adds	r3, #68	; 0x44
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	fbb2 f1f3 	udiv	r1, r2, r3
 8005d4c:	fb03 f301 	mul.w	r3, r3, r1
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d110      	bne.n	8005d78 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005d56:	78fa      	ldrb	r2, [r7, #3]
 8005d58:	6879      	ldr	r1, [r7, #4]
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	4413      	add	r3, r2
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	440b      	add	r3, r1
 8005d64:	331c      	adds	r3, #28
 8005d66:	2200      	movs	r2, #0
 8005d68:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8005d6a:	78f9      	ldrb	r1, [r7, #3]
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	2200      	movs	r2, #0
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f002 fba6 	bl	80084c2 <USBD_LL_Transmit>
 8005d76:	e003      	b.n	8005d80 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005d80:	2300      	movs	r3, #0
 8005d82:	e000      	b.n	8005d86 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005d84:	2302      	movs	r3, #2
  }
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b084      	sub	sp, #16
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
 8005d96:	460b      	mov	r3, r1
 8005d98:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005da0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8005da2:	78fb      	ldrb	r3, [r7, #3]
 8005da4:	4619      	mov	r1, r3
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f002 fbd1 	bl	800854e <USBD_LL_GetRxDataSize>
 8005dac:	4602      	mov	r2, r0
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00d      	beq.n	8005dda <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005dd2:	4611      	mov	r1, r2
 8005dd4:	4798      	blx	r3

    return USBD_OK;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	e000      	b.n	8005ddc <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005dda:	2302      	movs	r3, #2
  }
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3710      	adds	r7, #16
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005df2:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d015      	beq.n	8005e2a <USBD_CDC_EP0_RxReady+0x46>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005e04:	2bff      	cmp	r3, #255	; 0xff
 8005e06:	d010      	beq.n	8005e2a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005e16:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005e1e:	b292      	uxth	r2, r2
 8005e20:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	22ff      	movs	r2, #255	; 0xff
 8005e26:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3710      	adds	r7, #16
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2243      	movs	r2, #67	; 0x43
 8005e40:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005e42:	4b03      	ldr	r3, [pc, #12]	; (8005e50 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr
 8005e50:	20000090 	.word	0x20000090

08005e54 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2243      	movs	r2, #67	; 0x43
 8005e60:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005e62:	4b03      	ldr	r3, [pc, #12]	; (8005e70 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr
 8005e70:	2000004c 	.word	0x2000004c

08005e74 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2243      	movs	r2, #67	; 0x43
 8005e80:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005e82:	4b03      	ldr	r3, [pc, #12]	; (8005e90 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr
 8005e90:	200000d4 	.word	0x200000d4

08005e94 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	220a      	movs	r2, #10
 8005ea0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005ea2:	4b03      	ldr	r3, [pc, #12]	; (8005eb0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr
 8005eb0:	20000008 	.word	0x20000008

08005eb4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005ebe:	2302      	movs	r3, #2
 8005ec0:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d005      	beq.n	8005ed4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	683a      	ldr	r2, [r7, #0]
 8005ecc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3714      	adds	r7, #20
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	b087      	sub	sp, #28
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	60f8      	str	r0, [r7, #12]
 8005eea:	60b9      	str	r1, [r7, #8]
 8005eec:	4613      	mov	r3, r2
 8005eee:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005ef6:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005f00:	88fa      	ldrh	r2, [r7, #6]
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	371c      	adds	r7, #28
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b085      	sub	sp, #20
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
 8005f1e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005f26:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	683a      	ldr	r2, [r7, #0]
 8005f2c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3714      	adds	r7, #20
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b084      	sub	sp, #16
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005f4c:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d01c      	beq.n	8005f92 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d115      	bne.n	8005f8e <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	2181      	movs	r1, #129	; 0x81
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f002 fa9c 	bl	80084c2 <USBD_LL_Transmit>

      return USBD_OK;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	e002      	b.n	8005f94 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e000      	b.n	8005f94 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005f92:	2302      	movs	r3, #2
  }
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d017      	beq.n	8005fe6 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	7c1b      	ldrb	r3, [r3, #16]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d109      	bne.n	8005fd2 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005fc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fc8:	2101      	movs	r1, #1
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f002 fa9c 	bl	8008508 <USBD_LL_PrepareReceive>
 8005fd0:	e007      	b.n	8005fe2 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005fd8:	2340      	movs	r3, #64	; 0x40
 8005fda:	2101      	movs	r1, #1
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f002 fa93 	bl	8008508 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	e000      	b.n	8005fe8 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005fe6:	2302      	movs	r3, #2
  }
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3710      	adds	r7, #16
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d101      	bne.n	8006008 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006004:	2302      	movs	r3, #2
 8006006:	e01a      	b.n	800603e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800600e:	2b00      	cmp	r3, #0
 8006010:	d003      	beq.n	800601a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d003      	beq.n	8006028 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	68ba      	ldr	r2, [r7, #8]
 8006024:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	79fa      	ldrb	r2, [r7, #7]
 8006034:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	f002 f90e 	bl	8008258 <USBD_LL_Init>

  return USBD_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006046:	b480      	push	{r7}
 8006048:	b085      	sub	sp, #20
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
 800604e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8006050:	2300      	movs	r3, #0
 8006052:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d006      	beq.n	8006068 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	683a      	ldr	r2, [r7, #0]
 800605e:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8006062:	2300      	movs	r3, #0
 8006064:	73fb      	strb	r3, [r7, #15]
 8006066:	e001      	b.n	800606c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006068:	2302      	movs	r3, #2
 800606a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800606c:	7bfb      	ldrb	r3, [r7, #15]
}
 800606e:	4618      	mov	r0, r3
 8006070:	3714      	adds	r7, #20
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr

0800607a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b082      	sub	sp, #8
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f002 f934 	bl	80082f0 <USBD_LL_Start>

  return USBD_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3708      	adds	r7, #8
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8006092:	b480      	push	{r7}
 8006094:	b083      	sub	sp, #12
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	460b      	mov	r3, r1
 80060b2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80060b4:	2302      	movs	r3, #2
 80060b6:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00c      	beq.n	80060dc <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	78fa      	ldrb	r2, [r7, #3]
 80060cc:	4611      	mov	r1, r2
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	4798      	blx	r3
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d101      	bne.n	80060dc <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80060d8:	2300      	movs	r3, #0
 80060da:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80060dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3710      	adds	r7, #16
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b082      	sub	sp, #8
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
 80060ee:	460b      	mov	r3, r1
 80060f0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	78fa      	ldrb	r2, [r7, #3]
 80060fc:	4611      	mov	r1, r2
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	4798      	blx	r3
  return USBD_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	3708      	adds	r7, #8
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800611c:	6839      	ldr	r1, [r7, #0]
 800611e:	4618      	mov	r0, r3
 8006120:	f000 feb0 	bl	8006e84 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8006132:	461a      	mov	r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006140:	f003 031f 	and.w	r3, r3, #31
 8006144:	2b01      	cmp	r3, #1
 8006146:	d00c      	beq.n	8006162 <USBD_LL_SetupStage+0x56>
 8006148:	2b01      	cmp	r3, #1
 800614a:	d302      	bcc.n	8006152 <USBD_LL_SetupStage+0x46>
 800614c:	2b02      	cmp	r3, #2
 800614e:	d010      	beq.n	8006172 <USBD_LL_SetupStage+0x66>
 8006150:	e017      	b.n	8006182 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006158:	4619      	mov	r1, r3
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 fa04 	bl	8006568 <USBD_StdDevReq>
    break;
 8006160:	e01a      	b.n	8006198 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006168:	4619      	mov	r1, r3
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 fa66 	bl	800663c <USBD_StdItfReq>
    break;
 8006170:	e012      	b.n	8006198 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006178:	4619      	mov	r1, r3
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 faa4 	bl	80066c8 <USBD_StdEPReq>
    break;
 8006180:	e00a      	b.n	8006198 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006188:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800618c:	b2db      	uxtb	r3, r3
 800618e:	4619      	mov	r1, r3
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f002 f90d 	bl	80083b0 <USBD_LL_StallEP>
    break;
 8006196:	bf00      	nop
  }

  return USBD_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3708      	adds	r7, #8
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b086      	sub	sp, #24
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	60f8      	str	r0, [r7, #12]
 80061aa:	460b      	mov	r3, r1
 80061ac:	607a      	str	r2, [r7, #4]
 80061ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 80061b0:	7afb      	ldrb	r3, [r7, #11]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d14b      	bne.n	800624e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80061bc:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80061c4:	2b03      	cmp	r3, #3
 80061c6:	d134      	bne.n	8006232 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	68da      	ldr	r2, [r3, #12]
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d919      	bls.n	8006208 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	68da      	ldr	r2, [r3, #12]
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	1ad2      	subs	r2, r2, r3
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	68da      	ldr	r2, [r3, #12]
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d203      	bcs.n	80061f6 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	e002      	b.n	80061fc <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	461a      	mov	r2, r3
 80061fe:	6879      	ldr	r1, [r7, #4]
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f000 ff33 	bl	800706c <USBD_CtlContinueRx>
 8006206:	e038      	b.n	800627a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00a      	beq.n	800622a <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800621a:	2b03      	cmp	r3, #3
 800621c:	d105      	bne.n	800622a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f000 ff30 	bl	8007090 <USBD_CtlSendStatus>
 8006230:	e023      	b.n	800627a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006238:	2b05      	cmp	r3, #5
 800623a:	d11e      	bne.n	800627a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8006244:	2100      	movs	r1, #0
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f002 f8b2 	bl	80083b0 <USBD_LL_StallEP>
 800624c:	e015      	b.n	800627a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00d      	beq.n	8006276 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8006260:	2b03      	cmp	r3, #3
 8006262:	d108      	bne.n	8006276 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800626a:	699b      	ldr	r3, [r3, #24]
 800626c:	7afa      	ldrb	r2, [r7, #11]
 800626e:	4611      	mov	r1, r2
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	4798      	blx	r3
 8006274:	e001      	b.n	800627a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006276:	2302      	movs	r3, #2
 8006278:	e000      	b.n	800627c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3718      	adds	r7, #24
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b086      	sub	sp, #24
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	460b      	mov	r3, r1
 800628e:	607a      	str	r2, [r7, #4]
 8006290:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8006292:	7afb      	ldrb	r3, [r7, #11]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d17f      	bne.n	8006398 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	3314      	adds	r3, #20
 800629c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d15c      	bne.n	8006362 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	68da      	ldr	r2, [r3, #12]
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d915      	bls.n	80062e0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	68da      	ldr	r2, [r3, #12]
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	1ad2      	subs	r2, r2, r3
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	461a      	mov	r2, r3
 80062ca:	6879      	ldr	r1, [r7, #4]
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	f000 fe9d 	bl	800700c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80062d2:	2300      	movs	r3, #0
 80062d4:	2200      	movs	r2, #0
 80062d6:	2100      	movs	r1, #0
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f002 f915 	bl	8008508 <USBD_LL_PrepareReceive>
 80062de:	e04e      	b.n	800637e <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	6912      	ldr	r2, [r2, #16]
 80062e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80062ec:	fb02 f201 	mul.w	r2, r2, r1
 80062f0:	1a9b      	subs	r3, r3, r2
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d11c      	bne.n	8006330 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	689a      	ldr	r2, [r3, #8]
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 80062fe:	429a      	cmp	r2, r3
 8006300:	d316      	bcc.n	8006330 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	689a      	ldr	r2, [r3, #8]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800630c:	429a      	cmp	r2, r3
 800630e:	d20f      	bcs.n	8006330 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006310:	2200      	movs	r2, #0
 8006312:	2100      	movs	r1, #0
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f000 fe79 	bl	800700c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2200      	movs	r2, #0
 800631e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006322:	2300      	movs	r3, #0
 8006324:	2200      	movs	r2, #0
 8006326:	2100      	movs	r1, #0
 8006328:	68f8      	ldr	r0, [r7, #12]
 800632a:	f002 f8ed 	bl	8008508 <USBD_LL_PrepareReceive>
 800632e:	e026      	b.n	800637e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00a      	beq.n	8006352 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006342:	2b03      	cmp	r3, #3
 8006344:	d105      	bne.n	8006352 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006352:	2180      	movs	r1, #128	; 0x80
 8006354:	68f8      	ldr	r0, [r7, #12]
 8006356:	f002 f82b 	bl	80083b0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	f000 feab 	bl	80070b6 <USBD_CtlReceiveStatus>
 8006360:	e00d      	b.n	800637e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006368:	2b04      	cmp	r3, #4
 800636a:	d004      	beq.n	8006376 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006372:	2b00      	cmp	r3, #0
 8006374:	d103      	bne.n	800637e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006376:	2180      	movs	r1, #128	; 0x80
 8006378:	68f8      	ldr	r0, [r7, #12]
 800637a:	f002 f819 	bl	80083b0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8006384:	2b01      	cmp	r3, #1
 8006386:	d11d      	bne.n	80063c4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f7ff fe82 	bl	8006092 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8006396:	e015      	b.n	80063c4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800639e:	695b      	ldr	r3, [r3, #20]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00d      	beq.n	80063c0 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 80063aa:	2b03      	cmp	r3, #3
 80063ac:	d108      	bne.n	80063c0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	7afa      	ldrb	r2, [r7, #11]
 80063b8:	4611      	mov	r1, r2
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	4798      	blx	r3
 80063be:	e001      	b.n	80063c4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80063c0:	2302      	movs	r3, #2
 80063c2:	e000      	b.n	80063c6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3718      	adds	r7, #24
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}

080063ce <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b082      	sub	sp, #8
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80063d6:	2340      	movs	r3, #64	; 0x40
 80063d8:	2200      	movs	r2, #0
 80063da:	2100      	movs	r1, #0
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f001 ffa2 	bl	8008326 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2240      	movs	r2, #64	; 0x40
 80063ee:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80063f2:	2340      	movs	r3, #64	; 0x40
 80063f4:	2200      	movs	r2, #0
 80063f6:	2180      	movs	r1, #128	; 0x80
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f001 ff94 	bl	8008326 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2201      	movs	r2, #1
 8006402:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2240      	movs	r2, #64	; 0x40
 8006408:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800642e:	2b00      	cmp	r3, #0
 8006430:	d009      	beq.n	8006446 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	6852      	ldr	r2, [r2, #4]
 800643e:	b2d2      	uxtb	r2, r2
 8006440:	4611      	mov	r1, r2
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	4798      	blx	r3
  }

  return USBD_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3708      	adds	r7, #8
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	460b      	mov	r3, r1
 800645a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	78fa      	ldrb	r2, [r7, #3]
 8006460:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8006462:	2300      	movs	r3, #0
}
 8006464:	4618      	mov	r0, r3
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2204      	movs	r2, #4
 8006488:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	370c      	adds	r7, #12
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr

0800649a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800649a:	b480      	push	{r7}
 800649c:	b083      	sub	sp, #12
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80064ca:	2b03      	cmp	r3, #3
 80064cc:	d10b      	bne.n	80064e6 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80064d4:	69db      	ldr	r3, [r3, #28]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d005      	beq.n	80064e6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80064e0:	69db      	ldr	r3, [r3, #28]
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	4798      	blx	r3
    }
  }
  return USBD_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3708      	adds	r7, #8
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	460b      	mov	r3, r1
 80064fa:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	370c      	adds	r7, #12
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr

0800650a <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800650a:	b480      	push	{r7}
 800650c:	b083      	sub	sp, #12
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
 8006512:	460b      	mov	r3, r1
 8006514:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	370c      	adds	r7, #12
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr

0800653a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b082      	sub	sp, #8
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2201      	movs	r2, #1
 8006546:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	6852      	ldr	r2, [r2, #4]
 8006556:	b2d2      	uxtb	r2, r2
 8006558:	4611      	mov	r1, r2
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	4798      	blx	r3

  return USBD_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3708      	adds	r7, #8
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006572:	2300      	movs	r3, #0
 8006574:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800657e:	2b20      	cmp	r3, #32
 8006580:	d004      	beq.n	800658c <USBD_StdDevReq+0x24>
 8006582:	2b40      	cmp	r3, #64	; 0x40
 8006584:	d002      	beq.n	800658c <USBD_StdDevReq+0x24>
 8006586:	2b00      	cmp	r3, #0
 8006588:	d008      	beq.n	800659c <USBD_StdDevReq+0x34>
 800658a:	e04c      	b.n	8006626 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	6839      	ldr	r1, [r7, #0]
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	4798      	blx	r3
    break;
 800659a:	e049      	b.n	8006630 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	785b      	ldrb	r3, [r3, #1]
 80065a0:	2b09      	cmp	r3, #9
 80065a2:	d83a      	bhi.n	800661a <USBD_StdDevReq+0xb2>
 80065a4:	a201      	add	r2, pc, #4	; (adr r2, 80065ac <USBD_StdDevReq+0x44>)
 80065a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065aa:	bf00      	nop
 80065ac:	080065fd 	.word	0x080065fd
 80065b0:	08006611 	.word	0x08006611
 80065b4:	0800661b 	.word	0x0800661b
 80065b8:	08006607 	.word	0x08006607
 80065bc:	0800661b 	.word	0x0800661b
 80065c0:	080065df 	.word	0x080065df
 80065c4:	080065d5 	.word	0x080065d5
 80065c8:	0800661b 	.word	0x0800661b
 80065cc:	080065f3 	.word	0x080065f3
 80065d0:	080065e9 	.word	0x080065e9
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 80065d4:	6839      	ldr	r1, [r7, #0]
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f9d2 	bl	8006980 <USBD_GetDescriptor>
      break;
 80065dc:	e022      	b.n	8006624 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 80065de:	6839      	ldr	r1, [r7, #0]
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 fae3 	bl	8006bac <USBD_SetAddress>
      break;
 80065e6:	e01d      	b.n	8006624 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 80065e8:	6839      	ldr	r1, [r7, #0]
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 fb20 	bl	8006c30 <USBD_SetConfig>
      break;
 80065f0:	e018      	b.n	8006624 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 80065f2:	6839      	ldr	r1, [r7, #0]
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 fba9 	bl	8006d4c <USBD_GetConfig>
      break;
 80065fa:	e013      	b.n	8006624 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 80065fc:	6839      	ldr	r1, [r7, #0]
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 fbd8 	bl	8006db4 <USBD_GetStatus>
      break;
 8006604:	e00e      	b.n	8006624 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8006606:	6839      	ldr	r1, [r7, #0]
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 fc06 	bl	8006e1a <USBD_SetFeature>
      break;
 800660e:	e009      	b.n	8006624 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8006610:	6839      	ldr	r1, [r7, #0]
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 fc15 	bl	8006e42 <USBD_ClrFeature>
      break;
 8006618:	e004      	b.n	8006624 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800661a:	6839      	ldr	r1, [r7, #0]
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 fc6e 	bl	8006efe <USBD_CtlError>
      break;
 8006622:	bf00      	nop
    }
    break;
 8006624:	e004      	b.n	8006630 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8006626:	6839      	ldr	r1, [r7, #0]
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 fc68 	bl	8006efe <USBD_CtlError>
    break;
 800662e:	bf00      	nop
  }

  return ret;
 8006630:	7bfb      	ldrb	r3, [r7, #15]
}
 8006632:	4618      	mov	r0, r3
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop

0800663c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006646:	2300      	movs	r3, #0
 8006648:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006652:	2b20      	cmp	r3, #32
 8006654:	d003      	beq.n	800665e <USBD_StdItfReq+0x22>
 8006656:	2b40      	cmp	r3, #64	; 0x40
 8006658:	d001      	beq.n	800665e <USBD_StdItfReq+0x22>
 800665a:	2b00      	cmp	r3, #0
 800665c:	d12a      	bne.n	80066b4 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006664:	3b01      	subs	r3, #1
 8006666:	2b02      	cmp	r3, #2
 8006668:	d81d      	bhi.n	80066a6 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	889b      	ldrh	r3, [r3, #4]
 800666e:	b2db      	uxtb	r3, r3
 8006670:	2b01      	cmp	r3, #1
 8006672:	d813      	bhi.n	800669c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	6839      	ldr	r1, [r7, #0]
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	4798      	blx	r3
 8006682:	4603      	mov	r3, r0
 8006684:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	88db      	ldrh	r3, [r3, #6]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d110      	bne.n	80066b0 <USBD_StdItfReq+0x74>
 800668e:	7bfb      	ldrb	r3, [r7, #15]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d10d      	bne.n	80066b0 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 fcfb 	bl	8007090 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800669a:	e009      	b.n	80066b0 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800669c:	6839      	ldr	r1, [r7, #0]
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 fc2d 	bl	8006efe <USBD_CtlError>
      break;
 80066a4:	e004      	b.n	80066b0 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80066a6:	6839      	ldr	r1, [r7, #0]
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 fc28 	bl	8006efe <USBD_CtlError>
      break;
 80066ae:	e000      	b.n	80066b2 <USBD_StdItfReq+0x76>
      break;
 80066b0:	bf00      	nop
    }
    break;
 80066b2:	e004      	b.n	80066be <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80066b4:	6839      	ldr	r1, [r7, #0]
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 fc21 	bl	8006efe <USBD_CtlError>
    break;
 80066bc:	bf00      	nop
  }

  return USBD_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3710      	adds	r7, #16
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80066d2:	2300      	movs	r3, #0
 80066d4:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	889b      	ldrh	r3, [r3, #4]
 80066da:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066e4:	2b20      	cmp	r3, #32
 80066e6:	d004      	beq.n	80066f2 <USBD_StdEPReq+0x2a>
 80066e8:	2b40      	cmp	r3, #64	; 0x40
 80066ea:	d002      	beq.n	80066f2 <USBD_StdEPReq+0x2a>
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d008      	beq.n	8006702 <USBD_StdEPReq+0x3a>
 80066f0:	e13b      	b.n	800696a <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	6839      	ldr	r1, [r7, #0]
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	4798      	blx	r3
    break;
 8006700:	e138      	b.n	8006974 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800670a:	2b20      	cmp	r3, #32
 800670c:	d10a      	bne.n	8006724 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	6839      	ldr	r1, [r7, #0]
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	4798      	blx	r3
 800671c:	4603      	mov	r3, r0
 800671e:	73fb      	strb	r3, [r7, #15]

      return ret;
 8006720:	7bfb      	ldrb	r3, [r7, #15]
 8006722:	e128      	b.n	8006976 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	785b      	ldrb	r3, [r3, #1]
 8006728:	2b01      	cmp	r3, #1
 800672a:	d03e      	beq.n	80067aa <USBD_StdEPReq+0xe2>
 800672c:	2b03      	cmp	r3, #3
 800672e:	d002      	beq.n	8006736 <USBD_StdEPReq+0x6e>
 8006730:	2b00      	cmp	r3, #0
 8006732:	d070      	beq.n	8006816 <USBD_StdEPReq+0x14e>
 8006734:	e113      	b.n	800695e <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800673c:	2b02      	cmp	r3, #2
 800673e:	d002      	beq.n	8006746 <USBD_StdEPReq+0x7e>
 8006740:	2b03      	cmp	r3, #3
 8006742:	d015      	beq.n	8006770 <USBD_StdEPReq+0xa8>
 8006744:	e02b      	b.n	800679e <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006746:	7bbb      	ldrb	r3, [r7, #14]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00c      	beq.n	8006766 <USBD_StdEPReq+0x9e>
 800674c:	7bbb      	ldrb	r3, [r7, #14]
 800674e:	2b80      	cmp	r3, #128	; 0x80
 8006750:	d009      	beq.n	8006766 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8006752:	7bbb      	ldrb	r3, [r7, #14]
 8006754:	4619      	mov	r1, r3
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f001 fe2a 	bl	80083b0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800675c:	2180      	movs	r1, #128	; 0x80
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f001 fe26 	bl	80083b0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006764:	e020      	b.n	80067a8 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8006766:	6839      	ldr	r1, [r7, #0]
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 fbc8 	bl	8006efe <USBD_CtlError>
        break;
 800676e:	e01b      	b.n	80067a8 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	885b      	ldrh	r3, [r3, #2]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d10e      	bne.n	8006796 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006778:	7bbb      	ldrb	r3, [r7, #14]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00b      	beq.n	8006796 <USBD_StdEPReq+0xce>
 800677e:	7bbb      	ldrb	r3, [r7, #14]
 8006780:	2b80      	cmp	r3, #128	; 0x80
 8006782:	d008      	beq.n	8006796 <USBD_StdEPReq+0xce>
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	88db      	ldrh	r3, [r3, #6]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d104      	bne.n	8006796 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800678c:	7bbb      	ldrb	r3, [r7, #14]
 800678e:	4619      	mov	r1, r3
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f001 fe0d 	bl	80083b0 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 fc7a 	bl	8007090 <USBD_CtlSendStatus>

        break;
 800679c:	e004      	b.n	80067a8 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800679e:	6839      	ldr	r1, [r7, #0]
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 fbac 	bl	8006efe <USBD_CtlError>
        break;
 80067a6:	bf00      	nop
      }
      break;
 80067a8:	e0de      	b.n	8006968 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d002      	beq.n	80067ba <USBD_StdEPReq+0xf2>
 80067b4:	2b03      	cmp	r3, #3
 80067b6:	d015      	beq.n	80067e4 <USBD_StdEPReq+0x11c>
 80067b8:	e026      	b.n	8006808 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067ba:	7bbb      	ldrb	r3, [r7, #14]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d00c      	beq.n	80067da <USBD_StdEPReq+0x112>
 80067c0:	7bbb      	ldrb	r3, [r7, #14]
 80067c2:	2b80      	cmp	r3, #128	; 0x80
 80067c4:	d009      	beq.n	80067da <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80067c6:	7bbb      	ldrb	r3, [r7, #14]
 80067c8:	4619      	mov	r1, r3
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f001 fdf0 	bl	80083b0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80067d0:	2180      	movs	r1, #128	; 0x80
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f001 fdec 	bl	80083b0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80067d8:	e01c      	b.n	8006814 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 80067da:	6839      	ldr	r1, [r7, #0]
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 fb8e 	bl	8006efe <USBD_CtlError>
        break;
 80067e2:	e017      	b.n	8006814 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	885b      	ldrh	r3, [r3, #2]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d112      	bne.n	8006812 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80067ec:	7bbb      	ldrb	r3, [r7, #14]
 80067ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d004      	beq.n	8006800 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 80067f6:	7bbb      	ldrb	r3, [r7, #14]
 80067f8:	4619      	mov	r1, r3
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f001 fdf7 	bl	80083ee <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 fc45 	bl	8007090 <USBD_CtlSendStatus>
        }
        break;
 8006806:	e004      	b.n	8006812 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8006808:	6839      	ldr	r1, [r7, #0]
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 fb77 	bl	8006efe <USBD_CtlError>
        break;
 8006810:	e000      	b.n	8006814 <USBD_StdEPReq+0x14c>
        break;
 8006812:	bf00      	nop
      }
      break;
 8006814:	e0a8      	b.n	8006968 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800681c:	2b02      	cmp	r3, #2
 800681e:	d002      	beq.n	8006826 <USBD_StdEPReq+0x15e>
 8006820:	2b03      	cmp	r3, #3
 8006822:	d031      	beq.n	8006888 <USBD_StdEPReq+0x1c0>
 8006824:	e095      	b.n	8006952 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006826:	7bbb      	ldrb	r3, [r7, #14]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d007      	beq.n	800683c <USBD_StdEPReq+0x174>
 800682c:	7bbb      	ldrb	r3, [r7, #14]
 800682e:	2b80      	cmp	r3, #128	; 0x80
 8006830:	d004      	beq.n	800683c <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8006832:	6839      	ldr	r1, [r7, #0]
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 fb62 	bl	8006efe <USBD_CtlError>
          break;
 800683a:	e08f      	b.n	800695c <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800683c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006840:	2b00      	cmp	r3, #0
 8006842:	da0b      	bge.n	800685c <USBD_StdEPReq+0x194>
 8006844:	7bbb      	ldrb	r3, [r7, #14]
 8006846:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800684a:	4613      	mov	r3, r2
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	4413      	add	r3, r2
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	3310      	adds	r3, #16
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	4413      	add	r3, r2
 8006858:	3304      	adds	r3, #4
 800685a:	e00a      	b.n	8006872 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800685c:	7bbb      	ldrb	r3, [r7, #14]
 800685e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006862:	4613      	mov	r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	4413      	add	r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	4413      	add	r3, r2
 8006872:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	2200      	movs	r2, #0
 8006878:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	2202      	movs	r2, #2
 800687e:	4619      	mov	r1, r3
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 fba7 	bl	8006fd4 <USBD_CtlSendData>
          break;
 8006886:	e069      	b.n	800695c <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8006888:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800688c:	2b00      	cmp	r3, #0
 800688e:	da11      	bge.n	80068b4 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006890:	7bbb      	ldrb	r3, [r7, #14]
 8006892:	f003 020f 	and.w	r2, r3, #15
 8006896:	6879      	ldr	r1, [r7, #4]
 8006898:	4613      	mov	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	440b      	add	r3, r1
 80068a2:	3318      	adds	r3, #24
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d117      	bne.n	80068da <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80068aa:	6839      	ldr	r1, [r7, #0]
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 fb26 	bl	8006efe <USBD_CtlError>
            break;
 80068b2:	e053      	b.n	800695c <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80068b4:	7bbb      	ldrb	r3, [r7, #14]
 80068b6:	f003 020f 	and.w	r2, r3, #15
 80068ba:	6879      	ldr	r1, [r7, #4]
 80068bc:	4613      	mov	r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	4413      	add	r3, r2
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	440b      	add	r3, r1
 80068c6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d104      	bne.n	80068da <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80068d0:	6839      	ldr	r1, [r7, #0]
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 fb13 	bl	8006efe <USBD_CtlError>
            break;
 80068d8:	e040      	b.n	800695c <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80068da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	da0b      	bge.n	80068fa <USBD_StdEPReq+0x232>
 80068e2:	7bbb      	ldrb	r3, [r7, #14]
 80068e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068e8:	4613      	mov	r3, r2
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	4413      	add	r3, r2
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	3310      	adds	r3, #16
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	4413      	add	r3, r2
 80068f6:	3304      	adds	r3, #4
 80068f8:	e00a      	b.n	8006910 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 80068fa:	7bbb      	ldrb	r3, [r7, #14]
 80068fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006900:	4613      	mov	r3, r2
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4413      	add	r3, r2
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	4413      	add	r3, r2
 8006910:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006912:	7bbb      	ldrb	r3, [r7, #14]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d002      	beq.n	800691e <USBD_StdEPReq+0x256>
 8006918:	7bbb      	ldrb	r3, [r7, #14]
 800691a:	2b80      	cmp	r3, #128	; 0x80
 800691c:	d103      	bne.n	8006926 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	2200      	movs	r2, #0
 8006922:	601a      	str	r2, [r3, #0]
 8006924:	e00e      	b.n	8006944 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8006926:	7bbb      	ldrb	r3, [r7, #14]
 8006928:	4619      	mov	r1, r3
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f001 fd7e 	bl	800842c <USBD_LL_IsStallEP>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d003      	beq.n	800693e <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	2201      	movs	r2, #1
 800693a:	601a      	str	r2, [r3, #0]
 800693c:	e002      	b.n	8006944 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	2200      	movs	r2, #0
 8006942:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	2202      	movs	r2, #2
 8006948:	4619      	mov	r1, r3
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 fb42 	bl	8006fd4 <USBD_CtlSendData>
          break;
 8006950:	e004      	b.n	800695c <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 8006952:	6839      	ldr	r1, [r7, #0]
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 fad2 	bl	8006efe <USBD_CtlError>
        break;
 800695a:	bf00      	nop
      }
      break;
 800695c:	e004      	b.n	8006968 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800695e:	6839      	ldr	r1, [r7, #0]
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 facc 	bl	8006efe <USBD_CtlError>
      break;
 8006966:	bf00      	nop
    }
    break;
 8006968:	e004      	b.n	8006974 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800696a:	6839      	ldr	r1, [r7, #0]
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 fac6 	bl	8006efe <USBD_CtlError>
    break;
 8006972:	bf00      	nop
  }

  return ret;
 8006974:	7bfb      	ldrb	r3, [r7, #15]
}
 8006976:	4618      	mov	r0, r3
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
	...

08006980 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	885b      	ldrh	r3, [r3, #2]
 800698e:	0a1b      	lsrs	r3, r3, #8
 8006990:	b29b      	uxth	r3, r3
 8006992:	3b01      	subs	r3, #1
 8006994:	2b0e      	cmp	r3, #14
 8006996:	f200 80e5 	bhi.w	8006b64 <USBD_GetDescriptor+0x1e4>
 800699a:	a201      	add	r2, pc, #4	; (adr r2, 80069a0 <USBD_GetDescriptor+0x20>)
 800699c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a0:	080069f5 	.word	0x080069f5
 80069a4:	08006a0d 	.word	0x08006a0d
 80069a8:	08006a4d 	.word	0x08006a4d
 80069ac:	08006b65 	.word	0x08006b65
 80069b0:	08006b65 	.word	0x08006b65
 80069b4:	08006b11 	.word	0x08006b11
 80069b8:	08006b37 	.word	0x08006b37
 80069bc:	08006b65 	.word	0x08006b65
 80069c0:	08006b65 	.word	0x08006b65
 80069c4:	08006b65 	.word	0x08006b65
 80069c8:	08006b65 	.word	0x08006b65
 80069cc:	08006b65 	.word	0x08006b65
 80069d0:	08006b65 	.word	0x08006b65
 80069d4:	08006b65 	.word	0x08006b65
 80069d8:	080069dd 	.word	0x080069dd
  {
#if (USBD_LPM_ENABLED == 1U)
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80069e2:	69db      	ldr	r3, [r3, #28]
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	7c12      	ldrb	r2, [r2, #16]
 80069e8:	f107 010a 	add.w	r1, r7, #10
 80069ec:	4610      	mov	r0, r2
 80069ee:	4798      	blx	r3
 80069f0:	60f8      	str	r0, [r7, #12]
    break;
 80069f2:	e0bc      	b.n	8006b6e <USBD_GetDescriptor+0x1ee>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	7c12      	ldrb	r2, [r2, #16]
 8006a00:	f107 010a 	add.w	r1, r7, #10
 8006a04:	4610      	mov	r0, r2
 8006a06:	4798      	blx	r3
 8006a08:	60f8      	str	r0, [r7, #12]
    break;
 8006a0a:	e0b0      	b.n	8006b6e <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	7c1b      	ldrb	r3, [r3, #16]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10d      	bne.n	8006a30 <USBD_GetDescriptor+0xb0>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a1c:	f107 020a 	add.w	r2, r7, #10
 8006a20:	4610      	mov	r0, r2
 8006a22:	4798      	blx	r3
 8006a24:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	2202      	movs	r2, #2
 8006a2c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006a2e:	e09e      	b.n	8006b6e <USBD_GetDescriptor+0x1ee>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a38:	f107 020a 	add.w	r2, r7, #10
 8006a3c:	4610      	mov	r0, r2
 8006a3e:	4798      	blx	r3
 8006a40:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	3301      	adds	r3, #1
 8006a46:	2202      	movs	r2, #2
 8006a48:	701a      	strb	r2, [r3, #0]
    break;
 8006a4a:	e090      	b.n	8006b6e <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	885b      	ldrh	r3, [r3, #2]
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	2b05      	cmp	r3, #5
 8006a54:	d856      	bhi.n	8006b04 <USBD_GetDescriptor+0x184>
 8006a56:	a201      	add	r2, pc, #4	; (adr r2, 8006a5c <USBD_GetDescriptor+0xdc>)
 8006a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a5c:	08006a75 	.word	0x08006a75
 8006a60:	08006a8d 	.word	0x08006a8d
 8006a64:	08006aa5 	.word	0x08006aa5
 8006a68:	08006abd 	.word	0x08006abd
 8006a6c:	08006ad5 	.word	0x08006ad5
 8006a70:	08006aed 	.word	0x08006aed
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	7c12      	ldrb	r2, [r2, #16]
 8006a80:	f107 010a 	add.w	r1, r7, #10
 8006a84:	4610      	mov	r0, r2
 8006a86:	4798      	blx	r3
 8006a88:	60f8      	str	r0, [r7, #12]
      break;
 8006a8a:	e040      	b.n	8006b0e <USBD_GetDescriptor+0x18e>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	7c12      	ldrb	r2, [r2, #16]
 8006a98:	f107 010a 	add.w	r1, r7, #10
 8006a9c:	4610      	mov	r0, r2
 8006a9e:	4798      	blx	r3
 8006aa0:	60f8      	str	r0, [r7, #12]
      break;
 8006aa2:	e034      	b.n	8006b0e <USBD_GetDescriptor+0x18e>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	7c12      	ldrb	r2, [r2, #16]
 8006ab0:	f107 010a 	add.w	r1, r7, #10
 8006ab4:	4610      	mov	r0, r2
 8006ab6:	4798      	blx	r3
 8006ab8:	60f8      	str	r0, [r7, #12]
      break;
 8006aba:	e028      	b.n	8006b0e <USBD_GetDescriptor+0x18e>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	7c12      	ldrb	r2, [r2, #16]
 8006ac8:	f107 010a 	add.w	r1, r7, #10
 8006acc:	4610      	mov	r0, r2
 8006ace:	4798      	blx	r3
 8006ad0:	60f8      	str	r0, [r7, #12]
      break;
 8006ad2:	e01c      	b.n	8006b0e <USBD_GetDescriptor+0x18e>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006ada:	695b      	ldr	r3, [r3, #20]
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	7c12      	ldrb	r2, [r2, #16]
 8006ae0:	f107 010a 	add.w	r1, r7, #10
 8006ae4:	4610      	mov	r0, r2
 8006ae6:	4798      	blx	r3
 8006ae8:	60f8      	str	r0, [r7, #12]
      break;
 8006aea:	e010      	b.n	8006b0e <USBD_GetDescriptor+0x18e>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006af2:	699b      	ldr	r3, [r3, #24]
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	7c12      	ldrb	r2, [r2, #16]
 8006af8:	f107 010a 	add.w	r1, r7, #10
 8006afc:	4610      	mov	r0, r2
 8006afe:	4798      	blx	r3
 8006b00:	60f8      	str	r0, [r7, #12]
      break;
 8006b02:	e004      	b.n	8006b0e <USBD_GetDescriptor+0x18e>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8006b04:	6839      	ldr	r1, [r7, #0]
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 f9f9 	bl	8006efe <USBD_CtlError>
      return;
 8006b0c:	e04b      	b.n	8006ba6 <USBD_GetDescriptor+0x226>
#endif
    }
    break;
 8006b0e:	e02e      	b.n	8006b6e <USBD_GetDescriptor+0x1ee>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	7c1b      	ldrb	r3, [r3, #16]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d109      	bne.n	8006b2c <USBD_GetDescriptor+0x1ac>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b20:	f107 020a 	add.w	r2, r7, #10
 8006b24:	4610      	mov	r0, r2
 8006b26:	4798      	blx	r3
 8006b28:	60f8      	str	r0, [r7, #12]
      break;
 8006b2a:	e020      	b.n	8006b6e <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8006b2c:	6839      	ldr	r1, [r7, #0]
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 f9e5 	bl	8006efe <USBD_CtlError>
      return;
 8006b34:	e037      	b.n	8006ba6 <USBD_GetDescriptor+0x226>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	7c1b      	ldrb	r3, [r3, #16]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d10d      	bne.n	8006b5a <USBD_GetDescriptor+0x1da>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b46:	f107 020a 	add.w	r2, r7, #10
 8006b4a:	4610      	mov	r0, r2
 8006b4c:	4798      	blx	r3
 8006b4e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	3301      	adds	r3, #1
 8006b54:	2207      	movs	r2, #7
 8006b56:	701a      	strb	r2, [r3, #0]
      break;
 8006b58:	e009      	b.n	8006b6e <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8006b5a:	6839      	ldr	r1, [r7, #0]
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 f9ce 	bl	8006efe <USBD_CtlError>
      return;
 8006b62:	e020      	b.n	8006ba6 <USBD_GetDescriptor+0x226>
    }

  default:
     USBD_CtlError(pdev , req);
 8006b64:	6839      	ldr	r1, [r7, #0]
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f9c9 	bl	8006efe <USBD_CtlError>
    return;
 8006b6c:	e01b      	b.n	8006ba6 <USBD_GetDescriptor+0x226>
  }

  if((len != 0U) && (req->wLength != 0U))
 8006b6e:	897b      	ldrh	r3, [r7, #10]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d011      	beq.n	8006b98 <USBD_GetDescriptor+0x218>
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	88db      	ldrh	r3, [r3, #6]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00d      	beq.n	8006b98 <USBD_GetDescriptor+0x218>
  {

    len = MIN(len, req->wLength);
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	88da      	ldrh	r2, [r3, #6]
 8006b80:	897b      	ldrh	r3, [r7, #10]
 8006b82:	4293      	cmp	r3, r2
 8006b84:	bf28      	it	cs
 8006b86:	4613      	movcs	r3, r2
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8006b8c:	897b      	ldrh	r3, [r7, #10]
 8006b8e:	461a      	mov	r2, r3
 8006b90:	68f9      	ldr	r1, [r7, #12]
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 fa1e 	bl	8006fd4 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	88db      	ldrh	r3, [r3, #6]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d102      	bne.n	8006ba6 <USBD_GetDescriptor+0x226>
  {
   USBD_CtlSendStatus(pdev);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 fa75 	bl	8007090 <USBD_CtlSendStatus>
  }
}
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	889b      	ldrh	r3, [r3, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d130      	bne.n	8006c20 <USBD_SetAddress+0x74>
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	88db      	ldrh	r3, [r3, #6]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d12c      	bne.n	8006c20 <USBD_SetAddress+0x74>
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	885b      	ldrh	r3, [r3, #2]
 8006bca:	2b7f      	cmp	r3, #127	; 0x7f
 8006bcc:	d828      	bhi.n	8006c20 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	885b      	ldrh	r3, [r3, #2]
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bd8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006be0:	2b03      	cmp	r3, #3
 8006be2:	d104      	bne.n	8006bee <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8006be4:	6839      	ldr	r1, [r7, #0]
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 f989 	bl	8006efe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bec:	e01c      	b.n	8006c28 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	7bfa      	ldrb	r2, [r7, #15]
 8006bf2:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006bf6:	7bfb      	ldrb	r3, [r7, #15]
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f001 fc42 	bl	8008484 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 fa45 	bl	8007090 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006c06:	7bfb      	ldrb	r3, [r7, #15]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d004      	beq.n	8006c16 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2202      	movs	r2, #2
 8006c10:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c14:	e008      	b.n	8006c28 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c1e:	e003      	b.n	8006c28 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006c20:	6839      	ldr	r1, [r7, #0]
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 f96b 	bl	8006efe <USBD_CtlError>
  }
}
 8006c28:	bf00      	nop
 8006c2a:	3710      	adds	r7, #16
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	885b      	ldrh	r3, [r3, #2]
 8006c3e:	b2da      	uxtb	r2, r3
 8006c40:	4b41      	ldr	r3, [pc, #260]	; (8006d48 <USBD_SetConfig+0x118>)
 8006c42:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006c44:	4b40      	ldr	r3, [pc, #256]	; (8006d48 <USBD_SetConfig+0x118>)
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d904      	bls.n	8006c56 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006c4c:	6839      	ldr	r1, [r7, #0]
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 f955 	bl	8006efe <USBD_CtlError>
 8006c54:	e075      	b.n	8006d42 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d002      	beq.n	8006c66 <USBD_SetConfig+0x36>
 8006c60:	2b03      	cmp	r3, #3
 8006c62:	d023      	beq.n	8006cac <USBD_SetConfig+0x7c>
 8006c64:	e062      	b.n	8006d2c <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8006c66:	4b38      	ldr	r3, [pc, #224]	; (8006d48 <USBD_SetConfig+0x118>)
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d01a      	beq.n	8006ca4 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8006c6e:	4b36      	ldr	r3, [pc, #216]	; (8006d48 <USBD_SetConfig+0x118>)
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	461a      	mov	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2203      	movs	r2, #3
 8006c7c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006c80:	4b31      	ldr	r3, [pc, #196]	; (8006d48 <USBD_SetConfig+0x118>)
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	4619      	mov	r1, r3
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f7ff fa0e 	bl	80060a8 <USBD_SetClassConfig>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d104      	bne.n	8006c9c <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8006c92:	6839      	ldr	r1, [r7, #0]
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 f932 	bl	8006efe <USBD_CtlError>
          return;
 8006c9a:	e052      	b.n	8006d42 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 f9f7 	bl	8007090 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8006ca2:	e04e      	b.n	8006d42 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 f9f3 	bl	8007090 <USBD_CtlSendStatus>
      break;
 8006caa:	e04a      	b.n	8006d42 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006cac:	4b26      	ldr	r3, [pc, #152]	; (8006d48 <USBD_SetConfig+0x118>)
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d112      	bne.n	8006cda <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8006cbc:	4b22      	ldr	r3, [pc, #136]	; (8006d48 <USBD_SetConfig+0x118>)
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8006cc6:	4b20      	ldr	r3, [pc, #128]	; (8006d48 <USBD_SetConfig+0x118>)
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	4619      	mov	r1, r3
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f7ff fa0a 	bl	80060e6 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f9dc 	bl	8007090 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8006cd8:	e033      	b.n	8006d42 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8006cda:	4b1b      	ldr	r3, [pc, #108]	; (8006d48 <USBD_SetConfig+0x118>)
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	461a      	mov	r2, r3
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d01d      	beq.n	8006d24 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	4619      	mov	r1, r3
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f7ff f9f8 	bl	80060e6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006cf6:	4b14      	ldr	r3, [pc, #80]	; (8006d48 <USBD_SetConfig+0x118>)
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006d00:	4b11      	ldr	r3, [pc, #68]	; (8006d48 <USBD_SetConfig+0x118>)
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	4619      	mov	r1, r3
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f7ff f9ce 	bl	80060a8 <USBD_SetClassConfig>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d104      	bne.n	8006d1c <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8006d12:	6839      	ldr	r1, [r7, #0]
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 f8f2 	bl	8006efe <USBD_CtlError>
          return;
 8006d1a:	e012      	b.n	8006d42 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 f9b7 	bl	8007090 <USBD_CtlSendStatus>
      break;
 8006d22:	e00e      	b.n	8006d42 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 f9b3 	bl	8007090 <USBD_CtlSendStatus>
      break;
 8006d2a:	e00a      	b.n	8006d42 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8006d2c:	6839      	ldr	r1, [r7, #0]
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 f8e5 	bl	8006efe <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8006d34:	4b04      	ldr	r3, [pc, #16]	; (8006d48 <USBD_SetConfig+0x118>)
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	4619      	mov	r1, r3
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f7ff f9d3 	bl	80060e6 <USBD_ClrClassConfig>
      break;
 8006d40:	bf00      	nop
    }
  }
}
 8006d42:	3708      	adds	r7, #8
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	2000020c 	.word	0x2000020c

08006d4c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	88db      	ldrh	r3, [r3, #6]
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d004      	beq.n	8006d68 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8006d5e:	6839      	ldr	r1, [r7, #0]
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 f8cc 	bl	8006efe <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8006d66:	e021      	b.n	8006dac <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	db17      	blt.n	8006da2 <USBD_GetConfig+0x56>
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	dd02      	ble.n	8006d7c <USBD_GetConfig+0x30>
 8006d76:	2b03      	cmp	r3, #3
 8006d78:	d00b      	beq.n	8006d92 <USBD_GetConfig+0x46>
 8006d7a:	e012      	b.n	8006da2 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	3308      	adds	r3, #8
 8006d86:	2201      	movs	r2, #1
 8006d88:	4619      	mov	r1, r3
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 f922 	bl	8006fd4 <USBD_CtlSendData>
      break;
 8006d90:	e00c      	b.n	8006dac <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	3304      	adds	r3, #4
 8006d96:	2201      	movs	r2, #1
 8006d98:	4619      	mov	r1, r3
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f91a 	bl	8006fd4 <USBD_CtlSendData>
      break;
 8006da0:	e004      	b.n	8006dac <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8006da2:	6839      	ldr	r1, [r7, #0]
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 f8aa 	bl	8006efe <USBD_CtlError>
      break;
 8006daa:	bf00      	nop
}
 8006dac:	bf00      	nop
 8006dae:	3708      	adds	r7, #8
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d81e      	bhi.n	8006e08 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	88db      	ldrh	r3, [r3, #6]
 8006dce:	2b02      	cmp	r3, #2
 8006dd0:	d004      	beq.n	8006ddc <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006dd2:	6839      	ldr	r1, [r7, #0]
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 f892 	bl	8006efe <USBD_CtlError>
      break;
 8006dda:	e01a      	b.n	8006e12 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d005      	beq.n	8006df8 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	f043 0202 	orr.w	r2, r3, #2
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	330c      	adds	r3, #12
 8006dfc:	2202      	movs	r2, #2
 8006dfe:	4619      	mov	r1, r3
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 f8e7 	bl	8006fd4 <USBD_CtlSendData>
    break;
 8006e06:	e004      	b.n	8006e12 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8006e08:	6839      	ldr	r1, [r7, #0]
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f877 	bl	8006efe <USBD_CtlError>
    break;
 8006e10:	bf00      	nop
  }
}
 8006e12:	bf00      	nop
 8006e14:	3708      	adds	r7, #8
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b082      	sub	sp, #8
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
 8006e22:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	885b      	ldrh	r3, [r3, #2]
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d106      	bne.n	8006e3a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 f92b 	bl	8007090 <USBD_CtlSendStatus>
  }

}
 8006e3a:	bf00      	nop
 8006e3c:	3708      	adds	r7, #8
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b082      	sub	sp, #8
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
 8006e4a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006e52:	3b01      	subs	r3, #1
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d80b      	bhi.n	8006e70 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	885b      	ldrh	r3, [r3, #2]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d10c      	bne.n	8006e7a <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 f911 	bl	8007090 <USBD_CtlSendStatus>
    }
    break;
 8006e6e:	e004      	b.n	8006e7a <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8006e70:	6839      	ldr	r1, [r7, #0]
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 f843 	bl	8006efe <USBD_CtlError>
    break;
 8006e78:	e000      	b.n	8006e7c <USBD_ClrFeature+0x3a>
    break;
 8006e7a:	bf00      	nop
  }
}
 8006e7c:	bf00      	nop
 8006e7e:	3708      	adds	r7, #8
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	781a      	ldrb	r2, [r3, #0]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	785a      	ldrb	r2, [r3, #1]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	3302      	adds	r3, #2
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	3303      	adds	r3, #3
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	021b      	lsls	r3, r3, #8
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	4413      	add	r3, r2
 8006eb4:	b29a      	uxth	r2, r3
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	3304      	adds	r3, #4
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	b29a      	uxth	r2, r3
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	3305      	adds	r3, #5
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	021b      	lsls	r3, r3, #8
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	4413      	add	r3, r2
 8006ed0:	b29a      	uxth	r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	3306      	adds	r3, #6
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	3307      	adds	r3, #7
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	021b      	lsls	r3, r3, #8
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	4413      	add	r3, r2
 8006eec:	b29a      	uxth	r2, r3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	80da      	strh	r2, [r3, #6]

}
 8006ef2:	bf00      	nop
 8006ef4:	370c      	adds	r7, #12
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr

08006efe <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006efe:	b580      	push	{r7, lr}
 8006f00:	b082      	sub	sp, #8
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
 8006f06:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8006f08:	2180      	movs	r1, #128	; 0x80
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f001 fa50 	bl	80083b0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8006f10:	2100      	movs	r1, #0
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f001 fa4c 	bl	80083b0 <USBD_LL_StallEP>
}
 8006f18:	bf00      	nop
 8006f1a:	3708      	adds	r7, #8
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b086      	sub	sp, #24
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d032      	beq.n	8006f9c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006f36:	68f8      	ldr	r0, [r7, #12]
 8006f38:	f000 f834 	bl	8006fa4 <USBD_GetLen>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	3301      	adds	r3, #1
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	005b      	lsls	r3, r3, #1
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006f4a:	7dfb      	ldrb	r3, [r7, #23]
 8006f4c:	1c5a      	adds	r2, r3, #1
 8006f4e:	75fa      	strb	r2, [r7, #23]
 8006f50:	461a      	mov	r2, r3
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	4413      	add	r3, r2
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	7812      	ldrb	r2, [r2, #0]
 8006f5a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006f5c:	7dfb      	ldrb	r3, [r7, #23]
 8006f5e:	1c5a      	adds	r2, r3, #1
 8006f60:	75fa      	strb	r2, [r7, #23]
 8006f62:	461a      	mov	r2, r3
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	4413      	add	r3, r2
 8006f68:	2203      	movs	r2, #3
 8006f6a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006f6c:	e012      	b.n	8006f94 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	1c5a      	adds	r2, r3, #1
 8006f72:	60fa      	str	r2, [r7, #12]
 8006f74:	7dfa      	ldrb	r2, [r7, #23]
 8006f76:	1c51      	adds	r1, r2, #1
 8006f78:	75f9      	strb	r1, [r7, #23]
 8006f7a:	4611      	mov	r1, r2
 8006f7c:	68ba      	ldr	r2, [r7, #8]
 8006f7e:	440a      	add	r2, r1
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006f84:	7dfb      	ldrb	r3, [r7, #23]
 8006f86:	1c5a      	adds	r2, r3, #1
 8006f88:	75fa      	strb	r2, [r7, #23]
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	4413      	add	r3, r2
 8006f90:	2200      	movs	r2, #0
 8006f92:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d1e8      	bne.n	8006f6e <USBD_GetString+0x4e>
    }
  }
}
 8006f9c:	bf00      	nop
 8006f9e:	3718      	adds	r7, #24
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b085      	sub	sp, #20
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8006fac:	2300      	movs	r3, #0
 8006fae:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8006fb0:	e005      	b.n	8006fbe <USBD_GetLen+0x1a>
    {
        len++;
 8006fb2:	7bfb      	ldrb	r3, [r7, #15]
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	73fb      	strb	r3, [r7, #15]
        buf++;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d1f5      	bne.n	8006fb2 <USBD_GetLen+0xe>
    }

    return len;
 8006fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3714      	adds	r7, #20
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	4613      	mov	r3, r2
 8006fe0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2202      	movs	r2, #2
 8006fe6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8006fea:	88fa      	ldrh	r2, [r7, #6]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006ff0:	88fa      	ldrh	r2, [r7, #6]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8006ff6:	88fb      	ldrh	r3, [r7, #6]
 8006ff8:	68ba      	ldr	r2, [r7, #8]
 8006ffa:	2100      	movs	r1, #0
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f001 fa60 	bl	80084c2 <USBD_LL_Transmit>

  return USBD_OK;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	3710      	adds	r7, #16
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	4613      	mov	r3, r2
 8007018:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800701a:	88fb      	ldrh	r3, [r7, #6]
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	2100      	movs	r1, #0
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f001 fa4e 	bl	80084c2 <USBD_LL_Transmit>

  return USBD_OK;
 8007026:	2300      	movs	r3, #0
}
 8007028:	4618      	mov	r0, r3
 800702a:	3710      	adds	r7, #16
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	4613      	mov	r3, r2
 800703c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2203      	movs	r2, #3
 8007042:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8007046:	88fa      	ldrh	r2, [r7, #6]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800704e:	88fa      	ldrh	r2, [r7, #6]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8007056:	88fb      	ldrh	r3, [r7, #6]
 8007058:	68ba      	ldr	r2, [r7, #8]
 800705a:	2100      	movs	r1, #0
 800705c:	68f8      	ldr	r0, [r7, #12]
 800705e:	f001 fa53 	bl	8008508 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007062:	2300      	movs	r3, #0
}
 8007064:	4618      	mov	r0, r3
 8007066:	3710      	adds	r7, #16
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	4613      	mov	r3, r2
 8007078:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800707a:	88fb      	ldrh	r3, [r7, #6]
 800707c:	68ba      	ldr	r2, [r7, #8]
 800707e:	2100      	movs	r1, #0
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f001 fa41 	bl	8008508 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2204      	movs	r2, #4
 800709c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80070a0:	2300      	movs	r3, #0
 80070a2:	2200      	movs	r2, #0
 80070a4:	2100      	movs	r1, #0
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f001 fa0b 	bl	80084c2 <USBD_LL_Transmit>

  return USBD_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3708      	adds	r7, #8
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}

080070b6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80070b6:	b580      	push	{r7, lr}
 80070b8:	b082      	sub	sp, #8
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2205      	movs	r2, #5
 80070c2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80070c6:	2300      	movs	r3, #0
 80070c8:	2200      	movs	r2, #0
 80070ca:	2100      	movs	r1, #0
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f001 fa1b 	bl	8008508 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3708      	adds	r7, #8
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 80070e0:	4b16      	ldr	r3, [pc, #88]	; (800713c <MX_CAN1_Init+0x60>)
 80070e2:	4a17      	ldr	r2, [pc, #92]	; (8007140 <MX_CAN1_Init+0x64>)
 80070e4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80070e6:	4b15      	ldr	r3, [pc, #84]	; (800713c <MX_CAN1_Init+0x60>)
 80070e8:	2210      	movs	r2, #16
 80070ea:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80070ec:	4b13      	ldr	r3, [pc, #76]	; (800713c <MX_CAN1_Init+0x60>)
 80070ee:	2200      	movs	r2, #0
 80070f0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80070f2:	4b12      	ldr	r3, [pc, #72]	; (800713c <MX_CAN1_Init+0x60>)
 80070f4:	2200      	movs	r2, #0
 80070f6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80070f8:	4b10      	ldr	r3, [pc, #64]	; (800713c <MX_CAN1_Init+0x60>)
 80070fa:	2200      	movs	r2, #0
 80070fc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80070fe:	4b0f      	ldr	r3, [pc, #60]	; (800713c <MX_CAN1_Init+0x60>)
 8007100:	2200      	movs	r2, #0
 8007102:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8007104:	4b0d      	ldr	r3, [pc, #52]	; (800713c <MX_CAN1_Init+0x60>)
 8007106:	2200      	movs	r2, #0
 8007108:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800710a:	4b0c      	ldr	r3, [pc, #48]	; (800713c <MX_CAN1_Init+0x60>)
 800710c:	2200      	movs	r2, #0
 800710e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8007110:	4b0a      	ldr	r3, [pc, #40]	; (800713c <MX_CAN1_Init+0x60>)
 8007112:	2200      	movs	r2, #0
 8007114:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8007116:	4b09      	ldr	r3, [pc, #36]	; (800713c <MX_CAN1_Init+0x60>)
 8007118:	2200      	movs	r2, #0
 800711a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800711c:	4b07      	ldr	r3, [pc, #28]	; (800713c <MX_CAN1_Init+0x60>)
 800711e:	2200      	movs	r2, #0
 8007120:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8007122:	4b06      	ldr	r3, [pc, #24]	; (800713c <MX_CAN1_Init+0x60>)
 8007124:	2200      	movs	r2, #0
 8007126:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8007128:	4804      	ldr	r0, [pc, #16]	; (800713c <MX_CAN1_Init+0x60>)
 800712a:	f7f9 fa87 	bl	800063c <HAL_CAN_Init>
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d001      	beq.n	8007138 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8007134:	f000 fa52 	bl	80075dc <Error_Handler>
  }

}
 8007138:	bf00      	nop
 800713a:	bd80      	pop	{r7, pc}
 800713c:	20000220 	.word	0x20000220
 8007140:	40006400 	.word	0x40006400

08007144 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b08a      	sub	sp, #40	; 0x28
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800714c:	f107 0314 	add.w	r3, r7, #20
 8007150:	2200      	movs	r2, #0
 8007152:	601a      	str	r2, [r3, #0]
 8007154:	605a      	str	r2, [r3, #4]
 8007156:	609a      	str	r2, [r3, #8]
 8007158:	60da      	str	r2, [r3, #12]
 800715a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a29      	ldr	r2, [pc, #164]	; (8007208 <HAL_CAN_MspInit+0xc4>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d14c      	bne.n	8007200 <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8007166:	2300      	movs	r3, #0
 8007168:	613b      	str	r3, [r7, #16]
 800716a:	4b28      	ldr	r3, [pc, #160]	; (800720c <HAL_CAN_MspInit+0xc8>)
 800716c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716e:	4a27      	ldr	r2, [pc, #156]	; (800720c <HAL_CAN_MspInit+0xc8>)
 8007170:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007174:	6413      	str	r3, [r2, #64]	; 0x40
 8007176:	4b25      	ldr	r3, [pc, #148]	; (800720c <HAL_CAN_MspInit+0xc8>)
 8007178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800717e:	613b      	str	r3, [r7, #16]
 8007180:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007182:	2300      	movs	r3, #0
 8007184:	60fb      	str	r3, [r7, #12]
 8007186:	4b21      	ldr	r3, [pc, #132]	; (800720c <HAL_CAN_MspInit+0xc8>)
 8007188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800718a:	4a20      	ldr	r2, [pc, #128]	; (800720c <HAL_CAN_MspInit+0xc8>)
 800718c:	f043 0302 	orr.w	r3, r3, #2
 8007190:	6313      	str	r3, [r2, #48]	; 0x30
 8007192:	4b1e      	ldr	r3, [pc, #120]	; (800720c <HAL_CAN_MspInit+0xc8>)
 8007194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007196:	f003 0302 	and.w	r3, r3, #2
 800719a:	60fb      	str	r3, [r7, #12]
 800719c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800719e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80071a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071a4:	2302      	movs	r3, #2
 80071a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071a8:	2300      	movs	r3, #0
 80071aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071ac:	2303      	movs	r3, #3
 80071ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80071b0:	2309      	movs	r3, #9
 80071b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071b4:	f107 0314 	add.w	r3, r7, #20
 80071b8:	4619      	mov	r1, r3
 80071ba:	4815      	ldr	r0, [pc, #84]	; (8007210 <HAL_CAN_MspInit+0xcc>)
 80071bc:	f7f9 fea0 	bl	8000f00 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80071c0:	2200      	movs	r2, #0
 80071c2:	2100      	movs	r1, #0
 80071c4:	2013      	movs	r0, #19
 80071c6:	f7f9 fe42 	bl	8000e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80071ca:	2013      	movs	r0, #19
 80071cc:	f7f9 fe5b 	bl	8000e86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80071d0:	2200      	movs	r2, #0
 80071d2:	2100      	movs	r1, #0
 80071d4:	2014      	movs	r0, #20
 80071d6:	f7f9 fe3a 	bl	8000e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80071da:	2014      	movs	r0, #20
 80071dc:	f7f9 fe53 	bl	8000e86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80071e0:	2200      	movs	r2, #0
 80071e2:	2100      	movs	r1, #0
 80071e4:	2015      	movs	r0, #21
 80071e6:	f7f9 fe32 	bl	8000e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80071ea:	2015      	movs	r0, #21
 80071ec:	f7f9 fe4b 	bl	8000e86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 80071f0:	2200      	movs	r2, #0
 80071f2:	2100      	movs	r1, #0
 80071f4:	2016      	movs	r0, #22
 80071f6:	f7f9 fe2a 	bl	8000e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80071fa:	2016      	movs	r0, #22
 80071fc:	f7f9 fe43 	bl	8000e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8007200:	bf00      	nop
 8007202:	3728      	adds	r7, #40	; 0x28
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	40006400 	.word	0x40006400
 800720c:	40023800 	.word	0x40023800
 8007210:	40020400 	.word	0x40020400

08007214 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b08a      	sub	sp, #40	; 0x28
 8007218:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800721a:	f107 0314 	add.w	r3, r7, #20
 800721e:	2200      	movs	r2, #0
 8007220:	601a      	str	r2, [r3, #0]
 8007222:	605a      	str	r2, [r3, #4]
 8007224:	609a      	str	r2, [r3, #8]
 8007226:	60da      	str	r2, [r3, #12]
 8007228:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800722a:	2300      	movs	r3, #0
 800722c:	613b      	str	r3, [r7, #16]
 800722e:	4b52      	ldr	r3, [pc, #328]	; (8007378 <MX_GPIO_Init+0x164>)
 8007230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007232:	4a51      	ldr	r2, [pc, #324]	; (8007378 <MX_GPIO_Init+0x164>)
 8007234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007238:	6313      	str	r3, [r2, #48]	; 0x30
 800723a:	4b4f      	ldr	r3, [pc, #316]	; (8007378 <MX_GPIO_Init+0x164>)
 800723c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800723e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007242:	613b      	str	r3, [r7, #16]
 8007244:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007246:	2300      	movs	r3, #0
 8007248:	60fb      	str	r3, [r7, #12]
 800724a:	4b4b      	ldr	r3, [pc, #300]	; (8007378 <MX_GPIO_Init+0x164>)
 800724c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800724e:	4a4a      	ldr	r2, [pc, #296]	; (8007378 <MX_GPIO_Init+0x164>)
 8007250:	f043 0304 	orr.w	r3, r3, #4
 8007254:	6313      	str	r3, [r2, #48]	; 0x30
 8007256:	4b48      	ldr	r3, [pc, #288]	; (8007378 <MX_GPIO_Init+0x164>)
 8007258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800725a:	f003 0304 	and.w	r3, r3, #4
 800725e:	60fb      	str	r3, [r7, #12]
 8007260:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007262:	2300      	movs	r3, #0
 8007264:	60bb      	str	r3, [r7, #8]
 8007266:	4b44      	ldr	r3, [pc, #272]	; (8007378 <MX_GPIO_Init+0x164>)
 8007268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800726a:	4a43      	ldr	r2, [pc, #268]	; (8007378 <MX_GPIO_Init+0x164>)
 800726c:	f043 0301 	orr.w	r3, r3, #1
 8007270:	6313      	str	r3, [r2, #48]	; 0x30
 8007272:	4b41      	ldr	r3, [pc, #260]	; (8007378 <MX_GPIO_Init+0x164>)
 8007274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007276:	f003 0301 	and.w	r3, r3, #1
 800727a:	60bb      	str	r3, [r7, #8]
 800727c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800727e:	2300      	movs	r3, #0
 8007280:	607b      	str	r3, [r7, #4]
 8007282:	4b3d      	ldr	r3, [pc, #244]	; (8007378 <MX_GPIO_Init+0x164>)
 8007284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007286:	4a3c      	ldr	r2, [pc, #240]	; (8007378 <MX_GPIO_Init+0x164>)
 8007288:	f043 0302 	orr.w	r3, r3, #2
 800728c:	6313      	str	r3, [r2, #48]	; 0x30
 800728e:	4b3a      	ldr	r3, [pc, #232]	; (8007378 <MX_GPIO_Init+0x164>)
 8007290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007292:	f003 0302 	and.w	r3, r3, #2
 8007296:	607b      	str	r3, [r7, #4]
 8007298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800729a:	2300      	movs	r3, #0
 800729c:	603b      	str	r3, [r7, #0]
 800729e:	4b36      	ldr	r3, [pc, #216]	; (8007378 <MX_GPIO_Init+0x164>)
 80072a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a2:	4a35      	ldr	r2, [pc, #212]	; (8007378 <MX_GPIO_Init+0x164>)
 80072a4:	f043 0308 	orr.w	r3, r3, #8
 80072a8:	6313      	str	r3, [r2, #48]	; 0x30
 80072aa:	4b33      	ldr	r3, [pc, #204]	; (8007378 <MX_GPIO_Init+0x164>)
 80072ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ae:	f003 0308 	and.w	r3, r3, #8
 80072b2:	603b      	str	r3, [r7, #0]
 80072b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80072b6:	2200      	movs	r2, #0
 80072b8:	21f0      	movs	r1, #240	; 0xf0
 80072ba:	4830      	ldr	r0, [pc, #192]	; (800737c <MX_GPIO_Init+0x168>)
 80072bc:	f7f9 ffb2 	bl	8001224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|nrst_c1_Pin|nrst_c2_Pin 
 80072c0:	2200      	movs	r2, #0
 80072c2:	f241 3130 	movw	r1, #4912	; 0x1330
 80072c6:	482e      	ldr	r0, [pc, #184]	; (8007380 <MX_GPIO_Init+0x16c>)
 80072c8:	f7f9 ffac 	bl	8001224 <HAL_GPIO_WritePin>
                          |power_c1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|max485_dir_Pin|max485_dir_alt_Pin 
 80072cc:	2200      	movs	r2, #0
 80072ce:	f240 411f 	movw	r1, #1055	; 0x41f
 80072d2:	482c      	ldr	r0, [pc, #176]	; (8007384 <MX_GPIO_Init+0x170>)
 80072d4:	f7f9 ffa6 	bl	8001224 <HAL_GPIO_WritePin>
                          |boot_c1_Pin|boot_c2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(power_c2_GPIO_Port, power_c2_Pin, GPIO_PIN_RESET);
 80072d8:	2200      	movs	r2, #0
 80072da:	2104      	movs	r1, #4
 80072dc:	482a      	ldr	r0, [pc, #168]	; (8007388 <MX_GPIO_Init+0x174>)
 80072de:	f7f9 ffa1 	bl	8001224 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80072e2:	230f      	movs	r3, #15
 80072e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80072e6:	2300      	movs	r3, #0
 80072e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072ea:	2300      	movs	r3, #0
 80072ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80072ee:	f107 0314 	add.w	r3, r7, #20
 80072f2:	4619      	mov	r1, r3
 80072f4:	4822      	ldr	r0, [pc, #136]	; (8007380 <MX_GPIO_Init+0x16c>)
 80072f6:	f7f9 fe03 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80072fa:	23f0      	movs	r3, #240	; 0xf0
 80072fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80072fe:	2301      	movs	r3, #1
 8007300:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007302:	2300      	movs	r3, #0
 8007304:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007306:	2300      	movs	r3, #0
 8007308:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800730a:	f107 0314 	add.w	r3, r7, #20
 800730e:	4619      	mov	r1, r3
 8007310:	481a      	ldr	r0, [pc, #104]	; (800737c <MX_GPIO_Init+0x168>)
 8007312:	f7f9 fdf5 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PCPin PCPin 
                           PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|nrst_c1_Pin|nrst_c2_Pin 
 8007316:	f241 3330 	movw	r3, #4912	; 0x1330
 800731a:	617b      	str	r3, [r7, #20]
                          |power_c1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800731c:	2301      	movs	r3, #1
 800731e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007320:	2300      	movs	r3, #0
 8007322:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007324:	2300      	movs	r3, #0
 8007326:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007328:	f107 0314 	add.w	r3, r7, #20
 800732c:	4619      	mov	r1, r3
 800732e:	4814      	ldr	r0, [pc, #80]	; (8007380 <MX_GPIO_Init+0x16c>)
 8007330:	f7f9 fde6 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PBPin PBPin 
                           PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|max485_dir_Pin|max485_dir_alt_Pin 
 8007334:	f240 431f 	movw	r3, #1055	; 0x41f
 8007338:	617b      	str	r3, [r7, #20]
                          |boot_c1_Pin|boot_c2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800733a:	2301      	movs	r3, #1
 800733c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800733e:	2300      	movs	r3, #0
 8007340:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007342:	2300      	movs	r3, #0
 8007344:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007346:	f107 0314 	add.w	r3, r7, #20
 800734a:	4619      	mov	r1, r3
 800734c:	480d      	ldr	r0, [pc, #52]	; (8007384 <MX_GPIO_Init+0x170>)
 800734e:	f7f9 fdd7 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = power_c2_Pin;
 8007352:	2304      	movs	r3, #4
 8007354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007356:	2301      	movs	r3, #1
 8007358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800735a:	2300      	movs	r3, #0
 800735c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800735e:	2300      	movs	r3, #0
 8007360:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(power_c2_GPIO_Port, &GPIO_InitStruct);
 8007362:	f107 0314 	add.w	r3, r7, #20
 8007366:	4619      	mov	r1, r3
 8007368:	4807      	ldr	r0, [pc, #28]	; (8007388 <MX_GPIO_Init+0x174>)
 800736a:	f7f9 fdc9 	bl	8000f00 <HAL_GPIO_Init>

}
 800736e:	bf00      	nop
 8007370:	3728      	adds	r7, #40	; 0x28
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	40023800 	.word	0x40023800
 800737c:	40020000 	.word	0x40020000
 8007380:	40020800 	.word	0x40020800
 8007384:	40020400 	.word	0x40020400
 8007388:	40020c00 	.word	0x40020c00

0800738c <HAL_TIM_PeriodElapsedCallback>:
#include "tim.h"
#include "usart.h"
#include "gpio.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a0a      	ldr	r2, [pc, #40]	; (80073c4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d104      	bne.n	80073a8 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1);
 800739e:	2103      	movs	r1, #3
 80073a0:	4809      	ldr	r0, [pc, #36]	; (80073c8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80073a2:	f7f9 ff58 	bl	8001256 <HAL_GPIO_TogglePin>
	}
	else if(htim->Instance == TIM7)
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5);
	}
}
 80073a6:	e008      	b.n	80073ba <HAL_TIM_PeriodElapsedCallback+0x2e>
	else if(htim->Instance == TIM7)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a07      	ldr	r2, [pc, #28]	; (80073cc <HAL_TIM_PeriodElapsedCallback+0x40>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d103      	bne.n	80073ba <HAL_TIM_PeriodElapsedCallback+0x2e>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5);
 80073b2:	2130      	movs	r1, #48	; 0x30
 80073b4:	4806      	ldr	r0, [pc, #24]	; (80073d0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80073b6:	f7f9 ff4e 	bl	8001256 <HAL_GPIO_TogglePin>
}
 80073ba:	bf00      	nop
 80073bc:	3708      	adds	r7, #8
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	40001000 	.word	0x40001000
 80073c8:	40020400 	.word	0x40020400
 80073cc:	40001400 	.word	0x40001400
 80073d0:	40020800 	.word	0x40020800

080073d4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
}
 80073dc:	bf00      	nop
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
}
 80073f0:	bf00      	nop
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007402:	f7f9 f887 	bl	8000514 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007406:	f000 f85f 	bl	80074c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800740a:	f7ff ff03 	bl	8007214 <MX_GPIO_Init>
  MX_CAN1_Init();
 800740e:	f7ff fe65 	bl	80070dc <MX_CAN1_Init>
  MX_UART4_Init();
 8007412:	f000 fadb 	bl	80079cc <MX_UART4_Init>
  MX_USART1_UART_Init();
 8007416:	f000 fb03 	bl	8007a20 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800741a:	f000 fb2b 	bl	8007a74 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800741e:	f000 fb53 	bl	8007ac8 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8007422:	f000 fb7b 	bl	8007b1c <MX_USART6_UART_Init>
  MX_TIM6_Init();
 8007426:	f000 fa1f 	bl	8007868 <MX_TIM6_Init>
  MX_TIM7_Init();
 800742a:	f000 fa53 	bl	80078d4 <MX_TIM7_Init>
  MX_USB_DEVICE_Init();
 800742e:	f000 fce3 	bl	8007df8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim6);
 8007432:	481f      	ldr	r0, [pc, #124]	; (80074b0 <main+0xb4>)
 8007434:	f7fc f963 	bl	80036fe <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8007438:	481e      	ldr	r0, [pc, #120]	; (80074b4 <main+0xb8>)
 800743a:	f7fc f960 	bl	80036fe <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    uint16_t len = strlen((const char*)UserRxBufferFS);
 800743e:	481e      	ldr	r0, [pc, #120]	; (80074b8 <main+0xbc>)
 8007440:	f7f8 fee0 	bl	8000204 <strlen>
 8007444:	4603      	mov	r3, r0
 8007446:	80fb      	strh	r3, [r7, #6]

	    if(len > 0)
 8007448:	88fb      	ldrh	r3, [r7, #6]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d024      	beq.n	8007498 <main+0x9c>
	    {
	      strncpy((char *)UserTxBufferFS, (const char*)UserRxBufferFS, len);
 800744e:	88fb      	ldrh	r3, [r7, #6]
 8007450:	461a      	mov	r2, r3
 8007452:	4919      	ldr	r1, [pc, #100]	; (80074b8 <main+0xbc>)
 8007454:	4819      	ldr	r0, [pc, #100]	; (80074bc <main+0xc0>)
 8007456:	f001 fb4b 	bl	8008af0 <strncpy>
	      strcat((char *)UserTxBufferFS, "\r\n");
 800745a:	4818      	ldr	r0, [pc, #96]	; (80074bc <main+0xc0>)
 800745c:	f7f8 fed2 	bl	8000204 <strlen>
 8007460:	4603      	mov	r3, r0
 8007462:	461a      	mov	r2, r3
 8007464:	4b15      	ldr	r3, [pc, #84]	; (80074bc <main+0xc0>)
 8007466:	4413      	add	r3, r2
 8007468:	4a15      	ldr	r2, [pc, #84]	; (80074c0 <main+0xc4>)
 800746a:	8811      	ldrh	r1, [r2, #0]
 800746c:	7892      	ldrb	r2, [r2, #2]
 800746e:	8019      	strh	r1, [r3, #0]
 8007470:	709a      	strb	r2, [r3, #2]
	      CDC_Transmit_FS((uint8_t*)UserTxBufferFS, strlen((const char*)UserTxBufferFS));
 8007472:	4812      	ldr	r0, [pc, #72]	; (80074bc <main+0xc0>)
 8007474:	f7f8 fec6 	bl	8000204 <strlen>
 8007478:	4603      	mov	r3, r0
 800747a:	b29b      	uxth	r3, r3
 800747c:	4619      	mov	r1, r3
 800747e:	480f      	ldr	r0, [pc, #60]	; (80074bc <main+0xc0>)
 8007480:	f000 fd7e 	bl	8007f80 <CDC_Transmit_FS>
	      memset(UserRxBufferFS, 0, sizeof(UserRxBufferFS));
 8007484:	2240      	movs	r2, #64	; 0x40
 8007486:	2100      	movs	r1, #0
 8007488:	480b      	ldr	r0, [pc, #44]	; (80074b8 <main+0xbc>)
 800748a:	f001 fa71 	bl	8008970 <memset>
	      memset(UserTxBufferFS, 0, sizeof(UserTxBufferFS));
 800748e:	2240      	movs	r2, #64	; 0x40
 8007490:	2100      	movs	r1, #0
 8007492:	480a      	ldr	r0, [pc, #40]	; (80074bc <main+0xc0>)
 8007494:	f001 fa6c 	bl	8008970 <memset>
	    }


	    uint8_t sendData = "HELLO WORLD\r\n";
 8007498:	4b0a      	ldr	r3, [pc, #40]	; (80074c4 <main+0xc8>)
 800749a:	717b      	strb	r3, [r7, #5]

	    CDC_Transmit_FS(sendData, sizeof(sendData));
 800749c:	797b      	ldrb	r3, [r7, #5]
 800749e:	2101      	movs	r1, #1
 80074a0:	4618      	mov	r0, r3
 80074a2:	f000 fd6d 	bl	8007f80 <CDC_Transmit_FS>

	    HAL_Delay(500);
 80074a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80074aa:	f7f9 f8a5 	bl	80005f8 <HAL_Delay>
  {
 80074ae:	e7c6      	b.n	800743e <main+0x42>
 80074b0:	20000248 	.word	0x20000248
 80074b4:	20000288 	.word	0x20000288
 80074b8:	200006a4 	.word	0x200006a4
 80074bc:	20000ea4 	.word	0x20000ea4
 80074c0:	08008b38 	.word	0x08008b38
 80074c4:	08008b3c 	.word	0x08008b3c

080074c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b0ac      	sub	sp, #176	; 0xb0
 80074cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80074ce:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80074d2:	2234      	movs	r2, #52	; 0x34
 80074d4:	2100      	movs	r1, #0
 80074d6:	4618      	mov	r0, r3
 80074d8:	f001 fa4a 	bl	8008970 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80074dc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80074e0:	2200      	movs	r2, #0
 80074e2:	601a      	str	r2, [r3, #0]
 80074e4:	605a      	str	r2, [r3, #4]
 80074e6:	609a      	str	r2, [r3, #8]
 80074e8:	60da      	str	r2, [r3, #12]
 80074ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80074ec:	f107 030c 	add.w	r3, r7, #12
 80074f0:	225c      	movs	r2, #92	; 0x5c
 80074f2:	2100      	movs	r1, #0
 80074f4:	4618      	mov	r0, r3
 80074f6:	f001 fa3b 	bl	8008970 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80074fa:	2300      	movs	r3, #0
 80074fc:	60bb      	str	r3, [r7, #8]
 80074fe:	4b35      	ldr	r3, [pc, #212]	; (80075d4 <SystemClock_Config+0x10c>)
 8007500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007502:	4a34      	ldr	r2, [pc, #208]	; (80075d4 <SystemClock_Config+0x10c>)
 8007504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007508:	6413      	str	r3, [r2, #64]	; 0x40
 800750a:	4b32      	ldr	r3, [pc, #200]	; (80075d4 <SystemClock_Config+0x10c>)
 800750c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007512:	60bb      	str	r3, [r7, #8]
 8007514:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007516:	2300      	movs	r3, #0
 8007518:	607b      	str	r3, [r7, #4]
 800751a:	4b2f      	ldr	r3, [pc, #188]	; (80075d8 <SystemClock_Config+0x110>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a2e      	ldr	r2, [pc, #184]	; (80075d8 <SystemClock_Config+0x110>)
 8007520:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007524:	6013      	str	r3, [r2, #0]
 8007526:	4b2c      	ldr	r3, [pc, #176]	; (80075d8 <SystemClock_Config+0x110>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800752e:	607b      	str	r3, [r7, #4]
 8007530:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007532:	2301      	movs	r3, #1
 8007534:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007536:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800753a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800753e:	2302      	movs	r3, #2
 8007540:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007544:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007548:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 8;
 800754c:	2308      	movs	r3, #8
 800754e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8007552:	23a8      	movs	r3, #168	; 0xa8
 8007554:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007558:	2302      	movs	r3, #2
 800755a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800755e:	2307      	movs	r3, #7
 8007560:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8007564:	2302      	movs	r3, #2
 8007566:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800756a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800756e:	4618      	mov	r0, r3
 8007570:	f7fb fe40 	bl	80031f4 <HAL_RCC_OscConfig>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d001      	beq.n	800757e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800757a:	f000 f82f 	bl	80075dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800757e:	230f      	movs	r3, #15
 8007580:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007582:	2302      	movs	r3, #2
 8007584:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007586:	2300      	movs	r3, #0
 8007588:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800758a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800758e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007590:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007594:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007596:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800759a:	2105      	movs	r1, #5
 800759c:	4618      	mov	r0, r3
 800759e:	f7fb f84b 	bl	8002638 <HAL_RCC_ClockConfig>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d001      	beq.n	80075ac <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80075a8:	f000 f818 	bl	80075dc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80075ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80075b0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80075b2:	2300      	movs	r3, #0
 80075b4:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80075b6:	f107 030c 	add.w	r3, r7, #12
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7fb f952 	bl	8002864 <HAL_RCCEx_PeriphCLKConfig>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d001      	beq.n	80075ca <SystemClock_Config+0x102>
  {
    Error_Handler();
 80075c6:	f000 f809 	bl	80075dc <Error_Handler>
  }
}
 80075ca:	bf00      	nop
 80075cc:	37b0      	adds	r7, #176	; 0xb0
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	40023800 	.word	0x40023800
 80075d8:	40007000 	.word	0x40007000

080075dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80075dc:	b480      	push	{r7}
 80075de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80075e0:	bf00      	nop
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr
	...

080075ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80075f2:	2300      	movs	r3, #0
 80075f4:	607b      	str	r3, [r7, #4]
 80075f6:	4b13      	ldr	r3, [pc, #76]	; (8007644 <HAL_MspInit+0x58>)
 80075f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075fa:	4a12      	ldr	r2, [pc, #72]	; (8007644 <HAL_MspInit+0x58>)
 80075fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007600:	6453      	str	r3, [r2, #68]	; 0x44
 8007602:	4b10      	ldr	r3, [pc, #64]	; (8007644 <HAL_MspInit+0x58>)
 8007604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800760a:	607b      	str	r3, [r7, #4]
 800760c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800760e:	2300      	movs	r3, #0
 8007610:	603b      	str	r3, [r7, #0]
 8007612:	4b0c      	ldr	r3, [pc, #48]	; (8007644 <HAL_MspInit+0x58>)
 8007614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007616:	4a0b      	ldr	r2, [pc, #44]	; (8007644 <HAL_MspInit+0x58>)
 8007618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800761c:	6413      	str	r3, [r2, #64]	; 0x40
 800761e:	4b09      	ldr	r3, [pc, #36]	; (8007644 <HAL_MspInit+0x58>)
 8007620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007626:	603b      	str	r3, [r7, #0]
 8007628:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800762a:	2200      	movs	r2, #0
 800762c:	2100      	movs	r1, #0
 800762e:	2005      	movs	r0, #5
 8007630:	f7f9 fc0d 	bl	8000e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8007634:	2005      	movs	r0, #5
 8007636:	f7f9 fc26 	bl	8000e86 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800763a:	bf00      	nop
 800763c:	3708      	adds	r7, #8
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	40023800 	.word	0x40023800

08007648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007648:	b480      	push	{r7}
 800764a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800764c:	bf00      	nop
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr

08007656 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007656:	b480      	push	{r7}
 8007658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800765a:	e7fe      	b.n	800765a <HardFault_Handler+0x4>

0800765c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800765c:	b480      	push	{r7}
 800765e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007660:	e7fe      	b.n	8007660 <MemManage_Handler+0x4>

08007662 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007662:	b480      	push	{r7}
 8007664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007666:	e7fe      	b.n	8007666 <BusFault_Handler+0x4>

08007668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007668:	b480      	push	{r7}
 800766a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800766c:	e7fe      	b.n	800766c <UsageFault_Handler+0x4>

0800766e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800766e:	b480      	push	{r7}
 8007670:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007672:	bf00      	nop
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800767c:	b480      	push	{r7}
 800767e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007680:	bf00      	nop
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800768a:	b480      	push	{r7}
 800768c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800768e:	bf00      	nop
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800769c:	f7f8 ff8c 	bl	80005b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80076a0:	bf00      	nop
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80076a4:	b480      	push	{r7}
 80076a6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80076a8:	bf00      	nop
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
	...

080076b4 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80076b8:	4802      	ldr	r0, [pc, #8]	; (80076c4 <CAN1_TX_IRQHandler+0x10>)
 80076ba:	f7f9 f8ba 	bl	8000832 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80076be:	bf00      	nop
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop
 80076c4:	20000220 	.word	0x20000220

080076c8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80076cc:	4802      	ldr	r0, [pc, #8]	; (80076d8 <CAN1_RX0_IRQHandler+0x10>)
 80076ce:	f7f9 f8b0 	bl	8000832 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80076d2:	bf00      	nop
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	20000220 	.word	0x20000220

080076dc <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80076e0:	4802      	ldr	r0, [pc, #8]	; (80076ec <CAN1_RX1_IRQHandler+0x10>)
 80076e2:	f7f9 f8a6 	bl	8000832 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80076e6:	bf00      	nop
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop
 80076ec:	20000220 	.word	0x20000220

080076f0 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80076f4:	4802      	ldr	r0, [pc, #8]	; (8007700 <CAN1_SCE_IRQHandler+0x10>)
 80076f6:	f7f9 f89c 	bl	8000832 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80076fa:	bf00      	nop
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	20000220 	.word	0x20000220

08007704 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007708:	4802      	ldr	r0, [pc, #8]	; (8007714 <USART1_IRQHandler+0x10>)
 800770a:	f7fc fa93 	bl	8003c34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800770e:	bf00      	nop
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	20000308 	.word	0x20000308

08007718 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800771c:	4802      	ldr	r0, [pc, #8]	; (8007728 <USART2_IRQHandler+0x10>)
 800771e:	f7fc fa89 	bl	8003c34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8007722:	bf00      	nop
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	200003c8 	.word	0x200003c8

0800772c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8007730:	4802      	ldr	r0, [pc, #8]	; (800773c <USART3_IRQHandler+0x10>)
 8007732:	f7fc fa7f 	bl	8003c34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8007736:	bf00      	nop
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	200002c8 	.word	0x200002c8

08007740 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8007744:	4802      	ldr	r0, [pc, #8]	; (8007750 <UART4_IRQHandler+0x10>)
 8007746:	f7fc fa75 	bl	8003c34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800774a:	bf00      	nop
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop
 8007750:	20000388 	.word	0x20000388

08007754 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007758:	4802      	ldr	r0, [pc, #8]	; (8007764 <TIM6_DAC_IRQHandler+0x10>)
 800775a:	f7fb fff4 	bl	8003746 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800775e:	bf00      	nop
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	20000248 	.word	0x20000248

08007768 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800776c:	4802      	ldr	r0, [pc, #8]	; (8007778 <TIM7_IRQHandler+0x10>)
 800776e:	f7fb ffea 	bl	8003746 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8007772:	bf00      	nop
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	20000288 	.word	0x20000288

0800777c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8007780:	4802      	ldr	r0, [pc, #8]	; (800778c <OTG_FS_IRQHandler+0x10>)
 8007782:	f7f9 feda 	bl	800153a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8007786:	bf00      	nop
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	200016a4 	.word	0x200016a4

08007790 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8007794:	4802      	ldr	r0, [pc, #8]	; (80077a0 <USART6_IRQHandler+0x10>)
 8007796:	f7fc fa4d 	bl	8003c34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800779a:	bf00      	nop
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	20000348 	.word	0x20000348

080077a4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80077ac:	4b11      	ldr	r3, [pc, #68]	; (80077f4 <_sbrk+0x50>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d102      	bne.n	80077ba <_sbrk+0x16>
		heap_end = &end;
 80077b4:	4b0f      	ldr	r3, [pc, #60]	; (80077f4 <_sbrk+0x50>)
 80077b6:	4a10      	ldr	r2, [pc, #64]	; (80077f8 <_sbrk+0x54>)
 80077b8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80077ba:	4b0e      	ldr	r3, [pc, #56]	; (80077f4 <_sbrk+0x50>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80077c0:	4b0c      	ldr	r3, [pc, #48]	; (80077f4 <_sbrk+0x50>)
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4413      	add	r3, r2
 80077c8:	466a      	mov	r2, sp
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d907      	bls.n	80077de <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80077ce:	f001 f895 	bl	80088fc <__errno>
 80077d2:	4602      	mov	r2, r0
 80077d4:	230c      	movs	r3, #12
 80077d6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80077d8:	f04f 33ff 	mov.w	r3, #4294967295
 80077dc:	e006      	b.n	80077ec <_sbrk+0x48>
	}

	heap_end += incr;
 80077de:	4b05      	ldr	r3, [pc, #20]	; (80077f4 <_sbrk+0x50>)
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4413      	add	r3, r2
 80077e6:	4a03      	ldr	r2, [pc, #12]	; (80077f4 <_sbrk+0x50>)
 80077e8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80077ea:	68fb      	ldr	r3, [r7, #12]
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3710      	adds	r7, #16
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	20000210 	.word	0x20000210
 80077f8:	20001cb0 	.word	0x20001cb0

080077fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80077fc:	b480      	push	{r7}
 80077fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007800:	4b16      	ldr	r3, [pc, #88]	; (800785c <SystemInit+0x60>)
 8007802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007806:	4a15      	ldr	r2, [pc, #84]	; (800785c <SystemInit+0x60>)
 8007808:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800780c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007810:	4b13      	ldr	r3, [pc, #76]	; (8007860 <SystemInit+0x64>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a12      	ldr	r2, [pc, #72]	; (8007860 <SystemInit+0x64>)
 8007816:	f043 0301 	orr.w	r3, r3, #1
 800781a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800781c:	4b10      	ldr	r3, [pc, #64]	; (8007860 <SystemInit+0x64>)
 800781e:	2200      	movs	r2, #0
 8007820:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007822:	4b0f      	ldr	r3, [pc, #60]	; (8007860 <SystemInit+0x64>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a0e      	ldr	r2, [pc, #56]	; (8007860 <SystemInit+0x64>)
 8007828:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800782c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007830:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007832:	4b0b      	ldr	r3, [pc, #44]	; (8007860 <SystemInit+0x64>)
 8007834:	4a0b      	ldr	r2, [pc, #44]	; (8007864 <SystemInit+0x68>)
 8007836:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007838:	4b09      	ldr	r3, [pc, #36]	; (8007860 <SystemInit+0x64>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a08      	ldr	r2, [pc, #32]	; (8007860 <SystemInit+0x64>)
 800783e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007842:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007844:	4b06      	ldr	r3, [pc, #24]	; (8007860 <SystemInit+0x64>)
 8007846:	2200      	movs	r2, #0
 8007848:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800784a:	4b04      	ldr	r3, [pc, #16]	; (800785c <SystemInit+0x60>)
 800784c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007850:	609a      	str	r2, [r3, #8]
#endif
}
 8007852:	bf00      	nop
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr
 800785c:	e000ed00 	.word	0xe000ed00
 8007860:	40023800 	.word	0x40023800
 8007864:	24003010 	.word	0x24003010

08007868 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800786e:	463b      	mov	r3, r7
 8007870:	2200      	movs	r2, #0
 8007872:	601a      	str	r2, [r3, #0]
 8007874:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 8007876:	4b15      	ldr	r3, [pc, #84]	; (80078cc <MX_TIM6_Init+0x64>)
 8007878:	4a15      	ldr	r2, [pc, #84]	; (80078d0 <MX_TIM6_Init+0x68>)
 800787a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8399;
 800787c:	4b13      	ldr	r3, [pc, #76]	; (80078cc <MX_TIM6_Init+0x64>)
 800787e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8007882:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007884:	4b11      	ldr	r3, [pc, #68]	; (80078cc <MX_TIM6_Init+0x64>)
 8007886:	2200      	movs	r2, #0
 8007888:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 800788a:	4b10      	ldr	r3, [pc, #64]	; (80078cc <MX_TIM6_Init+0x64>)
 800788c:	2209      	movs	r2, #9
 800788e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007890:	4b0e      	ldr	r3, [pc, #56]	; (80078cc <MX_TIM6_Init+0x64>)
 8007892:	2200      	movs	r2, #0
 8007894:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8007896:	480d      	ldr	r0, [pc, #52]	; (80078cc <MX_TIM6_Init+0x64>)
 8007898:	f7fb ff06 	bl	80036a8 <HAL_TIM_Base_Init>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d001      	beq.n	80078a6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80078a2:	f7ff fe9b 	bl	80075dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80078a6:	2300      	movs	r3, #0
 80078a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80078aa:	2300      	movs	r3, #0
 80078ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80078ae:	463b      	mov	r3, r7
 80078b0:	4619      	mov	r1, r3
 80078b2:	4806      	ldr	r0, [pc, #24]	; (80078cc <MX_TIM6_Init+0x64>)
 80078b4:	f7fc f918 	bl	8003ae8 <HAL_TIMEx_MasterConfigSynchronization>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d001      	beq.n	80078c2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80078be:	f7ff fe8d 	bl	80075dc <Error_Handler>
  }

}
 80078c2:	bf00      	nop
 80078c4:	3708      	adds	r7, #8
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	20000248 	.word	0x20000248
 80078d0:	40001000 	.word	0x40001000

080078d4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80078da:	463b      	mov	r3, r7
 80078dc:	2200      	movs	r2, #0
 80078de:	601a      	str	r2, [r3, #0]
 80078e0:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 80078e2:	4b15      	ldr	r3, [pc, #84]	; (8007938 <MX_TIM7_Init+0x64>)
 80078e4:	4a15      	ldr	r2, [pc, #84]	; (800793c <MX_TIM7_Init+0x68>)
 80078e6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8399;
 80078e8:	4b13      	ldr	r3, [pc, #76]	; (8007938 <MX_TIM7_Init+0x64>)
 80078ea:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80078ee:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80078f0:	4b11      	ldr	r3, [pc, #68]	; (8007938 <MX_TIM7_Init+0x64>)
 80078f2:	2200      	movs	r2, #0
 80078f4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 80078f6:	4b10      	ldr	r3, [pc, #64]	; (8007938 <MX_TIM7_Init+0x64>)
 80078f8:	2209      	movs	r2, #9
 80078fa:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80078fc:	4b0e      	ldr	r3, [pc, #56]	; (8007938 <MX_TIM7_Init+0x64>)
 80078fe:	2200      	movs	r2, #0
 8007900:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8007902:	480d      	ldr	r0, [pc, #52]	; (8007938 <MX_TIM7_Init+0x64>)
 8007904:	f7fb fed0 	bl	80036a8 <HAL_TIM_Base_Init>
 8007908:	4603      	mov	r3, r0
 800790a:	2b00      	cmp	r3, #0
 800790c:	d001      	beq.n	8007912 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800790e:	f7ff fe65 	bl	80075dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007912:	2300      	movs	r3, #0
 8007914:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007916:	2300      	movs	r3, #0
 8007918:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800791a:	463b      	mov	r3, r7
 800791c:	4619      	mov	r1, r3
 800791e:	4806      	ldr	r0, [pc, #24]	; (8007938 <MX_TIM7_Init+0x64>)
 8007920:	f7fc f8e2 	bl	8003ae8 <HAL_TIMEx_MasterConfigSynchronization>
 8007924:	4603      	mov	r3, r0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d001      	beq.n	800792e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800792a:	f7ff fe57 	bl	80075dc <Error_Handler>
  }

}
 800792e:	bf00      	nop
 8007930:	3708      	adds	r7, #8
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	20000288 	.word	0x20000288
 800793c:	40001400 	.word	0x40001400

08007940 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a1c      	ldr	r2, [pc, #112]	; (80079c0 <HAL_TIM_Base_MspInit+0x80>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d116      	bne.n	8007980 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8007952:	2300      	movs	r3, #0
 8007954:	60fb      	str	r3, [r7, #12]
 8007956:	4b1b      	ldr	r3, [pc, #108]	; (80079c4 <HAL_TIM_Base_MspInit+0x84>)
 8007958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795a:	4a1a      	ldr	r2, [pc, #104]	; (80079c4 <HAL_TIM_Base_MspInit+0x84>)
 800795c:	f043 0310 	orr.w	r3, r3, #16
 8007960:	6413      	str	r3, [r2, #64]	; 0x40
 8007962:	4b18      	ldr	r3, [pc, #96]	; (80079c4 <HAL_TIM_Base_MspInit+0x84>)
 8007964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007966:	f003 0310 	and.w	r3, r3, #16
 800796a:	60fb      	str	r3, [r7, #12]
 800796c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800796e:	2200      	movs	r2, #0
 8007970:	2100      	movs	r1, #0
 8007972:	2036      	movs	r0, #54	; 0x36
 8007974:	f7f9 fa6b 	bl	8000e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007978:	2036      	movs	r0, #54	; 0x36
 800797a:	f7f9 fa84 	bl	8000e86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800797e:	e01a      	b.n	80079b6 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM7)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a10      	ldr	r2, [pc, #64]	; (80079c8 <HAL_TIM_Base_MspInit+0x88>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d115      	bne.n	80079b6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800798a:	2300      	movs	r3, #0
 800798c:	60bb      	str	r3, [r7, #8]
 800798e:	4b0d      	ldr	r3, [pc, #52]	; (80079c4 <HAL_TIM_Base_MspInit+0x84>)
 8007990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007992:	4a0c      	ldr	r2, [pc, #48]	; (80079c4 <HAL_TIM_Base_MspInit+0x84>)
 8007994:	f043 0320 	orr.w	r3, r3, #32
 8007998:	6413      	str	r3, [r2, #64]	; 0x40
 800799a:	4b0a      	ldr	r3, [pc, #40]	; (80079c4 <HAL_TIM_Base_MspInit+0x84>)
 800799c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799e:	f003 0320 	and.w	r3, r3, #32
 80079a2:	60bb      	str	r3, [r7, #8]
 80079a4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80079a6:	2200      	movs	r2, #0
 80079a8:	2100      	movs	r1, #0
 80079aa:	2037      	movs	r0, #55	; 0x37
 80079ac:	f7f9 fa4f 	bl	8000e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80079b0:	2037      	movs	r0, #55	; 0x37
 80079b2:	f7f9 fa68 	bl	8000e86 <HAL_NVIC_EnableIRQ>
}
 80079b6:	bf00      	nop
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	40001000 	.word	0x40001000
 80079c4:	40023800 	.word	0x40023800
 80079c8:	40001400 	.word	0x40001400

080079cc <MX_UART4_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 80079d0:	4b11      	ldr	r3, [pc, #68]	; (8007a18 <MX_UART4_Init+0x4c>)
 80079d2:	4a12      	ldr	r2, [pc, #72]	; (8007a1c <MX_UART4_Init+0x50>)
 80079d4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80079d6:	4b10      	ldr	r3, [pc, #64]	; (8007a18 <MX_UART4_Init+0x4c>)
 80079d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80079dc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80079de:	4b0e      	ldr	r3, [pc, #56]	; (8007a18 <MX_UART4_Init+0x4c>)
 80079e0:	2200      	movs	r2, #0
 80079e2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80079e4:	4b0c      	ldr	r3, [pc, #48]	; (8007a18 <MX_UART4_Init+0x4c>)
 80079e6:	2200      	movs	r2, #0
 80079e8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80079ea:	4b0b      	ldr	r3, [pc, #44]	; (8007a18 <MX_UART4_Init+0x4c>)
 80079ec:	2200      	movs	r2, #0
 80079ee:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80079f0:	4b09      	ldr	r3, [pc, #36]	; (8007a18 <MX_UART4_Init+0x4c>)
 80079f2:	220c      	movs	r2, #12
 80079f4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80079f6:	4b08      	ldr	r3, [pc, #32]	; (8007a18 <MX_UART4_Init+0x4c>)
 80079f8:	2200      	movs	r2, #0
 80079fa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80079fc:	4b06      	ldr	r3, [pc, #24]	; (8007a18 <MX_UART4_Init+0x4c>)
 80079fe:	2200      	movs	r2, #0
 8007a00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8007a02:	4805      	ldr	r0, [pc, #20]	; (8007a18 <MX_UART4_Init+0x4c>)
 8007a04:	f7fc f8c9 	bl	8003b9a <HAL_UART_Init>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d001      	beq.n	8007a12 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8007a0e:	f7ff fde5 	bl	80075dc <Error_Handler>
  }

}
 8007a12:	bf00      	nop
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	20000388 	.word	0x20000388
 8007a1c:	40004c00 	.word	0x40004c00

08007a20 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8007a24:	4b10      	ldr	r3, [pc, #64]	; (8007a68 <MX_USART1_UART_Init+0x48>)
 8007a26:	4a11      	ldr	r2, [pc, #68]	; (8007a6c <MX_USART1_UART_Init+0x4c>)
 8007a28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 8007a2a:	4b0f      	ldr	r3, [pc, #60]	; (8007a68 <MX_USART1_UART_Init+0x48>)
 8007a2c:	4a10      	ldr	r2, [pc, #64]	; (8007a70 <MX_USART1_UART_Init+0x50>)
 8007a2e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007a30:	4b0d      	ldr	r3, [pc, #52]	; (8007a68 <MX_USART1_UART_Init+0x48>)
 8007a32:	2200      	movs	r2, #0
 8007a34:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007a36:	4b0c      	ldr	r3, [pc, #48]	; (8007a68 <MX_USART1_UART_Init+0x48>)
 8007a38:	2200      	movs	r2, #0
 8007a3a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007a3c:	4b0a      	ldr	r3, [pc, #40]	; (8007a68 <MX_USART1_UART_Init+0x48>)
 8007a3e:	2200      	movs	r2, #0
 8007a40:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007a42:	4b09      	ldr	r3, [pc, #36]	; (8007a68 <MX_USART1_UART_Init+0x48>)
 8007a44:	220c      	movs	r2, #12
 8007a46:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007a48:	4b07      	ldr	r3, [pc, #28]	; (8007a68 <MX_USART1_UART_Init+0x48>)
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007a4e:	4b06      	ldr	r3, [pc, #24]	; (8007a68 <MX_USART1_UART_Init+0x48>)
 8007a50:	2200      	movs	r2, #0
 8007a52:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007a54:	4804      	ldr	r0, [pc, #16]	; (8007a68 <MX_USART1_UART_Init+0x48>)
 8007a56:	f7fc f8a0 	bl	8003b9a <HAL_UART_Init>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d001      	beq.n	8007a64 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8007a60:	f7ff fdbc 	bl	80075dc <Error_Handler>
  }

}
 8007a64:	bf00      	nop
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	20000308 	.word	0x20000308
 8007a6c:	40011000 	.word	0x40011000
 8007a70:	000f4240 	.word	0x000f4240

08007a74 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8007a78:	4b11      	ldr	r3, [pc, #68]	; (8007ac0 <MX_USART2_UART_Init+0x4c>)
 8007a7a:	4a12      	ldr	r2, [pc, #72]	; (8007ac4 <MX_USART2_UART_Init+0x50>)
 8007a7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8007a7e:	4b10      	ldr	r3, [pc, #64]	; (8007ac0 <MX_USART2_UART_Init+0x4c>)
 8007a80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007a84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007a86:	4b0e      	ldr	r3, [pc, #56]	; (8007ac0 <MX_USART2_UART_Init+0x4c>)
 8007a88:	2200      	movs	r2, #0
 8007a8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007a8c:	4b0c      	ldr	r3, [pc, #48]	; (8007ac0 <MX_USART2_UART_Init+0x4c>)
 8007a8e:	2200      	movs	r2, #0
 8007a90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007a92:	4b0b      	ldr	r3, [pc, #44]	; (8007ac0 <MX_USART2_UART_Init+0x4c>)
 8007a94:	2200      	movs	r2, #0
 8007a96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007a98:	4b09      	ldr	r3, [pc, #36]	; (8007ac0 <MX_USART2_UART_Init+0x4c>)
 8007a9a:	220c      	movs	r2, #12
 8007a9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007a9e:	4b08      	ldr	r3, [pc, #32]	; (8007ac0 <MX_USART2_UART_Init+0x4c>)
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007aa4:	4b06      	ldr	r3, [pc, #24]	; (8007ac0 <MX_USART2_UART_Init+0x4c>)
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007aaa:	4805      	ldr	r0, [pc, #20]	; (8007ac0 <MX_USART2_UART_Init+0x4c>)
 8007aac:	f7fc f875 	bl	8003b9a <HAL_UART_Init>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d001      	beq.n	8007aba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8007ab6:	f7ff fd91 	bl	80075dc <Error_Handler>
  }

}
 8007aba:	bf00      	nop
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	200003c8 	.word	0x200003c8
 8007ac4:	40004400 	.word	0x40004400

08007ac8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8007acc:	4b10      	ldr	r3, [pc, #64]	; (8007b10 <MX_USART3_UART_Init+0x48>)
 8007ace:	4a11      	ldr	r2, [pc, #68]	; (8007b14 <MX_USART3_UART_Init+0x4c>)
 8007ad0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 8007ad2:	4b0f      	ldr	r3, [pc, #60]	; (8007b10 <MX_USART3_UART_Init+0x48>)
 8007ad4:	4a10      	ldr	r2, [pc, #64]	; (8007b18 <MX_USART3_UART_Init+0x50>)
 8007ad6:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8007ad8:	4b0d      	ldr	r3, [pc, #52]	; (8007b10 <MX_USART3_UART_Init+0x48>)
 8007ada:	2200      	movs	r2, #0
 8007adc:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007ade:	4b0c      	ldr	r3, [pc, #48]	; (8007b10 <MX_USART3_UART_Init+0x48>)
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8007ae4:	4b0a      	ldr	r3, [pc, #40]	; (8007b10 <MX_USART3_UART_Init+0x48>)
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007aea:	4b09      	ldr	r3, [pc, #36]	; (8007b10 <MX_USART3_UART_Init+0x48>)
 8007aec:	220c      	movs	r2, #12
 8007aee:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007af0:	4b07      	ldr	r3, [pc, #28]	; (8007b10 <MX_USART3_UART_Init+0x48>)
 8007af2:	2200      	movs	r2, #0
 8007af4:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007af6:	4b06      	ldr	r3, [pc, #24]	; (8007b10 <MX_USART3_UART_Init+0x48>)
 8007af8:	2200      	movs	r2, #0
 8007afa:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8007afc:	4804      	ldr	r0, [pc, #16]	; (8007b10 <MX_USART3_UART_Init+0x48>)
 8007afe:	f7fc f84c 	bl	8003b9a <HAL_UART_Init>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d001      	beq.n	8007b0c <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8007b08:	f7ff fd68 	bl	80075dc <Error_Handler>
  }

}
 8007b0c:	bf00      	nop
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	200002c8 	.word	0x200002c8
 8007b14:	40004800 	.word	0x40004800
 8007b18:	000f4240 	.word	0x000f4240

08007b1c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8007b20:	4b11      	ldr	r3, [pc, #68]	; (8007b68 <MX_USART6_UART_Init+0x4c>)
 8007b22:	4a12      	ldr	r2, [pc, #72]	; (8007b6c <MX_USART6_UART_Init+0x50>)
 8007b24:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8007b26:	4b10      	ldr	r3, [pc, #64]	; (8007b68 <MX_USART6_UART_Init+0x4c>)
 8007b28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007b2c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8007b2e:	4b0e      	ldr	r3, [pc, #56]	; (8007b68 <MX_USART6_UART_Init+0x4c>)
 8007b30:	2200      	movs	r2, #0
 8007b32:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8007b34:	4b0c      	ldr	r3, [pc, #48]	; (8007b68 <MX_USART6_UART_Init+0x4c>)
 8007b36:	2200      	movs	r2, #0
 8007b38:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8007b3a:	4b0b      	ldr	r3, [pc, #44]	; (8007b68 <MX_USART6_UART_Init+0x4c>)
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8007b40:	4b09      	ldr	r3, [pc, #36]	; (8007b68 <MX_USART6_UART_Init+0x4c>)
 8007b42:	220c      	movs	r2, #12
 8007b44:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007b46:	4b08      	ldr	r3, [pc, #32]	; (8007b68 <MX_USART6_UART_Init+0x4c>)
 8007b48:	2200      	movs	r2, #0
 8007b4a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8007b4c:	4b06      	ldr	r3, [pc, #24]	; (8007b68 <MX_USART6_UART_Init+0x4c>)
 8007b4e:	2200      	movs	r2, #0
 8007b50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8007b52:	4805      	ldr	r0, [pc, #20]	; (8007b68 <MX_USART6_UART_Init+0x4c>)
 8007b54:	f7fc f821 	bl	8003b9a <HAL_UART_Init>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d001      	beq.n	8007b62 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8007b5e:	f7ff fd3d 	bl	80075dc <Error_Handler>
  }

}
 8007b62:	bf00      	nop
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	20000348 	.word	0x20000348
 8007b6c:	40011400 	.word	0x40011400

08007b70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b092      	sub	sp, #72	; 0x48
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b78:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	601a      	str	r2, [r3, #0]
 8007b80:	605a      	str	r2, [r3, #4]
 8007b82:	609a      	str	r2, [r3, #8]
 8007b84:	60da      	str	r2, [r3, #12]
 8007b86:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a91      	ldr	r2, [pc, #580]	; (8007dd4 <HAL_UART_MspInit+0x264>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d134      	bne.n	8007bfc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8007b92:	2300      	movs	r3, #0
 8007b94:	633b      	str	r3, [r7, #48]	; 0x30
 8007b96:	4b90      	ldr	r3, [pc, #576]	; (8007dd8 <HAL_UART_MspInit+0x268>)
 8007b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9a:	4a8f      	ldr	r2, [pc, #572]	; (8007dd8 <HAL_UART_MspInit+0x268>)
 8007b9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8007ba2:	4b8d      	ldr	r3, [pc, #564]	; (8007dd8 <HAL_UART_MspInit+0x268>)
 8007ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007baa:	633b      	str	r3, [r7, #48]	; 0x30
 8007bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007bae:	2300      	movs	r3, #0
 8007bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bb2:	4b89      	ldr	r3, [pc, #548]	; (8007dd8 <HAL_UART_MspInit+0x268>)
 8007bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bb6:	4a88      	ldr	r2, [pc, #544]	; (8007dd8 <HAL_UART_MspInit+0x268>)
 8007bb8:	f043 0301 	orr.w	r3, r3, #1
 8007bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8007bbe:	4b86      	ldr	r3, [pc, #536]	; (8007dd8 <HAL_UART_MspInit+0x268>)
 8007bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc2:	f003 0301 	and.w	r3, r3, #1
 8007bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007bca:	2303      	movs	r3, #3
 8007bcc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bce:	2302      	movs	r3, #2
 8007bd0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007bd6:	2303      	movs	r3, #3
 8007bd8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8007bda:	2308      	movs	r3, #8
 8007bdc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007bde:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007be2:	4619      	mov	r1, r3
 8007be4:	487d      	ldr	r0, [pc, #500]	; (8007ddc <HAL_UART_MspInit+0x26c>)
 8007be6:	f7f9 f98b 	bl	8000f00 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8007bea:	2200      	movs	r2, #0
 8007bec:	2100      	movs	r1, #0
 8007bee:	2034      	movs	r0, #52	; 0x34
 8007bf0:	f7f9 f92d 	bl	8000e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8007bf4:	2034      	movs	r0, #52	; 0x34
 8007bf6:	f7f9 f946 	bl	8000e86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8007bfa:	e0e7      	b.n	8007dcc <HAL_UART_MspInit+0x25c>
  else if(uartHandle->Instance==USART1)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a77      	ldr	r2, [pc, #476]	; (8007de0 <HAL_UART_MspInit+0x270>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d134      	bne.n	8007c70 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART1_CLK_ENABLE();
 8007c06:	2300      	movs	r3, #0
 8007c08:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c0a:	4b73      	ldr	r3, [pc, #460]	; (8007dd8 <HAL_UART_MspInit+0x268>)
 8007c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c0e:	4a72      	ldr	r2, [pc, #456]	; (8007dd8 <HAL_UART_MspInit+0x268>)
 8007c10:	f043 0310 	orr.w	r3, r3, #16
 8007c14:	6453      	str	r3, [r2, #68]	; 0x44
 8007c16:	4b70      	ldr	r3, [pc, #448]	; (8007dd8 <HAL_UART_MspInit+0x268>)
 8007c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c1a:	f003 0310 	and.w	r3, r3, #16
 8007c1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c22:	2300      	movs	r3, #0
 8007c24:	627b      	str	r3, [r7, #36]	; 0x24
 8007c26:	4b6c      	ldr	r3, [pc, #432]	; (8007dd8 <HAL_UART_MspInit+0x268>)
 8007c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c2a:	4a6b      	ldr	r2, [pc, #428]	; (8007dd8 <HAL_UART_MspInit+0x268>)
 8007c2c:	f043 0302 	orr.w	r3, r3, #2
 8007c30:	6313      	str	r3, [r2, #48]	; 0x30
 8007c32:	4b69      	ldr	r3, [pc, #420]	; (8007dd8 <HAL_UART_MspInit+0x268>)
 8007c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c36:	f003 0302 	and.w	r3, r3, #2
 8007c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8007c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007c3e:	23c0      	movs	r3, #192	; 0xc0
 8007c40:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c42:	2302      	movs	r3, #2
 8007c44:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007c46:	2301      	movs	r3, #1
 8007c48:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c4a:	2303      	movs	r3, #3
 8007c4c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007c4e:	2307      	movs	r3, #7
 8007c50:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c52:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007c56:	4619      	mov	r1, r3
 8007c58:	4862      	ldr	r0, [pc, #392]	; (8007de4 <HAL_UART_MspInit+0x274>)
 8007c5a:	f7f9 f951 	bl	8000f00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007c5e:	2200      	movs	r2, #0
 8007c60:	2100      	movs	r1, #0
 8007c62:	2025      	movs	r0, #37	; 0x25
 8007c64:	f7f9 f8f3 	bl	8000e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007c68:	2025      	movs	r0, #37	; 0x25
 8007c6a:	f7f9 f90c 	bl	8000e86 <HAL_NVIC_EnableIRQ>
}
 8007c6e:	e0ad      	b.n	8007dcc <HAL_UART_MspInit+0x25c>
  else if(uartHandle->Instance==USART2)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a5c      	ldr	r2, [pc, #368]	; (8007de8 <HAL_UART_MspInit+0x278>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d134      	bne.n	8007ce4 <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	623b      	str	r3, [r7, #32]
 8007c7e:	4b56      	ldr	r3, [pc, #344]	; (8007dd8 <HAL_UART_MspInit+0x268>)
 8007c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c82:	4a55      	ldr	r2, [pc, #340]	; (8007dd8 <HAL_UART_MspInit+0x268>)
 8007c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c88:	6413      	str	r3, [r2, #64]	; 0x40
 8007c8a:	4b53      	ldr	r3, [pc, #332]	; (8007dd8 <HAL_UART_MspInit+0x268>)
 8007c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c92:	623b      	str	r3, [r7, #32]
 8007c94:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c96:	2300      	movs	r3, #0
 8007c98:	61fb      	str	r3, [r7, #28]
 8007c9a:	4b4f      	ldr	r3, [pc, #316]	; (8007dd8 <HAL_UART_MspInit+0x268>)
 8007c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c9e:	4a4e      	ldr	r2, [pc, #312]	; (8007dd8 <HAL_UART_MspInit+0x268>)
 8007ca0:	f043 0301 	orr.w	r3, r3, #1
 8007ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8007ca6:	4b4c      	ldr	r3, [pc, #304]	; (8007dd8 <HAL_UART_MspInit+0x268>)
 8007ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007caa:	f003 0301 	and.w	r3, r3, #1
 8007cae:	61fb      	str	r3, [r7, #28]
 8007cb0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007cb2:	230c      	movs	r3, #12
 8007cb4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cb6:	2302      	movs	r3, #2
 8007cb8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007cbe:	2303      	movs	r3, #3
 8007cc0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007cc2:	2307      	movs	r3, #7
 8007cc4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007cc6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007cca:	4619      	mov	r1, r3
 8007ccc:	4843      	ldr	r0, [pc, #268]	; (8007ddc <HAL_UART_MspInit+0x26c>)
 8007cce:	f7f9 f917 	bl	8000f00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	2026      	movs	r0, #38	; 0x26
 8007cd8:	f7f9 f8b9 	bl	8000e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007cdc:	2026      	movs	r0, #38	; 0x26
 8007cde:	f7f9 f8d2 	bl	8000e86 <HAL_NVIC_EnableIRQ>
}
 8007ce2:	e073      	b.n	8007dcc <HAL_UART_MspInit+0x25c>
  else if(uartHandle->Instance==USART3)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a40      	ldr	r2, [pc, #256]	; (8007dec <HAL_UART_MspInit+0x27c>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d135      	bne.n	8007d5a <HAL_UART_MspInit+0x1ea>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007cee:	2300      	movs	r3, #0
 8007cf0:	61bb      	str	r3, [r7, #24]
 8007cf2:	4b39      	ldr	r3, [pc, #228]	; (8007dd8 <HAL_UART_MspInit+0x268>)
 8007cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf6:	4a38      	ldr	r2, [pc, #224]	; (8007dd8 <HAL_UART_MspInit+0x268>)
 8007cf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8007cfe:	4b36      	ldr	r3, [pc, #216]	; (8007dd8 <HAL_UART_MspInit+0x268>)
 8007d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d06:	61bb      	str	r3, [r7, #24]
 8007d08:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	617b      	str	r3, [r7, #20]
 8007d0e:	4b32      	ldr	r3, [pc, #200]	; (8007dd8 <HAL_UART_MspInit+0x268>)
 8007d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d12:	4a31      	ldr	r2, [pc, #196]	; (8007dd8 <HAL_UART_MspInit+0x268>)
 8007d14:	f043 0304 	orr.w	r3, r3, #4
 8007d18:	6313      	str	r3, [r2, #48]	; 0x30
 8007d1a:	4b2f      	ldr	r3, [pc, #188]	; (8007dd8 <HAL_UART_MspInit+0x268>)
 8007d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d1e:	f003 0304 	and.w	r3, r3, #4
 8007d22:	617b      	str	r3, [r7, #20]
 8007d24:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007d26:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007d2a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d2c:	2302      	movs	r3, #2
 8007d2e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007d30:	2301      	movs	r3, #1
 8007d32:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d34:	2303      	movs	r3, #3
 8007d36:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007d38:	2307      	movs	r3, #7
 8007d3a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007d3c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007d40:	4619      	mov	r1, r3
 8007d42:	482b      	ldr	r0, [pc, #172]	; (8007df0 <HAL_UART_MspInit+0x280>)
 8007d44:	f7f9 f8dc 	bl	8000f00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8007d48:	2200      	movs	r2, #0
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	2027      	movs	r0, #39	; 0x27
 8007d4e:	f7f9 f87e 	bl	8000e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8007d52:	2027      	movs	r0, #39	; 0x27
 8007d54:	f7f9 f897 	bl	8000e86 <HAL_NVIC_EnableIRQ>
}
 8007d58:	e038      	b.n	8007dcc <HAL_UART_MspInit+0x25c>
  else if(uartHandle->Instance==USART6)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a25      	ldr	r2, [pc, #148]	; (8007df4 <HAL_UART_MspInit+0x284>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d133      	bne.n	8007dcc <HAL_UART_MspInit+0x25c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8007d64:	2300      	movs	r3, #0
 8007d66:	613b      	str	r3, [r7, #16]
 8007d68:	4b1b      	ldr	r3, [pc, #108]	; (8007dd8 <HAL_UART_MspInit+0x268>)
 8007d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d6c:	4a1a      	ldr	r2, [pc, #104]	; (8007dd8 <HAL_UART_MspInit+0x268>)
 8007d6e:	f043 0320 	orr.w	r3, r3, #32
 8007d72:	6453      	str	r3, [r2, #68]	; 0x44
 8007d74:	4b18      	ldr	r3, [pc, #96]	; (8007dd8 <HAL_UART_MspInit+0x268>)
 8007d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d78:	f003 0320 	and.w	r3, r3, #32
 8007d7c:	613b      	str	r3, [r7, #16]
 8007d7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d80:	2300      	movs	r3, #0
 8007d82:	60fb      	str	r3, [r7, #12]
 8007d84:	4b14      	ldr	r3, [pc, #80]	; (8007dd8 <HAL_UART_MspInit+0x268>)
 8007d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d88:	4a13      	ldr	r2, [pc, #76]	; (8007dd8 <HAL_UART_MspInit+0x268>)
 8007d8a:	f043 0304 	orr.w	r3, r3, #4
 8007d8e:	6313      	str	r3, [r2, #48]	; 0x30
 8007d90:	4b11      	ldr	r3, [pc, #68]	; (8007dd8 <HAL_UART_MspInit+0x268>)
 8007d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d94:	f003 0304 	and.w	r3, r3, #4
 8007d98:	60fb      	str	r3, [r7, #12]
 8007d9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007d9c:	23c0      	movs	r3, #192	; 0xc0
 8007d9e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007da0:	2302      	movs	r3, #2
 8007da2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007da4:	2301      	movs	r3, #1
 8007da6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007da8:	2303      	movs	r3, #3
 8007daa:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8007dac:	2308      	movs	r3, #8
 8007dae:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007db0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007db4:	4619      	mov	r1, r3
 8007db6:	480e      	ldr	r0, [pc, #56]	; (8007df0 <HAL_UART_MspInit+0x280>)
 8007db8:	f7f9 f8a2 	bl	8000f00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	2100      	movs	r1, #0
 8007dc0:	2047      	movs	r0, #71	; 0x47
 8007dc2:	f7f9 f844 	bl	8000e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8007dc6:	2047      	movs	r0, #71	; 0x47
 8007dc8:	f7f9 f85d 	bl	8000e86 <HAL_NVIC_EnableIRQ>
}
 8007dcc:	bf00      	nop
 8007dce:	3748      	adds	r7, #72	; 0x48
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	40004c00 	.word	0x40004c00
 8007dd8:	40023800 	.word	0x40023800
 8007ddc:	40020000 	.word	0x40020000
 8007de0:	40011000 	.word	0x40011000
 8007de4:	40020400 	.word	0x40020400
 8007de8:	40004400 	.word	0x40004400
 8007dec:	40004800 	.word	0x40004800
 8007df0:	40020800 	.word	0x40020800
 8007df4:	40011400 	.word	0x40011400

08007df8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	4912      	ldr	r1, [pc, #72]	; (8007e48 <MX_USB_DEVICE_Init+0x50>)
 8007e00:	4812      	ldr	r0, [pc, #72]	; (8007e4c <MX_USB_DEVICE_Init+0x54>)
 8007e02:	f7fe f8f5 	bl	8005ff0 <USBD_Init>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d001      	beq.n	8007e10 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007e0c:	f7ff fbe6 	bl	80075dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007e10:	490f      	ldr	r1, [pc, #60]	; (8007e50 <MX_USB_DEVICE_Init+0x58>)
 8007e12:	480e      	ldr	r0, [pc, #56]	; (8007e4c <MX_USB_DEVICE_Init+0x54>)
 8007e14:	f7fe f917 	bl	8006046 <USBD_RegisterClass>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d001      	beq.n	8007e22 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007e1e:	f7ff fbdd 	bl	80075dc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007e22:	490c      	ldr	r1, [pc, #48]	; (8007e54 <MX_USB_DEVICE_Init+0x5c>)
 8007e24:	4809      	ldr	r0, [pc, #36]	; (8007e4c <MX_USB_DEVICE_Init+0x54>)
 8007e26:	f7fe f845 	bl	8005eb4 <USBD_CDC_RegisterInterface>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d001      	beq.n	8007e34 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007e30:	f7ff fbd4 	bl	80075dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007e34:	4805      	ldr	r0, [pc, #20]	; (8007e4c <MX_USB_DEVICE_Init+0x54>)
 8007e36:	f7fe f920 	bl	800607a <USBD_Start>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d001      	beq.n	8007e44 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007e40:	f7ff fbcc 	bl	80075dc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007e44:	bf00      	nop
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	2000012c 	.word	0x2000012c
 8007e4c:	20000408 	.word	0x20000408
 8007e50:	20000014 	.word	0x20000014
 8007e54:	2000011c 	.word	0x2000011c

08007e58 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	4905      	ldr	r1, [pc, #20]	; (8007e74 <CDC_Init_FS+0x1c>)
 8007e60:	4805      	ldr	r0, [pc, #20]	; (8007e78 <CDC_Init_FS+0x20>)
 8007e62:	f7fe f83e 	bl	8005ee2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007e66:	4905      	ldr	r1, [pc, #20]	; (8007e7c <CDC_Init_FS+0x24>)
 8007e68:	4803      	ldr	r0, [pc, #12]	; (8007e78 <CDC_Init_FS+0x20>)
 8007e6a:	f7fe f854 	bl	8005f16 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007e6e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	bd80      	pop	{r7, pc}
 8007e74:	20000ea4 	.word	0x20000ea4
 8007e78:	20000408 	.word	0x20000408
 8007e7c:	200006a4 	.word	0x200006a4

08007e80 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007e80:	b480      	push	{r7}
 8007e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007e84:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr

08007e90 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	4603      	mov	r3, r0
 8007e98:	6039      	str	r1, [r7, #0]
 8007e9a:	71fb      	strb	r3, [r7, #7]
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007ea0:	79fb      	ldrb	r3, [r7, #7]
 8007ea2:	2b23      	cmp	r3, #35	; 0x23
 8007ea4:	d84a      	bhi.n	8007f3c <CDC_Control_FS+0xac>
 8007ea6:	a201      	add	r2, pc, #4	; (adr r2, 8007eac <CDC_Control_FS+0x1c>)
 8007ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eac:	08007f3d 	.word	0x08007f3d
 8007eb0:	08007f3d 	.word	0x08007f3d
 8007eb4:	08007f3d 	.word	0x08007f3d
 8007eb8:	08007f3d 	.word	0x08007f3d
 8007ebc:	08007f3d 	.word	0x08007f3d
 8007ec0:	08007f3d 	.word	0x08007f3d
 8007ec4:	08007f3d 	.word	0x08007f3d
 8007ec8:	08007f3d 	.word	0x08007f3d
 8007ecc:	08007f3d 	.word	0x08007f3d
 8007ed0:	08007f3d 	.word	0x08007f3d
 8007ed4:	08007f3d 	.word	0x08007f3d
 8007ed8:	08007f3d 	.word	0x08007f3d
 8007edc:	08007f3d 	.word	0x08007f3d
 8007ee0:	08007f3d 	.word	0x08007f3d
 8007ee4:	08007f3d 	.word	0x08007f3d
 8007ee8:	08007f3d 	.word	0x08007f3d
 8007eec:	08007f3d 	.word	0x08007f3d
 8007ef0:	08007f3d 	.word	0x08007f3d
 8007ef4:	08007f3d 	.word	0x08007f3d
 8007ef8:	08007f3d 	.word	0x08007f3d
 8007efc:	08007f3d 	.word	0x08007f3d
 8007f00:	08007f3d 	.word	0x08007f3d
 8007f04:	08007f3d 	.word	0x08007f3d
 8007f08:	08007f3d 	.word	0x08007f3d
 8007f0c:	08007f3d 	.word	0x08007f3d
 8007f10:	08007f3d 	.word	0x08007f3d
 8007f14:	08007f3d 	.word	0x08007f3d
 8007f18:	08007f3d 	.word	0x08007f3d
 8007f1c:	08007f3d 	.word	0x08007f3d
 8007f20:	08007f3d 	.word	0x08007f3d
 8007f24:	08007f3d 	.word	0x08007f3d
 8007f28:	08007f3d 	.word	0x08007f3d
 8007f2c:	08007f3d 	.word	0x08007f3d
 8007f30:	08007f3d 	.word	0x08007f3d
 8007f34:	08007f3d 	.word	0x08007f3d
 8007f38:	08007f3d 	.word	0x08007f3d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007f3c:	bf00      	nop
  }

  return (USBD_OK);
 8007f3e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007f56:	6879      	ldr	r1, [r7, #4]
 8007f58:	4808      	ldr	r0, [pc, #32]	; (8007f7c <CDC_Receive_FS+0x30>)
 8007f5a:	f7fd ffdc 	bl	8005f16 <USBD_CDC_SetRxBuffer>
  Buf[*Len] = 0;
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	4413      	add	r3, r2
 8007f66:	2200      	movs	r2, #0
 8007f68:	701a      	strb	r2, [r3, #0]
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007f6a:	4804      	ldr	r0, [pc, #16]	; (8007f7c <CDC_Receive_FS+0x30>)
 8007f6c:	f7fe f816 	bl	8005f9c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007f70:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3708      	adds	r7, #8
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	20000408 	.word	0x20000408

08007f80 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	460b      	mov	r3, r1
 8007f8a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007f90:	4b0d      	ldr	r3, [pc, #52]	; (8007fc8 <CDC_Transmit_FS+0x48>)
 8007f92:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007f96:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d001      	beq.n	8007fa6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e00b      	b.n	8007fbe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007fa6:	887b      	ldrh	r3, [r7, #2]
 8007fa8:	461a      	mov	r2, r3
 8007faa:	6879      	ldr	r1, [r7, #4]
 8007fac:	4806      	ldr	r0, [pc, #24]	; (8007fc8 <CDC_Transmit_FS+0x48>)
 8007fae:	f7fd ff98 	bl	8005ee2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007fb2:	4805      	ldr	r0, [pc, #20]	; (8007fc8 <CDC_Transmit_FS+0x48>)
 8007fb4:	f7fd ffc3 	bl	8005f3e <USBD_CDC_TransmitPacket>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3710      	adds	r7, #16
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	20000408 	.word	0x20000408

08007fcc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b08a      	sub	sp, #40	; 0x28
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007fd4:	f107 0314 	add.w	r3, r7, #20
 8007fd8:	2200      	movs	r2, #0
 8007fda:	601a      	str	r2, [r3, #0]
 8007fdc:	605a      	str	r2, [r3, #4]
 8007fde:	609a      	str	r2, [r3, #8]
 8007fe0:	60da      	str	r2, [r3, #12]
 8007fe2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007fec:	d13a      	bne.n	8008064 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007fee:	2300      	movs	r3, #0
 8007ff0:	613b      	str	r3, [r7, #16]
 8007ff2:	4b1e      	ldr	r3, [pc, #120]	; (800806c <HAL_PCD_MspInit+0xa0>)
 8007ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff6:	4a1d      	ldr	r2, [pc, #116]	; (800806c <HAL_PCD_MspInit+0xa0>)
 8007ff8:	f043 0301 	orr.w	r3, r3, #1
 8007ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8007ffe:	4b1b      	ldr	r3, [pc, #108]	; (800806c <HAL_PCD_MspInit+0xa0>)
 8008000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008002:	f003 0301 	and.w	r3, r3, #1
 8008006:	613b      	str	r3, [r7, #16]
 8008008:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800800a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800800e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008010:	2302      	movs	r3, #2
 8008012:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008014:	2300      	movs	r3, #0
 8008016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008018:	2303      	movs	r3, #3
 800801a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800801c:	230a      	movs	r3, #10
 800801e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008020:	f107 0314 	add.w	r3, r7, #20
 8008024:	4619      	mov	r1, r3
 8008026:	4812      	ldr	r0, [pc, #72]	; (8008070 <HAL_PCD_MspInit+0xa4>)
 8008028:	f7f8 ff6a 	bl	8000f00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800802c:	4b0f      	ldr	r3, [pc, #60]	; (800806c <HAL_PCD_MspInit+0xa0>)
 800802e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008030:	4a0e      	ldr	r2, [pc, #56]	; (800806c <HAL_PCD_MspInit+0xa0>)
 8008032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008036:	6353      	str	r3, [r2, #52]	; 0x34
 8008038:	2300      	movs	r3, #0
 800803a:	60fb      	str	r3, [r7, #12]
 800803c:	4b0b      	ldr	r3, [pc, #44]	; (800806c <HAL_PCD_MspInit+0xa0>)
 800803e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008040:	4a0a      	ldr	r2, [pc, #40]	; (800806c <HAL_PCD_MspInit+0xa0>)
 8008042:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008046:	6453      	str	r3, [r2, #68]	; 0x44
 8008048:	4b08      	ldr	r3, [pc, #32]	; (800806c <HAL_PCD_MspInit+0xa0>)
 800804a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800804c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008050:	60fb      	str	r3, [r7, #12]
 8008052:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008054:	2200      	movs	r2, #0
 8008056:	2100      	movs	r1, #0
 8008058:	2043      	movs	r0, #67	; 0x43
 800805a:	f7f8 fef8 	bl	8000e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800805e:	2043      	movs	r0, #67	; 0x43
 8008060:	f7f8 ff11 	bl	8000e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008064:	bf00      	nop
 8008066:	3728      	adds	r7, #40	; 0x28
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}
 800806c:	40023800 	.word	0x40023800
 8008070:	40020000 	.word	0x40020000

08008074 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008088:	4619      	mov	r1, r3
 800808a:	4610      	mov	r0, r2
 800808c:	f7fe f83e 	bl	800610c <USBD_LL_SetupStage>
}
 8008090:	bf00      	nop
 8008092:	3708      	adds	r7, #8
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	460b      	mov	r3, r1
 80080a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80080aa:	78fa      	ldrb	r2, [r7, #3]
 80080ac:	6879      	ldr	r1, [r7, #4]
 80080ae:	4613      	mov	r3, r2
 80080b0:	00db      	lsls	r3, r3, #3
 80080b2:	1a9b      	subs	r3, r3, r2
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	440b      	add	r3, r1
 80080b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	78fb      	ldrb	r3, [r7, #3]
 80080c0:	4619      	mov	r1, r3
 80080c2:	f7fe f86e 	bl	80061a2 <USBD_LL_DataOutStage>
}
 80080c6:	bf00      	nop
 80080c8:	3708      	adds	r7, #8
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}

080080ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b082      	sub	sp, #8
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
 80080d6:	460b      	mov	r3, r1
 80080d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80080e0:	78fa      	ldrb	r2, [r7, #3]
 80080e2:	6879      	ldr	r1, [r7, #4]
 80080e4:	4613      	mov	r3, r2
 80080e6:	00db      	lsls	r3, r3, #3
 80080e8:	1a9b      	subs	r3, r3, r2
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	440b      	add	r3, r1
 80080ee:	3348      	adds	r3, #72	; 0x48
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	78fb      	ldrb	r3, [r7, #3]
 80080f4:	4619      	mov	r1, r3
 80080f6:	f7fe f8c5 	bl	8006284 <USBD_LL_DataInStage>
}
 80080fa:	bf00      	nop
 80080fc:	3708      	adds	r7, #8
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}

08008102 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008102:	b580      	push	{r7, lr}
 8008104:	b082      	sub	sp, #8
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008110:	4618      	mov	r0, r3
 8008112:	f7fe f9d3 	bl	80064bc <USBD_LL_SOF>
}
 8008116:	bf00      	nop
 8008118:	3708      	adds	r7, #8
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800811e:	b580      	push	{r7, lr}
 8008120:	b084      	sub	sp, #16
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008126:	2301      	movs	r3, #1
 8008128:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d102      	bne.n	8008138 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008132:	2300      	movs	r3, #0
 8008134:	73fb      	strb	r3, [r7, #15]
 8008136:	e008      	b.n	800814a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	2b02      	cmp	r3, #2
 800813e:	d102      	bne.n	8008146 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008140:	2301      	movs	r3, #1
 8008142:	73fb      	strb	r3, [r7, #15]
 8008144:	e001      	b.n	800814a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008146:	f7ff fa49 	bl	80075dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008150:	7bfa      	ldrb	r2, [r7, #15]
 8008152:	4611      	mov	r1, r2
 8008154:	4618      	mov	r0, r3
 8008156:	f7fe f97b 	bl	8006450 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008160:	4618      	mov	r0, r3
 8008162:	f7fe f934 	bl	80063ce <USBD_LL_Reset>
}
 8008166:	bf00      	nop
 8008168:	3710      	adds	r7, #16
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
	...

08008170 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800817e:	4618      	mov	r0, r3
 8008180:	f7fe f976 	bl	8006470 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	6812      	ldr	r2, [r2, #0]
 8008192:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008196:	f043 0301 	orr.w	r3, r3, #1
 800819a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6a1b      	ldr	r3, [r3, #32]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d005      	beq.n	80081b0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80081a4:	4b04      	ldr	r3, [pc, #16]	; (80081b8 <HAL_PCD_SuspendCallback+0x48>)
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	4a03      	ldr	r2, [pc, #12]	; (80081b8 <HAL_PCD_SuspendCallback+0x48>)
 80081aa:	f043 0306 	orr.w	r3, r3, #6
 80081ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80081b0:	bf00      	nop
 80081b2:	3708      	adds	r7, #8
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}
 80081b8:	e000ed00 	.word	0xe000ed00

080081bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80081ca:	4618      	mov	r0, r3
 80081cc:	f7fe f965 	bl	800649a <USBD_LL_Resume>
}
 80081d0:	bf00      	nop
 80081d2:	3708      	adds	r7, #8
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	460b      	mov	r3, r1
 80081e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80081ea:	78fa      	ldrb	r2, [r7, #3]
 80081ec:	4611      	mov	r1, r2
 80081ee:	4618      	mov	r0, r3
 80081f0:	f7fe f98b 	bl	800650a <USBD_LL_IsoOUTIncomplete>
}
 80081f4:	bf00      	nop
 80081f6:	3708      	adds	r7, #8
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	460b      	mov	r3, r1
 8008206:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800820e:	78fa      	ldrb	r2, [r7, #3]
 8008210:	4611      	mov	r1, r2
 8008212:	4618      	mov	r0, r3
 8008214:	f7fe f96c 	bl	80064f0 <USBD_LL_IsoINIncomplete>
}
 8008218:	bf00      	nop
 800821a:	3708      	adds	r7, #8
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800822e:	4618      	mov	r0, r3
 8008230:	f7fe f978 	bl	8006524 <USBD_LL_DevConnected>
}
 8008234:	bf00      	nop
 8008236:	3708      	adds	r7, #8
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800824a:	4618      	mov	r0, r3
 800824c:	f7fe f975 	bl	800653a <USBD_LL_DevDisconnected>
}
 8008250:	bf00      	nop
 8008252:	3708      	adds	r7, #8
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d13c      	bne.n	80082e2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008268:	4a20      	ldr	r2, [pc, #128]	; (80082ec <USBD_LL_Init+0x94>)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4a1e      	ldr	r2, [pc, #120]	; (80082ec <USBD_LL_Init+0x94>)
 8008274:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008278:	4b1c      	ldr	r3, [pc, #112]	; (80082ec <USBD_LL_Init+0x94>)
 800827a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800827e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008280:	4b1a      	ldr	r3, [pc, #104]	; (80082ec <USBD_LL_Init+0x94>)
 8008282:	2206      	movs	r2, #6
 8008284:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008286:	4b19      	ldr	r3, [pc, #100]	; (80082ec <USBD_LL_Init+0x94>)
 8008288:	2202      	movs	r2, #2
 800828a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800828c:	4b17      	ldr	r3, [pc, #92]	; (80082ec <USBD_LL_Init+0x94>)
 800828e:	2200      	movs	r2, #0
 8008290:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008292:	4b16      	ldr	r3, [pc, #88]	; (80082ec <USBD_LL_Init+0x94>)
 8008294:	2202      	movs	r2, #2
 8008296:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008298:	4b14      	ldr	r3, [pc, #80]	; (80082ec <USBD_LL_Init+0x94>)
 800829a:	2200      	movs	r2, #0
 800829c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800829e:	4b13      	ldr	r3, [pc, #76]	; (80082ec <USBD_LL_Init+0x94>)
 80082a0:	2200      	movs	r2, #0
 80082a2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80082a4:	4b11      	ldr	r3, [pc, #68]	; (80082ec <USBD_LL_Init+0x94>)
 80082a6:	2200      	movs	r2, #0
 80082a8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80082aa:	4b10      	ldr	r3, [pc, #64]	; (80082ec <USBD_LL_Init+0x94>)
 80082ac:	2200      	movs	r2, #0
 80082ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80082b0:	4b0e      	ldr	r3, [pc, #56]	; (80082ec <USBD_LL_Init+0x94>)
 80082b2:	2200      	movs	r2, #0
 80082b4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80082b6:	480d      	ldr	r0, [pc, #52]	; (80082ec <USBD_LL_Init+0x94>)
 80082b8:	f7f8 ffe8 	bl	800128c <HAL_PCD_Init>
 80082bc:	4603      	mov	r3, r0
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d001      	beq.n	80082c6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80082c2:	f7ff f98b 	bl	80075dc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80082c6:	2180      	movs	r1, #128	; 0x80
 80082c8:	4808      	ldr	r0, [pc, #32]	; (80082ec <USBD_LL_Init+0x94>)
 80082ca:	f7fa f980 	bl	80025ce <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80082ce:	2240      	movs	r2, #64	; 0x40
 80082d0:	2100      	movs	r1, #0
 80082d2:	4806      	ldr	r0, [pc, #24]	; (80082ec <USBD_LL_Init+0x94>)
 80082d4:	f7fa f934 	bl	8002540 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80082d8:	2280      	movs	r2, #128	; 0x80
 80082da:	2101      	movs	r1, #1
 80082dc:	4803      	ldr	r0, [pc, #12]	; (80082ec <USBD_LL_Init+0x94>)
 80082de:	f7fa f92f 	bl	8002540 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80082e2:	2300      	movs	r3, #0
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3708      	adds	r7, #8
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	200016a4 	.word	0x200016a4

080082f0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082f8:	2300      	movs	r3, #0
 80082fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082fc:	2300      	movs	r3, #0
 80082fe:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008306:	4618      	mov	r0, r3
 8008308:	f7f9 f8e4 	bl	80014d4 <HAL_PCD_Start>
 800830c:	4603      	mov	r3, r0
 800830e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8008310:	7bfb      	ldrb	r3, [r7, #15]
 8008312:	4618      	mov	r0, r3
 8008314:	f000 f97c 	bl	8008610 <USBD_Get_USB_Status>
 8008318:	4603      	mov	r3, r0
 800831a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800831c:	7bbb      	ldrb	r3, [r7, #14]
}
 800831e:	4618      	mov	r0, r3
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b084      	sub	sp, #16
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
 800832e:	4608      	mov	r0, r1
 8008330:	4611      	mov	r1, r2
 8008332:	461a      	mov	r2, r3
 8008334:	4603      	mov	r3, r0
 8008336:	70fb      	strb	r3, [r7, #3]
 8008338:	460b      	mov	r3, r1
 800833a:	70bb      	strb	r3, [r7, #2]
 800833c:	4613      	mov	r3, r2
 800833e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008340:	2300      	movs	r3, #0
 8008342:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008344:	2300      	movs	r3, #0
 8008346:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800834e:	78bb      	ldrb	r3, [r7, #2]
 8008350:	883a      	ldrh	r2, [r7, #0]
 8008352:	78f9      	ldrb	r1, [r7, #3]
 8008354:	f7f9 fce6 	bl	8001d24 <HAL_PCD_EP_Open>
 8008358:	4603      	mov	r3, r0
 800835a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800835c:	7bfb      	ldrb	r3, [r7, #15]
 800835e:	4618      	mov	r0, r3
 8008360:	f000 f956 	bl	8008610 <USBD_Get_USB_Status>
 8008364:	4603      	mov	r3, r0
 8008366:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008368:	7bbb      	ldrb	r3, [r7, #14]
}
 800836a:	4618      	mov	r0, r3
 800836c:	3710      	adds	r7, #16
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}

08008372 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008372:	b580      	push	{r7, lr}
 8008374:	b084      	sub	sp, #16
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
 800837a:	460b      	mov	r3, r1
 800837c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800837e:	2300      	movs	r3, #0
 8008380:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008382:	2300      	movs	r3, #0
 8008384:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800838c:	78fa      	ldrb	r2, [r7, #3]
 800838e:	4611      	mov	r1, r2
 8008390:	4618      	mov	r0, r3
 8008392:	f7f9 fd2f 	bl	8001df4 <HAL_PCD_EP_Close>
 8008396:	4603      	mov	r3, r0
 8008398:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800839a:	7bfb      	ldrb	r3, [r7, #15]
 800839c:	4618      	mov	r0, r3
 800839e:	f000 f937 	bl	8008610 <USBD_Get_USB_Status>
 80083a2:	4603      	mov	r3, r0
 80083a4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80083a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3710      	adds	r7, #16
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	460b      	mov	r3, r1
 80083ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083bc:	2300      	movs	r3, #0
 80083be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083c0:	2300      	movs	r3, #0
 80083c2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80083ca:	78fa      	ldrb	r2, [r7, #3]
 80083cc:	4611      	mov	r1, r2
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7f9 fe07 	bl	8001fe2 <HAL_PCD_EP_SetStall>
 80083d4:	4603      	mov	r3, r0
 80083d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083d8:	7bfb      	ldrb	r3, [r7, #15]
 80083da:	4618      	mov	r0, r3
 80083dc:	f000 f918 	bl	8008610 <USBD_Get_USB_Status>
 80083e0:	4603      	mov	r3, r0
 80083e2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80083e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3710      	adds	r7, #16
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}

080083ee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083ee:	b580      	push	{r7, lr}
 80083f0:	b084      	sub	sp, #16
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
 80083f6:	460b      	mov	r3, r1
 80083f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083fa:	2300      	movs	r3, #0
 80083fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083fe:	2300      	movs	r3, #0
 8008400:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008408:	78fa      	ldrb	r2, [r7, #3]
 800840a:	4611      	mov	r1, r2
 800840c:	4618      	mov	r0, r3
 800840e:	f7f9 fe4c 	bl	80020aa <HAL_PCD_EP_ClrStall>
 8008412:	4603      	mov	r3, r0
 8008414:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8008416:	7bfb      	ldrb	r3, [r7, #15]
 8008418:	4618      	mov	r0, r3
 800841a:	f000 f8f9 	bl	8008610 <USBD_Get_USB_Status>
 800841e:	4603      	mov	r3, r0
 8008420:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8008422:	7bbb      	ldrb	r3, [r7, #14]
}
 8008424:	4618      	mov	r0, r3
 8008426:	3710      	adds	r7, #16
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	460b      	mov	r3, r1
 8008436:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800843e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8008440:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008444:	2b00      	cmp	r3, #0
 8008446:	da0b      	bge.n	8008460 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8008448:	78fb      	ldrb	r3, [r7, #3]
 800844a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800844e:	68f9      	ldr	r1, [r7, #12]
 8008450:	4613      	mov	r3, r2
 8008452:	00db      	lsls	r3, r3, #3
 8008454:	1a9b      	subs	r3, r3, r2
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	440b      	add	r3, r1
 800845a:	333e      	adds	r3, #62	; 0x3e
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	e00b      	b.n	8008478 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8008460:	78fb      	ldrb	r3, [r7, #3]
 8008462:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008466:	68f9      	ldr	r1, [r7, #12]
 8008468:	4613      	mov	r3, r2
 800846a:	00db      	lsls	r3, r3, #3
 800846c:	1a9b      	subs	r3, r3, r2
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	440b      	add	r3, r1
 8008472:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008476:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008478:	4618      	mov	r0, r3
 800847a:	3714      	adds	r7, #20
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	460b      	mov	r3, r1
 800848e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008490:	2300      	movs	r3, #0
 8008492:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008494:	2300      	movs	r3, #0
 8008496:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800849e:	78fa      	ldrb	r2, [r7, #3]
 80084a0:	4611      	mov	r1, r2
 80084a2:	4618      	mov	r0, r3
 80084a4:	f7f9 fc19 	bl	8001cda <HAL_PCD_SetAddress>
 80084a8:	4603      	mov	r3, r0
 80084aa:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 80084ac:	7bfb      	ldrb	r3, [r7, #15]
 80084ae:	4618      	mov	r0, r3
 80084b0:	f000 f8ae 	bl	8008610 <USBD_Get_USB_Status>
 80084b4:	4603      	mov	r3, r0
 80084b6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80084b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3710      	adds	r7, #16
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}

080084c2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80084c2:	b580      	push	{r7, lr}
 80084c4:	b086      	sub	sp, #24
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	60f8      	str	r0, [r7, #12]
 80084ca:	607a      	str	r2, [r7, #4]
 80084cc:	461a      	mov	r2, r3
 80084ce:	460b      	mov	r3, r1
 80084d0:	72fb      	strb	r3, [r7, #11]
 80084d2:	4613      	mov	r3, r2
 80084d4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084d6:	2300      	movs	r3, #0
 80084d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084da:	2300      	movs	r3, #0
 80084dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80084e4:	893b      	ldrh	r3, [r7, #8]
 80084e6:	7af9      	ldrb	r1, [r7, #11]
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	f7f9 fd30 	bl	8001f4e <HAL_PCD_EP_Transmit>
 80084ee:	4603      	mov	r3, r0
 80084f0:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 80084f2:	7dfb      	ldrb	r3, [r7, #23]
 80084f4:	4618      	mov	r0, r3
 80084f6:	f000 f88b 	bl	8008610 <USBD_Get_USB_Status>
 80084fa:	4603      	mov	r3, r0
 80084fc:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80084fe:	7dbb      	ldrb	r3, [r7, #22]
}
 8008500:	4618      	mov	r0, r3
 8008502:	3718      	adds	r7, #24
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b086      	sub	sp, #24
 800850c:	af00      	add	r7, sp, #0
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	607a      	str	r2, [r7, #4]
 8008512:	461a      	mov	r2, r3
 8008514:	460b      	mov	r3, r1
 8008516:	72fb      	strb	r3, [r7, #11]
 8008518:	4613      	mov	r3, r2
 800851a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800851c:	2300      	movs	r3, #0
 800851e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008520:	2300      	movs	r3, #0
 8008522:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800852a:	893b      	ldrh	r3, [r7, #8]
 800852c:	7af9      	ldrb	r1, [r7, #11]
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	f7f9 fcaa 	bl	8001e88 <HAL_PCD_EP_Receive>
 8008534:	4603      	mov	r3, r0
 8008536:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8008538:	7dfb      	ldrb	r3, [r7, #23]
 800853a:	4618      	mov	r0, r3
 800853c:	f000 f868 	bl	8008610 <USBD_Get_USB_Status>
 8008540:	4603      	mov	r3, r0
 8008542:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8008544:	7dbb      	ldrb	r3, [r7, #22]
}
 8008546:	4618      	mov	r0, r3
 8008548:	3718      	adds	r7, #24
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800854e:	b580      	push	{r7, lr}
 8008550:	b082      	sub	sp, #8
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
 8008556:	460b      	mov	r3, r1
 8008558:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008560:	78fa      	ldrb	r2, [r7, #3]
 8008562:	4611      	mov	r1, r2
 8008564:	4618      	mov	r0, r3
 8008566:	f7f9 fcda 	bl	8001f1e <HAL_PCD_EP_GetRxCount>
 800856a:	4603      	mov	r3, r0
}
 800856c:	4618      	mov	r0, r3
 800856e:	3708      	adds	r7, #8
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	460b      	mov	r3, r1
 800857e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008580:	78fb      	ldrb	r3, [r7, #3]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d002      	beq.n	800858c <HAL_PCDEx_LPM_Callback+0x18>
 8008586:	2b01      	cmp	r3, #1
 8008588:	d01f      	beq.n	80085ca <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 800858a:	e03b      	b.n	8008604 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6a1b      	ldr	r3, [r3, #32]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d007      	beq.n	80085a4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8008594:	f7fe ff98 	bl	80074c8 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008598:	4b1c      	ldr	r3, [pc, #112]	; (800860c <HAL_PCDEx_LPM_Callback+0x98>)
 800859a:	691b      	ldr	r3, [r3, #16]
 800859c:	4a1b      	ldr	r2, [pc, #108]	; (800860c <HAL_PCDEx_LPM_Callback+0x98>)
 800859e:	f023 0306 	bic.w	r3, r3, #6
 80085a2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	6812      	ldr	r2, [r2, #0]
 80085b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80085b6:	f023 0301 	bic.w	r3, r3, #1
 80085ba:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80085c2:	4618      	mov	r0, r3
 80085c4:	f7fd ff69 	bl	800649a <USBD_LL_Resume>
    break;
 80085c8:	e01c      	b.n	8008604 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	6812      	ldr	r2, [r2, #0]
 80085d8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80085dc:	f043 0301 	orr.w	r3, r3, #1
 80085e0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80085e8:	4618      	mov	r0, r3
 80085ea:	f7fd ff41 	bl	8006470 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6a1b      	ldr	r3, [r3, #32]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d005      	beq.n	8008602 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80085f6:	4b05      	ldr	r3, [pc, #20]	; (800860c <HAL_PCDEx_LPM_Callback+0x98>)
 80085f8:	691b      	ldr	r3, [r3, #16]
 80085fa:	4a04      	ldr	r2, [pc, #16]	; (800860c <HAL_PCDEx_LPM_Callback+0x98>)
 80085fc:	f043 0306 	orr.w	r3, r3, #6
 8008600:	6113      	str	r3, [r2, #16]
    break;   
 8008602:	bf00      	nop
}
 8008604:	bf00      	nop
 8008606:	3708      	adds	r7, #8
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}
 800860c:	e000ed00 	.word	0xe000ed00

08008610 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008610:	b480      	push	{r7}
 8008612:	b085      	sub	sp, #20
 8008614:	af00      	add	r7, sp, #0
 8008616:	4603      	mov	r3, r0
 8008618:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800861a:	2300      	movs	r3, #0
 800861c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800861e:	79fb      	ldrb	r3, [r7, #7]
 8008620:	2b03      	cmp	r3, #3
 8008622:	d817      	bhi.n	8008654 <USBD_Get_USB_Status+0x44>
 8008624:	a201      	add	r2, pc, #4	; (adr r2, 800862c <USBD_Get_USB_Status+0x1c>)
 8008626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800862a:	bf00      	nop
 800862c:	0800863d 	.word	0x0800863d
 8008630:	08008643 	.word	0x08008643
 8008634:	08008649 	.word	0x08008649
 8008638:	0800864f 	.word	0x0800864f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800863c:	2300      	movs	r3, #0
 800863e:	73fb      	strb	r3, [r7, #15]
    break;
 8008640:	e00b      	b.n	800865a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008642:	2302      	movs	r3, #2
 8008644:	73fb      	strb	r3, [r7, #15]
    break;
 8008646:	e008      	b.n	800865a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008648:	2301      	movs	r3, #1
 800864a:	73fb      	strb	r3, [r7, #15]
    break;
 800864c:	e005      	b.n	800865a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800864e:	2302      	movs	r3, #2
 8008650:	73fb      	strb	r3, [r7, #15]
    break;
 8008652:	e002      	b.n	800865a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008654:	2302      	movs	r3, #2
 8008656:	73fb      	strb	r3, [r7, #15]
    break;
 8008658:	bf00      	nop
  }
  return usb_status;
 800865a:	7bfb      	ldrb	r3, [r7, #15]
}
 800865c:	4618      	mov	r0, r3
 800865e:	3714      	adds	r7, #20
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
 800866e:	4603      	mov	r3, r0
 8008670:	6039      	str	r1, [r7, #0]
 8008672:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	2212      	movs	r2, #18
 8008678:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800867a:	4b03      	ldr	r3, [pc, #12]	; (8008688 <USBD_FS_DeviceDescriptor+0x20>)
}
 800867c:	4618      	mov	r0, r3
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr
 8008688:	2000014c 	.word	0x2000014c

0800868c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	4603      	mov	r3, r0
 8008694:	6039      	str	r1, [r7, #0]
 8008696:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	2204      	movs	r2, #4
 800869c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800869e:	4b03      	ldr	r3, [pc, #12]	; (80086ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	370c      	adds	r7, #12
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr
 80086ac:	2000016c 	.word	0x2000016c

080086b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	4603      	mov	r3, r0
 80086b8:	6039      	str	r1, [r7, #0]
 80086ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80086bc:	79fb      	ldrb	r3, [r7, #7]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d105      	bne.n	80086ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80086c2:	683a      	ldr	r2, [r7, #0]
 80086c4:	4907      	ldr	r1, [pc, #28]	; (80086e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80086c6:	4808      	ldr	r0, [pc, #32]	; (80086e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80086c8:	f7fe fc2a 	bl	8006f20 <USBD_GetString>
 80086cc:	e004      	b.n	80086d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80086ce:	683a      	ldr	r2, [r7, #0]
 80086d0:	4904      	ldr	r1, [pc, #16]	; (80086e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80086d2:	4805      	ldr	r0, [pc, #20]	; (80086e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80086d4:	f7fe fc24 	bl	8006f20 <USBD_GetString>
  }
  return USBD_StrDesc;
 80086d8:	4b02      	ldr	r3, [pc, #8]	; (80086e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3708      	adds	r7, #8
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	bf00      	nop
 80086e4:	20001aac 	.word	0x20001aac
 80086e8:	08008b4c 	.word	0x08008b4c

080086ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b082      	sub	sp, #8
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	4603      	mov	r3, r0
 80086f4:	6039      	str	r1, [r7, #0]
 80086f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80086f8:	683a      	ldr	r2, [r7, #0]
 80086fa:	4904      	ldr	r1, [pc, #16]	; (800870c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80086fc:	4804      	ldr	r0, [pc, #16]	; (8008710 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80086fe:	f7fe fc0f 	bl	8006f20 <USBD_GetString>
  return USBD_StrDesc;
 8008702:	4b02      	ldr	r3, [pc, #8]	; (800870c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008704:	4618      	mov	r0, r3
 8008706:	3708      	adds	r7, #8
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}
 800870c:	20001aac 	.word	0x20001aac
 8008710:	08008b64 	.word	0x08008b64

08008714 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	4603      	mov	r3, r0
 800871c:	6039      	str	r1, [r7, #0]
 800871e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	221a      	movs	r2, #26
 8008724:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008726:	f000 f855 	bl	80087d4 <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 800872a:	4b02      	ldr	r3, [pc, #8]	; (8008734 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800872c:	4618      	mov	r0, r3
 800872e:	3708      	adds	r7, #8
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}
 8008734:	20000170 	.word	0x20000170

08008738 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
 800873e:	4603      	mov	r3, r0
 8008740:	6039      	str	r1, [r7, #0]
 8008742:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008744:	79fb      	ldrb	r3, [r7, #7]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d105      	bne.n	8008756 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800874a:	683a      	ldr	r2, [r7, #0]
 800874c:	4907      	ldr	r1, [pc, #28]	; (800876c <USBD_FS_ConfigStrDescriptor+0x34>)
 800874e:	4808      	ldr	r0, [pc, #32]	; (8008770 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008750:	f7fe fbe6 	bl	8006f20 <USBD_GetString>
 8008754:	e004      	b.n	8008760 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008756:	683a      	ldr	r2, [r7, #0]
 8008758:	4904      	ldr	r1, [pc, #16]	; (800876c <USBD_FS_ConfigStrDescriptor+0x34>)
 800875a:	4805      	ldr	r0, [pc, #20]	; (8008770 <USBD_FS_ConfigStrDescriptor+0x38>)
 800875c:	f7fe fbe0 	bl	8006f20 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008760:	4b02      	ldr	r3, [pc, #8]	; (800876c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008762:	4618      	mov	r0, r3
 8008764:	3708      	adds	r7, #8
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	20001aac 	.word	0x20001aac
 8008770:	08008b78 	.word	0x08008b78

08008774 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b082      	sub	sp, #8
 8008778:	af00      	add	r7, sp, #0
 800877a:	4603      	mov	r3, r0
 800877c:	6039      	str	r1, [r7, #0]
 800877e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008780:	79fb      	ldrb	r3, [r7, #7]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d105      	bne.n	8008792 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008786:	683a      	ldr	r2, [r7, #0]
 8008788:	4907      	ldr	r1, [pc, #28]	; (80087a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800878a:	4808      	ldr	r0, [pc, #32]	; (80087ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800878c:	f7fe fbc8 	bl	8006f20 <USBD_GetString>
 8008790:	e004      	b.n	800879c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008792:	683a      	ldr	r2, [r7, #0]
 8008794:	4904      	ldr	r1, [pc, #16]	; (80087a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008796:	4805      	ldr	r0, [pc, #20]	; (80087ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008798:	f7fe fbc2 	bl	8006f20 <USBD_GetString>
  }
  return USBD_StrDesc;
 800879c:	4b02      	ldr	r3, [pc, #8]	; (80087a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3708      	adds	r7, #8
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	20001aac 	.word	0x20001aac
 80087ac:	08008b84 	.word	0x08008b84

080087b0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	4603      	mov	r3, r0
 80087b8:	6039      	str	r1, [r7, #0]
 80087ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	220c      	movs	r2, #12
 80087c0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80087c2:	4b03      	ldr	r3, [pc, #12]	; (80087d0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	370c      	adds	r7, #12
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr
 80087d0:	20000160 	.word	0x20000160

080087d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80087da:	4b0f      	ldr	r3, [pc, #60]	; (8008818 <Get_SerialNum+0x44>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80087e0:	4b0e      	ldr	r3, [pc, #56]	; (800881c <Get_SerialNum+0x48>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80087e6:	4b0e      	ldr	r3, [pc, #56]	; (8008820 <Get_SerialNum+0x4c>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80087ec:	68fa      	ldr	r2, [r7, #12]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4413      	add	r3, r2
 80087f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d009      	beq.n	800880e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80087fa:	2208      	movs	r2, #8
 80087fc:	4909      	ldr	r1, [pc, #36]	; (8008824 <Get_SerialNum+0x50>)
 80087fe:	68f8      	ldr	r0, [r7, #12]
 8008800:	f000 f814 	bl	800882c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008804:	2204      	movs	r2, #4
 8008806:	4908      	ldr	r1, [pc, #32]	; (8008828 <Get_SerialNum+0x54>)
 8008808:	68b8      	ldr	r0, [r7, #8]
 800880a:	f000 f80f 	bl	800882c <IntToUnicode>
  }
}
 800880e:	bf00      	nop
 8008810:	3710      	adds	r7, #16
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
 8008816:	bf00      	nop
 8008818:	1fff7a10 	.word	0x1fff7a10
 800881c:	1fff7a14 	.word	0x1fff7a14
 8008820:	1fff7a18 	.word	0x1fff7a18
 8008824:	20000172 	.word	0x20000172
 8008828:	20000182 	.word	0x20000182

0800882c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800882c:	b480      	push	{r7}
 800882e:	b087      	sub	sp, #28
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	4613      	mov	r3, r2
 8008838:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800883a:	2300      	movs	r3, #0
 800883c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800883e:	2300      	movs	r3, #0
 8008840:	75fb      	strb	r3, [r7, #23]
 8008842:	e027      	b.n	8008894 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	0f1b      	lsrs	r3, r3, #28
 8008848:	2b09      	cmp	r3, #9
 800884a:	d80b      	bhi.n	8008864 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	0f1b      	lsrs	r3, r3, #28
 8008850:	b2da      	uxtb	r2, r3
 8008852:	7dfb      	ldrb	r3, [r7, #23]
 8008854:	005b      	lsls	r3, r3, #1
 8008856:	4619      	mov	r1, r3
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	440b      	add	r3, r1
 800885c:	3230      	adds	r2, #48	; 0x30
 800885e:	b2d2      	uxtb	r2, r2
 8008860:	701a      	strb	r2, [r3, #0]
 8008862:	e00a      	b.n	800887a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	0f1b      	lsrs	r3, r3, #28
 8008868:	b2da      	uxtb	r2, r3
 800886a:	7dfb      	ldrb	r3, [r7, #23]
 800886c:	005b      	lsls	r3, r3, #1
 800886e:	4619      	mov	r1, r3
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	440b      	add	r3, r1
 8008874:	3237      	adds	r2, #55	; 0x37
 8008876:	b2d2      	uxtb	r2, r2
 8008878:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	011b      	lsls	r3, r3, #4
 800887e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008880:	7dfb      	ldrb	r3, [r7, #23]
 8008882:	005b      	lsls	r3, r3, #1
 8008884:	3301      	adds	r3, #1
 8008886:	68ba      	ldr	r2, [r7, #8]
 8008888:	4413      	add	r3, r2
 800888a:	2200      	movs	r2, #0
 800888c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800888e:	7dfb      	ldrb	r3, [r7, #23]
 8008890:	3301      	adds	r3, #1
 8008892:	75fb      	strb	r3, [r7, #23]
 8008894:	7dfa      	ldrb	r2, [r7, #23]
 8008896:	79fb      	ldrb	r3, [r7, #7]
 8008898:	429a      	cmp	r2, r3
 800889a:	d3d3      	bcc.n	8008844 <IntToUnicode+0x18>
  }
}
 800889c:	bf00      	nop
 800889e:	371c      	adds	r7, #28
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80088a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80088e0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80088ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80088ae:	e003      	b.n	80088b8 <LoopCopyDataInit>

080088b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80088b0:	4b0c      	ldr	r3, [pc, #48]	; (80088e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80088b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80088b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80088b6:	3104      	adds	r1, #4

080088b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80088b8:	480b      	ldr	r0, [pc, #44]	; (80088e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80088ba:	4b0c      	ldr	r3, [pc, #48]	; (80088ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80088bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80088be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80088c0:	d3f6      	bcc.n	80088b0 <CopyDataInit>
  ldr  r2, =_sbss
 80088c2:	4a0b      	ldr	r2, [pc, #44]	; (80088f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80088c4:	e002      	b.n	80088cc <LoopFillZerobss>

080088c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80088c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80088c8:	f842 3b04 	str.w	r3, [r2], #4

080088cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80088cc:	4b09      	ldr	r3, [pc, #36]	; (80088f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80088ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80088d0:	d3f9      	bcc.n	80088c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80088d2:	f7fe ff93 	bl	80077fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80088d6:	f000 f817 	bl	8008908 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80088da:	f7fe fd8f 	bl	80073fc <main>
  bx  lr    
 80088de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80088e0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80088e4:	08008bbc 	.word	0x08008bbc
  ldr  r0, =_sdata
 80088e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80088ec:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 80088f0:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 80088f4:	20001cb0 	.word	0x20001cb0

080088f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80088f8:	e7fe      	b.n	80088f8 <ADC_IRQHandler>
	...

080088fc <__errno>:
 80088fc:	4b01      	ldr	r3, [pc, #4]	; (8008904 <__errno+0x8>)
 80088fe:	6818      	ldr	r0, [r3, #0]
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	2000018c 	.word	0x2000018c

08008908 <__libc_init_array>:
 8008908:	b570      	push	{r4, r5, r6, lr}
 800890a:	4e0d      	ldr	r6, [pc, #52]	; (8008940 <__libc_init_array+0x38>)
 800890c:	4c0d      	ldr	r4, [pc, #52]	; (8008944 <__libc_init_array+0x3c>)
 800890e:	1ba4      	subs	r4, r4, r6
 8008910:	10a4      	asrs	r4, r4, #2
 8008912:	2500      	movs	r5, #0
 8008914:	42a5      	cmp	r5, r4
 8008916:	d109      	bne.n	800892c <__libc_init_array+0x24>
 8008918:	4e0b      	ldr	r6, [pc, #44]	; (8008948 <__libc_init_array+0x40>)
 800891a:	4c0c      	ldr	r4, [pc, #48]	; (800894c <__libc_init_array+0x44>)
 800891c:	f000 f900 	bl	8008b20 <_init>
 8008920:	1ba4      	subs	r4, r4, r6
 8008922:	10a4      	asrs	r4, r4, #2
 8008924:	2500      	movs	r5, #0
 8008926:	42a5      	cmp	r5, r4
 8008928:	d105      	bne.n	8008936 <__libc_init_array+0x2e>
 800892a:	bd70      	pop	{r4, r5, r6, pc}
 800892c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008930:	4798      	blx	r3
 8008932:	3501      	adds	r5, #1
 8008934:	e7ee      	b.n	8008914 <__libc_init_array+0xc>
 8008936:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800893a:	4798      	blx	r3
 800893c:	3501      	adds	r5, #1
 800893e:	e7f2      	b.n	8008926 <__libc_init_array+0x1e>
 8008940:	08008bb4 	.word	0x08008bb4
 8008944:	08008bb4 	.word	0x08008bb4
 8008948:	08008bb4 	.word	0x08008bb4
 800894c:	08008bb8 	.word	0x08008bb8

08008950 <malloc>:
 8008950:	4b02      	ldr	r3, [pc, #8]	; (800895c <malloc+0xc>)
 8008952:	4601      	mov	r1, r0
 8008954:	6818      	ldr	r0, [r3, #0]
 8008956:	f000 b861 	b.w	8008a1c <_malloc_r>
 800895a:	bf00      	nop
 800895c:	2000018c 	.word	0x2000018c

08008960 <free>:
 8008960:	4b02      	ldr	r3, [pc, #8]	; (800896c <free+0xc>)
 8008962:	4601      	mov	r1, r0
 8008964:	6818      	ldr	r0, [r3, #0]
 8008966:	f000 b80b 	b.w	8008980 <_free_r>
 800896a:	bf00      	nop
 800896c:	2000018c 	.word	0x2000018c

08008970 <memset>:
 8008970:	4402      	add	r2, r0
 8008972:	4603      	mov	r3, r0
 8008974:	4293      	cmp	r3, r2
 8008976:	d100      	bne.n	800897a <memset+0xa>
 8008978:	4770      	bx	lr
 800897a:	f803 1b01 	strb.w	r1, [r3], #1
 800897e:	e7f9      	b.n	8008974 <memset+0x4>

08008980 <_free_r>:
 8008980:	b538      	push	{r3, r4, r5, lr}
 8008982:	4605      	mov	r5, r0
 8008984:	2900      	cmp	r1, #0
 8008986:	d045      	beq.n	8008a14 <_free_r+0x94>
 8008988:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800898c:	1f0c      	subs	r4, r1, #4
 800898e:	2b00      	cmp	r3, #0
 8008990:	bfb8      	it	lt
 8008992:	18e4      	addlt	r4, r4, r3
 8008994:	f000 f8c1 	bl	8008b1a <__malloc_lock>
 8008998:	4a1f      	ldr	r2, [pc, #124]	; (8008a18 <_free_r+0x98>)
 800899a:	6813      	ldr	r3, [r2, #0]
 800899c:	4610      	mov	r0, r2
 800899e:	b933      	cbnz	r3, 80089ae <_free_r+0x2e>
 80089a0:	6063      	str	r3, [r4, #4]
 80089a2:	6014      	str	r4, [r2, #0]
 80089a4:	4628      	mov	r0, r5
 80089a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089aa:	f000 b8b7 	b.w	8008b1c <__malloc_unlock>
 80089ae:	42a3      	cmp	r3, r4
 80089b0:	d90c      	bls.n	80089cc <_free_r+0x4c>
 80089b2:	6821      	ldr	r1, [r4, #0]
 80089b4:	1862      	adds	r2, r4, r1
 80089b6:	4293      	cmp	r3, r2
 80089b8:	bf04      	itt	eq
 80089ba:	681a      	ldreq	r2, [r3, #0]
 80089bc:	685b      	ldreq	r3, [r3, #4]
 80089be:	6063      	str	r3, [r4, #4]
 80089c0:	bf04      	itt	eq
 80089c2:	1852      	addeq	r2, r2, r1
 80089c4:	6022      	streq	r2, [r4, #0]
 80089c6:	6004      	str	r4, [r0, #0]
 80089c8:	e7ec      	b.n	80089a4 <_free_r+0x24>
 80089ca:	4613      	mov	r3, r2
 80089cc:	685a      	ldr	r2, [r3, #4]
 80089ce:	b10a      	cbz	r2, 80089d4 <_free_r+0x54>
 80089d0:	42a2      	cmp	r2, r4
 80089d2:	d9fa      	bls.n	80089ca <_free_r+0x4a>
 80089d4:	6819      	ldr	r1, [r3, #0]
 80089d6:	1858      	adds	r0, r3, r1
 80089d8:	42a0      	cmp	r0, r4
 80089da:	d10b      	bne.n	80089f4 <_free_r+0x74>
 80089dc:	6820      	ldr	r0, [r4, #0]
 80089de:	4401      	add	r1, r0
 80089e0:	1858      	adds	r0, r3, r1
 80089e2:	4282      	cmp	r2, r0
 80089e4:	6019      	str	r1, [r3, #0]
 80089e6:	d1dd      	bne.n	80089a4 <_free_r+0x24>
 80089e8:	6810      	ldr	r0, [r2, #0]
 80089ea:	6852      	ldr	r2, [r2, #4]
 80089ec:	605a      	str	r2, [r3, #4]
 80089ee:	4401      	add	r1, r0
 80089f0:	6019      	str	r1, [r3, #0]
 80089f2:	e7d7      	b.n	80089a4 <_free_r+0x24>
 80089f4:	d902      	bls.n	80089fc <_free_r+0x7c>
 80089f6:	230c      	movs	r3, #12
 80089f8:	602b      	str	r3, [r5, #0]
 80089fa:	e7d3      	b.n	80089a4 <_free_r+0x24>
 80089fc:	6820      	ldr	r0, [r4, #0]
 80089fe:	1821      	adds	r1, r4, r0
 8008a00:	428a      	cmp	r2, r1
 8008a02:	bf04      	itt	eq
 8008a04:	6811      	ldreq	r1, [r2, #0]
 8008a06:	6852      	ldreq	r2, [r2, #4]
 8008a08:	6062      	str	r2, [r4, #4]
 8008a0a:	bf04      	itt	eq
 8008a0c:	1809      	addeq	r1, r1, r0
 8008a0e:	6021      	streq	r1, [r4, #0]
 8008a10:	605c      	str	r4, [r3, #4]
 8008a12:	e7c7      	b.n	80089a4 <_free_r+0x24>
 8008a14:	bd38      	pop	{r3, r4, r5, pc}
 8008a16:	bf00      	nop
 8008a18:	20000214 	.word	0x20000214

08008a1c <_malloc_r>:
 8008a1c:	b570      	push	{r4, r5, r6, lr}
 8008a1e:	1ccd      	adds	r5, r1, #3
 8008a20:	f025 0503 	bic.w	r5, r5, #3
 8008a24:	3508      	adds	r5, #8
 8008a26:	2d0c      	cmp	r5, #12
 8008a28:	bf38      	it	cc
 8008a2a:	250c      	movcc	r5, #12
 8008a2c:	2d00      	cmp	r5, #0
 8008a2e:	4606      	mov	r6, r0
 8008a30:	db01      	blt.n	8008a36 <_malloc_r+0x1a>
 8008a32:	42a9      	cmp	r1, r5
 8008a34:	d903      	bls.n	8008a3e <_malloc_r+0x22>
 8008a36:	230c      	movs	r3, #12
 8008a38:	6033      	str	r3, [r6, #0]
 8008a3a:	2000      	movs	r0, #0
 8008a3c:	bd70      	pop	{r4, r5, r6, pc}
 8008a3e:	f000 f86c 	bl	8008b1a <__malloc_lock>
 8008a42:	4a21      	ldr	r2, [pc, #132]	; (8008ac8 <_malloc_r+0xac>)
 8008a44:	6814      	ldr	r4, [r2, #0]
 8008a46:	4621      	mov	r1, r4
 8008a48:	b991      	cbnz	r1, 8008a70 <_malloc_r+0x54>
 8008a4a:	4c20      	ldr	r4, [pc, #128]	; (8008acc <_malloc_r+0xb0>)
 8008a4c:	6823      	ldr	r3, [r4, #0]
 8008a4e:	b91b      	cbnz	r3, 8008a58 <_malloc_r+0x3c>
 8008a50:	4630      	mov	r0, r6
 8008a52:	f000 f83d 	bl	8008ad0 <_sbrk_r>
 8008a56:	6020      	str	r0, [r4, #0]
 8008a58:	4629      	mov	r1, r5
 8008a5a:	4630      	mov	r0, r6
 8008a5c:	f000 f838 	bl	8008ad0 <_sbrk_r>
 8008a60:	1c43      	adds	r3, r0, #1
 8008a62:	d124      	bne.n	8008aae <_malloc_r+0x92>
 8008a64:	230c      	movs	r3, #12
 8008a66:	6033      	str	r3, [r6, #0]
 8008a68:	4630      	mov	r0, r6
 8008a6a:	f000 f857 	bl	8008b1c <__malloc_unlock>
 8008a6e:	e7e4      	b.n	8008a3a <_malloc_r+0x1e>
 8008a70:	680b      	ldr	r3, [r1, #0]
 8008a72:	1b5b      	subs	r3, r3, r5
 8008a74:	d418      	bmi.n	8008aa8 <_malloc_r+0x8c>
 8008a76:	2b0b      	cmp	r3, #11
 8008a78:	d90f      	bls.n	8008a9a <_malloc_r+0x7e>
 8008a7a:	600b      	str	r3, [r1, #0]
 8008a7c:	50cd      	str	r5, [r1, r3]
 8008a7e:	18cc      	adds	r4, r1, r3
 8008a80:	4630      	mov	r0, r6
 8008a82:	f000 f84b 	bl	8008b1c <__malloc_unlock>
 8008a86:	f104 000b 	add.w	r0, r4, #11
 8008a8a:	1d23      	adds	r3, r4, #4
 8008a8c:	f020 0007 	bic.w	r0, r0, #7
 8008a90:	1ac3      	subs	r3, r0, r3
 8008a92:	d0d3      	beq.n	8008a3c <_malloc_r+0x20>
 8008a94:	425a      	negs	r2, r3
 8008a96:	50e2      	str	r2, [r4, r3]
 8008a98:	e7d0      	b.n	8008a3c <_malloc_r+0x20>
 8008a9a:	428c      	cmp	r4, r1
 8008a9c:	684b      	ldr	r3, [r1, #4]
 8008a9e:	bf16      	itet	ne
 8008aa0:	6063      	strne	r3, [r4, #4]
 8008aa2:	6013      	streq	r3, [r2, #0]
 8008aa4:	460c      	movne	r4, r1
 8008aa6:	e7eb      	b.n	8008a80 <_malloc_r+0x64>
 8008aa8:	460c      	mov	r4, r1
 8008aaa:	6849      	ldr	r1, [r1, #4]
 8008aac:	e7cc      	b.n	8008a48 <_malloc_r+0x2c>
 8008aae:	1cc4      	adds	r4, r0, #3
 8008ab0:	f024 0403 	bic.w	r4, r4, #3
 8008ab4:	42a0      	cmp	r0, r4
 8008ab6:	d005      	beq.n	8008ac4 <_malloc_r+0xa8>
 8008ab8:	1a21      	subs	r1, r4, r0
 8008aba:	4630      	mov	r0, r6
 8008abc:	f000 f808 	bl	8008ad0 <_sbrk_r>
 8008ac0:	3001      	adds	r0, #1
 8008ac2:	d0cf      	beq.n	8008a64 <_malloc_r+0x48>
 8008ac4:	6025      	str	r5, [r4, #0]
 8008ac6:	e7db      	b.n	8008a80 <_malloc_r+0x64>
 8008ac8:	20000214 	.word	0x20000214
 8008acc:	20000218 	.word	0x20000218

08008ad0 <_sbrk_r>:
 8008ad0:	b538      	push	{r3, r4, r5, lr}
 8008ad2:	4c06      	ldr	r4, [pc, #24]	; (8008aec <_sbrk_r+0x1c>)
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	4605      	mov	r5, r0
 8008ad8:	4608      	mov	r0, r1
 8008ada:	6023      	str	r3, [r4, #0]
 8008adc:	f7fe fe62 	bl	80077a4 <_sbrk>
 8008ae0:	1c43      	adds	r3, r0, #1
 8008ae2:	d102      	bne.n	8008aea <_sbrk_r+0x1a>
 8008ae4:	6823      	ldr	r3, [r4, #0]
 8008ae6:	b103      	cbz	r3, 8008aea <_sbrk_r+0x1a>
 8008ae8:	602b      	str	r3, [r5, #0]
 8008aea:	bd38      	pop	{r3, r4, r5, pc}
 8008aec:	20001cac 	.word	0x20001cac

08008af0 <strncpy>:
 8008af0:	b570      	push	{r4, r5, r6, lr}
 8008af2:	3901      	subs	r1, #1
 8008af4:	4604      	mov	r4, r0
 8008af6:	b902      	cbnz	r2, 8008afa <strncpy+0xa>
 8008af8:	bd70      	pop	{r4, r5, r6, pc}
 8008afa:	4623      	mov	r3, r4
 8008afc:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8008b00:	f803 5b01 	strb.w	r5, [r3], #1
 8008b04:	1e56      	subs	r6, r2, #1
 8008b06:	b92d      	cbnz	r5, 8008b14 <strncpy+0x24>
 8008b08:	4414      	add	r4, r2
 8008b0a:	42a3      	cmp	r3, r4
 8008b0c:	d0f4      	beq.n	8008af8 <strncpy+0x8>
 8008b0e:	f803 5b01 	strb.w	r5, [r3], #1
 8008b12:	e7fa      	b.n	8008b0a <strncpy+0x1a>
 8008b14:	461c      	mov	r4, r3
 8008b16:	4632      	mov	r2, r6
 8008b18:	e7ed      	b.n	8008af6 <strncpy+0x6>

08008b1a <__malloc_lock>:
 8008b1a:	4770      	bx	lr

08008b1c <__malloc_unlock>:
 8008b1c:	4770      	bx	lr
	...

08008b20 <_init>:
 8008b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b22:	bf00      	nop
 8008b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b26:	bc08      	pop	{r3}
 8008b28:	469e      	mov	lr, r3
 8008b2a:	4770      	bx	lr

08008b2c <_fini>:
 8008b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b2e:	bf00      	nop
 8008b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b32:	bc08      	pop	{r3}
 8008b34:	469e      	mov	lr, r3
 8008b36:	4770      	bx	lr
