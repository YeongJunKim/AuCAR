
AuCAR_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009720  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080098e4  080098e4  000198e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800994c  0800994c  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800994c  0800994c  0001994c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009954  08009954  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009954  08009954  00019954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800995c  0800995c  0001995c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08009960  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003568  200001f0  08009b50  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003758  08009b50  00023758  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e746  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004355  00000000  00000000  0003e966  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001630  00000000  00000000  00042cc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001418  00000000  00000000  000442f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000267f2  00000000  00000000  00045708  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014f57  00000000  00000000  0006befa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5fec  00000000  00000000  00080e51  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00156e3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b9c  00000000  00000000  00156eb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200001f0 	.word	0x200001f0
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080098cc 	.word	0x080098cc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200001f4 	.word	0x200001f4
 8000200:	080098cc 	.word	0x080098cc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000508:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <HAL_Init+0x40>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a0d      	ldr	r2, [pc, #52]	; (8000544 <HAL_Init+0x40>)
 800050e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000512:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <HAL_Init+0x40>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <HAL_Init+0x40>)
 800051a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800051e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <HAL_Init+0x40>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a07      	ldr	r2, [pc, #28]	; (8000544 <HAL_Init+0x40>)
 8000526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800052a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 fc7b 	bl	8000e28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 f808 	bl	8000548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000538:	f007 fcaa 	bl	8007e90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800053c:	2300      	movs	r3, #0
}
 800053e:	4618      	mov	r0, r3
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40023c00 	.word	0x40023c00

08000548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <HAL_InitTick+0x54>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <HAL_InitTick+0x58>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4619      	mov	r1, r3
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000562:	fbb2 f3f3 	udiv	r3, r2, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f000 fc93 	bl	8000e92 <HAL_SYSTICK_Config>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000572:	2301      	movs	r3, #1
 8000574:	e00e      	b.n	8000594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2b0f      	cmp	r3, #15
 800057a:	d80a      	bhi.n	8000592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800057c:	2200      	movs	r2, #0
 800057e:	6879      	ldr	r1, [r7, #4]
 8000580:	f04f 30ff 	mov.w	r0, #4294967295
 8000584:	f000 fc5b 	bl	8000e3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <HAL_InitTick+0x5c>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800058e:	2300      	movs	r3, #0
 8000590:	e000      	b.n	8000594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000592:	2301      	movs	r3, #1
}
 8000594:	4618      	mov	r0, r3
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000118 	.word	0x20000118
 80005a0:	20000004 	.word	0x20000004
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_IncTick+0x20>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_IncTick+0x24>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	4a04      	ldr	r2, [pc, #16]	; (80005cc <HAL_IncTick+0x24>)
 80005ba:	6013      	str	r3, [r2, #0]
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000004 	.word	0x20000004
 80005cc:	20001a3c 	.word	0x20001a3c

080005d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  return uwTick;
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <HAL_GetTick+0x14>)
 80005d6:	681b      	ldr	r3, [r3, #0]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20001a3c 	.word	0x20001a3c

080005e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005f0:	f7ff ffee 	bl	80005d0 <HAL_GetTick>
 80005f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000600:	d005      	beq.n	800060e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <HAL_Delay+0x40>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	461a      	mov	r2, r3
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	4413      	add	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800060e:	bf00      	nop
 8000610:	f7ff ffde 	bl	80005d0 <HAL_GetTick>
 8000614:	4602      	mov	r2, r0
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	429a      	cmp	r2, r3
 800061e:	d8f7      	bhi.n	8000610 <HAL_Delay+0x28>
  {
  }
}
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000004 	.word	0x20000004

0800062c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d101      	bne.n	800063e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800063a:	2301      	movs	r3, #1
 800063c:	e0ed      	b.n	800081a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000644:	b2db      	uxtb	r3, r3
 8000646:	2b00      	cmp	r3, #0
 8000648:	d102      	bne.n	8000650 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800064a:	6878      	ldr	r0, [r7, #4]
 800064c:	f007 f9e6 	bl	8007a1c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f022 0202 	bic.w	r2, r2, #2
 800065e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000660:	f7ff ffb6 	bl	80005d0 <HAL_GetTick>
 8000664:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000666:	e012      	b.n	800068e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000668:	f7ff ffb2 	bl	80005d0 <HAL_GetTick>
 800066c:	4602      	mov	r2, r0
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	1ad3      	subs	r3, r2, r3
 8000672:	2b0a      	cmp	r3, #10
 8000674:	d90b      	bls.n	800068e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800067a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2205      	movs	r2, #5
 8000686:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800068a:	2301      	movs	r3, #1
 800068c:	e0c5      	b.n	800081a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	f003 0302 	and.w	r3, r3, #2
 8000698:	2b00      	cmp	r3, #0
 800069a:	d1e5      	bne.n	8000668 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f042 0201 	orr.w	r2, r2, #1
 80006aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80006ac:	f7ff ff90 	bl	80005d0 <HAL_GetTick>
 80006b0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80006b2:	e012      	b.n	80006da <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80006b4:	f7ff ff8c 	bl	80005d0 <HAL_GetTick>
 80006b8:	4602      	mov	r2, r0
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	2b0a      	cmp	r3, #10
 80006c0:	d90b      	bls.n	80006da <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2205      	movs	r2, #5
 80006d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80006d6:	2301      	movs	r3, #1
 80006d8:	e09f      	b.n	800081a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	f003 0301 	and.w	r3, r3, #1
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d0e5      	beq.n	80006b4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	7e1b      	ldrb	r3, [r3, #24]
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d108      	bne.n	8000702 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	e007      	b.n	8000712 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000710:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	7e5b      	ldrb	r3, [r3, #25]
 8000716:	2b01      	cmp	r3, #1
 8000718:	d108      	bne.n	800072c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	e007      	b.n	800073c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800073a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	7e9b      	ldrb	r3, [r3, #26]
 8000740:	2b01      	cmp	r3, #1
 8000742:	d108      	bne.n	8000756 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f042 0220 	orr.w	r2, r2, #32
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	e007      	b.n	8000766 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f022 0220 	bic.w	r2, r2, #32
 8000764:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	7edb      	ldrb	r3, [r3, #27]
 800076a:	2b01      	cmp	r3, #1
 800076c:	d108      	bne.n	8000780 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f022 0210 	bic.w	r2, r2, #16
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	e007      	b.n	8000790 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f042 0210 	orr.w	r2, r2, #16
 800078e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	7f1b      	ldrb	r3, [r3, #28]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d108      	bne.n	80007aa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f042 0208 	orr.w	r2, r2, #8
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	e007      	b.n	80007ba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f022 0208 	bic.w	r2, r2, #8
 80007b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	7f5b      	ldrb	r3, [r3, #29]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d108      	bne.n	80007d4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f042 0204 	orr.w	r2, r2, #4
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	e007      	b.n	80007e4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f022 0204 	bic.w	r2, r2, #4
 80007e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	689a      	ldr	r2, [r3, #8]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	68db      	ldr	r3, [r3, #12]
 80007ec:	431a      	orrs	r2, r3
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	691b      	ldr	r3, [r3, #16]
 80007f2:	431a      	orrs	r2, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	695b      	ldr	r3, [r3, #20]
 80007f8:	ea42 0103 	orr.w	r1, r2, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	1e5a      	subs	r2, r3, #1
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	430a      	orrs	r2, r1
 8000808:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2200      	movs	r2, #0
 800080e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2201      	movs	r2, #1
 8000814:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000818:	2300      	movs	r3, #0
}
 800081a:	4618      	mov	r0, r3
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b08a      	sub	sp, #40	; 0x28
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800082a:	2300      	movs	r3, #0
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	695b      	ldr	r3, [r3, #20]
 8000834:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	689b      	ldr	r3, [r3, #8]
 8000844:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	691b      	ldr	r3, [r3, #16]
 8000854:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800085e:	6a3b      	ldr	r3, [r7, #32]
 8000860:	f003 0301 	and.w	r3, r3, #1
 8000864:	2b00      	cmp	r3, #0
 8000866:	d07c      	beq.n	8000962 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000868:	69bb      	ldr	r3, [r7, #24]
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	2b00      	cmp	r3, #0
 8000870:	d023      	beq.n	80008ba <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	2201      	movs	r2, #1
 8000878:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800087a:	69bb      	ldr	r3, [r7, #24]
 800087c:	f003 0302 	and.w	r3, r3, #2
 8000880:	2b00      	cmp	r3, #0
 8000882:	d003      	beq.n	800088c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f000 f97d 	bl	8000b84 <HAL_CAN_TxMailbox0CompleteCallback>
 800088a:	e016      	b.n	80008ba <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800088c:	69bb      	ldr	r3, [r7, #24]
 800088e:	f003 0304 	and.w	r3, r3, #4
 8000892:	2b00      	cmp	r3, #0
 8000894:	d004      	beq.n	80008a0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000898:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
 800089e:	e00c      	b.n	80008ba <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80008a0:	69bb      	ldr	r3, [r7, #24]
 80008a2:	f003 0308 	and.w	r3, r3, #8
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d004      	beq.n	80008b4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80008aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
 80008b2:	e002      	b.n	80008ba <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	f000 f983 	bl	8000bc0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80008ba:	69bb      	ldr	r3, [r7, #24]
 80008bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d024      	beq.n	800090e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008cc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80008ce:	69bb      	ldr	r3, [r7, #24]
 80008d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d003      	beq.n	80008e0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	f000 f95d 	bl	8000b98 <HAL_CAN_TxMailbox1CompleteCallback>
 80008de:	e016      	b.n	800090e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80008e0:	69bb      	ldr	r3, [r7, #24]
 80008e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d004      	beq.n	80008f4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80008ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
 80008f2:	e00c      	b.n	800090e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80008f4:	69bb      	ldr	r3, [r7, #24]
 80008f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d004      	beq.n	8000908 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80008fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
 8000906:	e002      	b.n	800090e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f000 f963 	bl	8000bd4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800090e:	69bb      	ldr	r3, [r7, #24]
 8000910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000914:	2b00      	cmp	r3, #0
 8000916:	d024      	beq.n	8000962 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000920:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000922:	69bb      	ldr	r3, [r7, #24]
 8000924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000928:	2b00      	cmp	r3, #0
 800092a:	d003      	beq.n	8000934 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f000 f93d 	bl	8000bac <HAL_CAN_TxMailbox2CompleteCallback>
 8000932:	e016      	b.n	8000962 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000934:	69bb      	ldr	r3, [r7, #24]
 8000936:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800093a:	2b00      	cmp	r3, #0
 800093c:	d004      	beq.n	8000948 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800093e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000940:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
 8000946:	e00c      	b.n	8000962 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000948:	69bb      	ldr	r3, [r7, #24]
 800094a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800094e:	2b00      	cmp	r3, #0
 8000950:	d004      	beq.n	800095c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
 800095a:	e002      	b.n	8000962 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f000 f943 	bl	8000be8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000962:	6a3b      	ldr	r3, [r7, #32]
 8000964:	f003 0308 	and.w	r3, r3, #8
 8000968:	2b00      	cmp	r3, #0
 800096a:	d00c      	beq.n	8000986 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	f003 0310 	and.w	r3, r3, #16
 8000972:	2b00      	cmp	r3, #0
 8000974:	d007      	beq.n	8000986 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000978:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800097c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	2210      	movs	r2, #16
 8000984:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000986:	6a3b      	ldr	r3, [r7, #32]
 8000988:	f003 0304 	and.w	r3, r3, #4
 800098c:	2b00      	cmp	r3, #0
 800098e:	d00b      	beq.n	80009a8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	f003 0308 	and.w	r3, r3, #8
 8000996:	2b00      	cmp	r3, #0
 8000998:	d006      	beq.n	80009a8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2208      	movs	r2, #8
 80009a0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f000 f934 	bl	8000c10 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80009a8:	6a3b      	ldr	r3, [r7, #32]
 80009aa:	f003 0302 	and.w	r3, r3, #2
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d009      	beq.n	80009c6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	f003 0303 	and.w	r3, r3, #3
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d002      	beq.n	80009c6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f000 f91b 	bl	8000bfc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80009c6:	6a3b      	ldr	r3, [r7, #32]
 80009c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d00c      	beq.n	80009ea <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80009d0:	693b      	ldr	r3, [r7, #16]
 80009d2:	f003 0310 	and.w	r3, r3, #16
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d007      	beq.n	80009ea <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80009da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2210      	movs	r2, #16
 80009e8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80009ea:	6a3b      	ldr	r3, [r7, #32]
 80009ec:	f003 0320 	and.w	r3, r3, #32
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d00b      	beq.n	8000a0c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	f003 0308 	and.w	r3, r3, #8
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d006      	beq.n	8000a0c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	2208      	movs	r2, #8
 8000a04:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f000 f916 	bl	8000c38 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000a0c:	6a3b      	ldr	r3, [r7, #32]
 8000a0e:	f003 0310 	and.w	r3, r3, #16
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d009      	beq.n	8000a2a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	691b      	ldr	r3, [r3, #16]
 8000a1c:	f003 0303 	and.w	r3, r3, #3
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d002      	beq.n	8000a2a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f000 f8fd 	bl	8000c24 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000a2a:	6a3b      	ldr	r3, [r7, #32]
 8000a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d00b      	beq.n	8000a4c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	f003 0310 	and.w	r3, r3, #16
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d006      	beq.n	8000a4c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	2210      	movs	r2, #16
 8000a44:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f000 f900 	bl	8000c4c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000a4c:	6a3b      	ldr	r3, [r7, #32]
 8000a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d00b      	beq.n	8000a6e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	f003 0308 	and.w	r3, r3, #8
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d006      	beq.n	8000a6e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2208      	movs	r2, #8
 8000a66:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f000 f8f9 	bl	8000c60 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000a6e:	6a3b      	ldr	r3, [r7, #32]
 8000a70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d075      	beq.n	8000b64 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000a78:	69fb      	ldr	r3, [r7, #28]
 8000a7a:	f003 0304 	and.w	r3, r3, #4
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d06c      	beq.n	8000b5c <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000a82:	6a3b      	ldr	r3, [r7, #32]
 8000a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d008      	beq.n	8000a9e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d003      	beq.n	8000a9e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000a9e:	6a3b      	ldr	r3, [r7, #32]
 8000aa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d008      	beq.n	8000aba <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d003      	beq.n	8000aba <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab4:	f043 0302 	orr.w	r3, r3, #2
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000aba:	6a3b      	ldr	r3, [r7, #32]
 8000abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d008      	beq.n	8000ad6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d003      	beq.n	8000ad6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad0:	f043 0304 	orr.w	r3, r3, #4
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000ad6:	6a3b      	ldr	r3, [r7, #32]
 8000ad8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d03d      	beq.n	8000b5c <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d038      	beq.n	8000b5c <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000af0:	2b30      	cmp	r3, #48	; 0x30
 8000af2:	d017      	beq.n	8000b24 <HAL_CAN_IRQHandler+0x302>
 8000af4:	2b30      	cmp	r3, #48	; 0x30
 8000af6:	d804      	bhi.n	8000b02 <HAL_CAN_IRQHandler+0x2e0>
 8000af8:	2b10      	cmp	r3, #16
 8000afa:	d009      	beq.n	8000b10 <HAL_CAN_IRQHandler+0x2ee>
 8000afc:	2b20      	cmp	r3, #32
 8000afe:	d00c      	beq.n	8000b1a <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8000b00:	e024      	b.n	8000b4c <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8000b02:	2b50      	cmp	r3, #80	; 0x50
 8000b04:	d018      	beq.n	8000b38 <HAL_CAN_IRQHandler+0x316>
 8000b06:	2b60      	cmp	r3, #96	; 0x60
 8000b08:	d01b      	beq.n	8000b42 <HAL_CAN_IRQHandler+0x320>
 8000b0a:	2b40      	cmp	r3, #64	; 0x40
 8000b0c:	d00f      	beq.n	8000b2e <HAL_CAN_IRQHandler+0x30c>
            break;
 8000b0e:	e01d      	b.n	8000b4c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8000b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b12:	f043 0308 	orr.w	r3, r3, #8
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000b18:	e018      	b.n	8000b4c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b1c:	f043 0310 	orr.w	r3, r3, #16
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000b22:	e013      	b.n	8000b4c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b26:	f043 0320 	orr.w	r3, r3, #32
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000b2c:	e00e      	b.n	8000b4c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8000b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000b36:	e009      	b.n	8000b4c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8000b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000b40:	e004      	b.n	8000b4c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000b4a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	699a      	ldr	r2, [r3, #24]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000b5a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2204      	movs	r2, #4
 8000b62:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d008      	beq.n	8000b7c <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b70:	431a      	orrs	r2, r3
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f000 f87c 	bl	8000c74 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8000b7c:	bf00      	nop
 8000b7e:	3728      	adds	r7, #40	; 0x28
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <__NVIC_SetPriorityGrouping+0x44>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cba:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <__NVIC_SetPriorityGrouping+0x44>)
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	60d3      	str	r3, [r2, #12]
}
 8000cc0:	bf00      	nop
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd4:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	0a1b      	lsrs	r3, r3, #8
 8000cda:	f003 0307 	and.w	r3, r3, #7
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	db0b      	blt.n	8000d16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	f003 021f 	and.w	r2, r3, #31
 8000d04:	4907      	ldr	r1, [pc, #28]	; (8000d24 <__NVIC_EnableIRQ+0x38>)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	095b      	lsrs	r3, r3, #5
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	e000e100 	.word	0xe000e100

08000d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	6039      	str	r1, [r7, #0]
 8000d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	db0a      	blt.n	8000d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	490c      	ldr	r1, [pc, #48]	; (8000d74 <__NVIC_SetPriority+0x4c>)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	0112      	lsls	r2, r2, #4
 8000d48:	b2d2      	uxtb	r2, r2
 8000d4a:	440b      	add	r3, r1
 8000d4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d50:	e00a      	b.n	8000d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	4908      	ldr	r1, [pc, #32]	; (8000d78 <__NVIC_SetPriority+0x50>)
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	f003 030f 	and.w	r3, r3, #15
 8000d5e:	3b04      	subs	r3, #4
 8000d60:	0112      	lsls	r2, r2, #4
 8000d62:	b2d2      	uxtb	r2, r2
 8000d64:	440b      	add	r3, r1
 8000d66:	761a      	strb	r2, [r3, #24]
}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000e100 	.word	0xe000e100
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b089      	sub	sp, #36	; 0x24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	f1c3 0307 	rsb	r3, r3, #7
 8000d96:	2b04      	cmp	r3, #4
 8000d98:	bf28      	it	cs
 8000d9a:	2304      	movcs	r3, #4
 8000d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3304      	adds	r3, #4
 8000da2:	2b06      	cmp	r3, #6
 8000da4:	d902      	bls.n	8000dac <NVIC_EncodePriority+0x30>
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	3b03      	subs	r3, #3
 8000daa:	e000      	b.n	8000dae <NVIC_EncodePriority+0x32>
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db0:	f04f 32ff 	mov.w	r2, #4294967295
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43da      	mvns	r2, r3
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	401a      	ands	r2, r3
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	fa01 f303 	lsl.w	r3, r1, r3
 8000dce:	43d9      	mvns	r1, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd4:	4313      	orrs	r3, r2
         );
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3724      	adds	r7, #36	; 0x24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
	...

08000de4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000df4:	d301      	bcc.n	8000dfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000df6:	2301      	movs	r3, #1
 8000df8:	e00f      	b.n	8000e1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dfa:	4a0a      	ldr	r2, [pc, #40]	; (8000e24 <SysTick_Config+0x40>)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e02:	210f      	movs	r1, #15
 8000e04:	f04f 30ff 	mov.w	r0, #4294967295
 8000e08:	f7ff ff8e 	bl	8000d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e0c:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <SysTick_Config+0x40>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e12:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <SysTick_Config+0x40>)
 8000e14:	2207      	movs	r2, #7
 8000e16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	e000e010 	.word	0xe000e010

08000e28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f7ff ff29 	bl	8000c88 <__NVIC_SetPriorityGrouping>
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b086      	sub	sp, #24
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	4603      	mov	r3, r0
 8000e46:	60b9      	str	r1, [r7, #8]
 8000e48:	607a      	str	r2, [r7, #4]
 8000e4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e50:	f7ff ff3e 	bl	8000cd0 <__NVIC_GetPriorityGrouping>
 8000e54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	68b9      	ldr	r1, [r7, #8]
 8000e5a:	6978      	ldr	r0, [r7, #20]
 8000e5c:	f7ff ff8e 	bl	8000d7c <NVIC_EncodePriority>
 8000e60:	4602      	mov	r2, r0
 8000e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e66:	4611      	mov	r1, r2
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff5d 	bl	8000d28 <__NVIC_SetPriority>
}
 8000e6e:	bf00      	nop
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff31 	bl	8000cec <__NVIC_EnableIRQ>
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff ffa2 	bl	8000de4 <SysTick_Config>
 8000ea0:	4603      	mov	r3, r0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000eb8:	f7ff fb8a 	bl	80005d0 <HAL_GetTick>
 8000ebc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d101      	bne.n	8000ec8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e099      	b.n	8000ffc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2202      	movs	r2, #2
 8000ed4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f022 0201 	bic.w	r2, r2, #1
 8000ee6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ee8:	e00f      	b.n	8000f0a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000eea:	f7ff fb71 	bl	80005d0 <HAL_GetTick>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	2b05      	cmp	r3, #5
 8000ef6:	d908      	bls.n	8000f0a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2220      	movs	r2, #32
 8000efc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2203      	movs	r2, #3
 8000f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000f06:	2303      	movs	r3, #3
 8000f08:	e078      	b.n	8000ffc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d1e8      	bne.n	8000eea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f20:	697a      	ldr	r2, [r7, #20]
 8000f22:	4b38      	ldr	r3, [pc, #224]	; (8001004 <HAL_DMA_Init+0x158>)
 8000f24:	4013      	ands	r3, r2
 8000f26:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685a      	ldr	r2, [r3, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	691b      	ldr	r3, [r3, #16]
 8000f3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6a1b      	ldr	r3, [r3, #32]
 8000f54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f56:	697a      	ldr	r2, [r7, #20]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f60:	2b04      	cmp	r3, #4
 8000f62:	d107      	bne.n	8000f74 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	697a      	ldr	r2, [r7, #20]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	697a      	ldr	r2, [r7, #20]
 8000f7a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	f023 0307 	bic.w	r3, r3, #7
 8000f8a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f90:	697a      	ldr	r2, [r7, #20]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9a:	2b04      	cmp	r3, #4
 8000f9c:	d117      	bne.n	8000fce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa2:	697a      	ldr	r2, [r7, #20]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d00e      	beq.n	8000fce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f000 fa99 	bl	80014e8 <DMA_CheckFifoParam>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d008      	beq.n	8000fce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2240      	movs	r2, #64	; 0x40
 8000fc0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e016      	b.n	8000ffc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f000 fa50 	bl	800147c <DMA_CalcBaseAndBitshift>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fe4:	223f      	movs	r2, #63	; 0x3f
 8000fe6:	409a      	lsls	r2, r3
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000ffa:	2300      	movs	r3, #0
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	f010803f 	.word	0xf010803f

08001008 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
 8001014:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001016:	2300      	movs	r3, #0
 8001018:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001026:	2b01      	cmp	r3, #1
 8001028:	d101      	bne.n	800102e <HAL_DMA_Start_IT+0x26>
 800102a:	2302      	movs	r3, #2
 800102c:	e048      	b.n	80010c0 <HAL_DMA_Start_IT+0xb8>
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2201      	movs	r2, #1
 8001032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b01      	cmp	r3, #1
 8001040:	d137      	bne.n	80010b2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	2202      	movs	r2, #2
 8001046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	2200      	movs	r2, #0
 800104e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	68b9      	ldr	r1, [r7, #8]
 8001056:	68f8      	ldr	r0, [r7, #12]
 8001058:	f000 f9e2 	bl	8001420 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001060:	223f      	movs	r2, #63	; 0x3f
 8001062:	409a      	lsls	r2, r3
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f042 0216 	orr.w	r2, r2, #22
 8001076:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	695a      	ldr	r2, [r3, #20]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001086:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108c:	2b00      	cmp	r3, #0
 800108e:	d007      	beq.n	80010a0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f042 0208 	orr.w	r2, r2, #8
 800109e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f042 0201 	orr.w	r2, r2, #1
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	e005      	b.n	80010be <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80010ba:	2302      	movs	r3, #2
 80010bc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80010be:	7dfb      	ldrb	r3, [r7, #23]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3718      	adds	r7, #24
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d004      	beq.n	80010e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2280      	movs	r2, #128	; 0x80
 80010e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e00c      	b.n	8001100 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2205      	movs	r2, #5
 80010ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f022 0201 	bic.w	r2, r2, #1
 80010fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010fe:	2300      	movs	r3, #0
}
 8001100:	4618      	mov	r0, r3
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001114:	2300      	movs	r3, #0
 8001116:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001118:	4b92      	ldr	r3, [pc, #584]	; (8001364 <HAL_DMA_IRQHandler+0x258>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a92      	ldr	r2, [pc, #584]	; (8001368 <HAL_DMA_IRQHandler+0x25c>)
 800111e:	fba2 2303 	umull	r2, r3, r2, r3
 8001122:	0a9b      	lsrs	r3, r3, #10
 8001124:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800112a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001136:	2208      	movs	r2, #8
 8001138:	409a      	lsls	r2, r3
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	4013      	ands	r3, r2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d01a      	beq.n	8001178 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0304 	and.w	r3, r3, #4
 800114c:	2b00      	cmp	r3, #0
 800114e:	d013      	beq.n	8001178 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f022 0204 	bic.w	r2, r2, #4
 800115e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001164:	2208      	movs	r2, #8
 8001166:	409a      	lsls	r2, r3
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001170:	f043 0201 	orr.w	r2, r3, #1
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800117c:	2201      	movs	r2, #1
 800117e:	409a      	lsls	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4013      	ands	r3, r2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d012      	beq.n	80011ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001192:	2b00      	cmp	r3, #0
 8001194:	d00b      	beq.n	80011ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800119a:	2201      	movs	r2, #1
 800119c:	409a      	lsls	r2, r3
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011a6:	f043 0202 	orr.w	r2, r3, #2
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011b2:	2204      	movs	r2, #4
 80011b4:	409a      	lsls	r2, r3
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	4013      	ands	r3, r2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d012      	beq.n	80011e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d00b      	beq.n	80011e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011d0:	2204      	movs	r2, #4
 80011d2:	409a      	lsls	r2, r3
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011dc:	f043 0204 	orr.w	r2, r3, #4
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011e8:	2210      	movs	r2, #16
 80011ea:	409a      	lsls	r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4013      	ands	r3, r2
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d043      	beq.n	800127c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d03c      	beq.n	800127c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001206:	2210      	movs	r2, #16
 8001208:	409a      	lsls	r2, r3
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d018      	beq.n	800124e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d108      	bne.n	800123c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	2b00      	cmp	r3, #0
 8001230:	d024      	beq.n	800127c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	4798      	blx	r3
 800123a:	e01f      	b.n	800127c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001240:	2b00      	cmp	r3, #0
 8001242:	d01b      	beq.n	800127c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	4798      	blx	r3
 800124c:	e016      	b.n	800127c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001258:	2b00      	cmp	r3, #0
 800125a:	d107      	bne.n	800126c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f022 0208 	bic.w	r2, r2, #8
 800126a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001270:	2b00      	cmp	r3, #0
 8001272:	d003      	beq.n	800127c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001280:	2220      	movs	r2, #32
 8001282:	409a      	lsls	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4013      	ands	r3, r2
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 808e 	beq.w	80013aa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0310 	and.w	r3, r3, #16
 8001298:	2b00      	cmp	r3, #0
 800129a:	f000 8086 	beq.w	80013aa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012a2:	2220      	movs	r2, #32
 80012a4:	409a      	lsls	r2, r3
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b05      	cmp	r3, #5
 80012b4:	d136      	bne.n	8001324 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f022 0216 	bic.w	r2, r2, #22
 80012c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	695a      	ldr	r2, [r3, #20]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d103      	bne.n	80012e6 <HAL_DMA_IRQHandler+0x1da>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d007      	beq.n	80012f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f022 0208 	bic.w	r2, r2, #8
 80012f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012fa:	223f      	movs	r2, #63	; 0x3f
 80012fc:	409a      	lsls	r2, r3
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2201      	movs	r2, #1
 800130e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001316:	2b00      	cmp	r3, #0
 8001318:	d07d      	beq.n	8001416 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	4798      	blx	r3
        }
        return;
 8001322:	e078      	b.n	8001416 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d01c      	beq.n	800136c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d108      	bne.n	8001352 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001344:	2b00      	cmp	r3, #0
 8001346:	d030      	beq.n	80013aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	4798      	blx	r3
 8001350:	e02b      	b.n	80013aa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001356:	2b00      	cmp	r3, #0
 8001358:	d027      	beq.n	80013aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	4798      	blx	r3
 8001362:	e022      	b.n	80013aa <HAL_DMA_IRQHandler+0x29e>
 8001364:	20000118 	.word	0x20000118
 8001368:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10f      	bne.n	800139a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 0210 	bic.w	r2, r2, #16
 8001388:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2201      	movs	r2, #1
 8001396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d032      	beq.n	8001418 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d022      	beq.n	8001404 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2205      	movs	r2, #5
 80013c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f022 0201 	bic.w	r2, r2, #1
 80013d4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	3301      	adds	r3, #1
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	697a      	ldr	r2, [r7, #20]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d307      	bcc.n	80013f2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1f2      	bne.n	80013d6 <HAL_DMA_IRQHandler+0x2ca>
 80013f0:	e000      	b.n	80013f4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80013f2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001408:	2b00      	cmp	r3, #0
 800140a:	d005      	beq.n	8001418 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	4798      	blx	r3
 8001414:	e000      	b.n	8001418 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001416:	bf00      	nop
    }
  }
}
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop

08001420 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
 800142c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800143c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	683a      	ldr	r2, [r7, #0]
 8001444:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	2b40      	cmp	r3, #64	; 0x40
 800144c:	d108      	bne.n	8001460 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800145e:	e007      	b.n	8001470 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	68ba      	ldr	r2, [r7, #8]
 8001466:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	60da      	str	r2, [r3, #12]
}
 8001470:	bf00      	nop
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	3b10      	subs	r3, #16
 800148c:	4a14      	ldr	r2, [pc, #80]	; (80014e0 <DMA_CalcBaseAndBitshift+0x64>)
 800148e:	fba2 2303 	umull	r2, r3, r2, r3
 8001492:	091b      	lsrs	r3, r3, #4
 8001494:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001496:	4a13      	ldr	r2, [pc, #76]	; (80014e4 <DMA_CalcBaseAndBitshift+0x68>)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4413      	add	r3, r2
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	461a      	mov	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2b03      	cmp	r3, #3
 80014a8:	d909      	bls.n	80014be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80014b2:	f023 0303 	bic.w	r3, r3, #3
 80014b6:	1d1a      	adds	r2, r3, #4
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	659a      	str	r2, [r3, #88]	; 0x58
 80014bc:	e007      	b.n	80014ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80014c6:	f023 0303 	bic.w	r3, r3, #3
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	aaaaaaab 	.word	0xaaaaaaab
 80014e4:	0800992c 	.word	0x0800992c

080014e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014f0:	2300      	movs	r3, #0
 80014f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d11f      	bne.n	8001542 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	2b03      	cmp	r3, #3
 8001506:	d855      	bhi.n	80015b4 <DMA_CheckFifoParam+0xcc>
 8001508:	a201      	add	r2, pc, #4	; (adr r2, 8001510 <DMA_CheckFifoParam+0x28>)
 800150a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800150e:	bf00      	nop
 8001510:	08001521 	.word	0x08001521
 8001514:	08001533 	.word	0x08001533
 8001518:	08001521 	.word	0x08001521
 800151c:	080015b5 	.word	0x080015b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001524:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d045      	beq.n	80015b8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001530:	e042      	b.n	80015b8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001536:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800153a:	d13f      	bne.n	80015bc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001540:	e03c      	b.n	80015bc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800154a:	d121      	bne.n	8001590 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	2b03      	cmp	r3, #3
 8001550:	d836      	bhi.n	80015c0 <DMA_CheckFifoParam+0xd8>
 8001552:	a201      	add	r2, pc, #4	; (adr r2, 8001558 <DMA_CheckFifoParam+0x70>)
 8001554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001558:	08001569 	.word	0x08001569
 800155c:	0800156f 	.word	0x0800156f
 8001560:	08001569 	.word	0x08001569
 8001564:	08001581 	.word	0x08001581
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	73fb      	strb	r3, [r7, #15]
      break;
 800156c:	e02f      	b.n	80015ce <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001572:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d024      	beq.n	80015c4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800157e:	e021      	b.n	80015c4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001584:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001588:	d11e      	bne.n	80015c8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800158e:	e01b      	b.n	80015c8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	2b02      	cmp	r3, #2
 8001594:	d902      	bls.n	800159c <DMA_CheckFifoParam+0xb4>
 8001596:	2b03      	cmp	r3, #3
 8001598:	d003      	beq.n	80015a2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800159a:	e018      	b.n	80015ce <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	73fb      	strb	r3, [r7, #15]
      break;
 80015a0:	e015      	b.n	80015ce <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d00e      	beq.n	80015cc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	73fb      	strb	r3, [r7, #15]
      break;
 80015b2:	e00b      	b.n	80015cc <DMA_CheckFifoParam+0xe4>
      break;
 80015b4:	bf00      	nop
 80015b6:	e00a      	b.n	80015ce <DMA_CheckFifoParam+0xe6>
      break;
 80015b8:	bf00      	nop
 80015ba:	e008      	b.n	80015ce <DMA_CheckFifoParam+0xe6>
      break;
 80015bc:	bf00      	nop
 80015be:	e006      	b.n	80015ce <DMA_CheckFifoParam+0xe6>
      break;
 80015c0:	bf00      	nop
 80015c2:	e004      	b.n	80015ce <DMA_CheckFifoParam+0xe6>
      break;
 80015c4:	bf00      	nop
 80015c6:	e002      	b.n	80015ce <DMA_CheckFifoParam+0xe6>
      break;   
 80015c8:	bf00      	nop
 80015ca:	e000      	b.n	80015ce <DMA_CheckFifoParam+0xe6>
      break;
 80015cc:	bf00      	nop
    }
  } 
  
  return status; 
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015dc:	b480      	push	{r7}
 80015de:	b089      	sub	sp, #36	; 0x24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
 80015f6:	e165      	b.n	80018c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015f8:	2201      	movs	r2, #1
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	697a      	ldr	r2, [r7, #20]
 8001608:	4013      	ands	r3, r2
 800160a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	429a      	cmp	r2, r3
 8001612:	f040 8154 	bne.w	80018be <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b02      	cmp	r3, #2
 800161c:	d003      	beq.n	8001626 <HAL_GPIO_Init+0x4a>
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b12      	cmp	r3, #18
 8001624:	d123      	bne.n	800166e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	08da      	lsrs	r2, r3, #3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	3208      	adds	r2, #8
 800162e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001632:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	220f      	movs	r2, #15
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	43db      	mvns	r3, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4013      	ands	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	691a      	ldr	r2, [r3, #16]
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	f003 0307 	and.w	r3, r3, #7
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4313      	orrs	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	08da      	lsrs	r2, r3, #3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3208      	adds	r2, #8
 8001668:	69b9      	ldr	r1, [r7, #24]
 800166a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	2203      	movs	r2, #3
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43db      	mvns	r3, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4013      	ands	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f003 0203 	and.w	r2, r3, #3
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	4313      	orrs	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d00b      	beq.n	80016c2 <HAL_GPIO_Init+0xe6>
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d007      	beq.n	80016c2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016b6:	2b11      	cmp	r3, #17
 80016b8:	d003      	beq.n	80016c2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2b12      	cmp	r3, #18
 80016c0:	d130      	bne.n	8001724 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	2203      	movs	r2, #3
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43db      	mvns	r3, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4013      	ands	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	68da      	ldr	r2, [r3, #12]
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016f8:	2201      	movs	r2, #1
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	4013      	ands	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	091b      	lsrs	r3, r3, #4
 800170e:	f003 0201 	and.w	r2, r3, #1
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4313      	orrs	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	2203      	movs	r2, #3
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	43db      	mvns	r3, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4013      	ands	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4313      	orrs	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175c:	2b00      	cmp	r3, #0
 800175e:	f000 80ae 	beq.w	80018be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	4b5c      	ldr	r3, [pc, #368]	; (80018d8 <HAL_GPIO_Init+0x2fc>)
 8001768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176a:	4a5b      	ldr	r2, [pc, #364]	; (80018d8 <HAL_GPIO_Init+0x2fc>)
 800176c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001770:	6453      	str	r3, [r2, #68]	; 0x44
 8001772:	4b59      	ldr	r3, [pc, #356]	; (80018d8 <HAL_GPIO_Init+0x2fc>)
 8001774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800177e:	4a57      	ldr	r2, [pc, #348]	; (80018dc <HAL_GPIO_Init+0x300>)
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	089b      	lsrs	r3, r3, #2
 8001784:	3302      	adds	r3, #2
 8001786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800178a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	220f      	movs	r2, #15
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43db      	mvns	r3, r3
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	4013      	ands	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a4e      	ldr	r2, [pc, #312]	; (80018e0 <HAL_GPIO_Init+0x304>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d025      	beq.n	80017f6 <HAL_GPIO_Init+0x21a>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a4d      	ldr	r2, [pc, #308]	; (80018e4 <HAL_GPIO_Init+0x308>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d01f      	beq.n	80017f2 <HAL_GPIO_Init+0x216>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a4c      	ldr	r2, [pc, #304]	; (80018e8 <HAL_GPIO_Init+0x30c>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d019      	beq.n	80017ee <HAL_GPIO_Init+0x212>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a4b      	ldr	r2, [pc, #300]	; (80018ec <HAL_GPIO_Init+0x310>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d013      	beq.n	80017ea <HAL_GPIO_Init+0x20e>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a4a      	ldr	r2, [pc, #296]	; (80018f0 <HAL_GPIO_Init+0x314>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d00d      	beq.n	80017e6 <HAL_GPIO_Init+0x20a>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a49      	ldr	r2, [pc, #292]	; (80018f4 <HAL_GPIO_Init+0x318>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d007      	beq.n	80017e2 <HAL_GPIO_Init+0x206>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a48      	ldr	r2, [pc, #288]	; (80018f8 <HAL_GPIO_Init+0x31c>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d101      	bne.n	80017de <HAL_GPIO_Init+0x202>
 80017da:	2306      	movs	r3, #6
 80017dc:	e00c      	b.n	80017f8 <HAL_GPIO_Init+0x21c>
 80017de:	2307      	movs	r3, #7
 80017e0:	e00a      	b.n	80017f8 <HAL_GPIO_Init+0x21c>
 80017e2:	2305      	movs	r3, #5
 80017e4:	e008      	b.n	80017f8 <HAL_GPIO_Init+0x21c>
 80017e6:	2304      	movs	r3, #4
 80017e8:	e006      	b.n	80017f8 <HAL_GPIO_Init+0x21c>
 80017ea:	2303      	movs	r3, #3
 80017ec:	e004      	b.n	80017f8 <HAL_GPIO_Init+0x21c>
 80017ee:	2302      	movs	r3, #2
 80017f0:	e002      	b.n	80017f8 <HAL_GPIO_Init+0x21c>
 80017f2:	2301      	movs	r3, #1
 80017f4:	e000      	b.n	80017f8 <HAL_GPIO_Init+0x21c>
 80017f6:	2300      	movs	r3, #0
 80017f8:	69fa      	ldr	r2, [r7, #28]
 80017fa:	f002 0203 	and.w	r2, r2, #3
 80017fe:	0092      	lsls	r2, r2, #2
 8001800:	4093      	lsls	r3, r2
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4313      	orrs	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001808:	4934      	ldr	r1, [pc, #208]	; (80018dc <HAL_GPIO_Init+0x300>)
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	089b      	lsrs	r3, r3, #2
 800180e:	3302      	adds	r3, #2
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001816:	4b39      	ldr	r3, [pc, #228]	; (80018fc <HAL_GPIO_Init+0x320>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	43db      	mvns	r3, r3
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4013      	ands	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	4313      	orrs	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800183a:	4a30      	ldr	r2, [pc, #192]	; (80018fc <HAL_GPIO_Init+0x320>)
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001840:	4b2e      	ldr	r3, [pc, #184]	; (80018fc <HAL_GPIO_Init+0x320>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	43db      	mvns	r3, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4013      	ands	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	4313      	orrs	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001864:	4a25      	ldr	r2, [pc, #148]	; (80018fc <HAL_GPIO_Init+0x320>)
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800186a:	4b24      	ldr	r3, [pc, #144]	; (80018fc <HAL_GPIO_Init+0x320>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	43db      	mvns	r3, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4013      	ands	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	4313      	orrs	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800188e:	4a1b      	ldr	r2, [pc, #108]	; (80018fc <HAL_GPIO_Init+0x320>)
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001894:	4b19      	ldr	r3, [pc, #100]	; (80018fc <HAL_GPIO_Init+0x320>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	43db      	mvns	r3, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018b8:	4a10      	ldr	r2, [pc, #64]	; (80018fc <HAL_GPIO_Init+0x320>)
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3301      	adds	r3, #1
 80018c2:	61fb      	str	r3, [r7, #28]
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	2b0f      	cmp	r3, #15
 80018c8:	f67f ae96 	bls.w	80015f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018cc:	bf00      	nop
 80018ce:	3724      	adds	r7, #36	; 0x24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	40023800 	.word	0x40023800
 80018dc:	40013800 	.word	0x40013800
 80018e0:	40020000 	.word	0x40020000
 80018e4:	40020400 	.word	0x40020400
 80018e8:	40020800 	.word	0x40020800
 80018ec:	40020c00 	.word	0x40020c00
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40021400 	.word	0x40021400
 80018f8:	40021800 	.word	0x40021800
 80018fc:	40013c00 	.word	0x40013c00

08001900 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	807b      	strh	r3, [r7, #2]
 800190c:	4613      	mov	r3, r2
 800190e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001910:	787b      	ldrb	r3, [r7, #1]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001916:	887a      	ldrh	r2, [r7, #2]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800191c:	e003      	b.n	8001926 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800191e:	887b      	ldrh	r3, [r7, #2]
 8001920:	041a      	lsls	r2, r3, #16
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	619a      	str	r2, [r3, #24]
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
 800193a:	460b      	mov	r3, r1
 800193c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	695a      	ldr	r2, [r3, #20]
 8001942:	887b      	ldrh	r3, [r7, #2]
 8001944:	401a      	ands	r2, r3
 8001946:	887b      	ldrh	r3, [r7, #2]
 8001948:	429a      	cmp	r2, r3
 800194a:	d104      	bne.n	8001956 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800194c:	887b      	ldrh	r3, [r7, #2]
 800194e:	041a      	lsls	r2, r3, #16
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001954:	e002      	b.n	800195c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001956:	887a      	ldrh	r2, [r7, #2]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	619a      	str	r2, [r3, #24]
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800196a:	b08f      	sub	sp, #60	; 0x3c
 800196c:	af0a      	add	r7, sp, #40	; 0x28
 800196e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e116      	b.n	8001ba8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001986:	b2db      	uxtb	r3, r3
 8001988:	2b00      	cmp	r3, #0
 800198a:	d106      	bne.n	800199a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f007 f8bd 	bl	8008b14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2203      	movs	r2, #3
 800199e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d102      	bne.n	80019b4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f003 fb1c 	bl	8004ff6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	603b      	str	r3, [r7, #0]
 80019c4:	687e      	ldr	r6, [r7, #4]
 80019c6:	466d      	mov	r5, sp
 80019c8:	f106 0410 	add.w	r4, r6, #16
 80019cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80019dc:	1d33      	adds	r3, r6, #4
 80019de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019e0:	6838      	ldr	r0, [r7, #0]
 80019e2:	f003 f9f3 	bl	8004dcc <USB_CoreInit>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d005      	beq.n	80019f8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2202      	movs	r2, #2
 80019f0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e0d7      	b.n	8001ba8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2100      	movs	r1, #0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f003 fb0a 	bl	8005018 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a04:	2300      	movs	r3, #0
 8001a06:	73fb      	strb	r3, [r7, #15]
 8001a08:	e04a      	b.n	8001aa0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a0a:	7bfa      	ldrb	r2, [r7, #15]
 8001a0c:	6879      	ldr	r1, [r7, #4]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	1a9b      	subs	r3, r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	440b      	add	r3, r1
 8001a18:	333d      	adds	r3, #61	; 0x3d
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a1e:	7bfa      	ldrb	r2, [r7, #15]
 8001a20:	6879      	ldr	r1, [r7, #4]
 8001a22:	4613      	mov	r3, r2
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	1a9b      	subs	r3, r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	440b      	add	r3, r1
 8001a2c:	333c      	adds	r3, #60	; 0x3c
 8001a2e:	7bfa      	ldrb	r2, [r7, #15]
 8001a30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a32:	7bfa      	ldrb	r2, [r7, #15]
 8001a34:	7bfb      	ldrb	r3, [r7, #15]
 8001a36:	b298      	uxth	r0, r3
 8001a38:	6879      	ldr	r1, [r7, #4]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	1a9b      	subs	r3, r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	440b      	add	r3, r1
 8001a44:	3342      	adds	r3, #66	; 0x42
 8001a46:	4602      	mov	r2, r0
 8001a48:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a4a:	7bfa      	ldrb	r2, [r7, #15]
 8001a4c:	6879      	ldr	r1, [r7, #4]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	1a9b      	subs	r3, r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	440b      	add	r3, r1
 8001a58:	333f      	adds	r3, #63	; 0x3f
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a5e:	7bfa      	ldrb	r2, [r7, #15]
 8001a60:	6879      	ldr	r1, [r7, #4]
 8001a62:	4613      	mov	r3, r2
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	1a9b      	subs	r3, r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	440b      	add	r3, r1
 8001a6c:	3344      	adds	r3, #68	; 0x44
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a72:	7bfa      	ldrb	r2, [r7, #15]
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	4613      	mov	r3, r2
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	1a9b      	subs	r3, r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	440b      	add	r3, r1
 8001a80:	3348      	adds	r3, #72	; 0x48
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a86:	7bfa      	ldrb	r2, [r7, #15]
 8001a88:	6879      	ldr	r1, [r7, #4]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	1a9b      	subs	r3, r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	440b      	add	r3, r1
 8001a94:	3350      	adds	r3, #80	; 0x50
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	73fb      	strb	r3, [r7, #15]
 8001aa0:	7bfa      	ldrb	r2, [r7, #15]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d3af      	bcc.n	8001a0a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aaa:	2300      	movs	r3, #0
 8001aac:	73fb      	strb	r3, [r7, #15]
 8001aae:	e044      	b.n	8001b3a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ab0:	7bfa      	ldrb	r2, [r7, #15]
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	1a9b      	subs	r3, r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	440b      	add	r3, r1
 8001abe:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ac6:	7bfa      	ldrb	r2, [r7, #15]
 8001ac8:	6879      	ldr	r1, [r7, #4]
 8001aca:	4613      	mov	r3, r2
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	1a9b      	subs	r3, r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	440b      	add	r3, r1
 8001ad4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001ad8:	7bfa      	ldrb	r2, [r7, #15]
 8001ada:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001adc:	7bfa      	ldrb	r2, [r7, #15]
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	1a9b      	subs	r3, r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	440b      	add	r3, r1
 8001aea:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001aee:	2200      	movs	r2, #0
 8001af0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001af2:	7bfa      	ldrb	r2, [r7, #15]
 8001af4:	6879      	ldr	r1, [r7, #4]
 8001af6:	4613      	mov	r3, r2
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	1a9b      	subs	r3, r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	440b      	add	r3, r1
 8001b00:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b08:	7bfa      	ldrb	r2, [r7, #15]
 8001b0a:	6879      	ldr	r1, [r7, #4]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	1a9b      	subs	r3, r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	440b      	add	r3, r1
 8001b16:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b1e:	7bfa      	ldrb	r2, [r7, #15]
 8001b20:	6879      	ldr	r1, [r7, #4]
 8001b22:	4613      	mov	r3, r2
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	1a9b      	subs	r3, r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
 8001b36:	3301      	adds	r3, #1
 8001b38:	73fb      	strb	r3, [r7, #15]
 8001b3a:	7bfa      	ldrb	r2, [r7, #15]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d3b5      	bcc.n	8001ab0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	603b      	str	r3, [r7, #0]
 8001b4a:	687e      	ldr	r6, [r7, #4]
 8001b4c:	466d      	mov	r5, sp
 8001b4e:	f106 0410 	add.w	r4, r6, #16
 8001b52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b62:	1d33      	adds	r3, r6, #4
 8001b64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b66:	6838      	ldr	r0, [r7, #0]
 8001b68:	f003 fa80 	bl	800506c <USB_DevInit>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d005      	beq.n	8001b7e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2202      	movs	r2, #2
 8001b76:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e014      	b.n	8001ba8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d102      	bne.n	8001b9c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f001 f898 	bl	8002ccc <HAL_PCDEx_ActivateLPM>
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f004 fa68 	bl	8006076 <USB_DevDisconnect>

  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3714      	adds	r7, #20
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001bb0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d101      	bne.n	8001bcc <HAL_PCD_Start+0x1c>
 8001bc8:	2302      	movs	r3, #2
 8001bca:	e020      	b.n	8001c0e <HAL_PCD_Start+0x5e>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d109      	bne.n	8001bf0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d005      	beq.n	8001bf0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f004 fa26 	bl	8006046 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f003 f9e8 	bl	8004fd4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c16:	b590      	push	{r4, r7, lr}
 8001c18:	b08d      	sub	sp, #52	; 0x34
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c24:	6a3b      	ldr	r3, [r7, #32]
 8001c26:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f004 facd 	bl	80061cc <USB_GetMode>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f040 83bb 	bne.w	80023b0 <HAL_PCD_IRQHandler+0x79a>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f004 fa31 	bl	80060a6 <USB_ReadInterrupts>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f000 83b1 	beq.w	80023ae <HAL_PCD_IRQHandler+0x798>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f004 fa28 	bl	80060a6 <USB_ReadInterrupts>
 8001c56:	4603      	mov	r3, r0
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d107      	bne.n	8001c70 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	695a      	ldr	r2, [r3, #20]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f002 0202 	and.w	r2, r2, #2
 8001c6e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f004 fa16 	bl	80060a6 <USB_ReadInterrupts>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c80:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001c84:	d17b      	bne.n	8001d7e <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f004 fa1c 	bl	80060cc <USB_ReadDevAllOutEpInterrupt>
 8001c94:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001c96:	e06f      	b.n	8001d78 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d064      	beq.n	8001d6c <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	4611      	mov	r1, r2
 8001cac:	4618      	mov	r0, r3
 8001cae:	f004 fa41 	bl	8006134 <USB_ReadDevOutEPInterrupt>
 8001cb2:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00c      	beq.n	8001cd8 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	015a      	lsls	r2, r3, #5
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cca:	461a      	mov	r2, r3
 8001ccc:	2301      	movs	r3, #1
 8001cce:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001cd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 fe3a 	bl	800294c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00c      	beq.n	8001cfc <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001ce2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 ff39 	bl	8002b5c <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	015a      	lsls	r2, r3, #5
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	2308      	movs	r3, #8
 8001cfa:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	f003 0310 	and.w	r3, r3, #16
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d008      	beq.n	8001d18 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	015a      	lsls	r2, r3, #5
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d12:	461a      	mov	r2, r3
 8001d14:	2310      	movs	r3, #16
 8001d16:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	f003 0320 	and.w	r3, r3, #32
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d015      	beq.n	8001d4e <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d108      	bne.n	8001d3c <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6818      	ldr	r0, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d34:	461a      	mov	r2, r3
 8001d36:	2101      	movs	r1, #1
 8001d38:	f004 fa8c 	bl	8006254 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	015a      	lsls	r2, r3, #5
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	4413      	add	r3, r2
 8001d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d48:	461a      	mov	r2, r3
 8001d4a:	2320      	movs	r3, #32
 8001d4c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d009      	beq.n	8001d6c <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5a:	015a      	lsls	r2, r3, #5
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	4413      	add	r3, r2
 8001d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d64:	461a      	mov	r2, r3
 8001d66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d6a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	3301      	adds	r3, #1
 8001d70:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d74:	085b      	lsrs	r3, r3, #1
 8001d76:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d18c      	bne.n	8001c98 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f004 f98f 	bl	80060a6 <USB_ReadInterrupts>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001d92:	f040 80c4 	bne.w	8001f1e <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f004 f9b0 	bl	8006100 <USB_ReadDevAllInEpInterrupt>
 8001da0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001da6:	e0b6      	b.n	8001f16 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f000 80ab 	beq.w	8001f0a <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dba:	b2d2      	uxtb	r2, r2
 8001dbc:	4611      	mov	r1, r2
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f004 f9d6 	bl	8006170 <USB_ReadDevInEPInterrupt>
 8001dc4:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d05b      	beq.n	8001e88 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001de4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	43db      	mvns	r3, r3
 8001dea:	69f9      	ldr	r1, [r7, #28]
 8001dec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001df0:	4013      	ands	r3, r2
 8001df2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df6:	015a      	lsls	r2, r3, #5
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e00:	461a      	mov	r2, r3
 8001e02:	2301      	movs	r3, #1
 8001e04:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d11b      	bne.n	8001e46 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e12:	4613      	mov	r3, r2
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	1a9b      	subs	r3, r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	440b      	add	r3, r1
 8001e1c:	3348      	adds	r3, #72	; 0x48
 8001e1e:	6819      	ldr	r1, [r3, #0]
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e24:	4613      	mov	r3, r2
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	1a9b      	subs	r3, r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4403      	add	r3, r0
 8001e2e:	3344      	adds	r3, #68	; 0x44
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4419      	add	r1, r3
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e38:	4613      	mov	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	1a9b      	subs	r3, r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4403      	add	r3, r0
 8001e42:	3348      	adds	r3, #72	; 0x48
 8001e44:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f006 fee2 	bl	8008c16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d116      	bne.n	8001e88 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d113      	bne.n	8001e88 <HAL_PCD_IRQHandler+0x272>
 8001e60:	6879      	ldr	r1, [r7, #4]
 8001e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e64:	4613      	mov	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	1a9b      	subs	r3, r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	3350      	adds	r3, #80	; 0x50
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d108      	bne.n	8001e88 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6818      	ldr	r0, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001e80:	461a      	mov	r2, r3
 8001e82:	2101      	movs	r1, #1
 8001e84:	f004 f9e6 	bl	8006254 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d008      	beq.n	8001ea4 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	015a      	lsls	r2, r3, #5
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	4413      	add	r3, r2
 8001e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	2308      	movs	r3, #8
 8001ea2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	f003 0310 	and.w	r3, r3, #16
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d008      	beq.n	8001ec0 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	015a      	lsls	r2, r3, #5
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001eba:	461a      	mov	r2, r3
 8001ebc:	2310      	movs	r3, #16
 8001ebe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d008      	beq.n	8001edc <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	015a      	lsls	r2, r3, #5
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	2340      	movs	r3, #64	; 0x40
 8001eda:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d008      	beq.n	8001ef8 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	015a      	lsls	r2, r3, #5
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	4413      	add	r3, r2
 8001eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001f02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 fc94 	bl	8002832 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f12:	085b      	lsrs	r3, r3, #1
 8001f14:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f47f af45 	bne.w	8001da8 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f004 f8bf 	bl	80060a6 <USB_ReadInterrupts>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f32:	d122      	bne.n	8001f7a <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	69fa      	ldr	r2, [r7, #28]
 8001f3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f42:	f023 0301 	bic.w	r3, r3, #1
 8001f46:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d108      	bne.n	8001f64 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f007 f8ad 	bl	80090bc <HAL_PCDEx_LPM_Callback>
 8001f62:	e002      	b.n	8001f6a <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f006 fecd 	bl	8008d04 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	695a      	ldr	r2, [r3, #20]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001f78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f004 f891 	bl	80060a6 <USB_ReadInterrupts>
 8001f84:	4603      	mov	r3, r0
 8001f86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f8e:	d112      	bne.n	8001fb6 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d102      	bne.n	8001fa6 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f006 fe89 	bl	8008cb8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	695a      	ldr	r2, [r3, #20]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001fb4:	615a      	str	r2, [r3, #20]
    }
    #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f004 f873 	bl	80060a6 <USB_ReadInterrupts>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fca:	d121      	bne.n	8002010 <HAL_PCD_IRQHandler+0x3fa>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	695a      	ldr	r2, [r3, #20]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001fda:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d111      	bne.n	800200a <HAL_PCD_IRQHandler+0x3f4>
      {
        hpcd->LPM_State = LPM_L1;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff4:	089b      	lsrs	r3, r3, #2
 8001ff6:	f003 020f 	and.w	r2, r3, #15
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002000:	2101      	movs	r1, #1
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f007 f85a 	bl	80090bc <HAL_PCDEx_LPM_Callback>
 8002008:	e002      	b.n	8002010 <HAL_PCD_IRQHandler+0x3fa>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f006 fe54 	bl	8008cb8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	f004 f846 	bl	80060a6 <USB_ReadInterrupts>
 800201a:	4603      	mov	r3, r0
 800201c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002020:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002024:	f040 80a7 	bne.w	8002176 <HAL_PCD_IRQHandler+0x560>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	69fa      	ldr	r2, [r7, #28]
 8002032:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002036:	f023 0301 	bic.w	r3, r3, #1
 800203a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2110      	movs	r1, #16
 8002042:	4618      	mov	r0, r3
 8002044:	f003 f97e 	bl	8005344 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002048:	2300      	movs	r3, #0
 800204a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800204c:	e036      	b.n	80020bc <HAL_PCD_IRQHandler+0x4a6>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800204e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002050:	015a      	lsls	r2, r3, #5
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	4413      	add	r3, r2
 8002056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800205a:	461a      	mov	r2, r3
 800205c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002060:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002064:	015a      	lsls	r2, r3, #5
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	4413      	add	r3, r2
 800206a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002072:	0151      	lsls	r1, r2, #5
 8002074:	69fa      	ldr	r2, [r7, #28]
 8002076:	440a      	add	r2, r1
 8002078:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800207c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002080:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002084:	015a      	lsls	r2, r3, #5
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	4413      	add	r3, r2
 800208a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800208e:	461a      	mov	r2, r3
 8002090:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002094:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002098:	015a      	lsls	r2, r3, #5
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	4413      	add	r3, r2
 800209e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020a6:	0151      	lsls	r1, r2, #5
 80020a8:	69fa      	ldr	r2, [r7, #28]
 80020aa:	440a      	add	r2, r1
 80020ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80020b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80020b4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b8:	3301      	adds	r3, #1
 80020ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d3c3      	bcc.n	800204e <HAL_PCD_IRQHandler+0x438>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	69fa      	ldr	r2, [r7, #28]
 80020d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020d4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80020d8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d016      	beq.n	8002110 <HAL_PCD_IRQHandler+0x4fa>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020ec:	69fa      	ldr	r2, [r7, #28]
 80020ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020f2:	f043 030b 	orr.w	r3, r3, #11
 80020f6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002102:	69fa      	ldr	r2, [r7, #28]
 8002104:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002108:	f043 030b 	orr.w	r3, r3, #11
 800210c:	6453      	str	r3, [r2, #68]	; 0x44
 800210e:	e015      	b.n	800213c <HAL_PCD_IRQHandler+0x526>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	69fa      	ldr	r2, [r7, #28]
 800211a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800211e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002122:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002126:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	69fa      	ldr	r2, [r7, #28]
 8002132:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002136:	f043 030b 	orr.w	r3, r3, #11
 800213a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	69fa      	ldr	r2, [r7, #28]
 8002146:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800214a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800214e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6818      	ldr	r0, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002160:	461a      	mov	r2, r3
 8002162:	f004 f877 	bl	8006254 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	695a      	ldr	r2, [r3, #20]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002174:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f003 ff93 	bl	80060a6 <USB_ReadInterrupts>
 8002180:	4603      	mov	r3, r0
 8002182:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002186:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800218a:	d124      	bne.n	80021d6 <HAL_PCD_IRQHandler+0x5c0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f004 f829 	bl	80061e8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f003 f933 	bl	8005406 <USB_GetDevSpeed>
 80021a0:	4603      	mov	r3, r0
 80021a2:	461a      	mov	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681c      	ldr	r4, [r3, #0]
 80021ac:	f000 fe94 	bl	8002ed8 <HAL_RCC_GetHCLKFreq>
 80021b0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	461a      	mov	r2, r3
 80021ba:	4620      	mov	r0, r4
 80021bc:	f002 fe68 	bl	8004e90 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f006 fd50 	bl	8008c66 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	695a      	ldr	r2, [r3, #20]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80021d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f003 ff63 	bl	80060a6 <USB_ReadInterrupts>
 80021e0:	4603      	mov	r3, r0
 80021e2:	f003 0310 	and.w	r3, r3, #16
 80021e6:	2b10      	cmp	r3, #16
 80021e8:	d161      	bne.n	80022ae <HAL_PCD_IRQHandler+0x698>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	699a      	ldr	r2, [r3, #24]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 0210 	bic.w	r2, r2, #16
 80021f8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80021fa:	6a3b      	ldr	r3, [r7, #32]
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	f003 020f 	and.w	r2, r3, #15
 8002206:	4613      	mov	r3, r2
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	1a9b      	subs	r3, r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	4413      	add	r3, r2
 8002216:	3304      	adds	r3, #4
 8002218:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	0c5b      	lsrs	r3, r3, #17
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	2b02      	cmp	r3, #2
 8002224:	d124      	bne.n	8002270 <HAL_PCD_IRQHandler+0x65a>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800222c:	4013      	ands	r3, r2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d035      	beq.n	800229e <HAL_PCD_IRQHandler+0x688>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800223c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002240:	b29b      	uxth	r3, r3
 8002242:	461a      	mov	r2, r3
 8002244:	6a38      	ldr	r0, [r7, #32]
 8002246:	f003 fddb 	bl	8005e00 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	68da      	ldr	r2, [r3, #12]
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	091b      	lsrs	r3, r3, #4
 8002252:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002256:	441a      	add	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	699a      	ldr	r2, [r3, #24]
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	091b      	lsrs	r3, r3, #4
 8002264:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002268:	441a      	add	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	619a      	str	r2, [r3, #24]
 800226e:	e016      	b.n	800229e <HAL_PCD_IRQHandler+0x688>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	0c5b      	lsrs	r3, r3, #17
 8002274:	f003 030f 	and.w	r3, r3, #15
 8002278:	2b06      	cmp	r3, #6
 800227a:	d110      	bne.n	800229e <HAL_PCD_IRQHandler+0x688>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002282:	2208      	movs	r2, #8
 8002284:	4619      	mov	r1, r3
 8002286:	6a38      	ldr	r0, [r7, #32]
 8002288:	f003 fdba 	bl	8005e00 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	699a      	ldr	r2, [r3, #24]
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	091b      	lsrs	r3, r3, #4
 8002294:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002298:	441a      	add	r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	699a      	ldr	r2, [r3, #24]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f042 0210 	orr.w	r2, r2, #16
 80022ac:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f003 fef7 	bl	80060a6 <USB_ReadInterrupts>
 80022b8:	4603      	mov	r3, r0
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b08      	cmp	r3, #8
 80022c0:	d10a      	bne.n	80022d8 <HAL_PCD_IRQHandler+0x6c2>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f006 fcc1 	bl	8008c4a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	695a      	ldr	r2, [r3, #20]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f002 0208 	and.w	r2, r2, #8
 80022d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	f003 fee2 	bl	80060a6 <USB_ReadInterrupts>
 80022e2:	4603      	mov	r3, r0
 80022e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022ec:	d10f      	bne.n	800230e <HAL_PCD_IRQHandler+0x6f8>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80022f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	4619      	mov	r1, r3
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f006 fd23 	bl	8008d44 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	695a      	ldr	r2, [r3, #20]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800230c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f003 fec7 	bl	80060a6 <USB_ReadInterrupts>
 8002318:	4603      	mov	r3, r0
 800231a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800231e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002322:	d10f      	bne.n	8002344 <HAL_PCD_IRQHandler+0x72e>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002324:	2300      	movs	r3, #0
 8002326:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232a:	b2db      	uxtb	r3, r3
 800232c:	4619      	mov	r1, r3
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f006 fcf6 	bl	8008d20 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	695a      	ldr	r2, [r3, #20]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002342:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f003 feac 	bl	80060a6 <USB_ReadInterrupts>
 800234e:	4603      	mov	r3, r0
 8002350:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002358:	d10a      	bne.n	8002370 <HAL_PCD_IRQHandler+0x75a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f006 fd04 	bl	8008d68 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	695a      	ldr	r2, [r3, #20]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800236e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4618      	mov	r0, r3
 8002376:	f003 fe96 	bl	80060a6 <USB_ReadInterrupts>
 800237a:	4603      	mov	r3, r0
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b04      	cmp	r3, #4
 8002382:	d115      	bne.n	80023b0 <HAL_PCD_IRQHandler+0x79a>
    {
      temp = hpcd->Instance->GOTGINT;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	f003 0304 	and.w	r3, r3, #4
 8002392:	2b00      	cmp	r3, #0
 8002394:	d002      	beq.n	800239c <HAL_PCD_IRQHandler+0x786>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f006 fcf4 	bl	8008d84 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6859      	ldr	r1, [r3, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	605a      	str	r2, [r3, #4]
 80023ac:	e000      	b.n	80023b0 <HAL_PCD_IRQHandler+0x79a>
      return;
 80023ae:	bf00      	nop
    }
  }
}
 80023b0:	3734      	adds	r7, #52	; 0x34
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd90      	pop	{r4, r7, pc}

080023b6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b082      	sub	sp, #8
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
 80023be:	460b      	mov	r3, r1
 80023c0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d101      	bne.n	80023d0 <HAL_PCD_SetAddress+0x1a>
 80023cc:	2302      	movs	r3, #2
 80023ce:	e013      	b.n	80023f8 <HAL_PCD_SetAddress+0x42>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	78fa      	ldrb	r2, [r7, #3]
 80023dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	78fa      	ldrb	r2, [r7, #3]
 80023e6:	4611      	mov	r1, r2
 80023e8:	4618      	mov	r0, r3
 80023ea:	f003 fe06 	bl	8005ffa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	4608      	mov	r0, r1
 800240a:	4611      	mov	r1, r2
 800240c:	461a      	mov	r2, r3
 800240e:	4603      	mov	r3, r0
 8002410:	70fb      	strb	r3, [r7, #3]
 8002412:	460b      	mov	r3, r1
 8002414:	803b      	strh	r3, [r7, #0]
 8002416:	4613      	mov	r3, r2
 8002418:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800241a:	2300      	movs	r3, #0
 800241c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800241e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002422:	2b00      	cmp	r3, #0
 8002424:	da0f      	bge.n	8002446 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002426:	78fb      	ldrb	r3, [r7, #3]
 8002428:	f003 020f 	and.w	r2, r3, #15
 800242c:	4613      	mov	r3, r2
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	1a9b      	subs	r3, r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	3338      	adds	r3, #56	; 0x38
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	4413      	add	r3, r2
 800243a:	3304      	adds	r3, #4
 800243c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2201      	movs	r2, #1
 8002442:	705a      	strb	r2, [r3, #1]
 8002444:	e00f      	b.n	8002466 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002446:	78fb      	ldrb	r3, [r7, #3]
 8002448:	f003 020f 	and.w	r2, r3, #15
 800244c:	4613      	mov	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	1a9b      	subs	r3, r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	4413      	add	r3, r2
 800245c:	3304      	adds	r3, #4
 800245e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002466:	78fb      	ldrb	r3, [r7, #3]
 8002468:	f003 030f 	and.w	r3, r3, #15
 800246c:	b2da      	uxtb	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002472:	883a      	ldrh	r2, [r7, #0]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	78ba      	ldrb	r2, [r7, #2]
 800247c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	785b      	ldrb	r3, [r3, #1]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d004      	beq.n	8002490 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	b29a      	uxth	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002490:	78bb      	ldrb	r3, [r7, #2]
 8002492:	2b02      	cmp	r3, #2
 8002494:	d102      	bne.n	800249c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d101      	bne.n	80024aa <HAL_PCD_EP_Open+0xaa>
 80024a6:	2302      	movs	r3, #2
 80024a8:	e00e      	b.n	80024c8 <HAL_PCD_EP_Open+0xc8>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68f9      	ldr	r1, [r7, #12]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f002 ffc9 	bl	8005450 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80024c6:	7afb      	ldrb	r3, [r7, #11]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	460b      	mov	r3, r1
 80024da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80024dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	da0f      	bge.n	8002504 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024e4:	78fb      	ldrb	r3, [r7, #3]
 80024e6:	f003 020f 	and.w	r2, r3, #15
 80024ea:	4613      	mov	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	1a9b      	subs	r3, r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	3338      	adds	r3, #56	; 0x38
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	4413      	add	r3, r2
 80024f8:	3304      	adds	r3, #4
 80024fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2201      	movs	r2, #1
 8002500:	705a      	strb	r2, [r3, #1]
 8002502:	e00f      	b.n	8002524 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002504:	78fb      	ldrb	r3, [r7, #3]
 8002506:	f003 020f 	and.w	r2, r3, #15
 800250a:	4613      	mov	r3, r2
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	1a9b      	subs	r3, r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	4413      	add	r3, r2
 800251a:	3304      	adds	r3, #4
 800251c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002524:	78fb      	ldrb	r3, [r7, #3]
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	b2da      	uxtb	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002536:	2b01      	cmp	r3, #1
 8002538:	d101      	bne.n	800253e <HAL_PCD_EP_Close+0x6e>
 800253a:	2302      	movs	r3, #2
 800253c:	e00e      	b.n	800255c <HAL_PCD_EP_Close+0x8c>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68f9      	ldr	r1, [r7, #12]
 800254c:	4618      	mov	r0, r3
 800254e:	f003 f807 	bl	8005560 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	607a      	str	r2, [r7, #4]
 800256e:	603b      	str	r3, [r7, #0]
 8002570:	460b      	mov	r3, r1
 8002572:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002574:	7afb      	ldrb	r3, [r7, #11]
 8002576:	f003 020f 	and.w	r2, r3, #15
 800257a:	4613      	mov	r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	1a9b      	subs	r3, r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	4413      	add	r3, r2
 800258a:	3304      	adds	r3, #4
 800258c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	2200      	movs	r2, #0
 800259e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	2200      	movs	r2, #0
 80025a4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025a6:	7afb      	ldrb	r3, [r7, #11]
 80025a8:	f003 030f 	and.w	r3, r3, #15
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d102      	bne.n	80025c0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025c0:	7afb      	ldrb	r3, [r7, #11]
 80025c2:	f003 030f 	and.w	r3, r3, #15
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d109      	bne.n	80025de <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6818      	ldr	r0, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	461a      	mov	r2, r3
 80025d6:	6979      	ldr	r1, [r7, #20]
 80025d8:	f003 fa8a 	bl	8005af0 <USB_EP0StartXfer>
 80025dc:	e008      	b.n	80025f0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6818      	ldr	r0, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	461a      	mov	r2, r3
 80025ea:	6979      	ldr	r1, [r7, #20]
 80025ec:	f003 f83c 	bl	8005668 <USB_EPStartXfer>
  }

  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
 8002602:	460b      	mov	r3, r1
 8002604:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002606:	78fb      	ldrb	r3, [r7, #3]
 8002608:	f003 020f 	and.w	r2, r3, #15
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	4613      	mov	r3, r2
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	1a9b      	subs	r3, r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	440b      	add	r3, r1
 8002618:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800261c:	681b      	ldr	r3, [r3, #0]
}
 800261e:	4618      	mov	r0, r3
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b086      	sub	sp, #24
 800262e:	af00      	add	r7, sp, #0
 8002630:	60f8      	str	r0, [r7, #12]
 8002632:	607a      	str	r2, [r7, #4]
 8002634:	603b      	str	r3, [r7, #0]
 8002636:	460b      	mov	r3, r1
 8002638:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800263a:	7afb      	ldrb	r3, [r7, #11]
 800263c:	f003 020f 	and.w	r2, r3, #15
 8002640:	4613      	mov	r3, r2
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	1a9b      	subs	r3, r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	3338      	adds	r3, #56	; 0x38
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	4413      	add	r3, r2
 800264e:	3304      	adds	r3, #4
 8002650:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	2200      	movs	r2, #0
 8002662:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	2201      	movs	r2, #1
 8002668:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800266a:	7afb      	ldrb	r3, [r7, #11]
 800266c:	f003 030f 	and.w	r3, r3, #15
 8002670:	b2da      	uxtb	r2, r3
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d102      	bne.n	8002684 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002684:	7afb      	ldrb	r3, [r7, #11]
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	2b00      	cmp	r3, #0
 800268c:	d109      	bne.n	80026a2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6818      	ldr	r0, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	b2db      	uxtb	r3, r3
 8002698:	461a      	mov	r2, r3
 800269a:	6979      	ldr	r1, [r7, #20]
 800269c:	f003 fa28 	bl	8005af0 <USB_EP0StartXfer>
 80026a0:	e008      	b.n	80026b4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6818      	ldr	r0, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	461a      	mov	r2, r3
 80026ae:	6979      	ldr	r1, [r7, #20]
 80026b0:	f002 ffda 	bl	8005668 <USB_EPStartXfer>
  }

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b084      	sub	sp, #16
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
 80026c6:	460b      	mov	r3, r1
 80026c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80026ca:	78fb      	ldrb	r3, [r7, #3]
 80026cc:	f003 020f 	and.w	r2, r3, #15
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d901      	bls.n	80026dc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e050      	b.n	800277e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	da0f      	bge.n	8002704 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026e4:	78fb      	ldrb	r3, [r7, #3]
 80026e6:	f003 020f 	and.w	r2, r3, #15
 80026ea:	4613      	mov	r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	1a9b      	subs	r3, r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	3338      	adds	r3, #56	; 0x38
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	4413      	add	r3, r2
 80026f8:	3304      	adds	r3, #4
 80026fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2201      	movs	r2, #1
 8002700:	705a      	strb	r2, [r3, #1]
 8002702:	e00d      	b.n	8002720 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002704:	78fa      	ldrb	r2, [r7, #3]
 8002706:	4613      	mov	r3, r2
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	1a9b      	subs	r3, r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	4413      	add	r3, r2
 8002716:	3304      	adds	r3, #4
 8002718:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2201      	movs	r2, #1
 8002724:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002726:	78fb      	ldrb	r3, [r7, #3]
 8002728:	f003 030f 	and.w	r3, r3, #15
 800272c:	b2da      	uxtb	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002738:	2b01      	cmp	r3, #1
 800273a:	d101      	bne.n	8002740 <HAL_PCD_EP_SetStall+0x82>
 800273c:	2302      	movs	r3, #2
 800273e:	e01e      	b.n	800277e <HAL_PCD_EP_SetStall+0xc0>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68f9      	ldr	r1, [r7, #12]
 800274e:	4618      	mov	r0, r3
 8002750:	f003 fb7f 	bl	8005e52 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002754:	78fb      	ldrb	r3, [r7, #3]
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10a      	bne.n	8002774 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6818      	ldr	r0, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	b2d9      	uxtb	r1, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800276e:	461a      	mov	r2, r3
 8002770:	f003 fd70 	bl	8006254 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b084      	sub	sp, #16
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
 800278e:	460b      	mov	r3, r1
 8002790:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002792:	78fb      	ldrb	r3, [r7, #3]
 8002794:	f003 020f 	and.w	r2, r3, #15
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	429a      	cmp	r2, r3
 800279e:	d901      	bls.n	80027a4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e042      	b.n	800282a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80027a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	da0f      	bge.n	80027cc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027ac:	78fb      	ldrb	r3, [r7, #3]
 80027ae:	f003 020f 	and.w	r2, r3, #15
 80027b2:	4613      	mov	r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	1a9b      	subs	r3, r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	3338      	adds	r3, #56	; 0x38
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	4413      	add	r3, r2
 80027c0:	3304      	adds	r3, #4
 80027c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2201      	movs	r2, #1
 80027c8:	705a      	strb	r2, [r3, #1]
 80027ca:	e00f      	b.n	80027ec <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027cc:	78fb      	ldrb	r3, [r7, #3]
 80027ce:	f003 020f 	and.w	r2, r3, #15
 80027d2:	4613      	mov	r3, r2
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	1a9b      	subs	r3, r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	4413      	add	r3, r2
 80027e2:	3304      	adds	r3, #4
 80027e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027f2:	78fb      	ldrb	r3, [r7, #3]
 80027f4:	f003 030f 	and.w	r3, r3, #15
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002804:	2b01      	cmp	r3, #1
 8002806:	d101      	bne.n	800280c <HAL_PCD_EP_ClrStall+0x86>
 8002808:	2302      	movs	r3, #2
 800280a:	e00e      	b.n	800282a <HAL_PCD_EP_ClrStall+0xa4>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68f9      	ldr	r1, [r7, #12]
 800281a:	4618      	mov	r0, r3
 800281c:	f003 fb87 	bl	8005f2e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b08a      	sub	sp, #40	; 0x28
 8002836:	af02      	add	r7, sp, #8
 8002838:	6078      	str	r0, [r7, #4]
 800283a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	4613      	mov	r3, r2
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	1a9b      	subs	r3, r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	3338      	adds	r3, #56	; 0x38
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	4413      	add	r3, r2
 8002856:	3304      	adds	r3, #4
 8002858:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	699a      	ldr	r2, [r3, #24]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	429a      	cmp	r2, r3
 8002864:	d901      	bls.n	800286a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e06c      	b.n	8002944 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	695a      	ldr	r2, [r3, #20]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	69fa      	ldr	r2, [r7, #28]
 800287c:	429a      	cmp	r2, r3
 800287e:	d902      	bls.n	8002886 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	3303      	adds	r3, #3
 800288a:	089b      	lsrs	r3, r3, #2
 800288c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800288e:	e02b      	b.n	80028e8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	695a      	ldr	r2, [r3, #20]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	69fa      	ldr	r2, [r7, #28]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d902      	bls.n	80028ac <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	3303      	adds	r3, #3
 80028b0:	089b      	lsrs	r3, r3, #2
 80028b2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	68d9      	ldr	r1, [r3, #12]
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	4603      	mov	r3, r0
 80028ca:	6978      	ldr	r0, [r7, #20]
 80028cc:	f003 fa63 	bl	8005d96 <USB_WritePacket>

    ep->xfer_buff  += len;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	68da      	ldr	r2, [r3, #12]
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	441a      	add	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	699a      	ldr	r2, [r3, #24]
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	441a      	add	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	015a      	lsls	r2, r3, #5
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	4413      	add	r3, r2
 80028f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d809      	bhi.n	8002912 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	699a      	ldr	r2, [r3, #24]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002906:	429a      	cmp	r2, r3
 8002908:	d203      	bcs.n	8002912 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1be      	bne.n	8002890 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	695a      	ldr	r2, [r3, #20]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	429a      	cmp	r2, r3
 800291c:	d811      	bhi.n	8002942 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	f003 030f 	and.w	r3, r3, #15
 8002924:	2201      	movs	r2, #1
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002932:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	43db      	mvns	r3, r3
 8002938:	6939      	ldr	r1, [r7, #16]
 800293a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800293e:	4013      	ands	r3, r2
 8002940:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3720      	adds	r7, #32
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	333c      	adds	r3, #60	; 0x3c
 8002964:	3304      	adds	r3, #4
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	015a      	lsls	r2, r3, #5
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	4413      	add	r3, r2
 8002972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	2b01      	cmp	r3, #1
 8002980:	f040 80b3 	bne.w	8002aea <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	2b00      	cmp	r3, #0
 800298c:	d028      	beq.n	80029e0 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	4a70      	ldr	r2, [pc, #448]	; (8002b54 <PCD_EP_OutXfrComplete_int+0x208>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d90e      	bls.n	80029b4 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800299c:	2b00      	cmp	r3, #0
 800299e:	d009      	beq.n	80029b4 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	015a      	lsls	r2, r3, #5
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	4413      	add	r3, r2
 80029a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029ac:	461a      	mov	r2, r3
 80029ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029b2:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f006 f901 	bl	8008bbc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6818      	ldr	r0, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80029c4:	461a      	mov	r2, r3
 80029c6:	2101      	movs	r1, #1
 80029c8:	f003 fc44 	bl	8006254 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	015a      	lsls	r2, r3, #5
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	4413      	add	r3, r2
 80029d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029d8:	461a      	mov	r2, r3
 80029da:	2308      	movs	r3, #8
 80029dc:	6093      	str	r3, [r2, #8]
 80029de:	e0b3      	b.n	8002b48 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	f003 0320 	and.w	r3, r3, #32
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d009      	beq.n	80029fe <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	015a      	lsls	r2, r3, #5
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	4413      	add	r3, r2
 80029f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029f6:	461a      	mov	r2, r3
 80029f8:	2320      	movs	r3, #32
 80029fa:	6093      	str	r3, [r2, #8]
 80029fc:	e0a4      	b.n	8002b48 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f040 809f 	bne.w	8002b48 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	4a51      	ldr	r2, [pc, #324]	; (8002b54 <PCD_EP_OutXfrComplete_int+0x208>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d90f      	bls.n	8002a32 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00a      	beq.n	8002a32 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	015a      	lsls	r2, r3, #5
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	4413      	add	r3, r2
 8002a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a28:	461a      	mov	r2, r3
 8002a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a2e:	6093      	str	r3, [r2, #8]
 8002a30:	e08a      	b.n	8002b48 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	4613      	mov	r3, r2
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	1a9b      	subs	r3, r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	440b      	add	r3, r1
 8002a40:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002a44:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	0159      	lsls	r1, r3, #5
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	440b      	add	r3, r1
 8002a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002a58:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	1a9b      	subs	r3, r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4403      	add	r3, r0
 8002a68:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002a6c:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	4613      	mov	r3, r2
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	1a9b      	subs	r3, r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	440b      	add	r3, r1
 8002a7c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a80:	6819      	ldr	r1, [r3, #0]
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	4613      	mov	r3, r2
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	1a9b      	subs	r3, r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4403      	add	r3, r0
 8002a90:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4419      	add	r1, r3
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	1a9b      	subs	r3, r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4403      	add	r3, r0
 8002aa6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002aaa:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f006 f894 	bl	8008be0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d144      	bne.n	8002b48 <PCD_EP_OutXfrComplete_int+0x1fc>
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	1a9b      	subs	r3, r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	440b      	add	r3, r1
 8002acc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d138      	bne.n	8002b48 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6818      	ldr	r0, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	f003 fbb6 	bl	8006254 <USB_EP0_OutStart>
 8002ae8:	e02e      	b.n	8002b48 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	4a1a      	ldr	r2, [pc, #104]	; (8002b58 <PCD_EP_OutXfrComplete_int+0x20c>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d124      	bne.n	8002b3c <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00a      	beq.n	8002b12 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	015a      	lsls	r2, r3, #5
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	4413      	add	r3, r2
 8002b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b08:	461a      	mov	r2, r3
 8002b0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b0e:	6093      	str	r3, [r2, #8]
 8002b10:	e01a      	b.n	8002b48 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	f003 0320 	and.w	r3, r3, #32
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d008      	beq.n	8002b2e <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	015a      	lsls	r2, r3, #5
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	4413      	add	r3, r2
 8002b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b28:	461a      	mov	r2, r3
 8002b2a:	2320      	movs	r3, #32
 8002b2c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	4619      	mov	r1, r3
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f006 f853 	bl	8008be0 <HAL_PCD_DataOutStageCallback>
 8002b3a:	e005      	b.n	8002b48 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	4619      	mov	r1, r3
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f006 f84c 	bl	8008be0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	4f54300a 	.word	0x4f54300a
 8002b58:	4f54310a 	.word	0x4f54310a

08002b5c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	333c      	adds	r3, #60	; 0x3c
 8002b74:	3304      	adds	r3, #4
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	015a      	lsls	r2, r3, #5
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	4413      	add	r3, r2
 8002b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d113      	bne.n	8002bba <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	4a1f      	ldr	r2, [pc, #124]	; (8002c14 <PCD_EP_OutSetupPacket_int+0xb8>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d922      	bls.n	8002be0 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d01d      	beq.n	8002be0 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	015a      	lsls	r2, r3, #5
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	4413      	add	r3, r2
 8002bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bb6:	6093      	str	r3, [r2, #8]
 8002bb8:	e012      	b.n	8002be0 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	4a16      	ldr	r2, [pc, #88]	; (8002c18 <PCD_EP_OutSetupPacket_int+0xbc>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d10e      	bne.n	8002be0 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d009      	beq.n	8002be0 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	015a      	lsls	r2, r3, #5
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bd8:	461a      	mov	r2, r3
 8002bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bde:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f005 ffeb 	bl	8008bbc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	4a0a      	ldr	r2, [pc, #40]	; (8002c14 <PCD_EP_OutSetupPacket_int+0xb8>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d90c      	bls.n	8002c08 <PCD_EP_OutSetupPacket_int+0xac>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d108      	bne.n	8002c08 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6818      	ldr	r0, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c00:	461a      	mov	r2, r3
 8002c02:	2101      	movs	r1, #1
 8002c04:	f003 fb26 	bl	8006254 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	4f54300a 	.word	0x4f54300a
 8002c18:	4f54310a 	.word	0x4f54310a

08002c1c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	460b      	mov	r3, r1
 8002c26:	70fb      	strb	r3, [r7, #3]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c32:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002c34:	78fb      	ldrb	r3, [r7, #3]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d107      	bne.n	8002c4a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002c3a:	883b      	ldrh	r3, [r7, #0]
 8002c3c:	0419      	lsls	r1, r3, #16
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	430a      	orrs	r2, r1
 8002c46:	629a      	str	r2, [r3, #40]	; 0x28
 8002c48:	e028      	b.n	8002c9c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c50:	0c1b      	lsrs	r3, r3, #16
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	4413      	add	r3, r2
 8002c56:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c58:	2300      	movs	r3, #0
 8002c5a:	73fb      	strb	r3, [r7, #15]
 8002c5c:	e00d      	b.n	8002c7a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	7bfb      	ldrb	r3, [r7, #15]
 8002c64:	3340      	adds	r3, #64	; 0x40
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4413      	add	r3, r2
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	0c1b      	lsrs	r3, r3, #16
 8002c6e:	68ba      	ldr	r2, [r7, #8]
 8002c70:	4413      	add	r3, r2
 8002c72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c74:	7bfb      	ldrb	r3, [r7, #15]
 8002c76:	3301      	adds	r3, #1
 8002c78:	73fb      	strb	r3, [r7, #15]
 8002c7a:	7bfa      	ldrb	r2, [r7, #15]
 8002c7c:	78fb      	ldrb	r3, [r7, #3]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d3ec      	bcc.n	8002c5e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002c84:	883b      	ldrh	r3, [r7, #0]
 8002c86:	0418      	lsls	r0, r3, #16
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6819      	ldr	r1, [r3, #0]
 8002c8c:	78fb      	ldrb	r3, [r7, #3]
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	4302      	orrs	r2, r0
 8002c94:	3340      	adds	r3, #64	; 0x40
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	440b      	add	r3, r1
 8002c9a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	887a      	ldrh	r2, [r7, #2]
 8002cbc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cfe:	f043 0303 	orr.w	r3, r3, #3
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3714      	adds	r7, #20
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e0ca      	b.n	8002ebe <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d28:	4b67      	ldr	r3, [pc, #412]	; (8002ec8 <HAL_RCC_ClockConfig+0x1b4>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 030f 	and.w	r3, r3, #15
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d90c      	bls.n	8002d50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d36:	4b64      	ldr	r3, [pc, #400]	; (8002ec8 <HAL_RCC_ClockConfig+0x1b4>)
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d3e:	4b62      	ldr	r3, [pc, #392]	; (8002ec8 <HAL_RCC_ClockConfig+0x1b4>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d001      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e0b6      	b.n	8002ebe <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d020      	beq.n	8002d9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d005      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d68:	4b58      	ldr	r3, [pc, #352]	; (8002ecc <HAL_RCC_ClockConfig+0x1b8>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	4a57      	ldr	r2, [pc, #348]	; (8002ecc <HAL_RCC_ClockConfig+0x1b8>)
 8002d6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0308 	and.w	r3, r3, #8
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d80:	4b52      	ldr	r3, [pc, #328]	; (8002ecc <HAL_RCC_ClockConfig+0x1b8>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	4a51      	ldr	r2, [pc, #324]	; (8002ecc <HAL_RCC_ClockConfig+0x1b8>)
 8002d86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d8c:	4b4f      	ldr	r3, [pc, #316]	; (8002ecc <HAL_RCC_ClockConfig+0x1b8>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	494c      	ldr	r1, [pc, #304]	; (8002ecc <HAL_RCC_ClockConfig+0x1b8>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d044      	beq.n	8002e34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d107      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db2:	4b46      	ldr	r3, [pc, #280]	; (8002ecc <HAL_RCC_ClockConfig+0x1b8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d119      	bne.n	8002df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e07d      	b.n	8002ebe <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d003      	beq.n	8002dd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dce:	2b03      	cmp	r3, #3
 8002dd0:	d107      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd2:	4b3e      	ldr	r3, [pc, #248]	; (8002ecc <HAL_RCC_ClockConfig+0x1b8>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d109      	bne.n	8002df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e06d      	b.n	8002ebe <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de2:	4b3a      	ldr	r3, [pc, #232]	; (8002ecc <HAL_RCC_ClockConfig+0x1b8>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e065      	b.n	8002ebe <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002df2:	4b36      	ldr	r3, [pc, #216]	; (8002ecc <HAL_RCC_ClockConfig+0x1b8>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f023 0203 	bic.w	r2, r3, #3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	4933      	ldr	r1, [pc, #204]	; (8002ecc <HAL_RCC_ClockConfig+0x1b8>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e04:	f7fd fbe4 	bl	80005d0 <HAL_GetTick>
 8002e08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e0a:	e00a      	b.n	8002e22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e0c:	f7fd fbe0 	bl	80005d0 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e04d      	b.n	8002ebe <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e22:	4b2a      	ldr	r3, [pc, #168]	; (8002ecc <HAL_RCC_ClockConfig+0x1b8>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 020c 	and.w	r2, r3, #12
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d1eb      	bne.n	8002e0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e34:	4b24      	ldr	r3, [pc, #144]	; (8002ec8 <HAL_RCC_ClockConfig+0x1b4>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 030f 	and.w	r3, r3, #15
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d20c      	bcs.n	8002e5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e42:	4b21      	ldr	r3, [pc, #132]	; (8002ec8 <HAL_RCC_ClockConfig+0x1b4>)
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	b2d2      	uxtb	r2, r2
 8002e48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4a:	4b1f      	ldr	r3, [pc, #124]	; (8002ec8 <HAL_RCC_ClockConfig+0x1b4>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 030f 	and.w	r3, r3, #15
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d001      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e030      	b.n	8002ebe <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d008      	beq.n	8002e7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e68:	4b18      	ldr	r3, [pc, #96]	; (8002ecc <HAL_RCC_ClockConfig+0x1b8>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	4915      	ldr	r1, [pc, #84]	; (8002ecc <HAL_RCC_ClockConfig+0x1b8>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d009      	beq.n	8002e9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e86:	4b11      	ldr	r3, [pc, #68]	; (8002ecc <HAL_RCC_ClockConfig+0x1b8>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	490d      	ldr	r1, [pc, #52]	; (8002ecc <HAL_RCC_ClockConfig+0x1b8>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e9a:	f000 fb7b 	bl	8003594 <HAL_RCC_GetSysClockFreq>
 8002e9e:	4601      	mov	r1, r0
 8002ea0:	4b0a      	ldr	r3, [pc, #40]	; (8002ecc <HAL_RCC_ClockConfig+0x1b8>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	091b      	lsrs	r3, r3, #4
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	4a09      	ldr	r2, [pc, #36]	; (8002ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8002eac:	5cd3      	ldrb	r3, [r2, r3]
 8002eae:	fa21 f303 	lsr.w	r3, r1, r3
 8002eb2:	4a08      	ldr	r2, [pc, #32]	; (8002ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8002eb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002eb6:	2000      	movs	r0, #0
 8002eb8:	f7fd fb46 	bl	8000548 <HAL_InitTick>

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40023c00 	.word	0x40023c00
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	08009934 	.word	0x08009934
 8002ed4:	20000118 	.word	0x20000118

08002ed8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002edc:	4b03      	ldr	r3, [pc, #12]	; (8002eec <HAL_RCC_GetHCLKFreq+0x14>)
 8002ede:	681b      	ldr	r3, [r3, #0]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	20000118 	.word	0x20000118

08002ef0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ef4:	f7ff fff0 	bl	8002ed8 <HAL_RCC_GetHCLKFreq>
 8002ef8:	4601      	mov	r1, r0
 8002efa:	4b05      	ldr	r3, [pc, #20]	; (8002f10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	0a9b      	lsrs	r3, r3, #10
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	4a03      	ldr	r2, [pc, #12]	; (8002f14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f06:	5cd3      	ldrb	r3, [r2, r3]
 8002f08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40023800 	.word	0x40023800
 8002f14:	08009944 	.word	0x08009944

08002f18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f1c:	f7ff ffdc 	bl	8002ed8 <HAL_RCC_GetHCLKFreq>
 8002f20:	4601      	mov	r1, r0
 8002f22:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	0b5b      	lsrs	r3, r3, #13
 8002f28:	f003 0307 	and.w	r3, r3, #7
 8002f2c:	4a03      	ldr	r2, [pc, #12]	; (8002f3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f2e:	5cd3      	ldrb	r3, [r2, r3]
 8002f30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40023800 	.word	0x40023800
 8002f3c:	08009944 	.word	0x08009944

08002f40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08c      	sub	sp, #48	; 0x30
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002f54:	2300      	movs	r3, #0
 8002f56:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002f60:	2300      	movs	r3, #0
 8002f62:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002f64:	2300      	movs	r3, #0
 8002f66:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d010      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002f78:	4b6f      	ldr	r3, [pc, #444]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f7e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f86:	496c      	ldr	r1, [pc, #432]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002f96:	2301      	movs	r3, #1
 8002f98:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d010      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002fa6:	4b64      	ldr	r3, [pc, #400]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002fa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fac:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb4:	4960      	ldr	r1, [pc, #384]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d017      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fd4:	4b58      	ldr	r3, [pc, #352]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002fd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	4955      	ldr	r1, [pc, #340]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ff2:	d101      	bne.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d101      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003000:	2301      	movs	r3, #1
 8003002:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0308 	and.w	r3, r3, #8
 800300c:	2b00      	cmp	r3, #0
 800300e:	d017      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003010:	4b49      	ldr	r3, [pc, #292]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003012:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003016:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800301e:	4946      	ldr	r1, [pc, #280]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003020:	4313      	orrs	r3, r2
 8003022:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800302a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800302e:	d101      	bne.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003030:	2301      	movs	r3, #1
 8003032:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800303c:	2301      	movs	r3, #1
 800303e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0320 	and.w	r3, r3, #32
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 808a 	beq.w	8003162 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800304e:	2300      	movs	r3, #0
 8003050:	60bb      	str	r3, [r7, #8]
 8003052:	4b39      	ldr	r3, [pc, #228]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	4a38      	ldr	r2, [pc, #224]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800305c:	6413      	str	r3, [r2, #64]	; 0x40
 800305e:	4b36      	ldr	r3, [pc, #216]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003066:	60bb      	str	r3, [r7, #8]
 8003068:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800306a:	4b34      	ldr	r3, [pc, #208]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a33      	ldr	r2, [pc, #204]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003074:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003076:	f7fd faab 	bl	80005d0 <HAL_GetTick>
 800307a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800307c:	e008      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800307e:	f7fd faa7 	bl	80005d0 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d901      	bls.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e278      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003090:	4b2a      	ldr	r3, [pc, #168]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003098:	2b00      	cmp	r3, #0
 800309a:	d0f0      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800309c:	4b26      	ldr	r3, [pc, #152]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800309e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030a4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d02f      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030b4:	6a3a      	ldr	r2, [r7, #32]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d028      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030ba:	4b1f      	ldr	r3, [pc, #124]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030c2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030c4:	4b1e      	ldr	r3, [pc, #120]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80030c6:	2201      	movs	r2, #1
 80030c8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030ca:	4b1d      	ldr	r3, [pc, #116]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80030d0:	4a19      	ldr	r2, [pc, #100]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030d2:	6a3b      	ldr	r3, [r7, #32]
 80030d4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80030d6:	4b18      	ldr	r3, [pc, #96]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d114      	bne.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80030e2:	f7fd fa75 	bl	80005d0 <HAL_GetTick>
 80030e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e8:	e00a      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ea:	f7fd fa71 	bl	80005d0 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d901      	bls.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e240      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003100:	4b0d      	ldr	r3, [pc, #52]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0ee      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003110:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003114:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003118:	d114      	bne.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800311a:	4b07      	ldr	r3, [pc, #28]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800312a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800312e:	4902      	ldr	r1, [pc, #8]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003130:	4313      	orrs	r3, r2
 8003132:	608b      	str	r3, [r1, #8]
 8003134:	e00c      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003136:	bf00      	nop
 8003138:	40023800 	.word	0x40023800
 800313c:	40007000 	.word	0x40007000
 8003140:	42470e40 	.word	0x42470e40
 8003144:	4b4a      	ldr	r3, [pc, #296]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	4a49      	ldr	r2, [pc, #292]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800314a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800314e:	6093      	str	r3, [r2, #8]
 8003150:	4b47      	ldr	r3, [pc, #284]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003152:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800315c:	4944      	ldr	r1, [pc, #272]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800315e:	4313      	orrs	r3, r2
 8003160:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0310 	and.w	r3, r3, #16
 800316a:	2b00      	cmp	r3, #0
 800316c:	d004      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003174:	4b3f      	ldr	r3, [pc, #252]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003176:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00a      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003184:	4b3a      	ldr	r3, [pc, #232]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003186:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800318a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003192:	4937      	ldr	r1, [pc, #220]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003194:	4313      	orrs	r3, r2
 8003196:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00a      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80031a6:	4b32      	ldr	r3, [pc, #200]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80031a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031ac:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031b4:	492e      	ldr	r1, [pc, #184]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d011      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80031c8:	4b29      	ldr	r3, [pc, #164]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80031ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031ce:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d6:	4926      	ldr	r1, [pc, #152]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031e6:	d101      	bne.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80031e8:	2301      	movs	r3, #1
 80031ea:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00a      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80031f8:	4b1d      	ldr	r3, [pc, #116]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80031fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031fe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003206:	491a      	ldr	r1, [pc, #104]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003208:	4313      	orrs	r3, r2
 800320a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003216:	2b00      	cmp	r3, #0
 8003218:	d011      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800321a:	4b15      	ldr	r3, [pc, #84]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800321c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003220:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003228:	4911      	ldr	r1, [pc, #68]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800322a:	4313      	orrs	r3, r2
 800322c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003234:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003238:	d101      	bne.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800323a:	2301      	movs	r3, #1
 800323c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800323e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003240:	2b01      	cmp	r3, #1
 8003242:	d005      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800324c:	f040 80ff 	bne.w	800344e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003250:	4b09      	ldr	r3, [pc, #36]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003252:	2200      	movs	r2, #0
 8003254:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003256:	f7fd f9bb 	bl	80005d0 <HAL_GetTick>
 800325a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800325c:	e00e      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800325e:	f7fd f9b7 	bl	80005d0 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d907      	bls.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e188      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003270:	40023800 	.word	0x40023800
 8003274:	424711e0 	.word	0x424711e0
 8003278:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800327c:	4b7e      	ldr	r3, [pc, #504]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1ea      	bne.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003298:	2b00      	cmp	r3, #0
 800329a:	d009      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d028      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d124      	bne.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80032b0:	4b71      	ldr	r3, [pc, #452]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032b6:	0c1b      	lsrs	r3, r3, #16
 80032b8:	f003 0303 	and.w	r3, r3, #3
 80032bc:	3301      	adds	r3, #1
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80032c2:	4b6d      	ldr	r3, [pc, #436]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032c8:	0e1b      	lsrs	r3, r3, #24
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	019b      	lsls	r3, r3, #6
 80032da:	431a      	orrs	r2, r3
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	085b      	lsrs	r3, r3, #1
 80032e0:	3b01      	subs	r3, #1
 80032e2:	041b      	lsls	r3, r3, #16
 80032e4:	431a      	orrs	r2, r3
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	061b      	lsls	r3, r3, #24
 80032ea:	431a      	orrs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	071b      	lsls	r3, r3, #28
 80032f2:	4961      	ldr	r1, [pc, #388]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0304 	and.w	r3, r3, #4
 8003302:	2b00      	cmp	r3, #0
 8003304:	d004      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800330e:	d00a      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003318:	2b00      	cmp	r3, #0
 800331a:	d035      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003320:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003324:	d130      	bne.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003326:	4b54      	ldr	r3, [pc, #336]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003328:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800332c:	0c1b      	lsrs	r3, r3, #16
 800332e:	f003 0303 	and.w	r3, r3, #3
 8003332:	3301      	adds	r3, #1
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003338:	4b4f      	ldr	r3, [pc, #316]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800333a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800333e:	0f1b      	lsrs	r3, r3, #28
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	019b      	lsls	r3, r3, #6
 8003350:	431a      	orrs	r2, r3
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	085b      	lsrs	r3, r3, #1
 8003356:	3b01      	subs	r3, #1
 8003358:	041b      	lsls	r3, r3, #16
 800335a:	431a      	orrs	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	061b      	lsls	r3, r3, #24
 8003362:	431a      	orrs	r2, r3
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	071b      	lsls	r3, r3, #28
 8003368:	4943      	ldr	r1, [pc, #268]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800336a:	4313      	orrs	r3, r2
 800336c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003370:	4b41      	ldr	r3, [pc, #260]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003372:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003376:	f023 021f 	bic.w	r2, r3, #31
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337e:	3b01      	subs	r3, #1
 8003380:	493d      	ldr	r1, [pc, #244]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003382:	4313      	orrs	r3, r2
 8003384:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003390:	2b00      	cmp	r3, #0
 8003392:	d029      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003398:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800339c:	d124      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800339e:	4b36      	ldr	r3, [pc, #216]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80033a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033a4:	0c1b      	lsrs	r3, r3, #16
 80033a6:	f003 0303 	and.w	r3, r3, #3
 80033aa:	3301      	adds	r3, #1
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80033b0:	4b31      	ldr	r3, [pc, #196]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80033b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033b6:	0f1b      	lsrs	r3, r3, #28
 80033b8:	f003 0307 	and.w	r3, r3, #7
 80033bc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	019b      	lsls	r3, r3, #6
 80033c8:	431a      	orrs	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	085b      	lsrs	r3, r3, #1
 80033d0:	3b01      	subs	r3, #1
 80033d2:	041b      	lsls	r3, r3, #16
 80033d4:	431a      	orrs	r2, r3
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	061b      	lsls	r3, r3, #24
 80033da:	431a      	orrs	r2, r3
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	071b      	lsls	r3, r3, #28
 80033e0:	4925      	ldr	r1, [pc, #148]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d016      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	019b      	lsls	r3, r3, #6
 80033fe:	431a      	orrs	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	085b      	lsrs	r3, r3, #1
 8003406:	3b01      	subs	r3, #1
 8003408:	041b      	lsls	r3, r3, #16
 800340a:	431a      	orrs	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	061b      	lsls	r3, r3, #24
 8003412:	431a      	orrs	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	071b      	lsls	r3, r3, #28
 800341a:	4917      	ldr	r1, [pc, #92]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800341c:	4313      	orrs	r3, r2
 800341e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003422:	4b16      	ldr	r3, [pc, #88]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003424:	2201      	movs	r2, #1
 8003426:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003428:	f7fd f8d2 	bl	80005d0 <HAL_GetTick>
 800342c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800342e:	e008      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003430:	f7fd f8ce 	bl	80005d0 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d901      	bls.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e09f      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003442:	4b0d      	ldr	r3, [pc, #52]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d0f0      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800344e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003450:	2b01      	cmp	r3, #1
 8003452:	f040 8095 	bne.w	8003580 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003456:	4b0a      	ldr	r3, [pc, #40]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800345c:	f7fd f8b8 	bl	80005d0 <HAL_GetTick>
 8003460:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003462:	e00f      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003464:	f7fd f8b4 	bl	80005d0 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d908      	bls.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e085      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003476:	bf00      	nop
 8003478:	40023800 	.word	0x40023800
 800347c:	42470068 	.word	0x42470068
 8003480:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003484:	4b41      	ldr	r3, [pc, #260]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800348c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003490:	d0e8      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0304 	and.w	r3, r3, #4
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d009      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d02b      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d127      	bne.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80034ba:	4b34      	ldr	r3, [pc, #208]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80034bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c0:	0c1b      	lsrs	r3, r3, #16
 80034c2:	f003 0303 	and.w	r3, r3, #3
 80034c6:	3301      	adds	r3, #1
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	699a      	ldr	r2, [r3, #24]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	019b      	lsls	r3, r3, #6
 80034d6:	431a      	orrs	r2, r3
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	085b      	lsrs	r3, r3, #1
 80034dc:	3b01      	subs	r3, #1
 80034de:	041b      	lsls	r3, r3, #16
 80034e0:	431a      	orrs	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e6:	061b      	lsls	r3, r3, #24
 80034e8:	4928      	ldr	r1, [pc, #160]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80034f0:	4b26      	ldr	r3, [pc, #152]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80034f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034f6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fe:	3b01      	subs	r3, #1
 8003500:	021b      	lsls	r3, r3, #8
 8003502:	4922      	ldr	r1, [pc, #136]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003504:	4313      	orrs	r3, r2
 8003506:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003512:	2b00      	cmp	r3, #0
 8003514:	d01d      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800351e:	d118      	bne.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003520:	4b1a      	ldr	r3, [pc, #104]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003526:	0e1b      	lsrs	r3, r3, #24
 8003528:	f003 030f 	and.w	r3, r3, #15
 800352c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	699a      	ldr	r2, [r3, #24]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	019b      	lsls	r3, r3, #6
 8003538:	431a      	orrs	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	085b      	lsrs	r3, r3, #1
 8003540:	3b01      	subs	r3, #1
 8003542:	041b      	lsls	r3, r3, #16
 8003544:	431a      	orrs	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	061b      	lsls	r3, r3, #24
 800354a:	4910      	ldr	r1, [pc, #64]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800354c:	4313      	orrs	r3, r2
 800354e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003552:	4b0f      	ldr	r3, [pc, #60]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003554:	2201      	movs	r2, #1
 8003556:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003558:	f7fd f83a 	bl	80005d0 <HAL_GetTick>
 800355c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800355e:	e008      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003560:	f7fd f836 	bl	80005d0 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d901      	bls.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e007      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003572:	4b06      	ldr	r3, [pc, #24]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800357a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800357e:	d1ef      	bne.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3730      	adds	r7, #48	; 0x30
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	40023800 	.word	0x40023800
 8003590:	42470070 	.word	0x42470070

08003594 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003596:	b087      	sub	sp, #28
 8003598:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800359a:	2300      	movs	r3, #0
 800359c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800359e:	2300      	movs	r3, #0
 80035a0:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80035aa:	2300      	movs	r3, #0
 80035ac:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035ae:	4bc6      	ldr	r3, [pc, #792]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x334>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 030c 	and.w	r3, r3, #12
 80035b6:	2b0c      	cmp	r3, #12
 80035b8:	f200 817e 	bhi.w	80038b8 <HAL_RCC_GetSysClockFreq+0x324>
 80035bc:	a201      	add	r2, pc, #4	; (adr r2, 80035c4 <HAL_RCC_GetSysClockFreq+0x30>)
 80035be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c2:	bf00      	nop
 80035c4:	080035f9 	.word	0x080035f9
 80035c8:	080038b9 	.word	0x080038b9
 80035cc:	080038b9 	.word	0x080038b9
 80035d0:	080038b9 	.word	0x080038b9
 80035d4:	080035ff 	.word	0x080035ff
 80035d8:	080038b9 	.word	0x080038b9
 80035dc:	080038b9 	.word	0x080038b9
 80035e0:	080038b9 	.word	0x080038b9
 80035e4:	08003605 	.word	0x08003605
 80035e8:	080038b9 	.word	0x080038b9
 80035ec:	080038b9 	.word	0x080038b9
 80035f0:	080038b9 	.word	0x080038b9
 80035f4:	08003761 	.word	0x08003761
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035f8:	4bb4      	ldr	r3, [pc, #720]	; (80038cc <HAL_RCC_GetSysClockFreq+0x338>)
 80035fa:	613b      	str	r3, [r7, #16]
       break;
 80035fc:	e15f      	b.n	80038be <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035fe:	4bb3      	ldr	r3, [pc, #716]	; (80038cc <HAL_RCC_GetSysClockFreq+0x338>)
 8003600:	613b      	str	r3, [r7, #16]
      break;
 8003602:	e15c      	b.n	80038be <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003604:	4bb0      	ldr	r3, [pc, #704]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x334>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800360c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800360e:	4bae      	ldr	r3, [pc, #696]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x334>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d04a      	beq.n	80036b0 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800361a:	4bab      	ldr	r3, [pc, #684]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x334>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	099b      	lsrs	r3, r3, #6
 8003620:	f04f 0400 	mov.w	r4, #0
 8003624:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003628:	f04f 0200 	mov.w	r2, #0
 800362c:	ea03 0501 	and.w	r5, r3, r1
 8003630:	ea04 0602 	and.w	r6, r4, r2
 8003634:	4629      	mov	r1, r5
 8003636:	4632      	mov	r2, r6
 8003638:	f04f 0300 	mov.w	r3, #0
 800363c:	f04f 0400 	mov.w	r4, #0
 8003640:	0154      	lsls	r4, r2, #5
 8003642:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003646:	014b      	lsls	r3, r1, #5
 8003648:	4619      	mov	r1, r3
 800364a:	4622      	mov	r2, r4
 800364c:	1b49      	subs	r1, r1, r5
 800364e:	eb62 0206 	sbc.w	r2, r2, r6
 8003652:	f04f 0300 	mov.w	r3, #0
 8003656:	f04f 0400 	mov.w	r4, #0
 800365a:	0194      	lsls	r4, r2, #6
 800365c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003660:	018b      	lsls	r3, r1, #6
 8003662:	1a5b      	subs	r3, r3, r1
 8003664:	eb64 0402 	sbc.w	r4, r4, r2
 8003668:	f04f 0100 	mov.w	r1, #0
 800366c:	f04f 0200 	mov.w	r2, #0
 8003670:	00e2      	lsls	r2, r4, #3
 8003672:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003676:	00d9      	lsls	r1, r3, #3
 8003678:	460b      	mov	r3, r1
 800367a:	4614      	mov	r4, r2
 800367c:	195b      	adds	r3, r3, r5
 800367e:	eb44 0406 	adc.w	r4, r4, r6
 8003682:	f04f 0100 	mov.w	r1, #0
 8003686:	f04f 0200 	mov.w	r2, #0
 800368a:	02a2      	lsls	r2, r4, #10
 800368c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003690:	0299      	lsls	r1, r3, #10
 8003692:	460b      	mov	r3, r1
 8003694:	4614      	mov	r4, r2
 8003696:	4618      	mov	r0, r3
 8003698:	4621      	mov	r1, r4
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f04f 0400 	mov.w	r4, #0
 80036a0:	461a      	mov	r2, r3
 80036a2:	4623      	mov	r3, r4
 80036a4:	f7fc fdae 	bl	8000204 <__aeabi_uldivmod>
 80036a8:	4603      	mov	r3, r0
 80036aa:	460c      	mov	r4, r1
 80036ac:	617b      	str	r3, [r7, #20]
 80036ae:	e049      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036b0:	4b85      	ldr	r3, [pc, #532]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x334>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	099b      	lsrs	r3, r3, #6
 80036b6:	f04f 0400 	mov.w	r4, #0
 80036ba:	f240 11ff 	movw	r1, #511	; 0x1ff
 80036be:	f04f 0200 	mov.w	r2, #0
 80036c2:	ea03 0501 	and.w	r5, r3, r1
 80036c6:	ea04 0602 	and.w	r6, r4, r2
 80036ca:	4629      	mov	r1, r5
 80036cc:	4632      	mov	r2, r6
 80036ce:	f04f 0300 	mov.w	r3, #0
 80036d2:	f04f 0400 	mov.w	r4, #0
 80036d6:	0154      	lsls	r4, r2, #5
 80036d8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80036dc:	014b      	lsls	r3, r1, #5
 80036de:	4619      	mov	r1, r3
 80036e0:	4622      	mov	r2, r4
 80036e2:	1b49      	subs	r1, r1, r5
 80036e4:	eb62 0206 	sbc.w	r2, r2, r6
 80036e8:	f04f 0300 	mov.w	r3, #0
 80036ec:	f04f 0400 	mov.w	r4, #0
 80036f0:	0194      	lsls	r4, r2, #6
 80036f2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80036f6:	018b      	lsls	r3, r1, #6
 80036f8:	1a5b      	subs	r3, r3, r1
 80036fa:	eb64 0402 	sbc.w	r4, r4, r2
 80036fe:	f04f 0100 	mov.w	r1, #0
 8003702:	f04f 0200 	mov.w	r2, #0
 8003706:	00e2      	lsls	r2, r4, #3
 8003708:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800370c:	00d9      	lsls	r1, r3, #3
 800370e:	460b      	mov	r3, r1
 8003710:	4614      	mov	r4, r2
 8003712:	195b      	adds	r3, r3, r5
 8003714:	eb44 0406 	adc.w	r4, r4, r6
 8003718:	f04f 0100 	mov.w	r1, #0
 800371c:	f04f 0200 	mov.w	r2, #0
 8003720:	02a2      	lsls	r2, r4, #10
 8003722:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003726:	0299      	lsls	r1, r3, #10
 8003728:	460b      	mov	r3, r1
 800372a:	4614      	mov	r4, r2
 800372c:	4618      	mov	r0, r3
 800372e:	4621      	mov	r1, r4
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f04f 0400 	mov.w	r4, #0
 8003736:	461a      	mov	r2, r3
 8003738:	4623      	mov	r3, r4
 800373a:	f7fc fd63 	bl	8000204 <__aeabi_uldivmod>
 800373e:	4603      	mov	r3, r0
 8003740:	460c      	mov	r4, r1
 8003742:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003744:	4b60      	ldr	r3, [pc, #384]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x334>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	0c1b      	lsrs	r3, r3, #16
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	3301      	adds	r3, #1
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	fbb2 f3f3 	udiv	r3, r2, r3
 800375c:	613b      	str	r3, [r7, #16]
      break;
 800375e:	e0ae      	b.n	80038be <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003760:	4b59      	ldr	r3, [pc, #356]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x334>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003768:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800376a:	4b57      	ldr	r3, [pc, #348]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x334>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d04a      	beq.n	800380c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003776:	4b54      	ldr	r3, [pc, #336]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x334>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	099b      	lsrs	r3, r3, #6
 800377c:	f04f 0400 	mov.w	r4, #0
 8003780:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003784:	f04f 0200 	mov.w	r2, #0
 8003788:	ea03 0501 	and.w	r5, r3, r1
 800378c:	ea04 0602 	and.w	r6, r4, r2
 8003790:	4629      	mov	r1, r5
 8003792:	4632      	mov	r2, r6
 8003794:	f04f 0300 	mov.w	r3, #0
 8003798:	f04f 0400 	mov.w	r4, #0
 800379c:	0154      	lsls	r4, r2, #5
 800379e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80037a2:	014b      	lsls	r3, r1, #5
 80037a4:	4619      	mov	r1, r3
 80037a6:	4622      	mov	r2, r4
 80037a8:	1b49      	subs	r1, r1, r5
 80037aa:	eb62 0206 	sbc.w	r2, r2, r6
 80037ae:	f04f 0300 	mov.w	r3, #0
 80037b2:	f04f 0400 	mov.w	r4, #0
 80037b6:	0194      	lsls	r4, r2, #6
 80037b8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80037bc:	018b      	lsls	r3, r1, #6
 80037be:	1a5b      	subs	r3, r3, r1
 80037c0:	eb64 0402 	sbc.w	r4, r4, r2
 80037c4:	f04f 0100 	mov.w	r1, #0
 80037c8:	f04f 0200 	mov.w	r2, #0
 80037cc:	00e2      	lsls	r2, r4, #3
 80037ce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80037d2:	00d9      	lsls	r1, r3, #3
 80037d4:	460b      	mov	r3, r1
 80037d6:	4614      	mov	r4, r2
 80037d8:	195b      	adds	r3, r3, r5
 80037da:	eb44 0406 	adc.w	r4, r4, r6
 80037de:	f04f 0100 	mov.w	r1, #0
 80037e2:	f04f 0200 	mov.w	r2, #0
 80037e6:	02a2      	lsls	r2, r4, #10
 80037e8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80037ec:	0299      	lsls	r1, r3, #10
 80037ee:	460b      	mov	r3, r1
 80037f0:	4614      	mov	r4, r2
 80037f2:	4618      	mov	r0, r3
 80037f4:	4621      	mov	r1, r4
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f04f 0400 	mov.w	r4, #0
 80037fc:	461a      	mov	r2, r3
 80037fe:	4623      	mov	r3, r4
 8003800:	f7fc fd00 	bl	8000204 <__aeabi_uldivmod>
 8003804:	4603      	mov	r3, r0
 8003806:	460c      	mov	r4, r1
 8003808:	617b      	str	r3, [r7, #20]
 800380a:	e049      	b.n	80038a0 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800380c:	4b2e      	ldr	r3, [pc, #184]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x334>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	099b      	lsrs	r3, r3, #6
 8003812:	f04f 0400 	mov.w	r4, #0
 8003816:	f240 11ff 	movw	r1, #511	; 0x1ff
 800381a:	f04f 0200 	mov.w	r2, #0
 800381e:	ea03 0501 	and.w	r5, r3, r1
 8003822:	ea04 0602 	and.w	r6, r4, r2
 8003826:	4629      	mov	r1, r5
 8003828:	4632      	mov	r2, r6
 800382a:	f04f 0300 	mov.w	r3, #0
 800382e:	f04f 0400 	mov.w	r4, #0
 8003832:	0154      	lsls	r4, r2, #5
 8003834:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003838:	014b      	lsls	r3, r1, #5
 800383a:	4619      	mov	r1, r3
 800383c:	4622      	mov	r2, r4
 800383e:	1b49      	subs	r1, r1, r5
 8003840:	eb62 0206 	sbc.w	r2, r2, r6
 8003844:	f04f 0300 	mov.w	r3, #0
 8003848:	f04f 0400 	mov.w	r4, #0
 800384c:	0194      	lsls	r4, r2, #6
 800384e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003852:	018b      	lsls	r3, r1, #6
 8003854:	1a5b      	subs	r3, r3, r1
 8003856:	eb64 0402 	sbc.w	r4, r4, r2
 800385a:	f04f 0100 	mov.w	r1, #0
 800385e:	f04f 0200 	mov.w	r2, #0
 8003862:	00e2      	lsls	r2, r4, #3
 8003864:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003868:	00d9      	lsls	r1, r3, #3
 800386a:	460b      	mov	r3, r1
 800386c:	4614      	mov	r4, r2
 800386e:	195b      	adds	r3, r3, r5
 8003870:	eb44 0406 	adc.w	r4, r4, r6
 8003874:	f04f 0100 	mov.w	r1, #0
 8003878:	f04f 0200 	mov.w	r2, #0
 800387c:	02a2      	lsls	r2, r4, #10
 800387e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003882:	0299      	lsls	r1, r3, #10
 8003884:	460b      	mov	r3, r1
 8003886:	4614      	mov	r4, r2
 8003888:	4618      	mov	r0, r3
 800388a:	4621      	mov	r1, r4
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f04f 0400 	mov.w	r4, #0
 8003892:	461a      	mov	r2, r3
 8003894:	4623      	mov	r3, r4
 8003896:	f7fc fcb5 	bl	8000204 <__aeabi_uldivmod>
 800389a:	4603      	mov	r3, r0
 800389c:	460c      	mov	r4, r1
 800389e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80038a0:	4b09      	ldr	r3, [pc, #36]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x334>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	0f1b      	lsrs	r3, r3, #28
 80038a6:	f003 0307 	and.w	r3, r3, #7
 80038aa:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b4:	613b      	str	r3, [r7, #16]
      break;
 80038b6:	e002      	b.n	80038be <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038b8:	4b04      	ldr	r3, [pc, #16]	; (80038cc <HAL_RCC_GetSysClockFreq+0x338>)
 80038ba:	613b      	str	r3, [r7, #16]
      break;
 80038bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038be:	693b      	ldr	r3, [r7, #16]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	371c      	adds	r7, #28
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038c8:	40023800 	.word	0x40023800
 80038cc:	00f42400 	.word	0x00f42400

080038d0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 8083 	beq.w	80039f0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80038ea:	4b95      	ldr	r3, [pc, #596]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 030c 	and.w	r3, r3, #12
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d019      	beq.n	800392a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80038f6:	4b92      	ldr	r3, [pc, #584]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80038fe:	2b08      	cmp	r3, #8
 8003900:	d106      	bne.n	8003910 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003902:	4b8f      	ldr	r3, [pc, #572]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800390a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800390e:	d00c      	beq.n	800392a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003910:	4b8b      	ldr	r3, [pc, #556]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003918:	2b0c      	cmp	r3, #12
 800391a:	d112      	bne.n	8003942 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800391c:	4b88      	ldr	r3, [pc, #544]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003924:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003928:	d10b      	bne.n	8003942 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800392a:	4b85      	ldr	r3, [pc, #532]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d05b      	beq.n	80039ee <HAL_RCC_OscConfig+0x11e>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d157      	bne.n	80039ee <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e216      	b.n	8003d70 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800394a:	d106      	bne.n	800395a <HAL_RCC_OscConfig+0x8a>
 800394c:	4b7c      	ldr	r3, [pc, #496]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a7b      	ldr	r2, [pc, #492]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 8003952:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003956:	6013      	str	r3, [r2, #0]
 8003958:	e01d      	b.n	8003996 <HAL_RCC_OscConfig+0xc6>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003962:	d10c      	bne.n	800397e <HAL_RCC_OscConfig+0xae>
 8003964:	4b76      	ldr	r3, [pc, #472]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a75      	ldr	r2, [pc, #468]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 800396a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800396e:	6013      	str	r3, [r2, #0]
 8003970:	4b73      	ldr	r3, [pc, #460]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a72      	ldr	r2, [pc, #456]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 8003976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800397a:	6013      	str	r3, [r2, #0]
 800397c:	e00b      	b.n	8003996 <HAL_RCC_OscConfig+0xc6>
 800397e:	4b70      	ldr	r3, [pc, #448]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a6f      	ldr	r2, [pc, #444]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 8003984:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003988:	6013      	str	r3, [r2, #0]
 800398a:	4b6d      	ldr	r3, [pc, #436]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a6c      	ldr	r2, [pc, #432]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 8003990:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003994:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d013      	beq.n	80039c6 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399e:	f7fc fe17 	bl	80005d0 <HAL_GetTick>
 80039a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039a4:	e008      	b.n	80039b8 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039a6:	f7fc fe13 	bl	80005d0 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b64      	cmp	r3, #100	; 0x64
 80039b2:	d901      	bls.n	80039b8 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e1db      	b.n	8003d70 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b8:	4b61      	ldr	r3, [pc, #388]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d0f0      	beq.n	80039a6 <HAL_RCC_OscConfig+0xd6>
 80039c4:	e014      	b.n	80039f0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c6:	f7fc fe03 	bl	80005d0 <HAL_GetTick>
 80039ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039cc:	e008      	b.n	80039e0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039ce:	f7fc fdff 	bl	80005d0 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b64      	cmp	r3, #100	; 0x64
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e1c7      	b.n	8003d70 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039e0:	4b57      	ldr	r3, [pc, #348]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1f0      	bne.n	80039ce <HAL_RCC_OscConfig+0xfe>
 80039ec:	e000      	b.n	80039f0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ee:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d06f      	beq.n	8003adc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80039fc:	4b50      	ldr	r3, [pc, #320]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f003 030c 	and.w	r3, r3, #12
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d017      	beq.n	8003a38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a08:	4b4d      	ldr	r3, [pc, #308]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a10:	2b08      	cmp	r3, #8
 8003a12:	d105      	bne.n	8003a20 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a14:	4b4a      	ldr	r3, [pc, #296]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00b      	beq.n	8003a38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a20:	4b47      	ldr	r3, [pc, #284]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a28:	2b0c      	cmp	r3, #12
 8003a2a:	d11c      	bne.n	8003a66 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a2c:	4b44      	ldr	r3, [pc, #272]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d116      	bne.n	8003a66 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a38:	4b41      	ldr	r3, [pc, #260]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d005      	beq.n	8003a50 <HAL_RCC_OscConfig+0x180>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d001      	beq.n	8003a50 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e18f      	b.n	8003d70 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a50:	4b3b      	ldr	r3, [pc, #236]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	4938      	ldr	r1, [pc, #224]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a64:	e03a      	b.n	8003adc <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d020      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a6e:	4b35      	ldr	r3, [pc, #212]	; (8003b44 <HAL_RCC_OscConfig+0x274>)
 8003a70:	2201      	movs	r2, #1
 8003a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a74:	f7fc fdac 	bl	80005d0 <HAL_GetTick>
 8003a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a7a:	e008      	b.n	8003a8e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a7c:	f7fc fda8 	bl	80005d0 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e170      	b.n	8003d70 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a8e:	4b2c      	ldr	r3, [pc, #176]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0f0      	beq.n	8003a7c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a9a:	4b29      	ldr	r3, [pc, #164]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	4925      	ldr	r1, [pc, #148]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	600b      	str	r3, [r1, #0]
 8003aae:	e015      	b.n	8003adc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ab0:	4b24      	ldr	r3, [pc, #144]	; (8003b44 <HAL_RCC_OscConfig+0x274>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab6:	f7fc fd8b 	bl	80005d0 <HAL_GetTick>
 8003aba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003abc:	e008      	b.n	8003ad0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003abe:	f7fc fd87 	bl	80005d0 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e14f      	b.n	8003d70 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ad0:	4b1b      	ldr	r3, [pc, #108]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1f0      	bne.n	8003abe <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0308 	and.w	r3, r3, #8
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d037      	beq.n	8003b58 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d016      	beq.n	8003b1e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003af0:	4b15      	ldr	r3, [pc, #84]	; (8003b48 <HAL_RCC_OscConfig+0x278>)
 8003af2:	2201      	movs	r2, #1
 8003af4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af6:	f7fc fd6b 	bl	80005d0 <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003afe:	f7fc fd67 	bl	80005d0 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e12f      	b.n	8003d70 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b10:	4b0b      	ldr	r3, [pc, #44]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 8003b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0f0      	beq.n	8003afe <HAL_RCC_OscConfig+0x22e>
 8003b1c:	e01c      	b.n	8003b58 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b1e:	4b0a      	ldr	r3, [pc, #40]	; (8003b48 <HAL_RCC_OscConfig+0x278>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b24:	f7fc fd54 	bl	80005d0 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b2a:	e00f      	b.n	8003b4c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b2c:	f7fc fd50 	bl	80005d0 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d908      	bls.n	8003b4c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e118      	b.n	8003d70 <HAL_RCC_OscConfig+0x4a0>
 8003b3e:	bf00      	nop
 8003b40:	40023800 	.word	0x40023800
 8003b44:	42470000 	.word	0x42470000
 8003b48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b4c:	4b8a      	ldr	r3, [pc, #552]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003b4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1e9      	bne.n	8003b2c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 8097 	beq.w	8003c94 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b66:	2300      	movs	r3, #0
 8003b68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b6a:	4b83      	ldr	r3, [pc, #524]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10f      	bne.n	8003b96 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b76:	2300      	movs	r3, #0
 8003b78:	60fb      	str	r3, [r7, #12]
 8003b7a:	4b7f      	ldr	r3, [pc, #508]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	4a7e      	ldr	r2, [pc, #504]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b84:	6413      	str	r3, [r2, #64]	; 0x40
 8003b86:	4b7c      	ldr	r3, [pc, #496]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003b92:	2301      	movs	r3, #1
 8003b94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b96:	4b79      	ldr	r3, [pc, #484]	; (8003d7c <HAL_RCC_OscConfig+0x4ac>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d118      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ba2:	4b76      	ldr	r3, [pc, #472]	; (8003d7c <HAL_RCC_OscConfig+0x4ac>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a75      	ldr	r2, [pc, #468]	; (8003d7c <HAL_RCC_OscConfig+0x4ac>)
 8003ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bae:	f7fc fd0f 	bl	80005d0 <HAL_GetTick>
 8003bb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb4:	e008      	b.n	8003bc8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bb6:	f7fc fd0b 	bl	80005d0 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e0d3      	b.n	8003d70 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc8:	4b6c      	ldr	r3, [pc, #432]	; (8003d7c <HAL_RCC_OscConfig+0x4ac>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d0f0      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d106      	bne.n	8003bea <HAL_RCC_OscConfig+0x31a>
 8003bdc:	4b66      	ldr	r3, [pc, #408]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be0:	4a65      	ldr	r2, [pc, #404]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003be2:	f043 0301 	orr.w	r3, r3, #1
 8003be6:	6713      	str	r3, [r2, #112]	; 0x70
 8003be8:	e01c      	b.n	8003c24 <HAL_RCC_OscConfig+0x354>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	2b05      	cmp	r3, #5
 8003bf0:	d10c      	bne.n	8003c0c <HAL_RCC_OscConfig+0x33c>
 8003bf2:	4b61      	ldr	r3, [pc, #388]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf6:	4a60      	ldr	r2, [pc, #384]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003bf8:	f043 0304 	orr.w	r3, r3, #4
 8003bfc:	6713      	str	r3, [r2, #112]	; 0x70
 8003bfe:	4b5e      	ldr	r3, [pc, #376]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c02:	4a5d      	ldr	r2, [pc, #372]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003c04:	f043 0301 	orr.w	r3, r3, #1
 8003c08:	6713      	str	r3, [r2, #112]	; 0x70
 8003c0a:	e00b      	b.n	8003c24 <HAL_RCC_OscConfig+0x354>
 8003c0c:	4b5a      	ldr	r3, [pc, #360]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c10:	4a59      	ldr	r2, [pc, #356]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003c12:	f023 0301 	bic.w	r3, r3, #1
 8003c16:	6713      	str	r3, [r2, #112]	; 0x70
 8003c18:	4b57      	ldr	r3, [pc, #348]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1c:	4a56      	ldr	r2, [pc, #344]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003c1e:	f023 0304 	bic.w	r3, r3, #4
 8003c22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d015      	beq.n	8003c58 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c2c:	f7fc fcd0 	bl	80005d0 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c32:	e00a      	b.n	8003c4a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c34:	f7fc fccc 	bl	80005d0 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e092      	b.n	8003d70 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c4a:	4b4b      	ldr	r3, [pc, #300]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d0ee      	beq.n	8003c34 <HAL_RCC_OscConfig+0x364>
 8003c56:	e014      	b.n	8003c82 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c58:	f7fc fcba 	bl	80005d0 <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c5e:	e00a      	b.n	8003c76 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c60:	f7fc fcb6 	bl	80005d0 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e07c      	b.n	8003d70 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c76:	4b40      	ldr	r3, [pc, #256]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1ee      	bne.n	8003c60 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c82:	7dfb      	ldrb	r3, [r7, #23]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d105      	bne.n	8003c94 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c88:	4b3b      	ldr	r3, [pc, #236]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8c:	4a3a      	ldr	r2, [pc, #232]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003c8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d068      	beq.n	8003d6e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c9c:	4b36      	ldr	r3, [pc, #216]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f003 030c 	and.w	r3, r3, #12
 8003ca4:	2b08      	cmp	r3, #8
 8003ca6:	d060      	beq.n	8003d6a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d145      	bne.n	8003d3c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cb0:	4b33      	ldr	r3, [pc, #204]	; (8003d80 <HAL_RCC_OscConfig+0x4b0>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb6:	f7fc fc8b 	bl	80005d0 <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cbe:	f7fc fc87 	bl	80005d0 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e04f      	b.n	8003d70 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cd0:	4b29      	ldr	r3, [pc, #164]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1f0      	bne.n	8003cbe <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	69da      	ldr	r2, [r3, #28]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	019b      	lsls	r3, r3, #6
 8003cec:	431a      	orrs	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf2:	085b      	lsrs	r3, r3, #1
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	041b      	lsls	r3, r3, #16
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfe:	061b      	lsls	r3, r3, #24
 8003d00:	431a      	orrs	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d06:	071b      	lsls	r3, r3, #28
 8003d08:	491b      	ldr	r1, [pc, #108]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d0e:	4b1c      	ldr	r3, [pc, #112]	; (8003d80 <HAL_RCC_OscConfig+0x4b0>)
 8003d10:	2201      	movs	r2, #1
 8003d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d14:	f7fc fc5c 	bl	80005d0 <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d1c:	f7fc fc58 	bl	80005d0 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e020      	b.n	8003d70 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d2e:	4b12      	ldr	r3, [pc, #72]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0f0      	beq.n	8003d1c <HAL_RCC_OscConfig+0x44c>
 8003d3a:	e018      	b.n	8003d6e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d3c:	4b10      	ldr	r3, [pc, #64]	; (8003d80 <HAL_RCC_OscConfig+0x4b0>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d42:	f7fc fc45 	bl	80005d0 <HAL_GetTick>
 8003d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d48:	e008      	b.n	8003d5c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d4a:	f7fc fc41 	bl	80005d0 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d901      	bls.n	8003d5c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e009      	b.n	8003d70 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d5c:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1f0      	bne.n	8003d4a <HAL_RCC_OscConfig+0x47a>
 8003d68:	e001      	b.n	8003d6e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e000      	b.n	8003d70 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3718      	adds	r7, #24
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	40023800 	.word	0x40023800
 8003d7c:	40007000 	.word	0x40007000
 8003d80:	42470060 	.word	0x42470060

08003d84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e01d      	b.n	8003dd2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d106      	bne.n	8003db0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f004 fa56 	bl	800825c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2202      	movs	r2, #2
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	4610      	mov	r0, r2
 8003dc4:	f000 f95e 	bl	8004084 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b085      	sub	sp, #20
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68da      	ldr	r2, [r3, #12]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f042 0201 	orr.w	r2, r2, #1
 8003df0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f003 0307 	and.w	r3, r3, #7
 8003dfc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2b06      	cmp	r3, #6
 8003e02:	d007      	beq.n	8003e14 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f042 0201 	orr.w	r2, r2, #1
 8003e12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3714      	adds	r7, #20
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr

08003e22 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b082      	sub	sp, #8
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d122      	bne.n	8003e7e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d11b      	bne.n	8003e7e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f06f 0202 	mvn.w	r2, #2
 8003e4e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	f003 0303 	and.w	r3, r3, #3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d003      	beq.n	8003e6c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 f8ee 	bl	8004046 <HAL_TIM_IC_CaptureCallback>
 8003e6a:	e005      	b.n	8003e78 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 f8e0 	bl	8004032 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 f8f1 	bl	800405a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	f003 0304 	and.w	r3, r3, #4
 8003e88:	2b04      	cmp	r3, #4
 8003e8a:	d122      	bne.n	8003ed2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	f003 0304 	and.w	r3, r3, #4
 8003e96:	2b04      	cmp	r3, #4
 8003e98:	d11b      	bne.n	8003ed2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f06f 0204 	mvn.w	r2, #4
 8003ea2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d003      	beq.n	8003ec0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 f8c4 	bl	8004046 <HAL_TIM_IC_CaptureCallback>
 8003ebe:	e005      	b.n	8003ecc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f8b6 	bl	8004032 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f8c7 	bl	800405a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	f003 0308 	and.w	r3, r3, #8
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	d122      	bne.n	8003f26 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	f003 0308 	and.w	r3, r3, #8
 8003eea:	2b08      	cmp	r3, #8
 8003eec:	d11b      	bne.n	8003f26 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f06f 0208 	mvn.w	r2, #8
 8003ef6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2204      	movs	r2, #4
 8003efc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	69db      	ldr	r3, [r3, #28]
 8003f04:	f003 0303 	and.w	r3, r3, #3
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d003      	beq.n	8003f14 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f89a 	bl	8004046 <HAL_TIM_IC_CaptureCallback>
 8003f12:	e005      	b.n	8003f20 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 f88c 	bl	8004032 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f89d 	bl	800405a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	f003 0310 	and.w	r3, r3, #16
 8003f30:	2b10      	cmp	r3, #16
 8003f32:	d122      	bne.n	8003f7a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	f003 0310 	and.w	r3, r3, #16
 8003f3e:	2b10      	cmp	r3, #16
 8003f40:	d11b      	bne.n	8003f7a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f06f 0210 	mvn.w	r2, #16
 8003f4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2208      	movs	r2, #8
 8003f50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	69db      	ldr	r3, [r3, #28]
 8003f58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d003      	beq.n	8003f68 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 f870 	bl	8004046 <HAL_TIM_IC_CaptureCallback>
 8003f66:	e005      	b.n	8003f74 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 f862 	bl	8004032 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f873 	bl	800405a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	f003 0301 	and.w	r3, r3, #1
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d10e      	bne.n	8003fa6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d107      	bne.n	8003fa6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f06f 0201 	mvn.w	r2, #1
 8003f9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f005 fa4f 	bl	8009444 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb0:	2b80      	cmp	r3, #128	; 0x80
 8003fb2:	d10e      	bne.n	8003fd2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fbe:	2b80      	cmp	r3, #128	; 0x80
 8003fc0:	d107      	bne.n	8003fd2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 f948 	bl	8004262 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fdc:	2b40      	cmp	r3, #64	; 0x40
 8003fde:	d10e      	bne.n	8003ffe <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fea:	2b40      	cmp	r3, #64	; 0x40
 8003fec:	d107      	bne.n	8003ffe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 f838 	bl	800406e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	f003 0320 	and.w	r3, r3, #32
 8004008:	2b20      	cmp	r3, #32
 800400a:	d10e      	bne.n	800402a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	f003 0320 	and.w	r3, r3, #32
 8004016:	2b20      	cmp	r3, #32
 8004018:	d107      	bne.n	800402a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f06f 0220 	mvn.w	r2, #32
 8004022:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f912 	bl	800424e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800402a:	bf00      	nop
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004032:	b480      	push	{r7}
 8004034:	b083      	sub	sp, #12
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800403a:	bf00      	nop
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004046:	b480      	push	{r7}
 8004048:	b083      	sub	sp, #12
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800405a:	b480      	push	{r7}
 800405c:	b083      	sub	sp, #12
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004062:	bf00      	nop
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800406e:	b480      	push	{r7}
 8004070:	b083      	sub	sp, #12
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004076:	bf00      	nop
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
	...

08004084 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a40      	ldr	r2, [pc, #256]	; (8004198 <TIM_Base_SetConfig+0x114>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d013      	beq.n	80040c4 <TIM_Base_SetConfig+0x40>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040a2:	d00f      	beq.n	80040c4 <TIM_Base_SetConfig+0x40>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a3d      	ldr	r2, [pc, #244]	; (800419c <TIM_Base_SetConfig+0x118>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d00b      	beq.n	80040c4 <TIM_Base_SetConfig+0x40>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a3c      	ldr	r2, [pc, #240]	; (80041a0 <TIM_Base_SetConfig+0x11c>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d007      	beq.n	80040c4 <TIM_Base_SetConfig+0x40>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a3b      	ldr	r2, [pc, #236]	; (80041a4 <TIM_Base_SetConfig+0x120>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d003      	beq.n	80040c4 <TIM_Base_SetConfig+0x40>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a3a      	ldr	r2, [pc, #232]	; (80041a8 <TIM_Base_SetConfig+0x124>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d108      	bne.n	80040d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a2f      	ldr	r2, [pc, #188]	; (8004198 <TIM_Base_SetConfig+0x114>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d02b      	beq.n	8004136 <TIM_Base_SetConfig+0xb2>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040e4:	d027      	beq.n	8004136 <TIM_Base_SetConfig+0xb2>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a2c      	ldr	r2, [pc, #176]	; (800419c <TIM_Base_SetConfig+0x118>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d023      	beq.n	8004136 <TIM_Base_SetConfig+0xb2>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a2b      	ldr	r2, [pc, #172]	; (80041a0 <TIM_Base_SetConfig+0x11c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d01f      	beq.n	8004136 <TIM_Base_SetConfig+0xb2>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a2a      	ldr	r2, [pc, #168]	; (80041a4 <TIM_Base_SetConfig+0x120>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d01b      	beq.n	8004136 <TIM_Base_SetConfig+0xb2>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a29      	ldr	r2, [pc, #164]	; (80041a8 <TIM_Base_SetConfig+0x124>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d017      	beq.n	8004136 <TIM_Base_SetConfig+0xb2>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a28      	ldr	r2, [pc, #160]	; (80041ac <TIM_Base_SetConfig+0x128>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d013      	beq.n	8004136 <TIM_Base_SetConfig+0xb2>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a27      	ldr	r2, [pc, #156]	; (80041b0 <TIM_Base_SetConfig+0x12c>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d00f      	beq.n	8004136 <TIM_Base_SetConfig+0xb2>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a26      	ldr	r2, [pc, #152]	; (80041b4 <TIM_Base_SetConfig+0x130>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d00b      	beq.n	8004136 <TIM_Base_SetConfig+0xb2>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a25      	ldr	r2, [pc, #148]	; (80041b8 <TIM_Base_SetConfig+0x134>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d007      	beq.n	8004136 <TIM_Base_SetConfig+0xb2>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a24      	ldr	r2, [pc, #144]	; (80041bc <TIM_Base_SetConfig+0x138>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d003      	beq.n	8004136 <TIM_Base_SetConfig+0xb2>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a23      	ldr	r2, [pc, #140]	; (80041c0 <TIM_Base_SetConfig+0x13c>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d108      	bne.n	8004148 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800413c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	4313      	orrs	r3, r2
 8004146:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	4313      	orrs	r3, r2
 8004154:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	689a      	ldr	r2, [r3, #8]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a0a      	ldr	r2, [pc, #40]	; (8004198 <TIM_Base_SetConfig+0x114>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d003      	beq.n	800417c <TIM_Base_SetConfig+0xf8>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a0c      	ldr	r2, [pc, #48]	; (80041a8 <TIM_Base_SetConfig+0x124>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d103      	bne.n	8004184 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	691a      	ldr	r2, [r3, #16]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	615a      	str	r2, [r3, #20]
}
 800418a:	bf00      	nop
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	40010000 	.word	0x40010000
 800419c:	40000400 	.word	0x40000400
 80041a0:	40000800 	.word	0x40000800
 80041a4:	40000c00 	.word	0x40000c00
 80041a8:	40010400 	.word	0x40010400
 80041ac:	40014000 	.word	0x40014000
 80041b0:	40014400 	.word	0x40014400
 80041b4:	40014800 	.word	0x40014800
 80041b8:	40001800 	.word	0x40001800
 80041bc:	40001c00 	.word	0x40001c00
 80041c0:	40002000 	.word	0x40002000

080041c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d101      	bne.n	80041dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041d8:	2302      	movs	r3, #2
 80041da:	e032      	b.n	8004242 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2202      	movs	r2, #2
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004202:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	4313      	orrs	r3, r2
 800420c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004214:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	4313      	orrs	r3, r2
 800421e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3714      	adds	r7, #20
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800424e:	b480      	push	{r7}
 8004250:	b083      	sub	sp, #12
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004256:	bf00      	nop
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004262:	b480      	push	{r7}
 8004264:	b083      	sub	sp, #12
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800426a:	bf00      	nop
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b082      	sub	sp, #8
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d101      	bne.n	8004288 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e03f      	b.n	8004308 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	d106      	bne.n	80042a2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f004 f8f5 	bl	800848c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2224      	movs	r2, #36	; 0x24
 80042a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68da      	ldr	r2, [r3, #12]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042b8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 fb7c 	bl	80049b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	691a      	ldr	r2, [r3, #16]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042ce:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	695a      	ldr	r2, [r3, #20]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042de:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68da      	ldr	r2, [r3, #12]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042ee:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2220      	movs	r2, #32
 80042fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2220      	movs	r2, #32
 8004302:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3708      	adds	r7, #8
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <HAL_UART_Receive_DMA>:
  * @param  Size Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	4613      	mov	r3, r2
 800431c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b20      	cmp	r3, #32
 8004328:	d166      	bne.n	80043f8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d002      	beq.n	8004336 <HAL_UART_Receive_DMA+0x26>
 8004330:	88fb      	ldrh	r3, [r7, #6]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e05f      	b.n	80043fa <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004340:	2b01      	cmp	r3, #1
 8004342:	d101      	bne.n	8004348 <HAL_UART_Receive_DMA+0x38>
 8004344:	2302      	movs	r3, #2
 8004346:	e058      	b.n	80043fa <HAL_UART_Receive_DMA+0xea>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	88fa      	ldrh	r2, [r7, #6]
 800435a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2222      	movs	r2, #34	; 0x22
 8004366:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436e:	4a25      	ldr	r2, [pc, #148]	; (8004404 <HAL_UART_Receive_DMA+0xf4>)
 8004370:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004376:	4a24      	ldr	r2, [pc, #144]	; (8004408 <HAL_UART_Receive_DMA+0xf8>)
 8004378:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800437e:	4a23      	ldr	r2, [pc, #140]	; (800440c <HAL_UART_Receive_DMA+0xfc>)
 8004380:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004386:	2200      	movs	r2, #0
 8004388:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800438a:	f107 0308 	add.w	r3, r7, #8
 800438e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	3304      	adds	r3, #4
 800439a:	4619      	mov	r1, r3
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	88fb      	ldrh	r3, [r7, #6]
 80043a2:	f7fc fe31 	bl	8001008 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80043a6:	2300      	movs	r3, #0
 80043a8:	613b      	str	r3, [r7, #16]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	613b      	str	r3, [r7, #16]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	613b      	str	r3, [r7, #16]
 80043ba:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68da      	ldr	r2, [r3, #12]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043d2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	695a      	ldr	r2, [r3, #20]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0201 	orr.w	r2, r2, #1
 80043e2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	695a      	ldr	r2, [r3, #20]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043f2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80043f4:	2300      	movs	r3, #0
 80043f6:	e000      	b.n	80043fa <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80043f8:	2302      	movs	r3, #2
  }
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3718      	adds	r7, #24
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	08004631 	.word	0x08004631
 8004408:	08004699 	.word	0x08004699
 800440c:	080046b5 	.word	0x080046b5

08004410 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b088      	sub	sp, #32
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004430:	2300      	movs	r3, #0
 8004432:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004434:	2300      	movs	r3, #0
 8004436:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	f003 030f 	and.w	r3, r3, #15
 800443e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10d      	bne.n	8004462 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	f003 0320 	and.w	r3, r3, #32
 800444c:	2b00      	cmp	r3, #0
 800444e:	d008      	beq.n	8004462 <HAL_UART_IRQHandler+0x52>
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	f003 0320 	and.w	r3, r3, #32
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 fa2a 	bl	80048b4 <UART_Receive_IT>
      return;
 8004460:	e0cc      	b.n	80045fc <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 80ab 	beq.w	80045c0 <HAL_UART_IRQHandler+0x1b0>
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b00      	cmp	r3, #0
 8004472:	d105      	bne.n	8004480 <HAL_UART_IRQHandler+0x70>
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800447a:	2b00      	cmp	r3, #0
 800447c:	f000 80a0 	beq.w	80045c0 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00a      	beq.n	80044a0 <HAL_UART_IRQHandler+0x90>
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004490:	2b00      	cmp	r3, #0
 8004492:	d005      	beq.n	80044a0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004498:	f043 0201 	orr.w	r2, r3, #1
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	f003 0304 	and.w	r3, r3, #4
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00a      	beq.n	80044c0 <HAL_UART_IRQHandler+0xb0>
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d005      	beq.n	80044c0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b8:	f043 0202 	orr.w	r2, r3, #2
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00a      	beq.n	80044e0 <HAL_UART_IRQHandler+0xd0>
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d005      	beq.n	80044e0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d8:	f043 0204 	orr.w	r2, r3, #4
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	f003 0308 	and.w	r3, r3, #8
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00a      	beq.n	8004500 <HAL_UART_IRQHandler+0xf0>
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d005      	beq.n	8004500 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f8:	f043 0208 	orr.w	r2, r3, #8
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004504:	2b00      	cmp	r3, #0
 8004506:	d078      	beq.n	80045fa <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	f003 0320 	and.w	r3, r3, #32
 800450e:	2b00      	cmp	r3, #0
 8004510:	d007      	beq.n	8004522 <HAL_UART_IRQHandler+0x112>
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	f003 0320 	and.w	r3, r3, #32
 8004518:	2b00      	cmp	r3, #0
 800451a:	d002      	beq.n	8004522 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f9c9 	bl	80048b4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452c:	2b40      	cmp	r3, #64	; 0x40
 800452e:	bf0c      	ite	eq
 8004530:	2301      	moveq	r3, #1
 8004532:	2300      	movne	r3, #0
 8004534:	b2db      	uxtb	r3, r3
 8004536:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453c:	f003 0308 	and.w	r3, r3, #8
 8004540:	2b00      	cmp	r3, #0
 8004542:	d102      	bne.n	800454a <HAL_UART_IRQHandler+0x13a>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d031      	beq.n	80045ae <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 f912 	bl	8004774 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455a:	2b40      	cmp	r3, #64	; 0x40
 800455c:	d123      	bne.n	80045a6 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	695a      	ldr	r2, [r3, #20]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800456c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004572:	2b00      	cmp	r3, #0
 8004574:	d013      	beq.n	800459e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800457a:	4a22      	ldr	r2, [pc, #136]	; (8004604 <HAL_UART_IRQHandler+0x1f4>)
 800457c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004582:	4618      	mov	r0, r3
 8004584:	f7fc fda0 	bl	80010c8 <HAL_DMA_Abort_IT>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d016      	beq.n	80045bc <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004598:	4610      	mov	r0, r2
 800459a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800459c:	e00e      	b.n	80045bc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f83c 	bl	800461c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045a4:	e00a      	b.n	80045bc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f838 	bl	800461c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045ac:	e006      	b.n	80045bc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f834 	bl	800461c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80045ba:	e01e      	b.n	80045fa <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045bc:	bf00      	nop
    return;
 80045be:	e01c      	b.n	80045fa <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d008      	beq.n	80045dc <HAL_UART_IRQHandler+0x1cc>
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d003      	beq.n	80045dc <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 f8ff 	bl	80047d8 <UART_Transmit_IT>
    return;
 80045da:	e00f      	b.n	80045fc <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00a      	beq.n	80045fc <HAL_UART_IRQHandler+0x1ec>
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d005      	beq.n	80045fc <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 f947 	bl	8004884 <UART_EndTransmit_IT>
    return;
 80045f6:	bf00      	nop
 80045f8:	e000      	b.n	80045fc <HAL_UART_IRQHandler+0x1ec>
    return;
 80045fa:	bf00      	nop
  }
}
 80045fc:	3720      	adds	r7, #32
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	080047b1 	.word	0x080047b1

08004608 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004648:	2b00      	cmp	r3, #0
 800464a:	d11e      	bne.n	800468a <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004660:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	695a      	ldr	r2, [r3, #20]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 0201 	bic.w	r2, r2, #1
 8004670:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	695a      	ldr	r2, [r3, #20]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004680:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2220      	movs	r2, #32
 8004686:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f004 ff58 	bl	8009540 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004690:	bf00      	nop
 8004692:	3710      	adds	r7, #16
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f7ff ffae 	bl	8004608 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046ac:	bf00      	nop
 80046ae:	3710      	adds	r7, #16
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80046bc:	2300      	movs	r3, #0
 80046be:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	695b      	ldr	r3, [r3, #20]
 80046cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d0:	2b80      	cmp	r3, #128	; 0x80
 80046d2:	bf0c      	ite	eq
 80046d4:	2301      	moveq	r3, #1
 80046d6:	2300      	movne	r3, #0
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b21      	cmp	r3, #33	; 0x21
 80046e6:	d108      	bne.n	80046fa <UART_DMAError+0x46>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d005      	beq.n	80046fa <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	2200      	movs	r2, #0
 80046f2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80046f4:	68b8      	ldr	r0, [r7, #8]
 80046f6:	f000 f827 	bl	8004748 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004704:	2b40      	cmp	r3, #64	; 0x40
 8004706:	bf0c      	ite	eq
 8004708:	2301      	moveq	r3, #1
 800470a:	2300      	movne	r3, #0
 800470c:	b2db      	uxtb	r3, r3
 800470e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b22      	cmp	r3, #34	; 0x22
 800471a:	d108      	bne.n	800472e <UART_DMAError+0x7a>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d005      	beq.n	800472e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	2200      	movs	r2, #0
 8004726:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004728:	68b8      	ldr	r0, [r7, #8]
 800472a:	f000 f823 	bl	8004774 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004732:	f043 0210 	orr.w	r2, r3, #16
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800473a:	68b8      	ldr	r0, [r7, #8]
 800473c:	f7ff ff6e 	bl	800461c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004740:	bf00      	nop
 8004742:	3710      	adds	r7, #16
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68da      	ldr	r2, [r3, #12]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800475e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2220      	movs	r2, #32
 8004764:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68da      	ldr	r2, [r3, #12]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800478a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	695a      	ldr	r2, [r3, #20]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 0201 	bic.w	r2, r2, #1
 800479a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2220      	movs	r2, #32
 80047a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f7ff ff26 	bl	800461c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047d0:	bf00      	nop
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b21      	cmp	r3, #33	; 0x21
 80047ea:	d144      	bne.n	8004876 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f4:	d11a      	bne.n	800482c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	881b      	ldrh	r3, [r3, #0]
 8004800:	461a      	mov	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800480a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d105      	bne.n	8004820 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	1c9a      	adds	r2, r3, #2
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	621a      	str	r2, [r3, #32]
 800481e:	e00e      	b.n	800483e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a1b      	ldr	r3, [r3, #32]
 8004824:	1c5a      	adds	r2, r3, #1
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	621a      	str	r2, [r3, #32]
 800482a:	e008      	b.n	800483e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a1b      	ldr	r3, [r3, #32]
 8004830:	1c59      	adds	r1, r3, #1
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	6211      	str	r1, [r2, #32]
 8004836:	781a      	ldrb	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004842:	b29b      	uxth	r3, r3
 8004844:	3b01      	subs	r3, #1
 8004846:	b29b      	uxth	r3, r3
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	4619      	mov	r1, r3
 800484c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10f      	bne.n	8004872 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68da      	ldr	r2, [r3, #12]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004860:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68da      	ldr	r2, [r3, #12]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004870:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004872:	2300      	movs	r3, #0
 8004874:	e000      	b.n	8004878 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004876:	2302      	movs	r3, #2
  }
}
 8004878:	4618      	mov	r0, r3
 800487a:	3714      	adds	r7, #20
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68da      	ldr	r2, [r3, #12]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800489a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2220      	movs	r2, #32
 80048a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f004 fdf1 	bl	800948c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3708      	adds	r7, #8
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b22      	cmp	r3, #34	; 0x22
 80048c6:	d171      	bne.n	80049ac <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048d0:	d123      	bne.n	800491a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10e      	bne.n	80048fe <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f6:	1c9a      	adds	r2, r3, #2
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	629a      	str	r2, [r3, #40]	; 0x28
 80048fc:	e029      	b.n	8004952 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	b29b      	uxth	r3, r3
 8004906:	b2db      	uxtb	r3, r3
 8004908:	b29a      	uxth	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004912:	1c5a      	adds	r2, r3, #1
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	629a      	str	r2, [r3, #40]	; 0x28
 8004918:	e01b      	b.n	8004952 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10a      	bne.n	8004938 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6858      	ldr	r0, [r3, #4]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492c:	1c59      	adds	r1, r3, #1
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	6291      	str	r1, [r2, #40]	; 0x28
 8004932:	b2c2      	uxtb	r2, r0
 8004934:	701a      	strb	r2, [r3, #0]
 8004936:	e00c      	b.n	8004952 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	b2da      	uxtb	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004944:	1c58      	adds	r0, r3, #1
 8004946:	6879      	ldr	r1, [r7, #4]
 8004948:	6288      	str	r0, [r1, #40]	; 0x28
 800494a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800494e:	b2d2      	uxtb	r2, r2
 8004950:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004956:	b29b      	uxth	r3, r3
 8004958:	3b01      	subs	r3, #1
 800495a:	b29b      	uxth	r3, r3
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	4619      	mov	r1, r3
 8004960:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004962:	2b00      	cmp	r3, #0
 8004964:	d120      	bne.n	80049a8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68da      	ldr	r2, [r3, #12]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f022 0220 	bic.w	r2, r2, #32
 8004974:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68da      	ldr	r2, [r3, #12]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004984:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	695a      	ldr	r2, [r3, #20]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f022 0201 	bic.w	r2, r2, #1
 8004994:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2220      	movs	r2, #32
 800499a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f004 fdce 	bl	8009540 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80049a4:	2300      	movs	r3, #0
 80049a6:	e002      	b.n	80049ae <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80049a8:	2300      	movs	r3, #0
 80049aa:	e000      	b.n	80049ae <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80049ac:	2302      	movs	r3, #2
  }
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
	...

080049b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049b8:	b5b0      	push	{r4, r5, r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	68da      	ldr	r2, [r3, #12]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689a      	ldr	r2, [r3, #8]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	431a      	orrs	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	69db      	ldr	r3, [r3, #28]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80049f8:	f023 030c 	bic.w	r3, r3, #12
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	6812      	ldr	r2, [r2, #0]
 8004a00:	68f9      	ldr	r1, [r7, #12]
 8004a02:	430b      	orrs	r3, r1
 8004a04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	699a      	ldr	r2, [r3, #24]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	69db      	ldr	r3, [r3, #28]
 8004a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a24:	f040 80e4 	bne.w	8004bf0 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4aab      	ldr	r2, [pc, #684]	; (8004cdc <UART_SetConfig+0x324>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d004      	beq.n	8004a3c <UART_SetConfig+0x84>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4aaa      	ldr	r2, [pc, #680]	; (8004ce0 <UART_SetConfig+0x328>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d16c      	bne.n	8004b16 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004a3c:	f7fe fa6c 	bl	8002f18 <HAL_RCC_GetPCLK2Freq>
 8004a40:	4602      	mov	r2, r0
 8004a42:	4613      	mov	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	009a      	lsls	r2, r3, #2
 8004a4a:	441a      	add	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a56:	4aa3      	ldr	r2, [pc, #652]	; (8004ce4 <UART_SetConfig+0x32c>)
 8004a58:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5c:	095b      	lsrs	r3, r3, #5
 8004a5e:	011c      	lsls	r4, r3, #4
 8004a60:	f7fe fa5a 	bl	8002f18 <HAL_RCC_GetPCLK2Freq>
 8004a64:	4602      	mov	r2, r0
 8004a66:	4613      	mov	r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4413      	add	r3, r2
 8004a6c:	009a      	lsls	r2, r3, #2
 8004a6e:	441a      	add	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	005b      	lsls	r3, r3, #1
 8004a76:	fbb2 f5f3 	udiv	r5, r2, r3
 8004a7a:	f7fe fa4d 	bl	8002f18 <HAL_RCC_GetPCLK2Freq>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	4613      	mov	r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	4413      	add	r3, r2
 8004a86:	009a      	lsls	r2, r3, #2
 8004a88:	441a      	add	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	005b      	lsls	r3, r3, #1
 8004a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a94:	4a93      	ldr	r2, [pc, #588]	; (8004ce4 <UART_SetConfig+0x32c>)
 8004a96:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9a:	095b      	lsrs	r3, r3, #5
 8004a9c:	2264      	movs	r2, #100	; 0x64
 8004a9e:	fb02 f303 	mul.w	r3, r2, r3
 8004aa2:	1aeb      	subs	r3, r5, r3
 8004aa4:	00db      	lsls	r3, r3, #3
 8004aa6:	3332      	adds	r3, #50	; 0x32
 8004aa8:	4a8e      	ldr	r2, [pc, #568]	; (8004ce4 <UART_SetConfig+0x32c>)
 8004aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8004aae:	095b      	lsrs	r3, r3, #5
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ab6:	441c      	add	r4, r3
 8004ab8:	f7fe fa2e 	bl	8002f18 <HAL_RCC_GetPCLK2Freq>
 8004abc:	4602      	mov	r2, r0
 8004abe:	4613      	mov	r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	009a      	lsls	r2, r3, #2
 8004ac6:	441a      	add	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	fbb2 f5f3 	udiv	r5, r2, r3
 8004ad2:	f7fe fa21 	bl	8002f18 <HAL_RCC_GetPCLK2Freq>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	4613      	mov	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	009a      	lsls	r2, r3, #2
 8004ae0:	441a      	add	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	005b      	lsls	r3, r3, #1
 8004ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aec:	4a7d      	ldr	r2, [pc, #500]	; (8004ce4 <UART_SetConfig+0x32c>)
 8004aee:	fba2 2303 	umull	r2, r3, r2, r3
 8004af2:	095b      	lsrs	r3, r3, #5
 8004af4:	2264      	movs	r2, #100	; 0x64
 8004af6:	fb02 f303 	mul.w	r3, r2, r3
 8004afa:	1aeb      	subs	r3, r5, r3
 8004afc:	00db      	lsls	r3, r3, #3
 8004afe:	3332      	adds	r3, #50	; 0x32
 8004b00:	4a78      	ldr	r2, [pc, #480]	; (8004ce4 <UART_SetConfig+0x32c>)
 8004b02:	fba2 2303 	umull	r2, r3, r2, r3
 8004b06:	095b      	lsrs	r3, r3, #5
 8004b08:	f003 0207 	and.w	r2, r3, #7
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4422      	add	r2, r4
 8004b12:	609a      	str	r2, [r3, #8]
 8004b14:	e154      	b.n	8004dc0 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004b16:	f7fe f9eb 	bl	8002ef0 <HAL_RCC_GetPCLK1Freq>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	009a      	lsls	r2, r3, #2
 8004b24:	441a      	add	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	005b      	lsls	r3, r3, #1
 8004b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b30:	4a6c      	ldr	r2, [pc, #432]	; (8004ce4 <UART_SetConfig+0x32c>)
 8004b32:	fba2 2303 	umull	r2, r3, r2, r3
 8004b36:	095b      	lsrs	r3, r3, #5
 8004b38:	011c      	lsls	r4, r3, #4
 8004b3a:	f7fe f9d9 	bl	8002ef0 <HAL_RCC_GetPCLK1Freq>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	4613      	mov	r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4413      	add	r3, r2
 8004b46:	009a      	lsls	r2, r3, #2
 8004b48:	441a      	add	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	005b      	lsls	r3, r3, #1
 8004b50:	fbb2 f5f3 	udiv	r5, r2, r3
 8004b54:	f7fe f9cc 	bl	8002ef0 <HAL_RCC_GetPCLK1Freq>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	4413      	add	r3, r2
 8004b60:	009a      	lsls	r2, r3, #2
 8004b62:	441a      	add	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b6e:	4a5d      	ldr	r2, [pc, #372]	; (8004ce4 <UART_SetConfig+0x32c>)
 8004b70:	fba2 2303 	umull	r2, r3, r2, r3
 8004b74:	095b      	lsrs	r3, r3, #5
 8004b76:	2264      	movs	r2, #100	; 0x64
 8004b78:	fb02 f303 	mul.w	r3, r2, r3
 8004b7c:	1aeb      	subs	r3, r5, r3
 8004b7e:	00db      	lsls	r3, r3, #3
 8004b80:	3332      	adds	r3, #50	; 0x32
 8004b82:	4a58      	ldr	r2, [pc, #352]	; (8004ce4 <UART_SetConfig+0x32c>)
 8004b84:	fba2 2303 	umull	r2, r3, r2, r3
 8004b88:	095b      	lsrs	r3, r3, #5
 8004b8a:	005b      	lsls	r3, r3, #1
 8004b8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b90:	441c      	add	r4, r3
 8004b92:	f7fe f9ad 	bl	8002ef0 <HAL_RCC_GetPCLK1Freq>
 8004b96:	4602      	mov	r2, r0
 8004b98:	4613      	mov	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	4413      	add	r3, r2
 8004b9e:	009a      	lsls	r2, r3, #2
 8004ba0:	441a      	add	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	fbb2 f5f3 	udiv	r5, r2, r3
 8004bac:	f7fe f9a0 	bl	8002ef0 <HAL_RCC_GetPCLK1Freq>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	009a      	lsls	r2, r3, #2
 8004bba:	441a      	add	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	005b      	lsls	r3, r3, #1
 8004bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc6:	4a47      	ldr	r2, [pc, #284]	; (8004ce4 <UART_SetConfig+0x32c>)
 8004bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bcc:	095b      	lsrs	r3, r3, #5
 8004bce:	2264      	movs	r2, #100	; 0x64
 8004bd0:	fb02 f303 	mul.w	r3, r2, r3
 8004bd4:	1aeb      	subs	r3, r5, r3
 8004bd6:	00db      	lsls	r3, r3, #3
 8004bd8:	3332      	adds	r3, #50	; 0x32
 8004bda:	4a42      	ldr	r2, [pc, #264]	; (8004ce4 <UART_SetConfig+0x32c>)
 8004bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8004be0:	095b      	lsrs	r3, r3, #5
 8004be2:	f003 0207 	and.w	r2, r3, #7
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4422      	add	r2, r4
 8004bec:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8004bee:	e0e7      	b.n	8004dc0 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a39      	ldr	r2, [pc, #228]	; (8004cdc <UART_SetConfig+0x324>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d004      	beq.n	8004c04 <UART_SetConfig+0x24c>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a38      	ldr	r2, [pc, #224]	; (8004ce0 <UART_SetConfig+0x328>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d171      	bne.n	8004ce8 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004c04:	f7fe f988 	bl	8002f18 <HAL_RCC_GetPCLK2Freq>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4413      	add	r3, r2
 8004c10:	009a      	lsls	r2, r3, #2
 8004c12:	441a      	add	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c1e:	4a31      	ldr	r2, [pc, #196]	; (8004ce4 <UART_SetConfig+0x32c>)
 8004c20:	fba2 2303 	umull	r2, r3, r2, r3
 8004c24:	095b      	lsrs	r3, r3, #5
 8004c26:	011c      	lsls	r4, r3, #4
 8004c28:	f7fe f976 	bl	8002f18 <HAL_RCC_GetPCLK2Freq>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	4613      	mov	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	009a      	lsls	r2, r3, #2
 8004c36:	441a      	add	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	fbb2 f5f3 	udiv	r5, r2, r3
 8004c42:	f7fe f969 	bl	8002f18 <HAL_RCC_GetPCLK2Freq>
 8004c46:	4602      	mov	r2, r0
 8004c48:	4613      	mov	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4413      	add	r3, r2
 8004c4e:	009a      	lsls	r2, r3, #2
 8004c50:	441a      	add	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c5c:	4a21      	ldr	r2, [pc, #132]	; (8004ce4 <UART_SetConfig+0x32c>)
 8004c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c62:	095b      	lsrs	r3, r3, #5
 8004c64:	2264      	movs	r2, #100	; 0x64
 8004c66:	fb02 f303 	mul.w	r3, r2, r3
 8004c6a:	1aeb      	subs	r3, r5, r3
 8004c6c:	011b      	lsls	r3, r3, #4
 8004c6e:	3332      	adds	r3, #50	; 0x32
 8004c70:	4a1c      	ldr	r2, [pc, #112]	; (8004ce4 <UART_SetConfig+0x32c>)
 8004c72:	fba2 2303 	umull	r2, r3, r2, r3
 8004c76:	095b      	lsrs	r3, r3, #5
 8004c78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c7c:	441c      	add	r4, r3
 8004c7e:	f7fe f94b 	bl	8002f18 <HAL_RCC_GetPCLK2Freq>
 8004c82:	4602      	mov	r2, r0
 8004c84:	4613      	mov	r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	009a      	lsls	r2, r3, #2
 8004c8c:	441a      	add	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	fbb2 f5f3 	udiv	r5, r2, r3
 8004c98:	f7fe f93e 	bl	8002f18 <HAL_RCC_GetPCLK2Freq>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	4413      	add	r3, r2
 8004ca4:	009a      	lsls	r2, r3, #2
 8004ca6:	441a      	add	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb2:	4a0c      	ldr	r2, [pc, #48]	; (8004ce4 <UART_SetConfig+0x32c>)
 8004cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb8:	095b      	lsrs	r3, r3, #5
 8004cba:	2264      	movs	r2, #100	; 0x64
 8004cbc:	fb02 f303 	mul.w	r3, r2, r3
 8004cc0:	1aeb      	subs	r3, r5, r3
 8004cc2:	011b      	lsls	r3, r3, #4
 8004cc4:	3332      	adds	r3, #50	; 0x32
 8004cc6:	4a07      	ldr	r2, [pc, #28]	; (8004ce4 <UART_SetConfig+0x32c>)
 8004cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ccc:	095b      	lsrs	r3, r3, #5
 8004cce:	f003 020f 	and.w	r2, r3, #15
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4422      	add	r2, r4
 8004cd8:	609a      	str	r2, [r3, #8]
 8004cda:	e071      	b.n	8004dc0 <UART_SetConfig+0x408>
 8004cdc:	40011000 	.word	0x40011000
 8004ce0:	40011400 	.word	0x40011400
 8004ce4:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004ce8:	f7fe f902 	bl	8002ef0 <HAL_RCC_GetPCLK1Freq>
 8004cec:	4602      	mov	r2, r0
 8004cee:	4613      	mov	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4413      	add	r3, r2
 8004cf4:	009a      	lsls	r2, r3, #2
 8004cf6:	441a      	add	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d02:	4a31      	ldr	r2, [pc, #196]	; (8004dc8 <UART_SetConfig+0x410>)
 8004d04:	fba2 2303 	umull	r2, r3, r2, r3
 8004d08:	095b      	lsrs	r3, r3, #5
 8004d0a:	011c      	lsls	r4, r3, #4
 8004d0c:	f7fe f8f0 	bl	8002ef0 <HAL_RCC_GetPCLK1Freq>
 8004d10:	4602      	mov	r2, r0
 8004d12:	4613      	mov	r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	009a      	lsls	r2, r3, #2
 8004d1a:	441a      	add	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	fbb2 f5f3 	udiv	r5, r2, r3
 8004d26:	f7fe f8e3 	bl	8002ef0 <HAL_RCC_GetPCLK1Freq>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	009a      	lsls	r2, r3, #2
 8004d34:	441a      	add	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d40:	4a21      	ldr	r2, [pc, #132]	; (8004dc8 <UART_SetConfig+0x410>)
 8004d42:	fba2 2303 	umull	r2, r3, r2, r3
 8004d46:	095b      	lsrs	r3, r3, #5
 8004d48:	2264      	movs	r2, #100	; 0x64
 8004d4a:	fb02 f303 	mul.w	r3, r2, r3
 8004d4e:	1aeb      	subs	r3, r5, r3
 8004d50:	011b      	lsls	r3, r3, #4
 8004d52:	3332      	adds	r3, #50	; 0x32
 8004d54:	4a1c      	ldr	r2, [pc, #112]	; (8004dc8 <UART_SetConfig+0x410>)
 8004d56:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5a:	095b      	lsrs	r3, r3, #5
 8004d5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d60:	441c      	add	r4, r3
 8004d62:	f7fe f8c5 	bl	8002ef0 <HAL_RCC_GetPCLK1Freq>
 8004d66:	4602      	mov	r2, r0
 8004d68:	4613      	mov	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4413      	add	r3, r2
 8004d6e:	009a      	lsls	r2, r3, #2
 8004d70:	441a      	add	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	fbb2 f5f3 	udiv	r5, r2, r3
 8004d7c:	f7fe f8b8 	bl	8002ef0 <HAL_RCC_GetPCLK1Freq>
 8004d80:	4602      	mov	r2, r0
 8004d82:	4613      	mov	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4413      	add	r3, r2
 8004d88:	009a      	lsls	r2, r3, #2
 8004d8a:	441a      	add	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d96:	4a0c      	ldr	r2, [pc, #48]	; (8004dc8 <UART_SetConfig+0x410>)
 8004d98:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9c:	095b      	lsrs	r3, r3, #5
 8004d9e:	2264      	movs	r2, #100	; 0x64
 8004da0:	fb02 f303 	mul.w	r3, r2, r3
 8004da4:	1aeb      	subs	r3, r5, r3
 8004da6:	011b      	lsls	r3, r3, #4
 8004da8:	3332      	adds	r3, #50	; 0x32
 8004daa:	4a07      	ldr	r2, [pc, #28]	; (8004dc8 <UART_SetConfig+0x410>)
 8004dac:	fba2 2303 	umull	r2, r3, r2, r3
 8004db0:	095b      	lsrs	r3, r3, #5
 8004db2:	f003 020f 	and.w	r2, r3, #15
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4422      	add	r2, r4
 8004dbc:	609a      	str	r2, [r3, #8]
}
 8004dbe:	e7ff      	b.n	8004dc0 <UART_SetConfig+0x408>
 8004dc0:	bf00      	nop
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bdb0      	pop	{r4, r5, r7, pc}
 8004dc8:	51eb851f 	.word	0x51eb851f

08004dcc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004dcc:	b084      	sub	sp, #16
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b084      	sub	sp, #16
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
 8004dd6:	f107 001c 	add.w	r0, r7, #28
 8004dda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d122      	bne.n	8004e2a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004df8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d105      	bne.n	8004e1e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f001 fa76 	bl	8006310 <USB_CoreReset>
 8004e24:	4603      	mov	r3, r0
 8004e26:	73fb      	strb	r3, [r7, #15]
 8004e28:	e01a      	b.n	8004e60 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f001 fa6a 	bl	8006310 <USB_CoreReset>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d106      	bne.n	8004e54 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	639a      	str	r2, [r3, #56]	; 0x38
 8004e52:	e005      	b.n	8004e60 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d10b      	bne.n	8004e7e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f043 0206 	orr.w	r2, r3, #6
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f043 0220 	orr.w	r2, r3, #32
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e8a:	b004      	add	sp, #16
 8004e8c:	4770      	bx	lr
	...

08004e90 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b087      	sub	sp, #28
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004e9e:	79fb      	ldrb	r3, [r7, #7]
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d165      	bne.n	8004f70 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	4a41      	ldr	r2, [pc, #260]	; (8004fac <USB_SetTurnaroundTime+0x11c>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d906      	bls.n	8004eba <USB_SetTurnaroundTime+0x2a>
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	4a40      	ldr	r2, [pc, #256]	; (8004fb0 <USB_SetTurnaroundTime+0x120>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d802      	bhi.n	8004eba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004eb4:	230f      	movs	r3, #15
 8004eb6:	617b      	str	r3, [r7, #20]
 8004eb8:	e062      	b.n	8004f80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	4a3c      	ldr	r2, [pc, #240]	; (8004fb0 <USB_SetTurnaroundTime+0x120>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d906      	bls.n	8004ed0 <USB_SetTurnaroundTime+0x40>
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	4a3b      	ldr	r2, [pc, #236]	; (8004fb4 <USB_SetTurnaroundTime+0x124>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d802      	bhi.n	8004ed0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004eca:	230e      	movs	r3, #14
 8004ecc:	617b      	str	r3, [r7, #20]
 8004ece:	e057      	b.n	8004f80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	4a38      	ldr	r2, [pc, #224]	; (8004fb4 <USB_SetTurnaroundTime+0x124>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d906      	bls.n	8004ee6 <USB_SetTurnaroundTime+0x56>
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	4a37      	ldr	r2, [pc, #220]	; (8004fb8 <USB_SetTurnaroundTime+0x128>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d802      	bhi.n	8004ee6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004ee0:	230d      	movs	r3, #13
 8004ee2:	617b      	str	r3, [r7, #20]
 8004ee4:	e04c      	b.n	8004f80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	4a33      	ldr	r2, [pc, #204]	; (8004fb8 <USB_SetTurnaroundTime+0x128>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d906      	bls.n	8004efc <USB_SetTurnaroundTime+0x6c>
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	4a32      	ldr	r2, [pc, #200]	; (8004fbc <USB_SetTurnaroundTime+0x12c>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d802      	bhi.n	8004efc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004ef6:	230c      	movs	r3, #12
 8004ef8:	617b      	str	r3, [r7, #20]
 8004efa:	e041      	b.n	8004f80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	4a2f      	ldr	r2, [pc, #188]	; (8004fbc <USB_SetTurnaroundTime+0x12c>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d906      	bls.n	8004f12 <USB_SetTurnaroundTime+0x82>
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	4a2e      	ldr	r2, [pc, #184]	; (8004fc0 <USB_SetTurnaroundTime+0x130>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d802      	bhi.n	8004f12 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004f0c:	230b      	movs	r3, #11
 8004f0e:	617b      	str	r3, [r7, #20]
 8004f10:	e036      	b.n	8004f80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	4a2a      	ldr	r2, [pc, #168]	; (8004fc0 <USB_SetTurnaroundTime+0x130>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d906      	bls.n	8004f28 <USB_SetTurnaroundTime+0x98>
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	4a29      	ldr	r2, [pc, #164]	; (8004fc4 <USB_SetTurnaroundTime+0x134>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d802      	bhi.n	8004f28 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004f22:	230a      	movs	r3, #10
 8004f24:	617b      	str	r3, [r7, #20]
 8004f26:	e02b      	b.n	8004f80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	4a26      	ldr	r2, [pc, #152]	; (8004fc4 <USB_SetTurnaroundTime+0x134>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d906      	bls.n	8004f3e <USB_SetTurnaroundTime+0xae>
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	4a25      	ldr	r2, [pc, #148]	; (8004fc8 <USB_SetTurnaroundTime+0x138>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d802      	bhi.n	8004f3e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004f38:	2309      	movs	r3, #9
 8004f3a:	617b      	str	r3, [r7, #20]
 8004f3c:	e020      	b.n	8004f80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	4a21      	ldr	r2, [pc, #132]	; (8004fc8 <USB_SetTurnaroundTime+0x138>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d906      	bls.n	8004f54 <USB_SetTurnaroundTime+0xc4>
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	4a20      	ldr	r2, [pc, #128]	; (8004fcc <USB_SetTurnaroundTime+0x13c>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d802      	bhi.n	8004f54 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004f4e:	2308      	movs	r3, #8
 8004f50:	617b      	str	r3, [r7, #20]
 8004f52:	e015      	b.n	8004f80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	4a1d      	ldr	r2, [pc, #116]	; (8004fcc <USB_SetTurnaroundTime+0x13c>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d906      	bls.n	8004f6a <USB_SetTurnaroundTime+0xda>
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	4a1c      	ldr	r2, [pc, #112]	; (8004fd0 <USB_SetTurnaroundTime+0x140>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d802      	bhi.n	8004f6a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004f64:	2307      	movs	r3, #7
 8004f66:	617b      	str	r3, [r7, #20]
 8004f68:	e00a      	b.n	8004f80 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004f6a:	2306      	movs	r3, #6
 8004f6c:	617b      	str	r3, [r7, #20]
 8004f6e:	e007      	b.n	8004f80 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004f70:	79fb      	ldrb	r3, [r7, #7]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d102      	bne.n	8004f7c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004f76:	2309      	movs	r3, #9
 8004f78:	617b      	str	r3, [r7, #20]
 8004f7a:	e001      	b.n	8004f80 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004f7c:	2309      	movs	r3, #9
 8004f7e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	68da      	ldr	r2, [r3, #12]
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	029b      	lsls	r3, r3, #10
 8004f94:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	371c      	adds	r7, #28
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr
 8004fac:	00d8acbf 	.word	0x00d8acbf
 8004fb0:	00e4e1bf 	.word	0x00e4e1bf
 8004fb4:	00f423ff 	.word	0x00f423ff
 8004fb8:	0106737f 	.word	0x0106737f
 8004fbc:	011a499f 	.word	0x011a499f
 8004fc0:	01312cff 	.word	0x01312cff
 8004fc4:	014ca43f 	.word	0x014ca43f
 8004fc8:	016e35ff 	.word	0x016e35ff
 8004fcc:	01a6ab1f 	.word	0x01a6ab1f
 8004fd0:	01e847ff 	.word	0x01e847ff

08004fd4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f043 0201 	orr.w	r2, r3, #1
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	370c      	adds	r7, #12
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr

08004ff6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b083      	sub	sp, #12
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f023 0201 	bic.w	r2, r3, #1
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	460b      	mov	r3, r1
 8005022:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005030:	78fb      	ldrb	r3, [r7, #3]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d106      	bne.n	8005044 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	60da      	str	r2, [r3, #12]
 8005042:	e00b      	b.n	800505c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005044:	78fb      	ldrb	r3, [r7, #3]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d106      	bne.n	8005058 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	60da      	str	r2, [r3, #12]
 8005056:	e001      	b.n	800505c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e003      	b.n	8005064 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800505c:	2032      	movs	r0, #50	; 0x32
 800505e:	f7fb fac3 	bl	80005e8 <HAL_Delay>

  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3708      	adds	r7, #8
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800506c:	b084      	sub	sp, #16
 800506e:	b580      	push	{r7, lr}
 8005070:	b086      	sub	sp, #24
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
 8005076:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800507a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800507e:	2300      	movs	r3, #0
 8005080:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005086:	2300      	movs	r3, #0
 8005088:	613b      	str	r3, [r7, #16]
 800508a:	e009      	b.n	80050a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	3340      	adds	r3, #64	; 0x40
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	2200      	movs	r2, #0
 8005098:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	3301      	adds	r3, #1
 800509e:	613b      	str	r3, [r7, #16]
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	2b0e      	cmp	r3, #14
 80050a4:	d9f2      	bls.n	800508c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80050a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d112      	bne.n	80050d2 <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	601a      	str	r2, [r3, #0]
 80050d0:	e005      	b.n	80050de <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80050e4:	461a      	mov	r2, r3
 80050e6:	2300      	movs	r3, #0
 80050e8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050f0:	4619      	mov	r1, r3
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050f8:	461a      	mov	r2, r3
 80050fa:	680b      	ldr	r3, [r1, #0]
 80050fc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005100:	2b01      	cmp	r3, #1
 8005102:	d10c      	bne.n	800511e <USB_DevInit+0xb2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005106:	2b00      	cmp	r3, #0
 8005108:	d104      	bne.n	8005114 <USB_DevInit+0xa8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800510a:	2100      	movs	r1, #0
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 f961 	bl	80053d4 <USB_SetDevSpeed>
 8005112:	e008      	b.n	8005126 <USB_DevInit+0xba>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005114:	2101      	movs	r1, #1
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 f95c 	bl	80053d4 <USB_SetDevSpeed>
 800511c:	e003      	b.n	8005126 <USB_DevInit+0xba>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800511e:	2103      	movs	r1, #3
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 f957 	bl	80053d4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005126:	2110      	movs	r1, #16
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 f90b 	bl	8005344 <USB_FlushTxFifo>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <USB_DevInit+0xcc>
  {
    ret = HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 f929 	bl	8005390 <USB_FlushRxFifo>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d001      	beq.n	8005148 <USB_DevInit+0xdc>
  {
    ret = HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800514e:	461a      	mov	r2, r3
 8005150:	2300      	movs	r3, #0
 8005152:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800515a:	461a      	mov	r2, r3
 800515c:	2300      	movs	r3, #0
 800515e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005166:	461a      	mov	r2, r3
 8005168:	2300      	movs	r3, #0
 800516a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800516c:	2300      	movs	r3, #0
 800516e:	613b      	str	r3, [r7, #16]
 8005170:	e043      	b.n	80051fa <USB_DevInit+0x18e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	4413      	add	r3, r2
 800517a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005184:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005188:	d118      	bne.n	80051bc <USB_DevInit+0x150>
    {
      if (i == 0U)
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10a      	bne.n	80051a6 <USB_DevInit+0x13a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	015a      	lsls	r2, r3, #5
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	4413      	add	r3, r2
 8005198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800519c:	461a      	mov	r2, r3
 800519e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051a2:	6013      	str	r3, [r2, #0]
 80051a4:	e013      	b.n	80051ce <USB_DevInit+0x162>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	015a      	lsls	r2, r3, #5
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b2:	461a      	mov	r2, r3
 80051b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051b8:	6013      	str	r3, [r2, #0]
 80051ba:	e008      	b.n	80051ce <USB_DevInit+0x162>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c8:	461a      	mov	r2, r3
 80051ca:	2300      	movs	r3, #0
 80051cc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	015a      	lsls	r2, r3, #5
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	4413      	add	r3, r2
 80051d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051da:	461a      	mov	r2, r3
 80051dc:	2300      	movs	r3, #0
 80051de:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ec:	461a      	mov	r2, r3
 80051ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	3301      	adds	r3, #1
 80051f8:	613b      	str	r3, [r7, #16]
 80051fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d3b7      	bcc.n	8005172 <USB_DevInit+0x106>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005202:	2300      	movs	r3, #0
 8005204:	613b      	str	r3, [r7, #16]
 8005206:	e043      	b.n	8005290 <USB_DevInit+0x224>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4413      	add	r3, r2
 8005210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800521a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800521e:	d118      	bne.n	8005252 <USB_DevInit+0x1e6>
    {
      if (i == 0U)
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10a      	bne.n	800523c <USB_DevInit+0x1d0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	4413      	add	r3, r2
 800522e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005232:	461a      	mov	r2, r3
 8005234:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005238:	6013      	str	r3, [r2, #0]
 800523a:	e013      	b.n	8005264 <USB_DevInit+0x1f8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	015a      	lsls	r2, r3, #5
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	4413      	add	r3, r2
 8005244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005248:	461a      	mov	r2, r3
 800524a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800524e:	6013      	str	r3, [r2, #0]
 8005250:	e008      	b.n	8005264 <USB_DevInit+0x1f8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	015a      	lsls	r2, r3, #5
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	4413      	add	r3, r2
 800525a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800525e:	461a      	mov	r2, r3
 8005260:	2300      	movs	r3, #0
 8005262:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	4413      	add	r3, r2
 800526c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005270:	461a      	mov	r2, r3
 8005272:	2300      	movs	r3, #0
 8005274:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	015a      	lsls	r2, r3, #5
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	4413      	add	r3, r2
 800527e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005282:	461a      	mov	r2, r3
 8005284:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005288:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	3301      	adds	r3, #1
 800528e:	613b      	str	r3, [r7, #16]
 8005290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	429a      	cmp	r2, r3
 8005296:	d3b7      	bcc.n	8005208 <USB_DevInit+0x19c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052aa:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 80052ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d111      	bne.n	80052d6 <USB_DevInit+0x26a>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052b8:	461a      	mov	r2, r3
 80052ba:	4b20      	ldr	r3, [pc, #128]	; (800533c <USB_DevInit+0x2d0>)
 80052bc:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052d0:	f043 0303 	orr.w	r3, r3, #3
 80052d4:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80052e2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80052e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d105      	bne.n	80052f6 <USB_DevInit+0x28a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	f043 0210 	orr.w	r2, r3, #16
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	699a      	ldr	r2, [r3, #24]
 80052fa:	4b11      	ldr	r3, [pc, #68]	; (8005340 <USB_DevInit+0x2d4>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005304:	2b00      	cmp	r3, #0
 8005306:	d005      	beq.n	8005314 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	f043 0208 	orr.w	r2, r3, #8
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005316:	2b01      	cmp	r3, #1
 8005318:	d107      	bne.n	800532a <USB_DevInit+0x2be>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005322:	f043 0304 	orr.w	r3, r3, #4
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800532a:	7dfb      	ldrb	r3, [r7, #23]
}
 800532c:	4618      	mov	r0, r3
 800532e:	3718      	adds	r7, #24
 8005330:	46bd      	mov	sp, r7
 8005332:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005336:	b004      	add	sp, #16
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	00800100 	.word	0x00800100
 8005340:	803c3800 	.word	0x803c3800

08005344 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800534e:	2300      	movs	r3, #0
 8005350:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	019b      	lsls	r3, r3, #6
 8005356:	f043 0220 	orr.w	r2, r3, #32
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	3301      	adds	r3, #1
 8005362:	60fb      	str	r3, [r7, #12]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	4a09      	ldr	r2, [pc, #36]	; (800538c <USB_FlushTxFifo+0x48>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d901      	bls.n	8005370 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	e006      	b.n	800537e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	f003 0320 	and.w	r3, r3, #32
 8005378:	2b20      	cmp	r3, #32
 800537a:	d0f0      	beq.n	800535e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3714      	adds	r7, #20
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	00030d40 	.word	0x00030d40

08005390 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005398:	2300      	movs	r3, #0
 800539a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2210      	movs	r2, #16
 80053a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	3301      	adds	r3, #1
 80053a6:	60fb      	str	r3, [r7, #12]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	4a09      	ldr	r2, [pc, #36]	; (80053d0 <USB_FlushRxFifo+0x40>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d901      	bls.n	80053b4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e006      	b.n	80053c2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	f003 0310 	and.w	r3, r3, #16
 80053bc:	2b10      	cmp	r3, #16
 80053be:	d0f0      	beq.n	80053a2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3714      	adds	r7, #20
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	00030d40 	.word	0x00030d40

080053d4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	460b      	mov	r3, r1
 80053de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	78fb      	ldrb	r3, [r7, #3]
 80053ee:	68f9      	ldr	r1, [r7, #12]
 80053f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053f4:	4313      	orrs	r3, r2
 80053f6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3714      	adds	r7, #20
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005406:	b480      	push	{r7}
 8005408:	b087      	sub	sp, #28
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f003 0306 	and.w	r3, r3, #6
 800541e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d102      	bne.n	800542c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005426:	2300      	movs	r3, #0
 8005428:	75fb      	strb	r3, [r7, #23]
 800542a:	e00a      	b.n	8005442 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2b02      	cmp	r3, #2
 8005430:	d002      	beq.n	8005438 <USB_GetDevSpeed+0x32>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2b06      	cmp	r3, #6
 8005436:	d102      	bne.n	800543e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005438:	2302      	movs	r3, #2
 800543a:	75fb      	strb	r3, [r7, #23]
 800543c:	e001      	b.n	8005442 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800543e:	230f      	movs	r3, #15
 8005440:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005442:	7dfb      	ldrb	r3, [r7, #23]
}
 8005444:	4618      	mov	r0, r3
 8005446:	371c      	adds	r7, #28
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	785b      	ldrb	r3, [r3, #1]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d13a      	bne.n	80054e2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005472:	69da      	ldr	r2, [r3, #28]
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	f003 030f 	and.w	r3, r3, #15
 800547c:	2101      	movs	r1, #1
 800547e:	fa01 f303 	lsl.w	r3, r1, r3
 8005482:	b29b      	uxth	r3, r3
 8005484:	68f9      	ldr	r1, [r7, #12]
 8005486:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800548a:	4313      	orrs	r3, r2
 800548c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	015a      	lsls	r2, r3, #5
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	4413      	add	r3, r2
 8005496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d155      	bne.n	8005550 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	015a      	lsls	r2, r3, #5
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	78db      	ldrb	r3, [r3, #3]
 80054be:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054c0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	059b      	lsls	r3, r3, #22
 80054c6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054c8:	4313      	orrs	r3, r2
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	0151      	lsls	r1, r2, #5
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	440a      	add	r2, r1
 80054d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054de:	6013      	str	r3, [r2, #0]
 80054e0:	e036      	b.n	8005550 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054e8:	69da      	ldr	r2, [r3, #28]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	f003 030f 	and.w	r3, r3, #15
 80054f2:	2101      	movs	r1, #1
 80054f4:	fa01 f303 	lsl.w	r3, r1, r3
 80054f8:	041b      	lsls	r3, r3, #16
 80054fa:	68f9      	ldr	r1, [r7, #12]
 80054fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005500:	4313      	orrs	r3, r2
 8005502:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4413      	add	r3, r2
 800550c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d11a      	bne.n	8005550 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	015a      	lsls	r2, r3, #5
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	4413      	add	r3, r2
 8005522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	78db      	ldrb	r3, [r3, #3]
 8005534:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005536:	430b      	orrs	r3, r1
 8005538:	4313      	orrs	r3, r2
 800553a:	68ba      	ldr	r2, [r7, #8]
 800553c:	0151      	lsls	r1, r2, #5
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	440a      	add	r2, r1
 8005542:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800554a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800554e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3714      	adds	r7, #20
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
	...

08005560 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	785b      	ldrb	r3, [r3, #1]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d135      	bne.n	80055e8 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005582:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	f003 030f 	and.w	r3, r3, #15
 800558c:	2101      	movs	r1, #1
 800558e:	fa01 f303 	lsl.w	r3, r1, r3
 8005592:	b29b      	uxth	r3, r3
 8005594:	43db      	mvns	r3, r3
 8005596:	68f9      	ldr	r1, [r7, #12]
 8005598:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800559c:	4013      	ands	r3, r2
 800559e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055a6:	69da      	ldr	r2, [r3, #28]
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	f003 030f 	and.w	r3, r3, #15
 80055b0:	2101      	movs	r1, #1
 80055b2:	fa01 f303 	lsl.w	r3, r1, r3
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	43db      	mvns	r3, r3
 80055ba:	68f9      	ldr	r1, [r7, #12]
 80055bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055c0:	4013      	ands	r3, r2
 80055c2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	015a      	lsls	r2, r3, #5
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	0159      	lsls	r1, r3, #5
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	440b      	add	r3, r1
 80055da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055de:	4619      	mov	r1, r3
 80055e0:	4b1f      	ldr	r3, [pc, #124]	; (8005660 <USB_DeactivateEndpoint+0x100>)
 80055e2:	4013      	ands	r3, r2
 80055e4:	600b      	str	r3, [r1, #0]
 80055e6:	e034      	b.n	8005652 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	f003 030f 	and.w	r3, r3, #15
 80055f8:	2101      	movs	r1, #1
 80055fa:	fa01 f303 	lsl.w	r3, r1, r3
 80055fe:	041b      	lsls	r3, r3, #16
 8005600:	43db      	mvns	r3, r3
 8005602:	68f9      	ldr	r1, [r7, #12]
 8005604:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005608:	4013      	ands	r3, r2
 800560a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005612:	69da      	ldr	r2, [r3, #28]
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	f003 030f 	and.w	r3, r3, #15
 800561c:	2101      	movs	r1, #1
 800561e:	fa01 f303 	lsl.w	r3, r1, r3
 8005622:	041b      	lsls	r3, r3, #16
 8005624:	43db      	mvns	r3, r3
 8005626:	68f9      	ldr	r1, [r7, #12]
 8005628:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800562c:	4013      	ands	r3, r2
 800562e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	015a      	lsls	r2, r3, #5
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	4413      	add	r3, r2
 8005638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	0159      	lsls	r1, r3, #5
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	440b      	add	r3, r1
 8005646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800564a:	4619      	mov	r1, r3
 800564c:	4b05      	ldr	r3, [pc, #20]	; (8005664 <USB_DeactivateEndpoint+0x104>)
 800564e:	4013      	ands	r3, r2
 8005650:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3714      	adds	r7, #20
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr
 8005660:	ec337800 	.word	0xec337800
 8005664:	eff37800 	.word	0xeff37800

08005668 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b08a      	sub	sp, #40	; 0x28
 800566c:	af02      	add	r7, sp, #8
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	4613      	mov	r3, r2
 8005674:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	785b      	ldrb	r3, [r3, #1]
 8005684:	2b01      	cmp	r3, #1
 8005686:	f040 815c 	bne.w	8005942 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d132      	bne.n	80056f8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	015a      	lsls	r2, r3, #5
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	4413      	add	r3, r2
 800569a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	69ba      	ldr	r2, [r7, #24]
 80056a2:	0151      	lsls	r1, r2, #5
 80056a4:	69fa      	ldr	r2, [r7, #28]
 80056a6:	440a      	add	r2, r1
 80056a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	015a      	lsls	r2, r3, #5
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	4413      	add	r3, r2
 80056be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	69ba      	ldr	r2, [r7, #24]
 80056c6:	0151      	lsls	r1, r2, #5
 80056c8:	69fa      	ldr	r2, [r7, #28]
 80056ca:	440a      	add	r2, r1
 80056cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	015a      	lsls	r2, r3, #5
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	4413      	add	r3, r2
 80056de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	69ba      	ldr	r2, [r7, #24]
 80056e6:	0151      	lsls	r1, r2, #5
 80056e8:	69fa      	ldr	r2, [r7, #28]
 80056ea:	440a      	add	r2, r1
 80056ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056f0:	0cdb      	lsrs	r3, r3, #19
 80056f2:	04db      	lsls	r3, r3, #19
 80056f4:	6113      	str	r3, [r2, #16]
 80056f6:	e074      	b.n	80057e2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	015a      	lsls	r2, r3, #5
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	4413      	add	r3, r2
 8005700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	69ba      	ldr	r2, [r7, #24]
 8005708:	0151      	lsls	r1, r2, #5
 800570a:	69fa      	ldr	r2, [r7, #28]
 800570c:	440a      	add	r2, r1
 800570e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005712:	0cdb      	lsrs	r3, r3, #19
 8005714:	04db      	lsls	r3, r3, #19
 8005716:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	015a      	lsls	r2, r3, #5
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	4413      	add	r3, r2
 8005720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	69ba      	ldr	r2, [r7, #24]
 8005728:	0151      	lsls	r1, r2, #5
 800572a:	69fa      	ldr	r2, [r7, #28]
 800572c:	440a      	add	r2, r1
 800572e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005732:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005736:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800573a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	015a      	lsls	r2, r3, #5
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	4413      	add	r3, r2
 8005744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005748:	691a      	ldr	r2, [r3, #16]
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	6959      	ldr	r1, [r3, #20]
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	440b      	add	r3, r1
 8005754:	1e59      	subs	r1, r3, #1
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	fbb1 f3f3 	udiv	r3, r1, r3
 800575e:	04d9      	lsls	r1, r3, #19
 8005760:	4b9d      	ldr	r3, [pc, #628]	; (80059d8 <USB_EPStartXfer+0x370>)
 8005762:	400b      	ands	r3, r1
 8005764:	69b9      	ldr	r1, [r7, #24]
 8005766:	0148      	lsls	r0, r1, #5
 8005768:	69f9      	ldr	r1, [r7, #28]
 800576a:	4401      	add	r1, r0
 800576c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005770:	4313      	orrs	r3, r2
 8005772:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	4413      	add	r3, r2
 800577c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005780:	691a      	ldr	r2, [r3, #16]
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800578a:	69b9      	ldr	r1, [r7, #24]
 800578c:	0148      	lsls	r0, r1, #5
 800578e:	69f9      	ldr	r1, [r7, #28]
 8005790:	4401      	add	r1, r0
 8005792:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005796:	4313      	orrs	r3, r2
 8005798:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	78db      	ldrb	r3, [r3, #3]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d11f      	bne.n	80057e2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	015a      	lsls	r2, r3, #5
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	4413      	add	r3, r2
 80057aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	69ba      	ldr	r2, [r7, #24]
 80057b2:	0151      	lsls	r1, r2, #5
 80057b4:	69fa      	ldr	r2, [r7, #28]
 80057b6:	440a      	add	r2, r1
 80057b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057bc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80057c0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	015a      	lsls	r2, r3, #5
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	4413      	add	r3, r2
 80057ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	69ba      	ldr	r2, [r7, #24]
 80057d2:	0151      	lsls	r1, r2, #5
 80057d4:	69fa      	ldr	r2, [r7, #28]
 80057d6:	440a      	add	r2, r1
 80057d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057e0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80057e2:	79fb      	ldrb	r3, [r7, #7]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d14b      	bne.n	8005880 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d009      	beq.n	8005804 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	015a      	lsls	r2, r3, #5
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	4413      	add	r3, r2
 80057f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057fc:	461a      	mov	r2, r3
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	78db      	ldrb	r3, [r3, #3]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d128      	bne.n	800585e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005818:	2b00      	cmp	r3, #0
 800581a:	d110      	bne.n	800583e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	4413      	add	r3, r2
 8005824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	69ba      	ldr	r2, [r7, #24]
 800582c:	0151      	lsls	r1, r2, #5
 800582e:	69fa      	ldr	r2, [r7, #28]
 8005830:	440a      	add	r2, r1
 8005832:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005836:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800583a:	6013      	str	r3, [r2, #0]
 800583c:	e00f      	b.n	800585e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	015a      	lsls	r2, r3, #5
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	4413      	add	r3, r2
 8005846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	69ba      	ldr	r2, [r7, #24]
 800584e:	0151      	lsls	r1, r2, #5
 8005850:	69fa      	ldr	r2, [r7, #28]
 8005852:	440a      	add	r2, r1
 8005854:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800585c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	015a      	lsls	r2, r3, #5
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	4413      	add	r3, r2
 8005866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	69ba      	ldr	r2, [r7, #24]
 800586e:	0151      	lsls	r1, r2, #5
 8005870:	69fa      	ldr	r2, [r7, #28]
 8005872:	440a      	add	r2, r1
 8005874:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005878:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800587c:	6013      	str	r3, [r2, #0]
 800587e:	e12f      	b.n	8005ae0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	015a      	lsls	r2, r3, #5
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	4413      	add	r3, r2
 8005888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	69ba      	ldr	r2, [r7, #24]
 8005890:	0151      	lsls	r1, r2, #5
 8005892:	69fa      	ldr	r2, [r7, #28]
 8005894:	440a      	add	r2, r1
 8005896:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800589a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800589e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	78db      	ldrb	r3, [r3, #3]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d015      	beq.n	80058d4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	695b      	ldr	r3, [r3, #20]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f000 8117 	beq.w	8005ae0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	f003 030f 	and.w	r3, r3, #15
 80058c2:	2101      	movs	r1, #1
 80058c4:	fa01 f303 	lsl.w	r3, r1, r3
 80058c8:	69f9      	ldr	r1, [r7, #28]
 80058ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058ce:	4313      	orrs	r3, r2
 80058d0:	634b      	str	r3, [r1, #52]	; 0x34
 80058d2:	e105      	b.n	8005ae0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d110      	bne.n	8005906 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	015a      	lsls	r2, r3, #5
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	4413      	add	r3, r2
 80058ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	69ba      	ldr	r2, [r7, #24]
 80058f4:	0151      	lsls	r1, r2, #5
 80058f6:	69fa      	ldr	r2, [r7, #28]
 80058f8:	440a      	add	r2, r1
 80058fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005902:	6013      	str	r3, [r2, #0]
 8005904:	e00f      	b.n	8005926 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	015a      	lsls	r2, r3, #5
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	4413      	add	r3, r2
 800590e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	0151      	lsls	r1, r2, #5
 8005918:	69fa      	ldr	r2, [r7, #28]
 800591a:	440a      	add	r2, r1
 800591c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005924:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	68d9      	ldr	r1, [r3, #12]
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	781a      	ldrb	r2, [r3, #0]
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	b298      	uxth	r0, r3
 8005934:	79fb      	ldrb	r3, [r7, #7]
 8005936:	9300      	str	r3, [sp, #0]
 8005938:	4603      	mov	r3, r0
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f000 fa2b 	bl	8005d96 <USB_WritePacket>
 8005940:	e0ce      	b.n	8005ae0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	015a      	lsls	r2, r3, #5
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	4413      	add	r3, r2
 800594a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	69ba      	ldr	r2, [r7, #24]
 8005952:	0151      	lsls	r1, r2, #5
 8005954:	69fa      	ldr	r2, [r7, #28]
 8005956:	440a      	add	r2, r1
 8005958:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800595c:	0cdb      	lsrs	r3, r3, #19
 800595e:	04db      	lsls	r3, r3, #19
 8005960:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	015a      	lsls	r2, r3, #5
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	4413      	add	r3, r2
 800596a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	69ba      	ldr	r2, [r7, #24]
 8005972:	0151      	lsls	r1, r2, #5
 8005974:	69fa      	ldr	r2, [r7, #28]
 8005976:	440a      	add	r2, r1
 8005978:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800597c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005980:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005984:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d126      	bne.n	80059dc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	015a      	lsls	r2, r3, #5
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	4413      	add	r3, r2
 8005996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800599a:	691a      	ldr	r2, [r3, #16]
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059a4:	69b9      	ldr	r1, [r7, #24]
 80059a6:	0148      	lsls	r0, r1, #5
 80059a8:	69f9      	ldr	r1, [r7, #28]
 80059aa:	4401      	add	r1, r0
 80059ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059b0:	4313      	orrs	r3, r2
 80059b2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	69ba      	ldr	r2, [r7, #24]
 80059c4:	0151      	lsls	r1, r2, #5
 80059c6:	69fa      	ldr	r2, [r7, #28]
 80059c8:	440a      	add	r2, r1
 80059ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059d2:	6113      	str	r3, [r2, #16]
 80059d4:	e036      	b.n	8005a44 <USB_EPStartXfer+0x3dc>
 80059d6:	bf00      	nop
 80059d8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	695a      	ldr	r2, [r3, #20]
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	4413      	add	r3, r2
 80059e6:	1e5a      	subs	r2, r3, #1
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80059f0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	015a      	lsls	r2, r3, #5
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	4413      	add	r3, r2
 80059fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059fe:	691a      	ldr	r2, [r3, #16]
 8005a00:	8afb      	ldrh	r3, [r7, #22]
 8005a02:	04d9      	lsls	r1, r3, #19
 8005a04:	4b39      	ldr	r3, [pc, #228]	; (8005aec <USB_EPStartXfer+0x484>)
 8005a06:	400b      	ands	r3, r1
 8005a08:	69b9      	ldr	r1, [r7, #24]
 8005a0a:	0148      	lsls	r0, r1, #5
 8005a0c:	69f9      	ldr	r1, [r7, #28]
 8005a0e:	4401      	add	r1, r0
 8005a10:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a14:	4313      	orrs	r3, r2
 8005a16:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	015a      	lsls	r2, r3, #5
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	4413      	add	r3, r2
 8005a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a24:	691a      	ldr	r2, [r3, #16]
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	8af9      	ldrh	r1, [r7, #22]
 8005a2c:	fb01 f303 	mul.w	r3, r1, r3
 8005a30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a34:	69b9      	ldr	r1, [r7, #24]
 8005a36:	0148      	lsls	r0, r1, #5
 8005a38:	69f9      	ldr	r1, [r7, #28]
 8005a3a:	4401      	add	r1, r0
 8005a3c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a40:	4313      	orrs	r3, r2
 8005a42:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005a44:	79fb      	ldrb	r3, [r7, #7]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d10d      	bne.n	8005a66 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d009      	beq.n	8005a66 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	68d9      	ldr	r1, [r3, #12]
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	015a      	lsls	r2, r3, #5
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a62:	460a      	mov	r2, r1
 8005a64:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	78db      	ldrb	r3, [r3, #3]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d128      	bne.n	8005ac0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d110      	bne.n	8005aa0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	015a      	lsls	r2, r3, #5
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	4413      	add	r3, r2
 8005a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	69ba      	ldr	r2, [r7, #24]
 8005a8e:	0151      	lsls	r1, r2, #5
 8005a90:	69fa      	ldr	r2, [r7, #28]
 8005a92:	440a      	add	r2, r1
 8005a94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a9c:	6013      	str	r3, [r2, #0]
 8005a9e:	e00f      	b.n	8005ac0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	69ba      	ldr	r2, [r7, #24]
 8005ab0:	0151      	lsls	r1, r2, #5
 8005ab2:	69fa      	ldr	r2, [r7, #28]
 8005ab4:	440a      	add	r2, r1
 8005ab6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005abe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	015a      	lsls	r2, r3, #5
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	69ba      	ldr	r2, [r7, #24]
 8005ad0:	0151      	lsls	r1, r2, #5
 8005ad2:	69fa      	ldr	r2, [r7, #28]
 8005ad4:	440a      	add	r2, r1
 8005ad6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ada:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ade:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3720      	adds	r7, #32
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	1ff80000 	.word	0x1ff80000

08005af0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b087      	sub	sp, #28
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	4613      	mov	r3, r2
 8005afc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	785b      	ldrb	r3, [r3, #1]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	f040 80cd 	bne.w	8005cac <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d132      	bne.n	8005b80 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	015a      	lsls	r2, r3, #5
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	4413      	add	r3, r2
 8005b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	693a      	ldr	r2, [r7, #16]
 8005b2a:	0151      	lsls	r1, r2, #5
 8005b2c:	697a      	ldr	r2, [r7, #20]
 8005b2e:	440a      	add	r2, r1
 8005b30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b34:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b38:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	015a      	lsls	r2, r3, #5
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	4413      	add	r3, r2
 8005b46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	0151      	lsls	r1, r2, #5
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	440a      	add	r2, r1
 8005b54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	015a      	lsls	r2, r3, #5
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	4413      	add	r3, r2
 8005b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	0151      	lsls	r1, r2, #5
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	440a      	add	r2, r1
 8005b74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b78:	0cdb      	lsrs	r3, r3, #19
 8005b7a:	04db      	lsls	r3, r3, #19
 8005b7c:	6113      	str	r3, [r2, #16]
 8005b7e:	e04e      	b.n	8005c1e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	0151      	lsls	r1, r2, #5
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	440a      	add	r2, r1
 8005b96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b9a:	0cdb      	lsrs	r3, r3, #19
 8005b9c:	04db      	lsls	r3, r3, #19
 8005b9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	015a      	lsls	r2, r3, #5
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	693a      	ldr	r2, [r7, #16]
 8005bb0:	0151      	lsls	r1, r2, #5
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	440a      	add	r2, r1
 8005bb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005bbe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bc2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	695a      	ldr	r2, [r3, #20]
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d903      	bls.n	8005bd8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	689a      	ldr	r2, [r3, #8]
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	015a      	lsls	r2, r3, #5
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	0151      	lsls	r1, r2, #5
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	440a      	add	r2, r1
 8005bee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bf2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bf6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c04:	691a      	ldr	r2, [r3, #16]
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c0e:	6939      	ldr	r1, [r7, #16]
 8005c10:	0148      	lsls	r0, r1, #5
 8005c12:	6979      	ldr	r1, [r7, #20]
 8005c14:	4401      	add	r1, r0
 8005c16:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005c1e:	79fb      	ldrb	r3, [r7, #7]
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d11e      	bne.n	8005c62 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d009      	beq.n	8005c40 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	015a      	lsls	r2, r3, #5
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	4413      	add	r3, r2
 8005c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c38:	461a      	mov	r2, r3
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	015a      	lsls	r2, r3, #5
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	4413      	add	r3, r2
 8005c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	0151      	lsls	r1, r2, #5
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	440a      	add	r2, r1
 8005c56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c5e:	6013      	str	r3, [r2, #0]
 8005c60:	e092      	b.n	8005d88 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	015a      	lsls	r2, r3, #5
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	4413      	add	r3, r2
 8005c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	0151      	lsls	r1, r2, #5
 8005c74:	697a      	ldr	r2, [r7, #20]
 8005c76:	440a      	add	r2, r1
 8005c78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c7c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c80:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d07e      	beq.n	8005d88 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	f003 030f 	and.w	r3, r3, #15
 8005c9a:	2101      	movs	r1, #1
 8005c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8005ca0:	6979      	ldr	r1, [r7, #20]
 8005ca2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	634b      	str	r3, [r1, #52]	; 0x34
 8005caa:	e06d      	b.n	8005d88 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	015a      	lsls	r2, r3, #5
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	0151      	lsls	r1, r2, #5
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	440a      	add	r2, r1
 8005cc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cc6:	0cdb      	lsrs	r3, r3, #19
 8005cc8:	04db      	lsls	r3, r3, #19
 8005cca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	015a      	lsls	r2, r3, #5
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	693a      	ldr	r2, [r7, #16]
 8005cdc:	0151      	lsls	r1, r2, #5
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	440a      	add	r2, r1
 8005ce2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ce6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005cea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005cee:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	695b      	ldr	r3, [r3, #20]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d003      	beq.n	8005d00 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	689a      	ldr	r2, [r3, #8]
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	015a      	lsls	r2, r3, #5
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	4413      	add	r3, r2
 8005d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	0151      	lsls	r1, r2, #5
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	440a      	add	r2, r1
 8005d16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d1e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	015a      	lsls	r2, r3, #5
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	4413      	add	r3, r2
 8005d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d2c:	691a      	ldr	r2, [r3, #16]
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d36:	6939      	ldr	r1, [r7, #16]
 8005d38:	0148      	lsls	r0, r1, #5
 8005d3a:	6979      	ldr	r1, [r7, #20]
 8005d3c:	4401      	add	r1, r0
 8005d3e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d42:	4313      	orrs	r3, r2
 8005d44:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005d46:	79fb      	ldrb	r3, [r7, #7]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d10d      	bne.n	8005d68 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d009      	beq.n	8005d68 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	68d9      	ldr	r1, [r3, #12]
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	015a      	lsls	r2, r3, #5
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	4413      	add	r3, r2
 8005d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d64:	460a      	mov	r2, r1
 8005d66:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	015a      	lsls	r2, r3, #5
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	4413      	add	r3, r2
 8005d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	0151      	lsls	r1, r2, #5
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	440a      	add	r2, r1
 8005d7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d82:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	371c      	adds	r7, #28
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b089      	sub	sp, #36	; 0x24
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	60f8      	str	r0, [r7, #12]
 8005d9e:	60b9      	str	r1, [r7, #8]
 8005da0:	4611      	mov	r1, r2
 8005da2:	461a      	mov	r2, r3
 8005da4:	460b      	mov	r3, r1
 8005da6:	71fb      	strb	r3, [r7, #7]
 8005da8:	4613      	mov	r3, r2
 8005daa:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005db4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d11a      	bne.n	8005df2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005dbc:	88bb      	ldrh	r3, [r7, #4]
 8005dbe:	3303      	adds	r3, #3
 8005dc0:	089b      	lsrs	r3, r3, #2
 8005dc2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	61bb      	str	r3, [r7, #24]
 8005dc8:	e00f      	b.n	8005dea <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005dca:	79fb      	ldrb	r3, [r7, #7]
 8005dcc:	031a      	lsls	r2, r3, #12
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	3304      	adds	r3, #4
 8005de2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	3301      	adds	r3, #1
 8005de8:	61bb      	str	r3, [r7, #24]
 8005dea:	69ba      	ldr	r2, [r7, #24]
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d3eb      	bcc.n	8005dca <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3724      	adds	r7, #36	; 0x24
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b089      	sub	sp, #36	; 0x24
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005e16:	88fb      	ldrh	r3, [r7, #6]
 8005e18:	3303      	adds	r3, #3
 8005e1a:	089b      	lsrs	r3, r3, #2
 8005e1c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005e1e:	2300      	movs	r3, #0
 8005e20:	61bb      	str	r3, [r7, #24]
 8005e22:	e00b      	b.n	8005e3c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	3304      	adds	r3, #4
 8005e34:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	61bb      	str	r3, [r7, #24]
 8005e3c:	69ba      	ldr	r2, [r7, #24]
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d3ef      	bcc.n	8005e24 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005e44:	69fb      	ldr	r3, [r7, #28]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3724      	adds	r7, #36	; 0x24
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e52:	b480      	push	{r7}
 8005e54:	b085      	sub	sp, #20
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
 8005e5a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	785b      	ldrb	r3, [r3, #1]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d12c      	bne.n	8005ec8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	015a      	lsls	r2, r3, #5
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	4413      	add	r3, r2
 8005e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	db12      	blt.n	8005ea6 <USB_EPSetStall+0x54>
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00f      	beq.n	8005ea6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	015a      	lsls	r2, r3, #5
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68ba      	ldr	r2, [r7, #8]
 8005e96:	0151      	lsls	r1, r2, #5
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	440a      	add	r2, r1
 8005e9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ea0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ea4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	015a      	lsls	r2, r3, #5
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	4413      	add	r3, r2
 8005eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68ba      	ldr	r2, [r7, #8]
 8005eb6:	0151      	lsls	r1, r2, #5
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	440a      	add	r2, r1
 8005ebc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ec0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ec4:	6013      	str	r3, [r2, #0]
 8005ec6:	e02b      	b.n	8005f20 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	015a      	lsls	r2, r3, #5
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	4413      	add	r3, r2
 8005ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	db12      	blt.n	8005f00 <USB_EPSetStall+0xae>
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00f      	beq.n	8005f00 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	015a      	lsls	r2, r3, #5
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68ba      	ldr	r2, [r7, #8]
 8005ef0:	0151      	lsls	r1, r2, #5
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	440a      	add	r2, r1
 8005ef6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005efa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005efe:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	015a      	lsls	r2, r3, #5
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	4413      	add	r3, r2
 8005f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	0151      	lsls	r1, r2, #5
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	440a      	add	r2, r1
 8005f16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f1e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3714      	adds	r7, #20
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f2e:	b480      	push	{r7}
 8005f30:	b085      	sub	sp, #20
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
 8005f36:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	785b      	ldrb	r3, [r3, #1]
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d128      	bne.n	8005f9c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	015a      	lsls	r2, r3, #5
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	4413      	add	r3, r2
 8005f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68ba      	ldr	r2, [r7, #8]
 8005f5a:	0151      	lsls	r1, r2, #5
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	440a      	add	r2, r1
 8005f60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f64:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f68:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	78db      	ldrb	r3, [r3, #3]
 8005f6e:	2b03      	cmp	r3, #3
 8005f70:	d003      	beq.n	8005f7a <USB_EPClearStall+0x4c>
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	78db      	ldrb	r3, [r3, #3]
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d138      	bne.n	8005fec <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	015a      	lsls	r2, r3, #5
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	4413      	add	r3, r2
 8005f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	0151      	lsls	r1, r2, #5
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	440a      	add	r2, r1
 8005f90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f98:	6013      	str	r3, [r2, #0]
 8005f9a:	e027      	b.n	8005fec <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	015a      	lsls	r2, r3, #5
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68ba      	ldr	r2, [r7, #8]
 8005fac:	0151      	lsls	r1, r2, #5
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	440a      	add	r2, r1
 8005fb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005fba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	78db      	ldrb	r3, [r3, #3]
 8005fc0:	2b03      	cmp	r3, #3
 8005fc2:	d003      	beq.n	8005fcc <USB_EPClearStall+0x9e>
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	78db      	ldrb	r3, [r3, #3]
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d10f      	bne.n	8005fec <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	015a      	lsls	r2, r3, #5
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	0151      	lsls	r1, r2, #5
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	440a      	add	r2, r1
 8005fe2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fea:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3714      	adds	r7, #20
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr

08005ffa <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005ffa:	b480      	push	{r7}
 8005ffc:	b085      	sub	sp, #20
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
 8006002:	460b      	mov	r3, r1
 8006004:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006018:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800601c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	78fb      	ldrb	r3, [r7, #3]
 8006028:	011b      	lsls	r3, r3, #4
 800602a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800602e:	68f9      	ldr	r1, [r7, #12]
 8006030:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006034:	4313      	orrs	r3, r2
 8006036:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3714      	adds	r7, #20
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr

08006046 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b084      	sub	sp, #16
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006060:	f023 0302 	bic.w	r3, r3, #2
 8006064:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006066:	2003      	movs	r0, #3
 8006068:	f7fa fabe 	bl	80005e8 <HAL_Delay>

  return HAL_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}

08006076 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006076:	b580      	push	{r7, lr}
 8006078:	b084      	sub	sp, #16
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006090:	f043 0302 	orr.w	r3, r3, #2
 8006094:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006096:	2003      	movs	r0, #3
 8006098:	f7fa faa6 	bl	80005e8 <HAL_Delay>

  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3710      	adds	r7, #16
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80060a6:	b480      	push	{r7}
 80060a8:	b085      	sub	sp, #20
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	699b      	ldr	r3, [r3, #24]
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	4013      	ands	r3, r2
 80060bc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80060be:	68fb      	ldr	r3, [r7, #12]
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3714      	adds	r7, #20
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060e8:	69db      	ldr	r3, [r3, #28]
 80060ea:	68ba      	ldr	r2, [r7, #8]
 80060ec:	4013      	ands	r3, r2
 80060ee:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	0c1b      	lsrs	r3, r3, #16
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3714      	adds	r7, #20
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800611c:	69db      	ldr	r3, [r3, #28]
 800611e:	68ba      	ldr	r2, [r7, #8]
 8006120:	4013      	ands	r3, r2
 8006122:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	b29b      	uxth	r3, r3
}
 8006128:	4618      	mov	r0, r3
 800612a:	3714      	adds	r7, #20
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	460b      	mov	r3, r1
 800613e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006144:	78fb      	ldrb	r3, [r7, #3]
 8006146:	015a      	lsls	r2, r3, #5
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	4413      	add	r3, r2
 800614c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800615a:	695b      	ldr	r3, [r3, #20]
 800615c:	68ba      	ldr	r2, [r7, #8]
 800615e:	4013      	ands	r3, r2
 8006160:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006162:	68bb      	ldr	r3, [r7, #8]
}
 8006164:	4618      	mov	r0, r3
 8006166:	3714      	adds	r7, #20
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006170:	b480      	push	{r7}
 8006172:	b087      	sub	sp, #28
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	460b      	mov	r3, r1
 800617a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006192:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006194:	78fb      	ldrb	r3, [r7, #3]
 8006196:	f003 030f 	and.w	r3, r3, #15
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	fa22 f303 	lsr.w	r3, r2, r3
 80061a0:	01db      	lsls	r3, r3, #7
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80061aa:	78fb      	ldrb	r3, [r7, #3]
 80061ac:	015a      	lsls	r2, r3, #5
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	4413      	add	r3, r2
 80061b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	4013      	ands	r3, r2
 80061bc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80061be:	68bb      	ldr	r3, [r7, #8]
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	371c      	adds	r7, #28
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	695b      	ldr	r3, [r3, #20]
 80061d8:	f003 0301 	and.w	r3, r3, #1
}
 80061dc:	4618      	mov	r0, r3
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006202:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006206:	f023 0307 	bic.w	r3, r3, #7
 800620a:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f003 0306 	and.w	r3, r3, #6
 8006218:	2b04      	cmp	r3, #4
 800621a:	d109      	bne.n	8006230 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800622a:	f043 0303 	orr.w	r3, r3, #3
 800622e:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800623e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006242:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3714      	adds	r7, #20
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
	...

08006254 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006254:	b480      	push	{r7}
 8006256:	b087      	sub	sp, #28
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	460b      	mov	r3, r1
 800625e:	607a      	str	r2, [r7, #4]
 8006260:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	333c      	adds	r3, #60	; 0x3c
 800626a:	3304      	adds	r3, #4
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	4a26      	ldr	r2, [pc, #152]	; (800630c <USB_EP0_OutStart+0xb8>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d90a      	bls.n	800628e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006284:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006288:	d101      	bne.n	800628e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800628a:	2300      	movs	r3, #0
 800628c:	e037      	b.n	80062fe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006294:	461a      	mov	r2, r3
 8006296:	2300      	movs	r3, #0
 8006298:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	697a      	ldr	r2, [r7, #20]
 80062a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	697a      	ldr	r2, [r7, #20]
 80062b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062bc:	f043 0318 	orr.w	r3, r3, #24
 80062c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062d0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80062d4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80062d6:	7afb      	ldrb	r3, [r7, #11]
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d10f      	bne.n	80062fc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e2:	461a      	mov	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	697a      	ldr	r2, [r7, #20]
 80062f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062f6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80062fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	371c      	adds	r7, #28
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	4f54300a 	.word	0x4f54300a

08006310 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006318:	2300      	movs	r3, #0
 800631a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	3301      	adds	r3, #1
 8006320:	60fb      	str	r3, [r7, #12]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	4a13      	ldr	r2, [pc, #76]	; (8006374 <USB_CoreReset+0x64>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d901      	bls.n	800632e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800632a:	2303      	movs	r3, #3
 800632c:	e01b      	b.n	8006366 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	2b00      	cmp	r3, #0
 8006334:	daf2      	bge.n	800631c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006336:	2300      	movs	r3, #0
 8006338:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	f043 0201 	orr.w	r2, r3, #1
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	3301      	adds	r3, #1
 800634a:	60fb      	str	r3, [r7, #12]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	4a09      	ldr	r2, [pc, #36]	; (8006374 <USB_CoreReset+0x64>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d901      	bls.n	8006358 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006354:	2303      	movs	r3, #3
 8006356:	e006      	b.n	8006366 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	f003 0301 	and.w	r3, r3, #1
 8006360:	2b01      	cmp	r3, #1
 8006362:	d0f0      	beq.n	8006346 <USB_CoreReset+0x36>

  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3714      	adds	r7, #20
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	00030d40 	.word	0x00030d40

08006378 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	460b      	mov	r3, r1
 8006382:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006384:	2300      	movs	r3, #0
 8006386:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	7c1b      	ldrb	r3, [r3, #16]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d115      	bne.n	80063bc <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006390:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006394:	2202      	movs	r2, #2
 8006396:	2181      	movs	r1, #129	; 0x81
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f002 fd68 	bl	8008e6e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2201      	movs	r2, #1
 80063a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80063a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063a8:	2202      	movs	r2, #2
 80063aa:	2101      	movs	r1, #1
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f002 fd5e 	bl	8008e6e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 80063ba:	e012      	b.n	80063e2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80063bc:	2340      	movs	r3, #64	; 0x40
 80063be:	2202      	movs	r2, #2
 80063c0:	2181      	movs	r1, #129	; 0x81
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f002 fd53 	bl	8008e6e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80063ce:	2340      	movs	r3, #64	; 0x40
 80063d0:	2202      	movs	r2, #2
 80063d2:	2101      	movs	r1, #1
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f002 fd4a 	bl	8008e6e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2201      	movs	r2, #1
 80063de:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80063e2:	2308      	movs	r3, #8
 80063e4:	2203      	movs	r2, #3
 80063e6:	2182      	movs	r1, #130	; 0x82
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f002 fd40 	bl	8008e6e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2201      	movs	r2, #1
 80063f2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80063f4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80063f8:	f003 f996 	bl	8009728 <malloc>
 80063fc:	4603      	mov	r3, r0
 80063fe:	461a      	mov	r2, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800640c:	2b00      	cmp	r3, #0
 800640e:	d102      	bne.n	8006416 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8006410:	2301      	movs	r3, #1
 8006412:	73fb      	strb	r3, [r7, #15]
 8006414:	e026      	b.n	8006464 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800641c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	2200      	movs	r2, #0
 800642c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	2200      	movs	r2, #0
 8006434:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	7c1b      	ldrb	r3, [r3, #16]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d109      	bne.n	8006454 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006446:	f44f 7300 	mov.w	r3, #512	; 0x200
 800644a:	2101      	movs	r1, #1
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f002 fdff 	bl	8009050 <USBD_LL_PrepareReceive>
 8006452:	e007      	b.n	8006464 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800645a:	2340      	movs	r3, #64	; 0x40
 800645c:	2101      	movs	r1, #1
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f002 fdf6 	bl	8009050 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006464:	7bfb      	ldrb	r3, [r7, #15]
}
 8006466:	4618      	mov	r0, r3
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}

0800646e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800646e:	b580      	push	{r7, lr}
 8006470:	b084      	sub	sp, #16
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
 8006476:	460b      	mov	r3, r1
 8006478:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800647a:	2300      	movs	r3, #0
 800647c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800647e:	2181      	movs	r1, #129	; 0x81
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f002 fd1a 	bl	8008eba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800648c:	2101      	movs	r1, #1
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f002 fd13 	bl	8008eba <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800649c:	2182      	movs	r1, #130	; 0x82
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f002 fd0b 	bl	8008eba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00e      	beq.n	80064d2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80064c4:	4618      	mov	r0, r3
 80064c6:	f003 f937 	bl	8009738 <free>
    pdev->pClassData = NULL;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 80064d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b086      	sub	sp, #24
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80064ec:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80064ee:	2300      	movs	r3, #0
 80064f0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80064f2:	2300      	movs	r3, #0
 80064f4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80064f6:	2300      	movs	r3, #0
 80064f8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006502:	2b00      	cmp	r3, #0
 8006504:	d039      	beq.n	800657a <USBD_CDC_Setup+0x9e>
 8006506:	2b20      	cmp	r3, #32
 8006508:	d17c      	bne.n	8006604 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	88db      	ldrh	r3, [r3, #6]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d029      	beq.n	8006566 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	b25b      	sxtb	r3, r3
 8006518:	2b00      	cmp	r3, #0
 800651a:	da11      	bge.n	8006540 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	683a      	ldr	r2, [r7, #0]
 8006526:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8006528:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800652a:	683a      	ldr	r2, [r7, #0]
 800652c:	88d2      	ldrh	r2, [r2, #6]
 800652e:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006530:	6939      	ldr	r1, [r7, #16]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	88db      	ldrh	r3, [r3, #6]
 8006536:	461a      	mov	r2, r3
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f001 f9b7 	bl	80078ac <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800653e:	e068      	b.n	8006612 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	785a      	ldrb	r2, [r3, #1]
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	88db      	ldrh	r3, [r3, #6]
 800654e:	b2da      	uxtb	r2, r3
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006556:	6939      	ldr	r1, [r7, #16]
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	88db      	ldrh	r3, [r3, #6]
 800655c:	461a      	mov	r2, r3
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f001 f9d2 	bl	8007908 <USBD_CtlPrepareRx>
    break;
 8006564:	e055      	b.n	8006612 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	683a      	ldr	r2, [r7, #0]
 8006570:	7850      	ldrb	r0, [r2, #1]
 8006572:	2200      	movs	r2, #0
 8006574:	6839      	ldr	r1, [r7, #0]
 8006576:	4798      	blx	r3
    break;
 8006578:	e04b      	b.n	8006612 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	785b      	ldrb	r3, [r3, #1]
 800657e:	2b0a      	cmp	r3, #10
 8006580:	d017      	beq.n	80065b2 <USBD_CDC_Setup+0xd6>
 8006582:	2b0b      	cmp	r3, #11
 8006584:	d029      	beq.n	80065da <USBD_CDC_Setup+0xfe>
 8006586:	2b00      	cmp	r3, #0
 8006588:	d133      	bne.n	80065f2 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006590:	2b03      	cmp	r3, #3
 8006592:	d107      	bne.n	80065a4 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8006594:	f107 030c 	add.w	r3, r7, #12
 8006598:	2202      	movs	r2, #2
 800659a:	4619      	mov	r1, r3
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f001 f985 	bl	80078ac <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80065a2:	e02e      	b.n	8006602 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80065a4:	6839      	ldr	r1, [r7, #0]
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f001 f915 	bl	80077d6 <USBD_CtlError>
			  ret = USBD_FAIL;
 80065ac:	2302      	movs	r3, #2
 80065ae:	75fb      	strb	r3, [r7, #23]
      break;
 80065b0:	e027      	b.n	8006602 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80065b8:	2b03      	cmp	r3, #3
 80065ba:	d107      	bne.n	80065cc <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 80065bc:	f107 030f 	add.w	r3, r7, #15
 80065c0:	2201      	movs	r2, #1
 80065c2:	4619      	mov	r1, r3
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f001 f971 	bl	80078ac <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80065ca:	e01a      	b.n	8006602 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80065cc:	6839      	ldr	r1, [r7, #0]
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f001 f901 	bl	80077d6 <USBD_CtlError>
			  ret = USBD_FAIL;
 80065d4:	2302      	movs	r3, #2
 80065d6:	75fb      	strb	r3, [r7, #23]
      break;
 80065d8:	e013      	b.n	8006602 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80065e0:	2b03      	cmp	r3, #3
 80065e2:	d00d      	beq.n	8006600 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 80065e4:	6839      	ldr	r1, [r7, #0]
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f001 f8f5 	bl	80077d6 <USBD_CtlError>
			  ret = USBD_FAIL;
 80065ec:	2302      	movs	r3, #2
 80065ee:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80065f0:	e006      	b.n	8006600 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 80065f2:	6839      	ldr	r1, [r7, #0]
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f001 f8ee 	bl	80077d6 <USBD_CtlError>
      ret = USBD_FAIL;
 80065fa:	2302      	movs	r3, #2
 80065fc:	75fb      	strb	r3, [r7, #23]
      break;
 80065fe:	e000      	b.n	8006602 <USBD_CDC_Setup+0x126>
      break;
 8006600:	bf00      	nop
    }
    break;
 8006602:	e006      	b.n	8006612 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8006604:	6839      	ldr	r1, [r7, #0]
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f001 f8e5 	bl	80077d6 <USBD_CtlError>
    ret = USBD_FAIL;
 800660c:	2302      	movs	r3, #2
 800660e:	75fb      	strb	r3, [r7, #23]
    break;
 8006610:	bf00      	nop
  }

  return ret;
 8006612:	7dfb      	ldrb	r3, [r7, #23]
}
 8006614:	4618      	mov	r0, r3
 8006616:	3718      	adds	r7, #24
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	460b      	mov	r3, r1
 8006626:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800662e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006636:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800663e:	2b00      	cmp	r3, #0
 8006640:	d03a      	beq.n	80066b8 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006642:	78fa      	ldrb	r2, [r7, #3]
 8006644:	6879      	ldr	r1, [r7, #4]
 8006646:	4613      	mov	r3, r2
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	4413      	add	r3, r2
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	440b      	add	r3, r1
 8006650:	331c      	adds	r3, #28
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d029      	beq.n	80066ac <USBD_CDC_DataIn+0x90>
 8006658:	78fa      	ldrb	r2, [r7, #3]
 800665a:	6879      	ldr	r1, [r7, #4]
 800665c:	4613      	mov	r3, r2
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	4413      	add	r3, r2
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	440b      	add	r3, r1
 8006666:	331c      	adds	r3, #28
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	78f9      	ldrb	r1, [r7, #3]
 800666c:	68b8      	ldr	r0, [r7, #8]
 800666e:	460b      	mov	r3, r1
 8006670:	00db      	lsls	r3, r3, #3
 8006672:	1a5b      	subs	r3, r3, r1
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	4403      	add	r3, r0
 8006678:	3344      	adds	r3, #68	; 0x44
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006680:	fb03 f301 	mul.w	r3, r3, r1
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	2b00      	cmp	r3, #0
 8006688:	d110      	bne.n	80066ac <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800668a:	78fa      	ldrb	r2, [r7, #3]
 800668c:	6879      	ldr	r1, [r7, #4]
 800668e:	4613      	mov	r3, r2
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	4413      	add	r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	440b      	add	r3, r1
 8006698:	331c      	adds	r3, #28
 800669a:	2200      	movs	r2, #0
 800669c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800669e:	78f9      	ldrb	r1, [r7, #3]
 80066a0:	2300      	movs	r3, #0
 80066a2:	2200      	movs	r2, #0
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f002 fcb0 	bl	800900a <USBD_LL_Transmit>
 80066aa:	e003      	b.n	80066b4 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80066b4:	2300      	movs	r3, #0
 80066b6:	e000      	b.n	80066ba <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80066b8:	2302      	movs	r3, #2
  }
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80066c2:	b580      	push	{r7, lr}
 80066c4:	b084      	sub	sp, #16
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
 80066ca:	460b      	mov	r3, r1
 80066cc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80066d4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80066d6:	78fb      	ldrb	r3, [r7, #3]
 80066d8:	4619      	mov	r1, r3
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f002 fcdb 	bl	8009096 <USBD_LL_GetRxDataSize>
 80066e0:	4602      	mov	r2, r0
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d00d      	beq.n	800670e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006706:	4611      	mov	r1, r2
 8006708:	4798      	blx	r3

    return USBD_OK;
 800670a:	2300      	movs	r3, #0
 800670c:	e000      	b.n	8006710 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800670e:	2302      	movs	r3, #2
  }
}
 8006710:	4618      	mov	r0, r3
 8006712:	3710      	adds	r7, #16
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006726:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800672e:	2b00      	cmp	r3, #0
 8006730:	d015      	beq.n	800675e <USBD_CDC_EP0_RxReady+0x46>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006738:	2bff      	cmp	r3, #255	; 0xff
 800673a:	d010      	beq.n	800675e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800674a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006752:	b292      	uxth	r2, r2
 8006754:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	22ff      	movs	r2, #255	; 0xff
 800675a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3710      	adds	r7, #16
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2243      	movs	r2, #67	; 0x43
 8006774:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006776:	4b03      	ldr	r3, [pc, #12]	; (8006784 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006778:	4618      	mov	r0, r3
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr
 8006784:	20000090 	.word	0x20000090

08006788 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2243      	movs	r2, #67	; 0x43
 8006794:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006796:	4b03      	ldr	r3, [pc, #12]	; (80067a4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006798:	4618      	mov	r0, r3
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr
 80067a4:	2000004c 	.word	0x2000004c

080067a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2243      	movs	r2, #67	; 0x43
 80067b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80067b6:	4b03      	ldr	r3, [pc, #12]	; (80067c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr
 80067c4:	200000d4 	.word	0x200000d4

080067c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	220a      	movs	r2, #10
 80067d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80067d6:	4b03      	ldr	r3, [pc, #12]	; (80067e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80067d8:	4618      	mov	r0, r3
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr
 80067e4:	20000008 	.word	0x20000008

080067e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80067f2:	2302      	movs	r3, #2
 80067f4:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d005      	beq.n	8006808 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	683a      	ldr	r2, [r7, #0]
 8006800:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8006804:	2300      	movs	r3, #0
 8006806:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006808:	7bfb      	ldrb	r3, [r7, #15]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3714      	adds	r7, #20
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr

08006816 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8006816:	b480      	push	{r7}
 8006818:	b087      	sub	sp, #28
 800681a:	af00      	add	r7, sp, #0
 800681c:	60f8      	str	r0, [r7, #12]
 800681e:	60b9      	str	r1, [r7, #8]
 8006820:	4613      	mov	r3, r2
 8006822:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800682a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	68ba      	ldr	r2, [r7, #8]
 8006830:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006834:	88fa      	ldrh	r2, [r7, #6]
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	371c      	adds	r7, #28
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr

0800684a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800684a:	b480      	push	{r7}
 800684c:	b085      	sub	sp, #20
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
 8006852:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800685a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	683a      	ldr	r2, [r7, #0]
 8006860:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3714      	adds	r7, #20
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr

08006872 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b084      	sub	sp, #16
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006880:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006888:	2b00      	cmp	r3, #0
 800688a:	d017      	beq.n	80068bc <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	7c1b      	ldrb	r3, [r3, #16]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d109      	bne.n	80068a8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800689a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800689e:	2101      	movs	r1, #1
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f002 fbd5 	bl	8009050 <USBD_LL_PrepareReceive>
 80068a6:	e007      	b.n	80068b8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068ae:	2340      	movs	r3, #64	; 0x40
 80068b0:	2101      	movs	r1, #1
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f002 fbcc 	bl	8009050 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80068b8:	2300      	movs	r3, #0
 80068ba:	e000      	b.n	80068be <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80068bc:	2302      	movs	r3, #2
  }
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b084      	sub	sp, #16
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	60f8      	str	r0, [r7, #12]
 80068ce:	60b9      	str	r1, [r7, #8]
 80068d0:	4613      	mov	r3, r2
 80068d2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d101      	bne.n	80068de <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80068da:	2302      	movs	r3, #2
 80068dc:	e01a      	b.n	8006914 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d003      	beq.n	80068f0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d003      	beq.n	80068fe <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	68ba      	ldr	r2, [r7, #8]
 80068fa:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2201      	movs	r2, #1
 8006902:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	79fa      	ldrb	r2, [r7, #7]
 800690a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f002 fa47 	bl	8008da0 <USBD_LL_Init>

  return USBD_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800691c:	b480      	push	{r7}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8006926:	2300      	movs	r3, #0
 8006928:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d006      	beq.n	800693e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	683a      	ldr	r2, [r7, #0]
 8006934:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8006938:	2300      	movs	r3, #0
 800693a:	73fb      	strb	r3, [r7, #15]
 800693c:	e001      	b.n	8006942 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800693e:	2302      	movs	r3, #2
 8006940:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006942:	7bfb      	ldrb	r3, [r7, #15]
}
 8006944:	4618      	mov	r0, r3
 8006946:	3714      	adds	r7, #20
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f002 fa6d 	bl	8008e38 <USBD_LL_Start>

  return USBD_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3708      	adds	r7, #8
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	370c      	adds	r7, #12
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800697e:	b580      	push	{r7, lr}
 8006980:	b084      	sub	sp, #16
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
 8006986:	460b      	mov	r3, r1
 8006988:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800698a:	2302      	movs	r3, #2
 800698c:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00c      	beq.n	80069b2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	78fa      	ldrb	r2, [r7, #3]
 80069a2:	4611      	mov	r1, r2
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	4798      	blx	r3
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d101      	bne.n	80069b2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80069ae:	2300      	movs	r3, #0
 80069b0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80069b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3710      	adds	r7, #16
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	460b      	mov	r3, r1
 80069c6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	78fa      	ldrb	r2, [r7, #3]
 80069d2:	4611      	mov	r1, r2
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	4798      	blx	r3
  return USBD_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3708      	adds	r7, #8
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b082      	sub	sp, #8
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
 80069ea:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80069f2:	6839      	ldr	r1, [r7, #0]
 80069f4:	4618      	mov	r0, r3
 80069f6:	f000 feb1 	bl	800775c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2201      	movs	r2, #1
 80069fe:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8006a08:	461a      	mov	r2, r3
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006a16:	f003 031f 	and.w	r3, r3, #31
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d00c      	beq.n	8006a38 <USBD_LL_SetupStage+0x56>
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d302      	bcc.n	8006a28 <USBD_LL_SetupStage+0x46>
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d010      	beq.n	8006a48 <USBD_LL_SetupStage+0x66>
 8006a26:	e017      	b.n	8006a58 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006a2e:	4619      	mov	r1, r3
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 fa05 	bl	8006e40 <USBD_StdDevReq>
    break;
 8006a36:	e01a      	b.n	8006a6e <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006a3e:	4619      	mov	r1, r3
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 fa67 	bl	8006f14 <USBD_StdItfReq>
    break;
 8006a46:	e012      	b.n	8006a6e <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006a4e:	4619      	mov	r1, r3
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 faa5 	bl	8006fa0 <USBD_StdEPReq>
    break;
 8006a56:	e00a      	b.n	8006a6e <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006a5e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	4619      	mov	r1, r3
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f002 fa46 	bl	8008ef8 <USBD_LL_StallEP>
    break;
 8006a6c:	bf00      	nop
  }

  return USBD_OK;
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3708      	adds	r7, #8
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b086      	sub	sp, #24
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	460b      	mov	r3, r1
 8006a82:	607a      	str	r2, [r7, #4]
 8006a84:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8006a86:	7afb      	ldrb	r3, [r7, #11]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d14b      	bne.n	8006b24 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006a92:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006a9a:	2b03      	cmp	r3, #3
 8006a9c:	d134      	bne.n	8006b08 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	68da      	ldr	r2, [r3, #12]
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d919      	bls.n	8006ade <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	68da      	ldr	r2, [r3, #12]
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	1ad2      	subs	r2, r2, r3
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	68da      	ldr	r2, [r3, #12]
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d203      	bcs.n	8006acc <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	e002      	b.n	8006ad2 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	6879      	ldr	r1, [r7, #4]
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	f000 ff34 	bl	8007944 <USBD_CtlContinueRx>
 8006adc:	e038      	b.n	8006b50 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00a      	beq.n	8006b00 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006af0:	2b03      	cmp	r3, #3
 8006af2:	d105      	bne.n	8006b00 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f000 ff31 	bl	8007968 <USBD_CtlSendStatus>
 8006b06:	e023      	b.n	8006b50 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006b0e:	2b05      	cmp	r3, #5
 8006b10:	d11e      	bne.n	8006b50 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8006b1a:	2100      	movs	r1, #0
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	f002 f9eb 	bl	8008ef8 <USBD_LL_StallEP>
 8006b22:	e015      	b.n	8006b50 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006b2a:	699b      	ldr	r3, [r3, #24]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d00d      	beq.n	8006b4c <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8006b36:	2b03      	cmp	r3, #3
 8006b38:	d108      	bne.n	8006b4c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006b40:	699b      	ldr	r3, [r3, #24]
 8006b42:	7afa      	ldrb	r2, [r7, #11]
 8006b44:	4611      	mov	r1, r2
 8006b46:	68f8      	ldr	r0, [r7, #12]
 8006b48:	4798      	blx	r3
 8006b4a:	e001      	b.n	8006b50 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006b4c:	2302      	movs	r3, #2
 8006b4e:	e000      	b.n	8006b52 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3718      	adds	r7, #24
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b086      	sub	sp, #24
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	60f8      	str	r0, [r7, #12]
 8006b62:	460b      	mov	r3, r1
 8006b64:	607a      	str	r2, [r7, #4]
 8006b66:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8006b68:	7afb      	ldrb	r3, [r7, #11]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d17f      	bne.n	8006c6e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	3314      	adds	r3, #20
 8006b72:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	d15c      	bne.n	8006c38 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	68da      	ldr	r2, [r3, #12]
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d915      	bls.n	8006bb6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	68da      	ldr	r2, [r3, #12]
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	1ad2      	subs	r2, r2, r3
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	6879      	ldr	r1, [r7, #4]
 8006ba2:	68f8      	ldr	r0, [r7, #12]
 8006ba4:	f000 fe9e 	bl	80078e4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006ba8:	2300      	movs	r3, #0
 8006baa:	2200      	movs	r2, #0
 8006bac:	2100      	movs	r1, #0
 8006bae:	68f8      	ldr	r0, [r7, #12]
 8006bb0:	f002 fa4e 	bl	8009050 <USBD_LL_PrepareReceive>
 8006bb4:	e04e      	b.n	8006c54 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	697a      	ldr	r2, [r7, #20]
 8006bbc:	6912      	ldr	r2, [r2, #16]
 8006bbe:	fbb3 f1f2 	udiv	r1, r3, r2
 8006bc2:	fb02 f201 	mul.w	r2, r2, r1
 8006bc6:	1a9b      	subs	r3, r3, r2
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d11c      	bne.n	8006c06 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	689a      	ldr	r2, [r3, #8]
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d316      	bcc.n	8006c06 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	689a      	ldr	r2, [r3, #8]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d20f      	bcs.n	8006c06 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006be6:	2200      	movs	r2, #0
 8006be8:	2100      	movs	r1, #0
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f000 fe7a 	bl	80078e4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	2100      	movs	r1, #0
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f002 fa26 	bl	8009050 <USBD_LL_PrepareReceive>
 8006c04:	e026      	b.n	8006c54 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00a      	beq.n	8006c28 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006c18:	2b03      	cmp	r3, #3
 8006c1a:	d105      	bne.n	8006c28 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006c28:	2180      	movs	r1, #128	; 0x80
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	f002 f964 	bl	8008ef8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f000 feac 	bl	800798e <USBD_CtlReceiveStatus>
 8006c36:	e00d      	b.n	8006c54 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006c3e:	2b04      	cmp	r3, #4
 8006c40:	d004      	beq.n	8006c4c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d103      	bne.n	8006c54 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006c4c:	2180      	movs	r1, #128	; 0x80
 8006c4e:	68f8      	ldr	r0, [r7, #12]
 8006c50:	f002 f952 	bl	8008ef8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d11d      	bne.n	8006c9a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006c5e:	68f8      	ldr	r0, [r7, #12]
 8006c60:	f7ff fe82 	bl	8006968 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8006c6c:	e015      	b.n	8006c9a <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006c74:	695b      	ldr	r3, [r3, #20]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00d      	beq.n	8006c96 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8006c80:	2b03      	cmp	r3, #3
 8006c82:	d108      	bne.n	8006c96 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006c8a:	695b      	ldr	r3, [r3, #20]
 8006c8c:	7afa      	ldrb	r2, [r7, #11]
 8006c8e:	4611      	mov	r1, r2
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	4798      	blx	r3
 8006c94:	e001      	b.n	8006c9a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006c96:	2302      	movs	r3, #2
 8006c98:	e000      	b.n	8006c9c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3718      	adds	r7, #24
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006cac:	2340      	movs	r3, #64	; 0x40
 8006cae:	2200      	movs	r2, #0
 8006cb0:	2100      	movs	r1, #0
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f002 f8db 	bl	8008e6e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2240      	movs	r2, #64	; 0x40
 8006cc4:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006cc8:	2340      	movs	r3, #64	; 0x40
 8006cca:	2200      	movs	r2, #0
 8006ccc:	2180      	movs	r1, #128	; 0x80
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f002 f8cd 	bl	8008e6e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2240      	movs	r2, #64	; 0x40
 8006cde:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d009      	beq.n	8006d1c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	6852      	ldr	r2, [r2, #4]
 8006d14:	b2d2      	uxtb	r2, r2
 8006d16:	4611      	mov	r1, r2
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	4798      	blx	r3
  }

  return USBD_OK;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3708      	adds	r7, #8
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8006d26:	b480      	push	{r7}
 8006d28:	b083      	sub	sp, #12
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
 8006d2e:	460b      	mov	r3, r1
 8006d30:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	78fa      	ldrb	r2, [r7, #3]
 8006d36:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	370c      	adds	r7, #12
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8006d46:	b480      	push	{r7}
 8006d48:	b083      	sub	sp, #12
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2204      	movs	r2, #4
 8006d5e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	370c      	adds	r7, #12
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr

08006d92 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b082      	sub	sp, #8
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006da0:	2b03      	cmp	r3, #3
 8006da2:	d10b      	bne.n	8006dbc <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006daa:	69db      	ldr	r3, [r3, #28]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d005      	beq.n	8006dbc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006db6:	69db      	ldr	r3, [r3, #28]
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3708      	adds	r7, #8
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}

08006dc6 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8006dc6:	b480      	push	{r7}
 8006dc8:	b083      	sub	sp, #12
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
 8006dce:	460b      	mov	r3, r1
 8006dd0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	460b      	mov	r3, r1
 8006dea:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006dec:	2300      	movs	r3, #0
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	370c      	adds	r7, #12
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr

08006dfa <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8006dfa:	b480      	push	{r7}
 8006dfc:	b083      	sub	sp, #12
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	6852      	ldr	r2, [r2, #4]
 8006e2c:	b2d2      	uxtb	r2, r2
 8006e2e:	4611      	mov	r1, r2
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	4798      	blx	r3

  return USBD_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3708      	adds	r7, #8
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
	...

08006e40 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e56:	2b20      	cmp	r3, #32
 8006e58:	d004      	beq.n	8006e64 <USBD_StdDevReq+0x24>
 8006e5a:	2b40      	cmp	r3, #64	; 0x40
 8006e5c:	d002      	beq.n	8006e64 <USBD_StdDevReq+0x24>
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d008      	beq.n	8006e74 <USBD_StdDevReq+0x34>
 8006e62:	e04c      	b.n	8006efe <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	6839      	ldr	r1, [r7, #0]
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	4798      	blx	r3
    break;
 8006e72:	e049      	b.n	8006f08 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	785b      	ldrb	r3, [r3, #1]
 8006e78:	2b09      	cmp	r3, #9
 8006e7a:	d83a      	bhi.n	8006ef2 <USBD_StdDevReq+0xb2>
 8006e7c:	a201      	add	r2, pc, #4	; (adr r2, 8006e84 <USBD_StdDevReq+0x44>)
 8006e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e82:	bf00      	nop
 8006e84:	08006ed5 	.word	0x08006ed5
 8006e88:	08006ee9 	.word	0x08006ee9
 8006e8c:	08006ef3 	.word	0x08006ef3
 8006e90:	08006edf 	.word	0x08006edf
 8006e94:	08006ef3 	.word	0x08006ef3
 8006e98:	08006eb7 	.word	0x08006eb7
 8006e9c:	08006ead 	.word	0x08006ead
 8006ea0:	08006ef3 	.word	0x08006ef3
 8006ea4:	08006ecb 	.word	0x08006ecb
 8006ea8:	08006ec1 	.word	0x08006ec1
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8006eac:	6839      	ldr	r1, [r7, #0]
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 f9d2 	bl	8007258 <USBD_GetDescriptor>
      break;
 8006eb4:	e022      	b.n	8006efc <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8006eb6:	6839      	ldr	r1, [r7, #0]
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 fae3 	bl	8007484 <USBD_SetAddress>
      break;
 8006ebe:	e01d      	b.n	8006efc <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8006ec0:	6839      	ldr	r1, [r7, #0]
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 fb20 	bl	8007508 <USBD_SetConfig>
      break;
 8006ec8:	e018      	b.n	8006efc <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8006eca:	6839      	ldr	r1, [r7, #0]
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 fba9 	bl	8007624 <USBD_GetConfig>
      break;
 8006ed2:	e013      	b.n	8006efc <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8006ed4:	6839      	ldr	r1, [r7, #0]
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 fbd8 	bl	800768c <USBD_GetStatus>
      break;
 8006edc:	e00e      	b.n	8006efc <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8006ede:	6839      	ldr	r1, [r7, #0]
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 fc06 	bl	80076f2 <USBD_SetFeature>
      break;
 8006ee6:	e009      	b.n	8006efc <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8006ee8:	6839      	ldr	r1, [r7, #0]
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 fc15 	bl	800771a <USBD_ClrFeature>
      break;
 8006ef0:	e004      	b.n	8006efc <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8006ef2:	6839      	ldr	r1, [r7, #0]
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 fc6e 	bl	80077d6 <USBD_CtlError>
      break;
 8006efa:	bf00      	nop
    }
    break;
 8006efc:	e004      	b.n	8006f08 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8006efe:	6839      	ldr	r1, [r7, #0]
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 fc68 	bl	80077d6 <USBD_CtlError>
    break;
 8006f06:	bf00      	nop
  }

  return ret;
 8006f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3710      	adds	r7, #16
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop

08006f14 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f2a:	2b20      	cmp	r3, #32
 8006f2c:	d003      	beq.n	8006f36 <USBD_StdItfReq+0x22>
 8006f2e:	2b40      	cmp	r3, #64	; 0x40
 8006f30:	d001      	beq.n	8006f36 <USBD_StdItfReq+0x22>
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d12a      	bne.n	8006f8c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006f3c:	3b01      	subs	r3, #1
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d81d      	bhi.n	8006f7e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	889b      	ldrh	r3, [r3, #4]
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d813      	bhi.n	8006f74 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	6839      	ldr	r1, [r7, #0]
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	4798      	blx	r3
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	88db      	ldrh	r3, [r3, #6]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d110      	bne.n	8006f88 <USBD_StdItfReq+0x74>
 8006f66:	7bfb      	ldrb	r3, [r7, #15]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d10d      	bne.n	8006f88 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 fcfb 	bl	8007968 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006f72:	e009      	b.n	8006f88 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006f74:	6839      	ldr	r1, [r7, #0]
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 fc2d 	bl	80077d6 <USBD_CtlError>
      break;
 8006f7c:	e004      	b.n	8006f88 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006f7e:	6839      	ldr	r1, [r7, #0]
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 fc28 	bl	80077d6 <USBD_CtlError>
      break;
 8006f86:	e000      	b.n	8006f8a <USBD_StdItfReq+0x76>
      break;
 8006f88:	bf00      	nop
    }
    break;
 8006f8a:	e004      	b.n	8006f96 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006f8c:	6839      	ldr	r1, [r7, #0]
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 fc21 	bl	80077d6 <USBD_CtlError>
    break;
 8006f94:	bf00      	nop
  }

  return USBD_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3710      	adds	r7, #16
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006faa:	2300      	movs	r3, #0
 8006fac:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	889b      	ldrh	r3, [r3, #4]
 8006fb2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fbc:	2b20      	cmp	r3, #32
 8006fbe:	d004      	beq.n	8006fca <USBD_StdEPReq+0x2a>
 8006fc0:	2b40      	cmp	r3, #64	; 0x40
 8006fc2:	d002      	beq.n	8006fca <USBD_StdEPReq+0x2a>
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d008      	beq.n	8006fda <USBD_StdEPReq+0x3a>
 8006fc8:	e13b      	b.n	8007242 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	6839      	ldr	r1, [r7, #0]
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	4798      	blx	r3
    break;
 8006fd8:	e138      	b.n	800724c <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fe2:	2b20      	cmp	r3, #32
 8006fe4:	d10a      	bne.n	8006ffc <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	6839      	ldr	r1, [r7, #0]
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	4798      	blx	r3
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	73fb      	strb	r3, [r7, #15]

      return ret;
 8006ff8:	7bfb      	ldrb	r3, [r7, #15]
 8006ffa:	e128      	b.n	800724e <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	785b      	ldrb	r3, [r3, #1]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d03e      	beq.n	8007082 <USBD_StdEPReq+0xe2>
 8007004:	2b03      	cmp	r3, #3
 8007006:	d002      	beq.n	800700e <USBD_StdEPReq+0x6e>
 8007008:	2b00      	cmp	r3, #0
 800700a:	d070      	beq.n	80070ee <USBD_StdEPReq+0x14e>
 800700c:	e113      	b.n	8007236 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007014:	2b02      	cmp	r3, #2
 8007016:	d002      	beq.n	800701e <USBD_StdEPReq+0x7e>
 8007018:	2b03      	cmp	r3, #3
 800701a:	d015      	beq.n	8007048 <USBD_StdEPReq+0xa8>
 800701c:	e02b      	b.n	8007076 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800701e:	7bbb      	ldrb	r3, [r7, #14]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00c      	beq.n	800703e <USBD_StdEPReq+0x9e>
 8007024:	7bbb      	ldrb	r3, [r7, #14]
 8007026:	2b80      	cmp	r3, #128	; 0x80
 8007028:	d009      	beq.n	800703e <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800702a:	7bbb      	ldrb	r3, [r7, #14]
 800702c:	4619      	mov	r1, r3
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f001 ff62 	bl	8008ef8 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007034:	2180      	movs	r1, #128	; 0x80
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f001 ff5e 	bl	8008ef8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800703c:	e020      	b.n	8007080 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800703e:	6839      	ldr	r1, [r7, #0]
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 fbc8 	bl	80077d6 <USBD_CtlError>
        break;
 8007046:	e01b      	b.n	8007080 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	885b      	ldrh	r3, [r3, #2]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10e      	bne.n	800706e <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007050:	7bbb      	ldrb	r3, [r7, #14]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00b      	beq.n	800706e <USBD_StdEPReq+0xce>
 8007056:	7bbb      	ldrb	r3, [r7, #14]
 8007058:	2b80      	cmp	r3, #128	; 0x80
 800705a:	d008      	beq.n	800706e <USBD_StdEPReq+0xce>
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	88db      	ldrh	r3, [r3, #6]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d104      	bne.n	800706e <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8007064:	7bbb      	ldrb	r3, [r7, #14]
 8007066:	4619      	mov	r1, r3
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f001 ff45 	bl	8008ef8 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 fc7a 	bl	8007968 <USBD_CtlSendStatus>

        break;
 8007074:	e004      	b.n	8007080 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8007076:	6839      	ldr	r1, [r7, #0]
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 fbac 	bl	80077d6 <USBD_CtlError>
        break;
 800707e:	bf00      	nop
      }
      break;
 8007080:	e0de      	b.n	8007240 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007088:	2b02      	cmp	r3, #2
 800708a:	d002      	beq.n	8007092 <USBD_StdEPReq+0xf2>
 800708c:	2b03      	cmp	r3, #3
 800708e:	d015      	beq.n	80070bc <USBD_StdEPReq+0x11c>
 8007090:	e026      	b.n	80070e0 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007092:	7bbb      	ldrb	r3, [r7, #14]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d00c      	beq.n	80070b2 <USBD_StdEPReq+0x112>
 8007098:	7bbb      	ldrb	r3, [r7, #14]
 800709a:	2b80      	cmp	r3, #128	; 0x80
 800709c:	d009      	beq.n	80070b2 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800709e:	7bbb      	ldrb	r3, [r7, #14]
 80070a0:	4619      	mov	r1, r3
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f001 ff28 	bl	8008ef8 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80070a8:	2180      	movs	r1, #128	; 0x80
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f001 ff24 	bl	8008ef8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80070b0:	e01c      	b.n	80070ec <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 80070b2:	6839      	ldr	r1, [r7, #0]
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 fb8e 	bl	80077d6 <USBD_CtlError>
        break;
 80070ba:	e017      	b.n	80070ec <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	885b      	ldrh	r3, [r3, #2]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d112      	bne.n	80070ea <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80070c4:	7bbb      	ldrb	r3, [r7, #14]
 80070c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d004      	beq.n	80070d8 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 80070ce:	7bbb      	ldrb	r3, [r7, #14]
 80070d0:	4619      	mov	r1, r3
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f001 ff2f 	bl	8008f36 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 fc45 	bl	8007968 <USBD_CtlSendStatus>
        }
        break;
 80070de:	e004      	b.n	80070ea <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 80070e0:	6839      	ldr	r1, [r7, #0]
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 fb77 	bl	80077d6 <USBD_CtlError>
        break;
 80070e8:	e000      	b.n	80070ec <USBD_StdEPReq+0x14c>
        break;
 80070ea:	bf00      	nop
      }
      break;
 80070ec:	e0a8      	b.n	8007240 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	d002      	beq.n	80070fe <USBD_StdEPReq+0x15e>
 80070f8:	2b03      	cmp	r3, #3
 80070fa:	d031      	beq.n	8007160 <USBD_StdEPReq+0x1c0>
 80070fc:	e095      	b.n	800722a <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070fe:	7bbb      	ldrb	r3, [r7, #14]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d007      	beq.n	8007114 <USBD_StdEPReq+0x174>
 8007104:	7bbb      	ldrb	r3, [r7, #14]
 8007106:	2b80      	cmp	r3, #128	; 0x80
 8007108:	d004      	beq.n	8007114 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800710a:	6839      	ldr	r1, [r7, #0]
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 fb62 	bl	80077d6 <USBD_CtlError>
          break;
 8007112:	e08f      	b.n	8007234 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007114:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007118:	2b00      	cmp	r3, #0
 800711a:	da0b      	bge.n	8007134 <USBD_StdEPReq+0x194>
 800711c:	7bbb      	ldrb	r3, [r7, #14]
 800711e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007122:	4613      	mov	r3, r2
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	4413      	add	r3, r2
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	3310      	adds	r3, #16
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	4413      	add	r3, r2
 8007130:	3304      	adds	r3, #4
 8007132:	e00a      	b.n	800714a <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007134:	7bbb      	ldrb	r3, [r7, #14]
 8007136:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800713a:	4613      	mov	r3, r2
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	4413      	add	r3, r2
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	4413      	add	r3, r2
 800714a:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	2200      	movs	r2, #0
 8007150:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	2202      	movs	r2, #2
 8007156:	4619      	mov	r1, r3
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 fba7 	bl	80078ac <USBD_CtlSendData>
          break;
 800715e:	e069      	b.n	8007234 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8007160:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007164:	2b00      	cmp	r3, #0
 8007166:	da11      	bge.n	800718c <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007168:	7bbb      	ldrb	r3, [r7, #14]
 800716a:	f003 020f 	and.w	r2, r3, #15
 800716e:	6879      	ldr	r1, [r7, #4]
 8007170:	4613      	mov	r3, r2
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	4413      	add	r3, r2
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	440b      	add	r3, r1
 800717a:	3318      	adds	r3, #24
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d117      	bne.n	80071b2 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8007182:	6839      	ldr	r1, [r7, #0]
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 fb26 	bl	80077d6 <USBD_CtlError>
            break;
 800718a:	e053      	b.n	8007234 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800718c:	7bbb      	ldrb	r3, [r7, #14]
 800718e:	f003 020f 	and.w	r2, r3, #15
 8007192:	6879      	ldr	r1, [r7, #4]
 8007194:	4613      	mov	r3, r2
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	4413      	add	r3, r2
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	440b      	add	r3, r1
 800719e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d104      	bne.n	80071b2 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80071a8:	6839      	ldr	r1, [r7, #0]
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 fb13 	bl	80077d6 <USBD_CtlError>
            break;
 80071b0:	e040      	b.n	8007234 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80071b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	da0b      	bge.n	80071d2 <USBD_StdEPReq+0x232>
 80071ba:	7bbb      	ldrb	r3, [r7, #14]
 80071bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071c0:	4613      	mov	r3, r2
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	4413      	add	r3, r2
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	3310      	adds	r3, #16
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	4413      	add	r3, r2
 80071ce:	3304      	adds	r3, #4
 80071d0:	e00a      	b.n	80071e8 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 80071d2:	7bbb      	ldrb	r3, [r7, #14]
 80071d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80071d8:	4613      	mov	r3, r2
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	4413      	add	r3, r2
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	4413      	add	r3, r2
 80071e8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80071ea:	7bbb      	ldrb	r3, [r7, #14]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d002      	beq.n	80071f6 <USBD_StdEPReq+0x256>
 80071f0:	7bbb      	ldrb	r3, [r7, #14]
 80071f2:	2b80      	cmp	r3, #128	; 0x80
 80071f4:	d103      	bne.n	80071fe <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	2200      	movs	r2, #0
 80071fa:	601a      	str	r2, [r3, #0]
 80071fc:	e00e      	b.n	800721c <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80071fe:	7bbb      	ldrb	r3, [r7, #14]
 8007200:	4619      	mov	r1, r3
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f001 feb6 	bl	8008f74 <USBD_LL_IsStallEP>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d003      	beq.n	8007216 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	2201      	movs	r2, #1
 8007212:	601a      	str	r2, [r3, #0]
 8007214:	e002      	b.n	800721c <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	2200      	movs	r2, #0
 800721a:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	2202      	movs	r2, #2
 8007220:	4619      	mov	r1, r3
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 fb42 	bl	80078ac <USBD_CtlSendData>
          break;
 8007228:	e004      	b.n	8007234 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800722a:	6839      	ldr	r1, [r7, #0]
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 fad2 	bl	80077d6 <USBD_CtlError>
        break;
 8007232:	bf00      	nop
      }
      break;
 8007234:	e004      	b.n	8007240 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8007236:	6839      	ldr	r1, [r7, #0]
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 facc 	bl	80077d6 <USBD_CtlError>
      break;
 800723e:	bf00      	nop
    }
    break;
 8007240:	e004      	b.n	800724c <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8007242:	6839      	ldr	r1, [r7, #0]
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 fac6 	bl	80077d6 <USBD_CtlError>
    break;
 800724a:	bf00      	nop
  }

  return ret;
 800724c:	7bfb      	ldrb	r3, [r7, #15]
}
 800724e:	4618      	mov	r0, r3
 8007250:	3710      	adds	r7, #16
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
	...

08007258 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	885b      	ldrh	r3, [r3, #2]
 8007266:	0a1b      	lsrs	r3, r3, #8
 8007268:	b29b      	uxth	r3, r3
 800726a:	3b01      	subs	r3, #1
 800726c:	2b0e      	cmp	r3, #14
 800726e:	f200 80e5 	bhi.w	800743c <USBD_GetDescriptor+0x1e4>
 8007272:	a201      	add	r2, pc, #4	; (adr r2, 8007278 <USBD_GetDescriptor+0x20>)
 8007274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007278:	080072cd 	.word	0x080072cd
 800727c:	080072e5 	.word	0x080072e5
 8007280:	08007325 	.word	0x08007325
 8007284:	0800743d 	.word	0x0800743d
 8007288:	0800743d 	.word	0x0800743d
 800728c:	080073e9 	.word	0x080073e9
 8007290:	0800740f 	.word	0x0800740f
 8007294:	0800743d 	.word	0x0800743d
 8007298:	0800743d 	.word	0x0800743d
 800729c:	0800743d 	.word	0x0800743d
 80072a0:	0800743d 	.word	0x0800743d
 80072a4:	0800743d 	.word	0x0800743d
 80072a8:	0800743d 	.word	0x0800743d
 80072ac:	0800743d 	.word	0x0800743d
 80072b0:	080072b5 	.word	0x080072b5
  {
#if (USBD_LPM_ENABLED == 1U)
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80072ba:	69db      	ldr	r3, [r3, #28]
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	7c12      	ldrb	r2, [r2, #16]
 80072c0:	f107 010a 	add.w	r1, r7, #10
 80072c4:	4610      	mov	r0, r2
 80072c6:	4798      	blx	r3
 80072c8:	60f8      	str	r0, [r7, #12]
    break;
 80072ca:	e0bc      	b.n	8007446 <USBD_GetDescriptor+0x1ee>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	7c12      	ldrb	r2, [r2, #16]
 80072d8:	f107 010a 	add.w	r1, r7, #10
 80072dc:	4610      	mov	r0, r2
 80072de:	4798      	blx	r3
 80072e0:	60f8      	str	r0, [r7, #12]
    break;
 80072e2:	e0b0      	b.n	8007446 <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	7c1b      	ldrb	r3, [r3, #16]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d10d      	bne.n	8007308 <USBD_GetDescriptor+0xb0>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80072f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f4:	f107 020a 	add.w	r2, r7, #10
 80072f8:	4610      	mov	r0, r2
 80072fa:	4798      	blx	r3
 80072fc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	3301      	adds	r3, #1
 8007302:	2202      	movs	r2, #2
 8007304:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007306:	e09e      	b.n	8007446 <USBD_GetDescriptor+0x1ee>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800730e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007310:	f107 020a 	add.w	r2, r7, #10
 8007314:	4610      	mov	r0, r2
 8007316:	4798      	blx	r3
 8007318:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	3301      	adds	r3, #1
 800731e:	2202      	movs	r2, #2
 8007320:	701a      	strb	r2, [r3, #0]
    break;
 8007322:	e090      	b.n	8007446 <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	885b      	ldrh	r3, [r3, #2]
 8007328:	b2db      	uxtb	r3, r3
 800732a:	2b05      	cmp	r3, #5
 800732c:	d856      	bhi.n	80073dc <USBD_GetDescriptor+0x184>
 800732e:	a201      	add	r2, pc, #4	; (adr r2, 8007334 <USBD_GetDescriptor+0xdc>)
 8007330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007334:	0800734d 	.word	0x0800734d
 8007338:	08007365 	.word	0x08007365
 800733c:	0800737d 	.word	0x0800737d
 8007340:	08007395 	.word	0x08007395
 8007344:	080073ad 	.word	0x080073ad
 8007348:	080073c5 	.word	0x080073c5
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	7c12      	ldrb	r2, [r2, #16]
 8007358:	f107 010a 	add.w	r1, r7, #10
 800735c:	4610      	mov	r0, r2
 800735e:	4798      	blx	r3
 8007360:	60f8      	str	r0, [r7, #12]
      break;
 8007362:	e040      	b.n	80073e6 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	7c12      	ldrb	r2, [r2, #16]
 8007370:	f107 010a 	add.w	r1, r7, #10
 8007374:	4610      	mov	r0, r2
 8007376:	4798      	blx	r3
 8007378:	60f8      	str	r0, [r7, #12]
      break;
 800737a:	e034      	b.n	80073e6 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	7c12      	ldrb	r2, [r2, #16]
 8007388:	f107 010a 	add.w	r1, r7, #10
 800738c:	4610      	mov	r0, r2
 800738e:	4798      	blx	r3
 8007390:	60f8      	str	r0, [r7, #12]
      break;
 8007392:	e028      	b.n	80073e6 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	7c12      	ldrb	r2, [r2, #16]
 80073a0:	f107 010a 	add.w	r1, r7, #10
 80073a4:	4610      	mov	r0, r2
 80073a6:	4798      	blx	r3
 80073a8:	60f8      	str	r0, [r7, #12]
      break;
 80073aa:	e01c      	b.n	80073e6 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80073b2:	695b      	ldr	r3, [r3, #20]
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	7c12      	ldrb	r2, [r2, #16]
 80073b8:	f107 010a 	add.w	r1, r7, #10
 80073bc:	4610      	mov	r0, r2
 80073be:	4798      	blx	r3
 80073c0:	60f8      	str	r0, [r7, #12]
      break;
 80073c2:	e010      	b.n	80073e6 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80073ca:	699b      	ldr	r3, [r3, #24]
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	7c12      	ldrb	r2, [r2, #16]
 80073d0:	f107 010a 	add.w	r1, r7, #10
 80073d4:	4610      	mov	r0, r2
 80073d6:	4798      	blx	r3
 80073d8:	60f8      	str	r0, [r7, #12]
      break;
 80073da:	e004      	b.n	80073e6 <USBD_GetDescriptor+0x18e>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 80073dc:	6839      	ldr	r1, [r7, #0]
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 f9f9 	bl	80077d6 <USBD_CtlError>
      return;
 80073e4:	e04b      	b.n	800747e <USBD_GetDescriptor+0x226>
#endif
    }
    break;
 80073e6:	e02e      	b.n	8007446 <USBD_GetDescriptor+0x1ee>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	7c1b      	ldrb	r3, [r3, #16]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d109      	bne.n	8007404 <USBD_GetDescriptor+0x1ac>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80073f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073f8:	f107 020a 	add.w	r2, r7, #10
 80073fc:	4610      	mov	r0, r2
 80073fe:	4798      	blx	r3
 8007400:	60f8      	str	r0, [r7, #12]
      break;
 8007402:	e020      	b.n	8007446 <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007404:	6839      	ldr	r1, [r7, #0]
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 f9e5 	bl	80077d6 <USBD_CtlError>
      return;
 800740c:	e037      	b.n	800747e <USBD_GetDescriptor+0x226>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	7c1b      	ldrb	r3, [r3, #16]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d10d      	bne.n	8007432 <USBD_GetDescriptor+0x1da>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800741c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800741e:	f107 020a 	add.w	r2, r7, #10
 8007422:	4610      	mov	r0, r2
 8007424:	4798      	blx	r3
 8007426:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	3301      	adds	r3, #1
 800742c:	2207      	movs	r2, #7
 800742e:	701a      	strb	r2, [r3, #0]
      break;
 8007430:	e009      	b.n	8007446 <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007432:	6839      	ldr	r1, [r7, #0]
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 f9ce 	bl	80077d6 <USBD_CtlError>
      return;
 800743a:	e020      	b.n	800747e <USBD_GetDescriptor+0x226>
    }

  default:
     USBD_CtlError(pdev , req);
 800743c:	6839      	ldr	r1, [r7, #0]
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 f9c9 	bl	80077d6 <USBD_CtlError>
    return;
 8007444:	e01b      	b.n	800747e <USBD_GetDescriptor+0x226>
  }

  if((len != 0U) && (req->wLength != 0U))
 8007446:	897b      	ldrh	r3, [r7, #10]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d011      	beq.n	8007470 <USBD_GetDescriptor+0x218>
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	88db      	ldrh	r3, [r3, #6]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d00d      	beq.n	8007470 <USBD_GetDescriptor+0x218>
  {

    len = MIN(len, req->wLength);
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	88da      	ldrh	r2, [r3, #6]
 8007458:	897b      	ldrh	r3, [r7, #10]
 800745a:	4293      	cmp	r3, r2
 800745c:	bf28      	it	cs
 800745e:	4613      	movcs	r3, r2
 8007460:	b29b      	uxth	r3, r3
 8007462:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8007464:	897b      	ldrh	r3, [r7, #10]
 8007466:	461a      	mov	r2, r3
 8007468:	68f9      	ldr	r1, [r7, #12]
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 fa1e 	bl	80078ac <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	88db      	ldrh	r3, [r3, #6]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d102      	bne.n	800747e <USBD_GetDescriptor+0x226>
  {
   USBD_CtlSendStatus(pdev);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 fa75 	bl	8007968 <USBD_CtlSendStatus>
  }
}
 800747e:	3710      	adds	r7, #16
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	889b      	ldrh	r3, [r3, #4]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d130      	bne.n	80074f8 <USBD_SetAddress+0x74>
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	88db      	ldrh	r3, [r3, #6]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d12c      	bne.n	80074f8 <USBD_SetAddress+0x74>
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	885b      	ldrh	r3, [r3, #2]
 80074a2:	2b7f      	cmp	r3, #127	; 0x7f
 80074a4:	d828      	bhi.n	80074f8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	885b      	ldrh	r3, [r3, #2]
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80074b8:	2b03      	cmp	r3, #3
 80074ba:	d104      	bne.n	80074c6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 80074bc:	6839      	ldr	r1, [r7, #0]
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 f989 	bl	80077d6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074c4:	e01c      	b.n	8007500 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	7bfa      	ldrb	r2, [r7, #15]
 80074ca:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80074ce:	7bfb      	ldrb	r3, [r7, #15]
 80074d0:	4619      	mov	r1, r3
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f001 fd7a 	bl	8008fcc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 fa45 	bl	8007968 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80074de:	7bfb      	ldrb	r3, [r7, #15]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d004      	beq.n	80074ee <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2202      	movs	r2, #2
 80074e8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074ec:	e008      	b.n	8007500 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2201      	movs	r2, #1
 80074f2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074f6:	e003      	b.n	8007500 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80074f8:	6839      	ldr	r1, [r7, #0]
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 f96b 	bl	80077d6 <USBD_CtlError>
  }
}
 8007500:	bf00      	nop
 8007502:	3710      	adds	r7, #16
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	885b      	ldrh	r3, [r3, #2]
 8007516:	b2da      	uxtb	r2, r3
 8007518:	4b41      	ldr	r3, [pc, #260]	; (8007620 <USBD_SetConfig+0x118>)
 800751a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800751c:	4b40      	ldr	r3, [pc, #256]	; (8007620 <USBD_SetConfig+0x118>)
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	2b01      	cmp	r3, #1
 8007522:	d904      	bls.n	800752e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007524:	6839      	ldr	r1, [r7, #0]
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 f955 	bl	80077d6 <USBD_CtlError>
 800752c:	e075      	b.n	800761a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007534:	2b02      	cmp	r3, #2
 8007536:	d002      	beq.n	800753e <USBD_SetConfig+0x36>
 8007538:	2b03      	cmp	r3, #3
 800753a:	d023      	beq.n	8007584 <USBD_SetConfig+0x7c>
 800753c:	e062      	b.n	8007604 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800753e:	4b38      	ldr	r3, [pc, #224]	; (8007620 <USBD_SetConfig+0x118>)
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d01a      	beq.n	800757c <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8007546:	4b36      	ldr	r3, [pc, #216]	; (8007620 <USBD_SetConfig+0x118>)
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	461a      	mov	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2203      	movs	r2, #3
 8007554:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007558:	4b31      	ldr	r3, [pc, #196]	; (8007620 <USBD_SetConfig+0x118>)
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	4619      	mov	r1, r3
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f7ff fa0d 	bl	800697e <USBD_SetClassConfig>
 8007564:	4603      	mov	r3, r0
 8007566:	2b02      	cmp	r3, #2
 8007568:	d104      	bne.n	8007574 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800756a:	6839      	ldr	r1, [r7, #0]
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 f932 	bl	80077d6 <USBD_CtlError>
          return;
 8007572:	e052      	b.n	800761a <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 f9f7 	bl	8007968 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800757a:	e04e      	b.n	800761a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 f9f3 	bl	8007968 <USBD_CtlSendStatus>
      break;
 8007582:	e04a      	b.n	800761a <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007584:	4b26      	ldr	r3, [pc, #152]	; (8007620 <USBD_SetConfig+0x118>)
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d112      	bne.n	80075b2 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2202      	movs	r2, #2
 8007590:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8007594:	4b22      	ldr	r3, [pc, #136]	; (8007620 <USBD_SetConfig+0x118>)
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	461a      	mov	r2, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800759e:	4b20      	ldr	r3, [pc, #128]	; (8007620 <USBD_SetConfig+0x118>)
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	4619      	mov	r1, r3
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f7ff fa09 	bl	80069bc <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 f9dc 	bl	8007968 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80075b0:	e033      	b.n	800761a <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 80075b2:	4b1b      	ldr	r3, [pc, #108]	; (8007620 <USBD_SetConfig+0x118>)
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	461a      	mov	r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d01d      	beq.n	80075fc <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	4619      	mov	r1, r3
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f7ff f9f7 	bl	80069bc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80075ce:	4b14      	ldr	r3, [pc, #80]	; (8007620 <USBD_SetConfig+0x118>)
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	461a      	mov	r2, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80075d8:	4b11      	ldr	r3, [pc, #68]	; (8007620 <USBD_SetConfig+0x118>)
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	4619      	mov	r1, r3
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f7ff f9cd 	bl	800697e <USBD_SetClassConfig>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b02      	cmp	r3, #2
 80075e8:	d104      	bne.n	80075f4 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 80075ea:	6839      	ldr	r1, [r7, #0]
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 f8f2 	bl	80077d6 <USBD_CtlError>
          return;
 80075f2:	e012      	b.n	800761a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 f9b7 	bl	8007968 <USBD_CtlSendStatus>
      break;
 80075fa:	e00e      	b.n	800761a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 f9b3 	bl	8007968 <USBD_CtlSendStatus>
      break;
 8007602:	e00a      	b.n	800761a <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8007604:	6839      	ldr	r1, [r7, #0]
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 f8e5 	bl	80077d6 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800760c:	4b04      	ldr	r3, [pc, #16]	; (8007620 <USBD_SetConfig+0x118>)
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	4619      	mov	r1, r3
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f7ff f9d2 	bl	80069bc <USBD_ClrClassConfig>
      break;
 8007618:	bf00      	nop
    }
  }
}
 800761a:	3708      	adds	r7, #8
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	2000020c 	.word	0x2000020c

08007624 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	88db      	ldrh	r3, [r3, #6]
 8007632:	2b01      	cmp	r3, #1
 8007634:	d004      	beq.n	8007640 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8007636:	6839      	ldr	r1, [r7, #0]
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 f8cc 	bl	80077d6 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800763e:	e021      	b.n	8007684 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007646:	2b01      	cmp	r3, #1
 8007648:	db17      	blt.n	800767a <USBD_GetConfig+0x56>
 800764a:	2b02      	cmp	r3, #2
 800764c:	dd02      	ble.n	8007654 <USBD_GetConfig+0x30>
 800764e:	2b03      	cmp	r3, #3
 8007650:	d00b      	beq.n	800766a <USBD_GetConfig+0x46>
 8007652:	e012      	b.n	800767a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	3308      	adds	r3, #8
 800765e:	2201      	movs	r2, #1
 8007660:	4619      	mov	r1, r3
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 f922 	bl	80078ac <USBD_CtlSendData>
      break;
 8007668:	e00c      	b.n	8007684 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	3304      	adds	r3, #4
 800766e:	2201      	movs	r2, #1
 8007670:	4619      	mov	r1, r3
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 f91a 	bl	80078ac <USBD_CtlSendData>
      break;
 8007678:	e004      	b.n	8007684 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800767a:	6839      	ldr	r1, [r7, #0]
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 f8aa 	bl	80077d6 <USBD_CtlError>
      break;
 8007682:	bf00      	nop
}
 8007684:	bf00      	nop
 8007686:	3708      	adds	r7, #8
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b082      	sub	sp, #8
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800769c:	3b01      	subs	r3, #1
 800769e:	2b02      	cmp	r3, #2
 80076a0:	d81e      	bhi.n	80076e0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	88db      	ldrh	r3, [r3, #6]
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	d004      	beq.n	80076b4 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80076aa:	6839      	ldr	r1, [r7, #0]
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 f892 	bl	80077d6 <USBD_CtlError>
      break;
 80076b2:	e01a      	b.n	80076ea <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d005      	beq.n	80076d0 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	f043 0202 	orr.w	r2, r3, #2
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	330c      	adds	r3, #12
 80076d4:	2202      	movs	r2, #2
 80076d6:	4619      	mov	r1, r3
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 f8e7 	bl	80078ac <USBD_CtlSendData>
    break;
 80076de:	e004      	b.n	80076ea <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 80076e0:	6839      	ldr	r1, [r7, #0]
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 f877 	bl	80077d6 <USBD_CtlError>
    break;
 80076e8:	bf00      	nop
  }
}
 80076ea:	bf00      	nop
 80076ec:	3708      	adds	r7, #8
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b082      	sub	sp, #8
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
 80076fa:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	885b      	ldrh	r3, [r3, #2]
 8007700:	2b01      	cmp	r3, #1
 8007702:	d106      	bne.n	8007712 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 f92b 	bl	8007968 <USBD_CtlSendStatus>
  }

}
 8007712:	bf00      	nop
 8007714:	3708      	adds	r7, #8
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}

0800771a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800771a:	b580      	push	{r7, lr}
 800771c:	b082      	sub	sp, #8
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
 8007722:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800772a:	3b01      	subs	r3, #1
 800772c:	2b02      	cmp	r3, #2
 800772e:	d80b      	bhi.n	8007748 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	885b      	ldrh	r3, [r3, #2]
 8007734:	2b01      	cmp	r3, #1
 8007736:	d10c      	bne.n	8007752 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 f911 	bl	8007968 <USBD_CtlSendStatus>
    }
    break;
 8007746:	e004      	b.n	8007752 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8007748:	6839      	ldr	r1, [r7, #0]
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 f843 	bl	80077d6 <USBD_CtlError>
    break;
 8007750:	e000      	b.n	8007754 <USBD_ClrFeature+0x3a>
    break;
 8007752:	bf00      	nop
  }
}
 8007754:	bf00      	nop
 8007756:	3708      	adds	r7, #8
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	781a      	ldrb	r2, [r3, #0]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	785a      	ldrb	r2, [r3, #1]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	3302      	adds	r3, #2
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	b29a      	uxth	r2, r3
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	3303      	adds	r3, #3
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	b29b      	uxth	r3, r3
 8007786:	021b      	lsls	r3, r3, #8
 8007788:	b29b      	uxth	r3, r3
 800778a:	4413      	add	r3, r2
 800778c:	b29a      	uxth	r2, r3
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	3304      	adds	r3, #4
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	b29a      	uxth	r2, r3
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	3305      	adds	r3, #5
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	021b      	lsls	r3, r3, #8
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	4413      	add	r3, r2
 80077a8:	b29a      	uxth	r2, r3
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	3306      	adds	r3, #6
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	3307      	adds	r3, #7
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	b29b      	uxth	r3, r3
 80077be:	021b      	lsls	r3, r3, #8
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	4413      	add	r3, r2
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	80da      	strh	r2, [r3, #6]

}
 80077ca:	bf00      	nop
 80077cc:	370c      	adds	r7, #12
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr

080077d6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80077d6:	b580      	push	{r7, lr}
 80077d8:	b082      	sub	sp, #8
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
 80077de:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 80077e0:	2180      	movs	r1, #128	; 0x80
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f001 fb88 	bl	8008ef8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80077e8:	2100      	movs	r1, #0
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f001 fb84 	bl	8008ef8 <USBD_LL_StallEP>
}
 80077f0:	bf00      	nop
 80077f2:	3708      	adds	r7, #8
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b086      	sub	sp, #24
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007804:	2300      	movs	r3, #0
 8007806:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d032      	beq.n	8007874 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800780e:	68f8      	ldr	r0, [r7, #12]
 8007810:	f000 f834 	bl	800787c <USBD_GetLen>
 8007814:	4603      	mov	r3, r0
 8007816:	3301      	adds	r3, #1
 8007818:	b29b      	uxth	r3, r3
 800781a:	005b      	lsls	r3, r3, #1
 800781c:	b29a      	uxth	r2, r3
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007822:	7dfb      	ldrb	r3, [r7, #23]
 8007824:	1c5a      	adds	r2, r3, #1
 8007826:	75fa      	strb	r2, [r7, #23]
 8007828:	461a      	mov	r2, r3
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	4413      	add	r3, r2
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	7812      	ldrb	r2, [r2, #0]
 8007832:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007834:	7dfb      	ldrb	r3, [r7, #23]
 8007836:	1c5a      	adds	r2, r3, #1
 8007838:	75fa      	strb	r2, [r7, #23]
 800783a:	461a      	mov	r2, r3
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	4413      	add	r3, r2
 8007840:	2203      	movs	r2, #3
 8007842:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007844:	e012      	b.n	800786c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	1c5a      	adds	r2, r3, #1
 800784a:	60fa      	str	r2, [r7, #12]
 800784c:	7dfa      	ldrb	r2, [r7, #23]
 800784e:	1c51      	adds	r1, r2, #1
 8007850:	75f9      	strb	r1, [r7, #23]
 8007852:	4611      	mov	r1, r2
 8007854:	68ba      	ldr	r2, [r7, #8]
 8007856:	440a      	add	r2, r1
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800785c:	7dfb      	ldrb	r3, [r7, #23]
 800785e:	1c5a      	adds	r2, r3, #1
 8007860:	75fa      	strb	r2, [r7, #23]
 8007862:	461a      	mov	r2, r3
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	4413      	add	r3, r2
 8007868:	2200      	movs	r2, #0
 800786a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d1e8      	bne.n	8007846 <USBD_GetString+0x4e>
    }
  }
}
 8007874:	bf00      	nop
 8007876:	3718      	adds	r7, #24
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800787c:	b480      	push	{r7}
 800787e:	b085      	sub	sp, #20
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8007884:	2300      	movs	r3, #0
 8007886:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8007888:	e005      	b.n	8007896 <USBD_GetLen+0x1a>
    {
        len++;
 800788a:	7bfb      	ldrb	r3, [r7, #15]
 800788c:	3301      	adds	r3, #1
 800788e:	73fb      	strb	r3, [r7, #15]
        buf++;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	3301      	adds	r3, #1
 8007894:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1f5      	bne.n	800788a <USBD_GetLen+0xe>
    }

    return len;
 800789e:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3714      	adds	r7, #20
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	4613      	mov	r3, r2
 80078b8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2202      	movs	r2, #2
 80078be:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 80078c2:	88fa      	ldrh	r2, [r7, #6]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80078c8:	88fa      	ldrh	r2, [r7, #6]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80078ce:	88fb      	ldrh	r3, [r7, #6]
 80078d0:	68ba      	ldr	r2, [r7, #8]
 80078d2:	2100      	movs	r1, #0
 80078d4:	68f8      	ldr	r0, [r7, #12]
 80078d6:	f001 fb98 	bl	800900a <USBD_LL_Transmit>

  return USBD_OK;
 80078da:	2300      	movs	r3, #0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3710      	adds	r7, #16
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	4613      	mov	r3, r2
 80078f0:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80078f2:	88fb      	ldrh	r3, [r7, #6]
 80078f4:	68ba      	ldr	r2, [r7, #8]
 80078f6:	2100      	movs	r1, #0
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	f001 fb86 	bl	800900a <USBD_LL_Transmit>

  return USBD_OK;
 80078fe:	2300      	movs	r3, #0
}
 8007900:	4618      	mov	r0, r3
 8007902:	3710      	adds	r7, #16
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	4613      	mov	r3, r2
 8007914:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2203      	movs	r2, #3
 800791a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800791e:	88fa      	ldrh	r2, [r7, #6]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8007926:	88fa      	ldrh	r2, [r7, #6]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800792e:	88fb      	ldrh	r3, [r7, #6]
 8007930:	68ba      	ldr	r2, [r7, #8]
 8007932:	2100      	movs	r1, #0
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f001 fb8b 	bl	8009050 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800793a:	2300      	movs	r3, #0
}
 800793c:	4618      	mov	r0, r3
 800793e:	3710      	adds	r7, #16
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	4613      	mov	r3, r2
 8007950:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007952:	88fb      	ldrh	r3, [r7, #6]
 8007954:	68ba      	ldr	r2, [r7, #8]
 8007956:	2100      	movs	r1, #0
 8007958:	68f8      	ldr	r0, [r7, #12]
 800795a:	f001 fb79 	bl	8009050 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	3710      	adds	r7, #16
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2204      	movs	r2, #4
 8007974:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007978:	2300      	movs	r3, #0
 800797a:	2200      	movs	r2, #0
 800797c:	2100      	movs	r1, #0
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f001 fb43 	bl	800900a <USBD_LL_Transmit>

  return USBD_OK;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3708      	adds	r7, #8
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b082      	sub	sp, #8
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2205      	movs	r2, #5
 800799a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800799e:	2300      	movs	r3, #0
 80079a0:	2200      	movs	r2, #0
 80079a2:	2100      	movs	r1, #0
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f001 fb53 	bl	8009050 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80079aa:	2300      	movs	r3, #0
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3708      	adds	r7, #8
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 80079b8:	4b16      	ldr	r3, [pc, #88]	; (8007a14 <MX_CAN1_Init+0x60>)
 80079ba:	4a17      	ldr	r2, [pc, #92]	; (8007a18 <MX_CAN1_Init+0x64>)
 80079bc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80079be:	4b15      	ldr	r3, [pc, #84]	; (8007a14 <MX_CAN1_Init+0x60>)
 80079c0:	2210      	movs	r2, #16
 80079c2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80079c4:	4b13      	ldr	r3, [pc, #76]	; (8007a14 <MX_CAN1_Init+0x60>)
 80079c6:	2200      	movs	r2, #0
 80079c8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80079ca:	4b12      	ldr	r3, [pc, #72]	; (8007a14 <MX_CAN1_Init+0x60>)
 80079cc:	2200      	movs	r2, #0
 80079ce:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80079d0:	4b10      	ldr	r3, [pc, #64]	; (8007a14 <MX_CAN1_Init+0x60>)
 80079d2:	2200      	movs	r2, #0
 80079d4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80079d6:	4b0f      	ldr	r3, [pc, #60]	; (8007a14 <MX_CAN1_Init+0x60>)
 80079d8:	2200      	movs	r2, #0
 80079da:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80079dc:	4b0d      	ldr	r3, [pc, #52]	; (8007a14 <MX_CAN1_Init+0x60>)
 80079de:	2200      	movs	r2, #0
 80079e0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80079e2:	4b0c      	ldr	r3, [pc, #48]	; (8007a14 <MX_CAN1_Init+0x60>)
 80079e4:	2200      	movs	r2, #0
 80079e6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80079e8:	4b0a      	ldr	r3, [pc, #40]	; (8007a14 <MX_CAN1_Init+0x60>)
 80079ea:	2200      	movs	r2, #0
 80079ec:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80079ee:	4b09      	ldr	r3, [pc, #36]	; (8007a14 <MX_CAN1_Init+0x60>)
 80079f0:	2200      	movs	r2, #0
 80079f2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80079f4:	4b07      	ldr	r3, [pc, #28]	; (8007a14 <MX_CAN1_Init+0x60>)
 80079f6:	2200      	movs	r2, #0
 80079f8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80079fa:	4b06      	ldr	r3, [pc, #24]	; (8007a14 <MX_CAN1_Init+0x60>)
 80079fc:	2200      	movs	r2, #0
 80079fe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8007a00:	4804      	ldr	r0, [pc, #16]	; (8007a14 <MX_CAN1_Init+0x60>)
 8007a02:	f7f8 fe13 	bl	800062c <HAL_CAN_Init>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d001      	beq.n	8007a10 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8007a0c:	f000 fa38 	bl	8007e80 <Error_Handler>
  }

}
 8007a10:	bf00      	nop
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	20001a40 	.word	0x20001a40
 8007a18:	40006400 	.word	0x40006400

08007a1c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b08a      	sub	sp, #40	; 0x28
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a24:	f107 0314 	add.w	r3, r7, #20
 8007a28:	2200      	movs	r2, #0
 8007a2a:	601a      	str	r2, [r3, #0]
 8007a2c:	605a      	str	r2, [r3, #4]
 8007a2e:	609a      	str	r2, [r3, #8]
 8007a30:	60da      	str	r2, [r3, #12]
 8007a32:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a29      	ldr	r2, [pc, #164]	; (8007ae0 <HAL_CAN_MspInit+0xc4>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d14c      	bne.n	8007ad8 <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8007a3e:	2300      	movs	r3, #0
 8007a40:	613b      	str	r3, [r7, #16]
 8007a42:	4b28      	ldr	r3, [pc, #160]	; (8007ae4 <HAL_CAN_MspInit+0xc8>)
 8007a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a46:	4a27      	ldr	r2, [pc, #156]	; (8007ae4 <HAL_CAN_MspInit+0xc8>)
 8007a48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8007a4e:	4b25      	ldr	r3, [pc, #148]	; (8007ae4 <HAL_CAN_MspInit+0xc8>)
 8007a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a56:	613b      	str	r3, [r7, #16]
 8007a58:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	60fb      	str	r3, [r7, #12]
 8007a5e:	4b21      	ldr	r3, [pc, #132]	; (8007ae4 <HAL_CAN_MspInit+0xc8>)
 8007a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a62:	4a20      	ldr	r2, [pc, #128]	; (8007ae4 <HAL_CAN_MspInit+0xc8>)
 8007a64:	f043 0302 	orr.w	r3, r3, #2
 8007a68:	6313      	str	r3, [r2, #48]	; 0x30
 8007a6a:	4b1e      	ldr	r3, [pc, #120]	; (8007ae4 <HAL_CAN_MspInit+0xc8>)
 8007a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a6e:	f003 0302 	and.w	r3, r3, #2
 8007a72:	60fb      	str	r3, [r7, #12]
 8007a74:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8007a76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a7c:	2302      	movs	r3, #2
 8007a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a80:	2300      	movs	r3, #0
 8007a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a84:	2303      	movs	r3, #3
 8007a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8007a88:	2309      	movs	r3, #9
 8007a8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a8c:	f107 0314 	add.w	r3, r7, #20
 8007a90:	4619      	mov	r1, r3
 8007a92:	4815      	ldr	r0, [pc, #84]	; (8007ae8 <HAL_CAN_MspInit+0xcc>)
 8007a94:	f7f9 fda2 	bl	80015dc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8007a98:	2200      	movs	r2, #0
 8007a9a:	2100      	movs	r1, #0
 8007a9c:	2013      	movs	r0, #19
 8007a9e:	f7f9 f9ce 	bl	8000e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8007aa2:	2013      	movs	r0, #19
 8007aa4:	f7f9 f9e7 	bl	8000e76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	2100      	movs	r1, #0
 8007aac:	2014      	movs	r0, #20
 8007aae:	f7f9 f9c6 	bl	8000e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8007ab2:	2014      	movs	r0, #20
 8007ab4:	f7f9 f9df 	bl	8000e76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8007ab8:	2200      	movs	r2, #0
 8007aba:	2100      	movs	r1, #0
 8007abc:	2015      	movs	r0, #21
 8007abe:	f7f9 f9be 	bl	8000e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8007ac2:	2015      	movs	r0, #21
 8007ac4:	f7f9 f9d7 	bl	8000e76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8007ac8:	2200      	movs	r2, #0
 8007aca:	2100      	movs	r1, #0
 8007acc:	2016      	movs	r0, #22
 8007ace:	f7f9 f9b6 	bl	8000e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8007ad2:	2016      	movs	r0, #22
 8007ad4:	f7f9 f9cf 	bl	8000e76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8007ad8:	bf00      	nop
 8007ada:	3728      	adds	r7, #40	; 0x28
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	40006400 	.word	0x40006400
 8007ae4:	40023800 	.word	0x40023800
 8007ae8:	40020400 	.word	0x40020400

08007aec <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007af2:	2300      	movs	r3, #0
 8007af4:	607b      	str	r3, [r7, #4]
 8007af6:	4b27      	ldr	r3, [pc, #156]	; (8007b94 <MX_DMA_Init+0xa8>)
 8007af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007afa:	4a26      	ldr	r2, [pc, #152]	; (8007b94 <MX_DMA_Init+0xa8>)
 8007afc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b00:	6313      	str	r3, [r2, #48]	; 0x30
 8007b02:	4b24      	ldr	r3, [pc, #144]	; (8007b94 <MX_DMA_Init+0xa8>)
 8007b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b0a:	607b      	str	r3, [r7, #4]
 8007b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8007b0e:	2300      	movs	r3, #0
 8007b10:	603b      	str	r3, [r7, #0]
 8007b12:	4b20      	ldr	r3, [pc, #128]	; (8007b94 <MX_DMA_Init+0xa8>)
 8007b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b16:	4a1f      	ldr	r2, [pc, #124]	; (8007b94 <MX_DMA_Init+0xa8>)
 8007b18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8007b1e:	4b1d      	ldr	r3, [pc, #116]	; (8007b94 <MX_DMA_Init+0xa8>)
 8007b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b26:	603b      	str	r3, [r7, #0]
 8007b28:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	2100      	movs	r1, #0
 8007b2e:	200c      	movs	r0, #12
 8007b30:	f7f9 f985 	bl	8000e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8007b34:	200c      	movs	r0, #12
 8007b36:	f7f9 f99e 	bl	8000e76 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	2100      	movs	r1, #0
 8007b3e:	200e      	movs	r0, #14
 8007b40:	f7f9 f97d 	bl	8000e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8007b44:	200e      	movs	r0, #14
 8007b46:	f7f9 f996 	bl	8000e76 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	2100      	movs	r1, #0
 8007b4e:	2010      	movs	r0, #16
 8007b50:	f7f9 f975 	bl	8000e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8007b54:	2010      	movs	r0, #16
 8007b56:	f7f9 f98e 	bl	8000e76 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	2100      	movs	r1, #0
 8007b5e:	2011      	movs	r0, #17
 8007b60:	f7f9 f96d 	bl	8000e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8007b64:	2011      	movs	r0, #17
 8007b66:	f7f9 f986 	bl	8000e76 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	2100      	movs	r1, #0
 8007b6e:	203a      	movs	r0, #58	; 0x3a
 8007b70:	f7f9 f965 	bl	8000e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8007b74:	203a      	movs	r0, #58	; 0x3a
 8007b76:	f7f9 f97e 	bl	8000e76 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	2046      	movs	r0, #70	; 0x46
 8007b80:	f7f9 f95d 	bl	8000e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8007b84:	2046      	movs	r0, #70	; 0x46
 8007b86:	f7f9 f976 	bl	8000e76 <HAL_NVIC_EnableIRQ>

}
 8007b8a:	bf00      	nop
 8007b8c:	3708      	adds	r7, #8
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	40023800 	.word	0x40023800

08007b98 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b08a      	sub	sp, #40	; 0x28
 8007b9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b9e:	f107 0314 	add.w	r3, r7, #20
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	601a      	str	r2, [r3, #0]
 8007ba6:	605a      	str	r2, [r3, #4]
 8007ba8:	609a      	str	r2, [r3, #8]
 8007baa:	60da      	str	r2, [r3, #12]
 8007bac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007bae:	2300      	movs	r3, #0
 8007bb0:	613b      	str	r3, [r7, #16]
 8007bb2:	4b52      	ldr	r3, [pc, #328]	; (8007cfc <MX_GPIO_Init+0x164>)
 8007bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bb6:	4a51      	ldr	r2, [pc, #324]	; (8007cfc <MX_GPIO_Init+0x164>)
 8007bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8007bbe:	4b4f      	ldr	r3, [pc, #316]	; (8007cfc <MX_GPIO_Init+0x164>)
 8007bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bc6:	613b      	str	r3, [r7, #16]
 8007bc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007bca:	2300      	movs	r3, #0
 8007bcc:	60fb      	str	r3, [r7, #12]
 8007bce:	4b4b      	ldr	r3, [pc, #300]	; (8007cfc <MX_GPIO_Init+0x164>)
 8007bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd2:	4a4a      	ldr	r2, [pc, #296]	; (8007cfc <MX_GPIO_Init+0x164>)
 8007bd4:	f043 0304 	orr.w	r3, r3, #4
 8007bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8007bda:	4b48      	ldr	r3, [pc, #288]	; (8007cfc <MX_GPIO_Init+0x164>)
 8007bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bde:	f003 0304 	and.w	r3, r3, #4
 8007be2:	60fb      	str	r3, [r7, #12]
 8007be4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007be6:	2300      	movs	r3, #0
 8007be8:	60bb      	str	r3, [r7, #8]
 8007bea:	4b44      	ldr	r3, [pc, #272]	; (8007cfc <MX_GPIO_Init+0x164>)
 8007bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bee:	4a43      	ldr	r2, [pc, #268]	; (8007cfc <MX_GPIO_Init+0x164>)
 8007bf0:	f043 0301 	orr.w	r3, r3, #1
 8007bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8007bf6:	4b41      	ldr	r3, [pc, #260]	; (8007cfc <MX_GPIO_Init+0x164>)
 8007bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bfa:	f003 0301 	and.w	r3, r3, #1
 8007bfe:	60bb      	str	r3, [r7, #8]
 8007c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c02:	2300      	movs	r3, #0
 8007c04:	607b      	str	r3, [r7, #4]
 8007c06:	4b3d      	ldr	r3, [pc, #244]	; (8007cfc <MX_GPIO_Init+0x164>)
 8007c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c0a:	4a3c      	ldr	r2, [pc, #240]	; (8007cfc <MX_GPIO_Init+0x164>)
 8007c0c:	f043 0302 	orr.w	r3, r3, #2
 8007c10:	6313      	str	r3, [r2, #48]	; 0x30
 8007c12:	4b3a      	ldr	r3, [pc, #232]	; (8007cfc <MX_GPIO_Init+0x164>)
 8007c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c16:	f003 0302 	and.w	r3, r3, #2
 8007c1a:	607b      	str	r3, [r7, #4]
 8007c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007c1e:	2300      	movs	r3, #0
 8007c20:	603b      	str	r3, [r7, #0]
 8007c22:	4b36      	ldr	r3, [pc, #216]	; (8007cfc <MX_GPIO_Init+0x164>)
 8007c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c26:	4a35      	ldr	r2, [pc, #212]	; (8007cfc <MX_GPIO_Init+0x164>)
 8007c28:	f043 0308 	orr.w	r3, r3, #8
 8007c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8007c2e:	4b33      	ldr	r3, [pc, #204]	; (8007cfc <MX_GPIO_Init+0x164>)
 8007c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c32:	f003 0308 	and.w	r3, r3, #8
 8007c36:	603b      	str	r3, [r7, #0]
 8007c38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	21f0      	movs	r1, #240	; 0xf0
 8007c3e:	4830      	ldr	r0, [pc, #192]	; (8007d00 <MX_GPIO_Init+0x168>)
 8007c40:	f7f9 fe5e 	bl	8001900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|nrst_c1_Pin|nrst_c2_Pin 
 8007c44:	2200      	movs	r2, #0
 8007c46:	f241 3130 	movw	r1, #4912	; 0x1330
 8007c4a:	482e      	ldr	r0, [pc, #184]	; (8007d04 <MX_GPIO_Init+0x16c>)
 8007c4c:	f7f9 fe58 	bl	8001900 <HAL_GPIO_WritePin>
                          |power_c1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|max485_dir_Pin|max485_dir_alt_Pin 
 8007c50:	2200      	movs	r2, #0
 8007c52:	f240 411f 	movw	r1, #1055	; 0x41f
 8007c56:	482c      	ldr	r0, [pc, #176]	; (8007d08 <MX_GPIO_Init+0x170>)
 8007c58:	f7f9 fe52 	bl	8001900 <HAL_GPIO_WritePin>
                          |boot_c1_Pin|boot_c2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(power_c2_GPIO_Port, power_c2_Pin, GPIO_PIN_RESET);
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	2104      	movs	r1, #4
 8007c60:	482a      	ldr	r0, [pc, #168]	; (8007d0c <MX_GPIO_Init+0x174>)
 8007c62:	f7f9 fe4d 	bl	8001900 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8007c66:	230f      	movs	r3, #15
 8007c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007c72:	f107 0314 	add.w	r3, r7, #20
 8007c76:	4619      	mov	r1, r3
 8007c78:	4822      	ldr	r0, [pc, #136]	; (8007d04 <MX_GPIO_Init+0x16c>)
 8007c7a:	f7f9 fcaf 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8007c7e:	23f0      	movs	r3, #240	; 0xf0
 8007c80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007c82:	2301      	movs	r3, #1
 8007c84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c86:	2300      	movs	r3, #0
 8007c88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c8e:	f107 0314 	add.w	r3, r7, #20
 8007c92:	4619      	mov	r1, r3
 8007c94:	481a      	ldr	r0, [pc, #104]	; (8007d00 <MX_GPIO_Init+0x168>)
 8007c96:	f7f9 fca1 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PCPin PCPin 
                           PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|nrst_c1_Pin|nrst_c2_Pin 
 8007c9a:	f241 3330 	movw	r3, #4912	; 0x1330
 8007c9e:	617b      	str	r3, [r7, #20]
                          |power_c1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007cac:	f107 0314 	add.w	r3, r7, #20
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	4814      	ldr	r0, [pc, #80]	; (8007d04 <MX_GPIO_Init+0x16c>)
 8007cb4:	f7f9 fc92 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PBPin PBPin 
                           PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|max485_dir_Pin|max485_dir_alt_Pin 
 8007cb8:	f240 431f 	movw	r3, #1055	; 0x41f
 8007cbc:	617b      	str	r3, [r7, #20]
                          |boot_c1_Pin|boot_c2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007cca:	f107 0314 	add.w	r3, r7, #20
 8007cce:	4619      	mov	r1, r3
 8007cd0:	480d      	ldr	r0, [pc, #52]	; (8007d08 <MX_GPIO_Init+0x170>)
 8007cd2:	f7f9 fc83 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = power_c2_Pin;
 8007cd6:	2304      	movs	r3, #4
 8007cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(power_c2_GPIO_Port, &GPIO_InitStruct);
 8007ce6:	f107 0314 	add.w	r3, r7, #20
 8007cea:	4619      	mov	r1, r3
 8007cec:	4807      	ldr	r0, [pc, #28]	; (8007d0c <MX_GPIO_Init+0x174>)
 8007cee:	f7f9 fc75 	bl	80015dc <HAL_GPIO_Init>

}
 8007cf2:	bf00      	nop
 8007cf4:	3728      	adds	r7, #40	; 0x28
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	40023800 	.word	0x40023800
 8007d00:	40020000 	.word	0x40020000
 8007d04:	40020800 	.word	0x40020800
 8007d08:	40020400 	.word	0x40020400
 8007d0c:	40020c00 	.word	0x40020c00

08007d10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007d14:	f7f8 fbf6 	bl	8000504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007d18:	f000 f828 	bl	8007d6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007d1c:	f7ff ff3c 	bl	8007b98 <MX_GPIO_Init>
  MX_DMA_Init();
 8007d20:	f7ff fee4 	bl	8007aec <MX_DMA_Init>
  MX_CAN1_Init();
 8007d24:	f7ff fe46 	bl	80079b4 <MX_CAN1_Init>
  MX_UART4_Init();
 8007d28:	f000 fade 	bl	80082e8 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8007d2c:	f000 fb06 	bl	800833c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8007d30:	f000 fb2e 	bl	8008390 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8007d34:	f000 fb56 	bl	80083e4 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8007d38:	f000 fb7e 	bl	8008438 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 8007d3c:	f000 fa22 	bl	8008184 <MX_TIM6_Init>
  MX_TIM7_Init();
 8007d40:	f000 fa56 	bl	80081f0 <MX_TIM7_Init>
  MX_USB_DEVICE_Init();
 8007d44:	f000 fe22 	bl	800898c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim6);
 8007d48:	4806      	ldr	r0, [pc, #24]	; (8007d64 <main+0x54>)
 8007d4a:	f7fc f846 	bl	8003dda <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8007d4e:	4806      	ldr	r0, [pc, #24]	; (8007d68 <main+0x58>)
 8007d50:	f7fc f843 	bl	8003dda <HAL_TIM_Base_Start_IT>

  init();
 8007d54:	f001 fc86 	bl	8009664 <init>
//
//	    uint8_t sendData = "HELLO WORLD\r\n";
//
//	    CDC_Transmit_FS(sendData, sizeof(sendData));

	    HAL_Delay(500);
 8007d58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007d5c:	f7f8 fc44 	bl	80005e8 <HAL_Delay>
 8007d60:	e7fa      	b.n	8007d58 <main+0x48>
 8007d62:	bf00      	nop
 8007d64:	20001a68 	.word	0x20001a68
 8007d68:	20001aa8 	.word	0x20001aa8

08007d6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b0ac      	sub	sp, #176	; 0xb0
 8007d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007d72:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007d76:	2234      	movs	r2, #52	; 0x34
 8007d78:	2100      	movs	r1, #0
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f001 fce4 	bl	8009748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007d80:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007d84:	2200      	movs	r2, #0
 8007d86:	601a      	str	r2, [r3, #0]
 8007d88:	605a      	str	r2, [r3, #4]
 8007d8a:	609a      	str	r2, [r3, #8]
 8007d8c:	60da      	str	r2, [r3, #12]
 8007d8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007d90:	f107 030c 	add.w	r3, r7, #12
 8007d94:	225c      	movs	r2, #92	; 0x5c
 8007d96:	2100      	movs	r1, #0
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f001 fcd5 	bl	8009748 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007d9e:	2300      	movs	r3, #0
 8007da0:	60bb      	str	r3, [r7, #8]
 8007da2:	4b35      	ldr	r3, [pc, #212]	; (8007e78 <SystemClock_Config+0x10c>)
 8007da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da6:	4a34      	ldr	r2, [pc, #208]	; (8007e78 <SystemClock_Config+0x10c>)
 8007da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dac:	6413      	str	r3, [r2, #64]	; 0x40
 8007dae:	4b32      	ldr	r3, [pc, #200]	; (8007e78 <SystemClock_Config+0x10c>)
 8007db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007db6:	60bb      	str	r3, [r7, #8]
 8007db8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007dba:	2300      	movs	r3, #0
 8007dbc:	607b      	str	r3, [r7, #4]
 8007dbe:	4b2f      	ldr	r3, [pc, #188]	; (8007e7c <SystemClock_Config+0x110>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a2e      	ldr	r2, [pc, #184]	; (8007e7c <SystemClock_Config+0x110>)
 8007dc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007dc8:	6013      	str	r3, [r2, #0]
 8007dca:	4b2c      	ldr	r3, [pc, #176]	; (8007e7c <SystemClock_Config+0x110>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007dd2:	607b      	str	r3, [r7, #4]
 8007dd4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007dda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007dde:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007de2:	2302      	movs	r3, #2
 8007de4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007de8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007dec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 8;
 8007df0:	2308      	movs	r3, #8
 8007df2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8007df6:	23a8      	movs	r3, #168	; 0xa8
 8007df8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007dfc:	2302      	movs	r3, #2
 8007dfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8007e02:	2307      	movs	r3, #7
 8007e04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8007e08:	2302      	movs	r3, #2
 8007e0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007e0e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7fb fd5c 	bl	80038d0 <HAL_RCC_OscConfig>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d001      	beq.n	8007e22 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8007e1e:	f000 f82f 	bl	8007e80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007e22:	230f      	movs	r3, #15
 8007e24:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007e26:	2302      	movs	r3, #2
 8007e28:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007e2e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007e32:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007e34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e38:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007e3a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007e3e:	2105      	movs	r1, #5
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7fa ff67 	bl	8002d14 <HAL_RCC_ClockConfig>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d001      	beq.n	8007e50 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8007e4c:	f000 f818 	bl	8007e80 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8007e50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e54:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8007e56:	2300      	movs	r3, #0
 8007e58:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007e5a:	f107 030c 	add.w	r3, r7, #12
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7fb f86e 	bl	8002f40 <HAL_RCCEx_PeriphCLKConfig>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d001      	beq.n	8007e6e <SystemClock_Config+0x102>
  {
    Error_Handler();
 8007e6a:	f000 f809 	bl	8007e80 <Error_Handler>
  }
}
 8007e6e:	bf00      	nop
 8007e70:	37b0      	adds	r7, #176	; 0xb0
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	40023800 	.word	0x40023800
 8007e7c:	40007000 	.word	0x40007000

08007e80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007e80:	b480      	push	{r7}
 8007e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007e84:	bf00      	nop
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
	...

08007e90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e96:	2300      	movs	r3, #0
 8007e98:	607b      	str	r3, [r7, #4]
 8007e9a:	4b13      	ldr	r3, [pc, #76]	; (8007ee8 <HAL_MspInit+0x58>)
 8007e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e9e:	4a12      	ldr	r2, [pc, #72]	; (8007ee8 <HAL_MspInit+0x58>)
 8007ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8007ea6:	4b10      	ldr	r3, [pc, #64]	; (8007ee8 <HAL_MspInit+0x58>)
 8007ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007eae:	607b      	str	r3, [r7, #4]
 8007eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	603b      	str	r3, [r7, #0]
 8007eb6:	4b0c      	ldr	r3, [pc, #48]	; (8007ee8 <HAL_MspInit+0x58>)
 8007eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eba:	4a0b      	ldr	r2, [pc, #44]	; (8007ee8 <HAL_MspInit+0x58>)
 8007ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8007ec2:	4b09      	ldr	r3, [pc, #36]	; (8007ee8 <HAL_MspInit+0x58>)
 8007ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007eca:	603b      	str	r3, [r7, #0]
 8007ecc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8007ece:	2200      	movs	r2, #0
 8007ed0:	2100      	movs	r1, #0
 8007ed2:	2005      	movs	r0, #5
 8007ed4:	f7f8 ffb3 	bl	8000e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8007ed8:	2005      	movs	r0, #5
 8007eda:	f7f8 ffcc 	bl	8000e76 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007ede:	bf00      	nop
 8007ee0:	3708      	adds	r7, #8
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	40023800 	.word	0x40023800

08007eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007eec:	b480      	push	{r7}
 8007eee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007ef0:	bf00      	nop
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr

08007efa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007efa:	b480      	push	{r7}
 8007efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007efe:	e7fe      	b.n	8007efe <HardFault_Handler+0x4>

08007f00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007f00:	b480      	push	{r7}
 8007f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007f04:	e7fe      	b.n	8007f04 <MemManage_Handler+0x4>

08007f06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007f06:	b480      	push	{r7}
 8007f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007f0a:	e7fe      	b.n	8007f0a <BusFault_Handler+0x4>

08007f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007f10:	e7fe      	b.n	8007f10 <UsageFault_Handler+0x4>

08007f12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007f12:	b480      	push	{r7}
 8007f14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007f16:	bf00      	nop
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007f20:	b480      	push	{r7}
 8007f22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007f24:	bf00      	nop
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr

08007f2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007f2e:	b480      	push	{r7}
 8007f30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007f32:	bf00      	nop
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007f40:	f7f8 fb32 	bl	80005a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007f44:	bf00      	nop
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8007f4c:	bf00      	nop
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr
	...

08007f58 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8007f5c:	4802      	ldr	r0, [pc, #8]	; (8007f68 <DMA1_Stream1_IRQHandler+0x10>)
 8007f5e:	f7f9 f8d5 	bl	800110c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8007f62:	bf00      	nop
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	20001b48 	.word	0x20001b48

08007f6c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8007f70:	4802      	ldr	r0, [pc, #8]	; (8007f7c <DMA1_Stream3_IRQHandler+0x10>)
 8007f72:	f7f9 f8cb 	bl	800110c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8007f76:	bf00      	nop
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	20001be8 	.word	0x20001be8

08007f80 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8007f84:	4802      	ldr	r0, [pc, #8]	; (8007f90 <DMA1_Stream5_IRQHandler+0x10>)
 8007f86:	f7f9 f8c1 	bl	800110c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8007f8a:	bf00      	nop
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	20001ae8 	.word	0x20001ae8

08007f94 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8007f98:	4802      	ldr	r0, [pc, #8]	; (8007fa4 <DMA1_Stream6_IRQHandler+0x10>)
 8007f9a:	f7f9 f8b7 	bl	800110c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8007f9e:	bf00      	nop
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	20001d08 	.word	0x20001d08

08007fa8 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007fac:	4802      	ldr	r0, [pc, #8]	; (8007fb8 <CAN1_TX_IRQHandler+0x10>)
 8007fae:	f7f8 fc38 	bl	8000822 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8007fb2:	bf00      	nop
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	20001a40 	.word	0x20001a40

08007fbc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007fc0:	4802      	ldr	r0, [pc, #8]	; (8007fcc <CAN1_RX0_IRQHandler+0x10>)
 8007fc2:	f7f8 fc2e 	bl	8000822 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8007fc6:	bf00      	nop
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	20001a40 	.word	0x20001a40

08007fd0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007fd4:	4802      	ldr	r0, [pc, #8]	; (8007fe0 <CAN1_RX1_IRQHandler+0x10>)
 8007fd6:	f7f8 fc24 	bl	8000822 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8007fda:	bf00      	nop
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	20001a40 	.word	0x20001a40

08007fe4 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007fe8:	4802      	ldr	r0, [pc, #8]	; (8007ff4 <CAN1_SCE_IRQHandler+0x10>)
 8007fea:	f7f8 fc1a 	bl	8000822 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8007fee:	bf00      	nop
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	20001a40 	.word	0x20001a40

08007ff8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007ffc:	4802      	ldr	r0, [pc, #8]	; (8008008 <USART1_IRQHandler+0x10>)
 8007ffe:	f7fc fa07 	bl	8004410 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008002:	bf00      	nop
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	20001d68 	.word	0x20001d68

0800800c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8008010:	4802      	ldr	r0, [pc, #8]	; (800801c <USART2_IRQHandler+0x10>)
 8008012:	f7fc f9fd 	bl	8004410 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8008016:	bf00      	nop
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	20001e28 	.word	0x20001e28

08008020 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8008024:	4802      	ldr	r0, [pc, #8]	; (8008030 <USART3_IRQHandler+0x10>)
 8008026:	f7fc f9f3 	bl	8004410 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800802a:	bf00      	nop
 800802c:	bd80      	pop	{r7, pc}
 800802e:	bf00      	nop
 8008030:	20001ba8 	.word	0x20001ba8

08008034 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8008038:	4802      	ldr	r0, [pc, #8]	; (8008044 <UART4_IRQHandler+0x10>)
 800803a:	f7fc f9e9 	bl	8004410 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800803e:	bf00      	nop
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	20001de8 	.word	0x20001de8

08008048 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800804c:	4802      	ldr	r0, [pc, #8]	; (8008058 <TIM6_DAC_IRQHandler+0x10>)
 800804e:	f7fb fee8 	bl	8003e22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8008052:	bf00      	nop
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	20001a68 	.word	0x20001a68

0800805c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8008060:	4802      	ldr	r0, [pc, #8]	; (800806c <TIM7_IRQHandler+0x10>)
 8008062:	f7fb fede 	bl	8003e22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8008066:	bf00      	nop
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	20001aa8 	.word	0x20001aa8

08008070 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8008074:	4802      	ldr	r0, [pc, #8]	; (8008080 <DMA2_Stream2_IRQHandler+0x10>)
 8008076:	f7f9 f849 	bl	800110c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800807a:	bf00      	nop
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	20001ca8 	.word	0x20001ca8

08008084 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8008088:	4802      	ldr	r0, [pc, #8]	; (8008094 <OTG_FS_IRQHandler+0x10>)
 800808a:	f7f9 fdc4 	bl	8001c16 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800808e:	bf00      	nop
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	20003104 	.word	0x20003104

08008098 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800809c:	4802      	ldr	r0, [pc, #8]	; (80080a8 <DMA2_Stream7_IRQHandler+0x10>)
 800809e:	f7f9 f835 	bl	800110c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80080a2:	bf00      	nop
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	20001c48 	.word	0x20001c48

080080ac <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80080b0:	4802      	ldr	r0, [pc, #8]	; (80080bc <USART6_IRQHandler+0x10>)
 80080b2:	f7fc f9ad 	bl	8004410 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80080b6:	bf00      	nop
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	20001da8 	.word	0x20001da8

080080c0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80080c8:	4b11      	ldr	r3, [pc, #68]	; (8008110 <_sbrk+0x50>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d102      	bne.n	80080d6 <_sbrk+0x16>
		heap_end = &end;
 80080d0:	4b0f      	ldr	r3, [pc, #60]	; (8008110 <_sbrk+0x50>)
 80080d2:	4a10      	ldr	r2, [pc, #64]	; (8008114 <_sbrk+0x54>)
 80080d4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80080d6:	4b0e      	ldr	r3, [pc, #56]	; (8008110 <_sbrk+0x50>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80080dc:	4b0c      	ldr	r3, [pc, #48]	; (8008110 <_sbrk+0x50>)
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4413      	add	r3, r2
 80080e4:	466a      	mov	r2, sp
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d907      	bls.n	80080fa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80080ea:	f001 faf3 	bl	80096d4 <__errno>
 80080ee:	4602      	mov	r2, r0
 80080f0:	230c      	movs	r3, #12
 80080f2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80080f4:	f04f 33ff 	mov.w	r3, #4294967295
 80080f8:	e006      	b.n	8008108 <_sbrk+0x48>
	}

	heap_end += incr;
 80080fa:	4b05      	ldr	r3, [pc, #20]	; (8008110 <_sbrk+0x50>)
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4413      	add	r3, r2
 8008102:	4a03      	ldr	r2, [pc, #12]	; (8008110 <_sbrk+0x50>)
 8008104:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008106:	68fb      	ldr	r3, [r7, #12]
}
 8008108:	4618      	mov	r0, r3
 800810a:	3710      	adds	r7, #16
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}
 8008110:	20000210 	.word	0x20000210
 8008114:	20003758 	.word	0x20003758

08008118 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008118:	b480      	push	{r7}
 800811a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800811c:	4b16      	ldr	r3, [pc, #88]	; (8008178 <SystemInit+0x60>)
 800811e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008122:	4a15      	ldr	r2, [pc, #84]	; (8008178 <SystemInit+0x60>)
 8008124:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008128:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800812c:	4b13      	ldr	r3, [pc, #76]	; (800817c <SystemInit+0x64>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a12      	ldr	r2, [pc, #72]	; (800817c <SystemInit+0x64>)
 8008132:	f043 0301 	orr.w	r3, r3, #1
 8008136:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008138:	4b10      	ldr	r3, [pc, #64]	; (800817c <SystemInit+0x64>)
 800813a:	2200      	movs	r2, #0
 800813c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800813e:	4b0f      	ldr	r3, [pc, #60]	; (800817c <SystemInit+0x64>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a0e      	ldr	r2, [pc, #56]	; (800817c <SystemInit+0x64>)
 8008144:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8008148:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800814c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800814e:	4b0b      	ldr	r3, [pc, #44]	; (800817c <SystemInit+0x64>)
 8008150:	4a0b      	ldr	r2, [pc, #44]	; (8008180 <SystemInit+0x68>)
 8008152:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8008154:	4b09      	ldr	r3, [pc, #36]	; (800817c <SystemInit+0x64>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a08      	ldr	r2, [pc, #32]	; (800817c <SystemInit+0x64>)
 800815a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800815e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8008160:	4b06      	ldr	r3, [pc, #24]	; (800817c <SystemInit+0x64>)
 8008162:	2200      	movs	r2, #0
 8008164:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008166:	4b04      	ldr	r3, [pc, #16]	; (8008178 <SystemInit+0x60>)
 8008168:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800816c:	609a      	str	r2, [r3, #8]
#endif
}
 800816e:	bf00      	nop
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr
 8008178:	e000ed00 	.word	0xe000ed00
 800817c:	40023800 	.word	0x40023800
 8008180:	24003010 	.word	0x24003010

08008184 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800818a:	463b      	mov	r3, r7
 800818c:	2200      	movs	r2, #0
 800818e:	601a      	str	r2, [r3, #0]
 8008190:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 8008192:	4b15      	ldr	r3, [pc, #84]	; (80081e8 <MX_TIM6_Init+0x64>)
 8008194:	4a15      	ldr	r2, [pc, #84]	; (80081ec <MX_TIM6_Init+0x68>)
 8008196:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8399;
 8008198:	4b13      	ldr	r3, [pc, #76]	; (80081e8 <MX_TIM6_Init+0x64>)
 800819a:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800819e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80081a0:	4b11      	ldr	r3, [pc, #68]	; (80081e8 <MX_TIM6_Init+0x64>)
 80081a2:	2200      	movs	r2, #0
 80081a4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 80081a6:	4b10      	ldr	r3, [pc, #64]	; (80081e8 <MX_TIM6_Init+0x64>)
 80081a8:	2209      	movs	r2, #9
 80081aa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80081ac:	4b0e      	ldr	r3, [pc, #56]	; (80081e8 <MX_TIM6_Init+0x64>)
 80081ae:	2200      	movs	r2, #0
 80081b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80081b2:	480d      	ldr	r0, [pc, #52]	; (80081e8 <MX_TIM6_Init+0x64>)
 80081b4:	f7fb fde6 	bl	8003d84 <HAL_TIM_Base_Init>
 80081b8:	4603      	mov	r3, r0
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d001      	beq.n	80081c2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80081be:	f7ff fe5f 	bl	8007e80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80081c2:	2300      	movs	r3, #0
 80081c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80081c6:	2300      	movs	r3, #0
 80081c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80081ca:	463b      	mov	r3, r7
 80081cc:	4619      	mov	r1, r3
 80081ce:	4806      	ldr	r0, [pc, #24]	; (80081e8 <MX_TIM6_Init+0x64>)
 80081d0:	f7fb fff8 	bl	80041c4 <HAL_TIMEx_MasterConfigSynchronization>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d001      	beq.n	80081de <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80081da:	f7ff fe51 	bl	8007e80 <Error_Handler>
  }

}
 80081de:	bf00      	nop
 80081e0:	3708      	adds	r7, #8
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
 80081e6:	bf00      	nop
 80081e8:	20001a68 	.word	0x20001a68
 80081ec:	40001000 	.word	0x40001000

080081f0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80081f6:	463b      	mov	r3, r7
 80081f8:	2200      	movs	r2, #0
 80081fa:	601a      	str	r2, [r3, #0]
 80081fc:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 80081fe:	4b15      	ldr	r3, [pc, #84]	; (8008254 <MX_TIM7_Init+0x64>)
 8008200:	4a15      	ldr	r2, [pc, #84]	; (8008258 <MX_TIM7_Init+0x68>)
 8008202:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8399;
 8008204:	4b13      	ldr	r3, [pc, #76]	; (8008254 <MX_TIM7_Init+0x64>)
 8008206:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800820a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800820c:	4b11      	ldr	r3, [pc, #68]	; (8008254 <MX_TIM7_Init+0x64>)
 800820e:	2200      	movs	r2, #0
 8008210:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8008212:	4b10      	ldr	r3, [pc, #64]	; (8008254 <MX_TIM7_Init+0x64>)
 8008214:	2209      	movs	r2, #9
 8008216:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008218:	4b0e      	ldr	r3, [pc, #56]	; (8008254 <MX_TIM7_Init+0x64>)
 800821a:	2200      	movs	r2, #0
 800821c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800821e:	480d      	ldr	r0, [pc, #52]	; (8008254 <MX_TIM7_Init+0x64>)
 8008220:	f7fb fdb0 	bl	8003d84 <HAL_TIM_Base_Init>
 8008224:	4603      	mov	r3, r0
 8008226:	2b00      	cmp	r3, #0
 8008228:	d001      	beq.n	800822e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800822a:	f7ff fe29 	bl	8007e80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800822e:	2300      	movs	r3, #0
 8008230:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008232:	2300      	movs	r3, #0
 8008234:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8008236:	463b      	mov	r3, r7
 8008238:	4619      	mov	r1, r3
 800823a:	4806      	ldr	r0, [pc, #24]	; (8008254 <MX_TIM7_Init+0x64>)
 800823c:	f7fb ffc2 	bl	80041c4 <HAL_TIMEx_MasterConfigSynchronization>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d001      	beq.n	800824a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8008246:	f7ff fe1b 	bl	8007e80 <Error_Handler>
  }

}
 800824a:	bf00      	nop
 800824c:	3708      	adds	r7, #8
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	20001aa8 	.word	0x20001aa8
 8008258:	40001400 	.word	0x40001400

0800825c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a1c      	ldr	r2, [pc, #112]	; (80082dc <HAL_TIM_Base_MspInit+0x80>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d116      	bne.n	800829c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800826e:	2300      	movs	r3, #0
 8008270:	60fb      	str	r3, [r7, #12]
 8008272:	4b1b      	ldr	r3, [pc, #108]	; (80082e0 <HAL_TIM_Base_MspInit+0x84>)
 8008274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008276:	4a1a      	ldr	r2, [pc, #104]	; (80082e0 <HAL_TIM_Base_MspInit+0x84>)
 8008278:	f043 0310 	orr.w	r3, r3, #16
 800827c:	6413      	str	r3, [r2, #64]	; 0x40
 800827e:	4b18      	ldr	r3, [pc, #96]	; (80082e0 <HAL_TIM_Base_MspInit+0x84>)
 8008280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008282:	f003 0310 	and.w	r3, r3, #16
 8008286:	60fb      	str	r3, [r7, #12]
 8008288:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800828a:	2200      	movs	r2, #0
 800828c:	2100      	movs	r1, #0
 800828e:	2036      	movs	r0, #54	; 0x36
 8008290:	f7f8 fdd5 	bl	8000e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8008294:	2036      	movs	r0, #54	; 0x36
 8008296:	f7f8 fdee 	bl	8000e76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800829a:	e01a      	b.n	80082d2 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM7)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a10      	ldr	r2, [pc, #64]	; (80082e4 <HAL_TIM_Base_MspInit+0x88>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d115      	bne.n	80082d2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80082a6:	2300      	movs	r3, #0
 80082a8:	60bb      	str	r3, [r7, #8]
 80082aa:	4b0d      	ldr	r3, [pc, #52]	; (80082e0 <HAL_TIM_Base_MspInit+0x84>)
 80082ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ae:	4a0c      	ldr	r2, [pc, #48]	; (80082e0 <HAL_TIM_Base_MspInit+0x84>)
 80082b0:	f043 0320 	orr.w	r3, r3, #32
 80082b4:	6413      	str	r3, [r2, #64]	; 0x40
 80082b6:	4b0a      	ldr	r3, [pc, #40]	; (80082e0 <HAL_TIM_Base_MspInit+0x84>)
 80082b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ba:	f003 0320 	and.w	r3, r3, #32
 80082be:	60bb      	str	r3, [r7, #8]
 80082c0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80082c2:	2200      	movs	r2, #0
 80082c4:	2100      	movs	r1, #0
 80082c6:	2037      	movs	r0, #55	; 0x37
 80082c8:	f7f8 fdb9 	bl	8000e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80082cc:	2037      	movs	r0, #55	; 0x37
 80082ce:	f7f8 fdd2 	bl	8000e76 <HAL_NVIC_EnableIRQ>
}
 80082d2:	bf00      	nop
 80082d4:	3710      	adds	r7, #16
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	40001000 	.word	0x40001000
 80082e0:	40023800 	.word	0x40023800
 80082e4:	40001400 	.word	0x40001400

080082e8 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 80082ec:	4b11      	ldr	r3, [pc, #68]	; (8008334 <MX_UART4_Init+0x4c>)
 80082ee:	4a12      	ldr	r2, [pc, #72]	; (8008338 <MX_UART4_Init+0x50>)
 80082f0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80082f2:	4b10      	ldr	r3, [pc, #64]	; (8008334 <MX_UART4_Init+0x4c>)
 80082f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80082f8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80082fa:	4b0e      	ldr	r3, [pc, #56]	; (8008334 <MX_UART4_Init+0x4c>)
 80082fc:	2200      	movs	r2, #0
 80082fe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8008300:	4b0c      	ldr	r3, [pc, #48]	; (8008334 <MX_UART4_Init+0x4c>)
 8008302:	2200      	movs	r2, #0
 8008304:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8008306:	4b0b      	ldr	r3, [pc, #44]	; (8008334 <MX_UART4_Init+0x4c>)
 8008308:	2200      	movs	r2, #0
 800830a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800830c:	4b09      	ldr	r3, [pc, #36]	; (8008334 <MX_UART4_Init+0x4c>)
 800830e:	220c      	movs	r2, #12
 8008310:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008312:	4b08      	ldr	r3, [pc, #32]	; (8008334 <MX_UART4_Init+0x4c>)
 8008314:	2200      	movs	r2, #0
 8008316:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8008318:	4b06      	ldr	r3, [pc, #24]	; (8008334 <MX_UART4_Init+0x4c>)
 800831a:	2200      	movs	r2, #0
 800831c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800831e:	4805      	ldr	r0, [pc, #20]	; (8008334 <MX_UART4_Init+0x4c>)
 8008320:	f7fb ffa9 	bl	8004276 <HAL_UART_Init>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d001      	beq.n	800832e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800832a:	f7ff fda9 	bl	8007e80 <Error_Handler>
  }

}
 800832e:	bf00      	nop
 8008330:	bd80      	pop	{r7, pc}
 8008332:	bf00      	nop
 8008334:	20001de8 	.word	0x20001de8
 8008338:	40004c00 	.word	0x40004c00

0800833c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8008340:	4b10      	ldr	r3, [pc, #64]	; (8008384 <MX_USART1_UART_Init+0x48>)
 8008342:	4a11      	ldr	r2, [pc, #68]	; (8008388 <MX_USART1_UART_Init+0x4c>)
 8008344:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 8008346:	4b0f      	ldr	r3, [pc, #60]	; (8008384 <MX_USART1_UART_Init+0x48>)
 8008348:	4a10      	ldr	r2, [pc, #64]	; (800838c <MX_USART1_UART_Init+0x50>)
 800834a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800834c:	4b0d      	ldr	r3, [pc, #52]	; (8008384 <MX_USART1_UART_Init+0x48>)
 800834e:	2200      	movs	r2, #0
 8008350:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008352:	4b0c      	ldr	r3, [pc, #48]	; (8008384 <MX_USART1_UART_Init+0x48>)
 8008354:	2200      	movs	r2, #0
 8008356:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008358:	4b0a      	ldr	r3, [pc, #40]	; (8008384 <MX_USART1_UART_Init+0x48>)
 800835a:	2200      	movs	r2, #0
 800835c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800835e:	4b09      	ldr	r3, [pc, #36]	; (8008384 <MX_USART1_UART_Init+0x48>)
 8008360:	220c      	movs	r2, #12
 8008362:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008364:	4b07      	ldr	r3, [pc, #28]	; (8008384 <MX_USART1_UART_Init+0x48>)
 8008366:	2200      	movs	r2, #0
 8008368:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800836a:	4b06      	ldr	r3, [pc, #24]	; (8008384 <MX_USART1_UART_Init+0x48>)
 800836c:	2200      	movs	r2, #0
 800836e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008370:	4804      	ldr	r0, [pc, #16]	; (8008384 <MX_USART1_UART_Init+0x48>)
 8008372:	f7fb ff80 	bl	8004276 <HAL_UART_Init>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d001      	beq.n	8008380 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 800837c:	f7ff fd80 	bl	8007e80 <Error_Handler>
  }

}
 8008380:	bf00      	nop
 8008382:	bd80      	pop	{r7, pc}
 8008384:	20001d68 	.word	0x20001d68
 8008388:	40011000 	.word	0x40011000
 800838c:	000f4240 	.word	0x000f4240

08008390 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8008394:	4b11      	ldr	r3, [pc, #68]	; (80083dc <MX_USART2_UART_Init+0x4c>)
 8008396:	4a12      	ldr	r2, [pc, #72]	; (80083e0 <MX_USART2_UART_Init+0x50>)
 8008398:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800839a:	4b10      	ldr	r3, [pc, #64]	; (80083dc <MX_USART2_UART_Init+0x4c>)
 800839c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80083a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80083a2:	4b0e      	ldr	r3, [pc, #56]	; (80083dc <MX_USART2_UART_Init+0x4c>)
 80083a4:	2200      	movs	r2, #0
 80083a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80083a8:	4b0c      	ldr	r3, [pc, #48]	; (80083dc <MX_USART2_UART_Init+0x4c>)
 80083aa:	2200      	movs	r2, #0
 80083ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80083ae:	4b0b      	ldr	r3, [pc, #44]	; (80083dc <MX_USART2_UART_Init+0x4c>)
 80083b0:	2200      	movs	r2, #0
 80083b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80083b4:	4b09      	ldr	r3, [pc, #36]	; (80083dc <MX_USART2_UART_Init+0x4c>)
 80083b6:	220c      	movs	r2, #12
 80083b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80083ba:	4b08      	ldr	r3, [pc, #32]	; (80083dc <MX_USART2_UART_Init+0x4c>)
 80083bc:	2200      	movs	r2, #0
 80083be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80083c0:	4b06      	ldr	r3, [pc, #24]	; (80083dc <MX_USART2_UART_Init+0x4c>)
 80083c2:	2200      	movs	r2, #0
 80083c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80083c6:	4805      	ldr	r0, [pc, #20]	; (80083dc <MX_USART2_UART_Init+0x4c>)
 80083c8:	f7fb ff55 	bl	8004276 <HAL_UART_Init>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d001      	beq.n	80083d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80083d2:	f7ff fd55 	bl	8007e80 <Error_Handler>
  }

}
 80083d6:	bf00      	nop
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	20001e28 	.word	0x20001e28
 80083e0:	40004400 	.word	0x40004400

080083e4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80083e8:	4b10      	ldr	r3, [pc, #64]	; (800842c <MX_USART3_UART_Init+0x48>)
 80083ea:	4a11      	ldr	r2, [pc, #68]	; (8008430 <MX_USART3_UART_Init+0x4c>)
 80083ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 80083ee:	4b0f      	ldr	r3, [pc, #60]	; (800842c <MX_USART3_UART_Init+0x48>)
 80083f0:	4a10      	ldr	r2, [pc, #64]	; (8008434 <MX_USART3_UART_Init+0x50>)
 80083f2:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80083f4:	4b0d      	ldr	r3, [pc, #52]	; (800842c <MX_USART3_UART_Init+0x48>)
 80083f6:	2200      	movs	r2, #0
 80083f8:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80083fa:	4b0c      	ldr	r3, [pc, #48]	; (800842c <MX_USART3_UART_Init+0x48>)
 80083fc:	2200      	movs	r2, #0
 80083fe:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8008400:	4b0a      	ldr	r3, [pc, #40]	; (800842c <MX_USART3_UART_Init+0x48>)
 8008402:	2200      	movs	r2, #0
 8008404:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8008406:	4b09      	ldr	r3, [pc, #36]	; (800842c <MX_USART3_UART_Init+0x48>)
 8008408:	220c      	movs	r2, #12
 800840a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800840c:	4b07      	ldr	r3, [pc, #28]	; (800842c <MX_USART3_UART_Init+0x48>)
 800840e:	2200      	movs	r2, #0
 8008410:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8008412:	4b06      	ldr	r3, [pc, #24]	; (800842c <MX_USART3_UART_Init+0x48>)
 8008414:	2200      	movs	r2, #0
 8008416:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8008418:	4804      	ldr	r0, [pc, #16]	; (800842c <MX_USART3_UART_Init+0x48>)
 800841a:	f7fb ff2c 	bl	8004276 <HAL_UART_Init>
 800841e:	4603      	mov	r3, r0
 8008420:	2b00      	cmp	r3, #0
 8008422:	d001      	beq.n	8008428 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8008424:	f7ff fd2c 	bl	8007e80 <Error_Handler>
  }

}
 8008428:	bf00      	nop
 800842a:	bd80      	pop	{r7, pc}
 800842c:	20001ba8 	.word	0x20001ba8
 8008430:	40004800 	.word	0x40004800
 8008434:	000f4240 	.word	0x000f4240

08008438 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 800843c:	4b11      	ldr	r3, [pc, #68]	; (8008484 <MX_USART6_UART_Init+0x4c>)
 800843e:	4a12      	ldr	r2, [pc, #72]	; (8008488 <MX_USART6_UART_Init+0x50>)
 8008440:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8008442:	4b10      	ldr	r3, [pc, #64]	; (8008484 <MX_USART6_UART_Init+0x4c>)
 8008444:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008448:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800844a:	4b0e      	ldr	r3, [pc, #56]	; (8008484 <MX_USART6_UART_Init+0x4c>)
 800844c:	2200      	movs	r2, #0
 800844e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8008450:	4b0c      	ldr	r3, [pc, #48]	; (8008484 <MX_USART6_UART_Init+0x4c>)
 8008452:	2200      	movs	r2, #0
 8008454:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8008456:	4b0b      	ldr	r3, [pc, #44]	; (8008484 <MX_USART6_UART_Init+0x4c>)
 8008458:	2200      	movs	r2, #0
 800845a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800845c:	4b09      	ldr	r3, [pc, #36]	; (8008484 <MX_USART6_UART_Init+0x4c>)
 800845e:	220c      	movs	r2, #12
 8008460:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008462:	4b08      	ldr	r3, [pc, #32]	; (8008484 <MX_USART6_UART_Init+0x4c>)
 8008464:	2200      	movs	r2, #0
 8008466:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8008468:	4b06      	ldr	r3, [pc, #24]	; (8008484 <MX_USART6_UART_Init+0x4c>)
 800846a:	2200      	movs	r2, #0
 800846c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800846e:	4805      	ldr	r0, [pc, #20]	; (8008484 <MX_USART6_UART_Init+0x4c>)
 8008470:	f7fb ff01 	bl	8004276 <HAL_UART_Init>
 8008474:	4603      	mov	r3, r0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d001      	beq.n	800847e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800847a:	f7ff fd01 	bl	8007e80 <Error_Handler>
  }

}
 800847e:	bf00      	nop
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	20001da8 	.word	0x20001da8
 8008488:	40011400 	.word	0x40011400

0800848c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b092      	sub	sp, #72	; 0x48
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008494:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008498:	2200      	movs	r2, #0
 800849a:	601a      	str	r2, [r3, #0]
 800849c:	605a      	str	r2, [r3, #4]
 800849e:	609a      	str	r2, [r3, #8]
 80084a0:	60da      	str	r2, [r3, #12]
 80084a2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a67      	ldr	r2, [pc, #412]	; (8008648 <HAL_UART_MspInit+0x1bc>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d134      	bne.n	8008518 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80084ae:	2300      	movs	r3, #0
 80084b0:	633b      	str	r3, [r7, #48]	; 0x30
 80084b2:	4b66      	ldr	r3, [pc, #408]	; (800864c <HAL_UART_MspInit+0x1c0>)
 80084b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b6:	4a65      	ldr	r2, [pc, #404]	; (800864c <HAL_UART_MspInit+0x1c0>)
 80084b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80084bc:	6413      	str	r3, [r2, #64]	; 0x40
 80084be:	4b63      	ldr	r3, [pc, #396]	; (800864c <HAL_UART_MspInit+0x1c0>)
 80084c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80084c6:	633b      	str	r3, [r7, #48]	; 0x30
 80084c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80084ca:	2300      	movs	r3, #0
 80084cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084ce:	4b5f      	ldr	r3, [pc, #380]	; (800864c <HAL_UART_MspInit+0x1c0>)
 80084d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084d2:	4a5e      	ldr	r2, [pc, #376]	; (800864c <HAL_UART_MspInit+0x1c0>)
 80084d4:	f043 0301 	orr.w	r3, r3, #1
 80084d8:	6313      	str	r3, [r2, #48]	; 0x30
 80084da:	4b5c      	ldr	r3, [pc, #368]	; (800864c <HAL_UART_MspInit+0x1c0>)
 80084dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084de:	f003 0301 	and.w	r3, r3, #1
 80084e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80084e6:	2303      	movs	r3, #3
 80084e8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084ea:	2302      	movs	r3, #2
 80084ec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80084ee:	2301      	movs	r3, #1
 80084f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084f2:	2303      	movs	r3, #3
 80084f4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80084f6:	2308      	movs	r3, #8
 80084f8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80084fe:	4619      	mov	r1, r3
 8008500:	4853      	ldr	r0, [pc, #332]	; (8008650 <HAL_UART_MspInit+0x1c4>)
 8008502:	f7f9 f86b 	bl	80015dc <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8008506:	2200      	movs	r2, #0
 8008508:	2100      	movs	r1, #0
 800850a:	2034      	movs	r0, #52	; 0x34
 800850c:	f7f8 fc97 	bl	8000e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8008510:	2034      	movs	r0, #52	; 0x34
 8008512:	f7f8 fcb0 	bl	8000e76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8008516:	e22e      	b.n	8008976 <HAL_UART_MspInit+0x4ea>
  else if(uartHandle->Instance==USART1)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a4d      	ldr	r2, [pc, #308]	; (8008654 <HAL_UART_MspInit+0x1c8>)
 800851e:	4293      	cmp	r3, r2
 8008520:	f040 80a4 	bne.w	800866c <HAL_UART_MspInit+0x1e0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8008524:	2300      	movs	r3, #0
 8008526:	62bb      	str	r3, [r7, #40]	; 0x28
 8008528:	4b48      	ldr	r3, [pc, #288]	; (800864c <HAL_UART_MspInit+0x1c0>)
 800852a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800852c:	4a47      	ldr	r2, [pc, #284]	; (800864c <HAL_UART_MspInit+0x1c0>)
 800852e:	f043 0310 	orr.w	r3, r3, #16
 8008532:	6453      	str	r3, [r2, #68]	; 0x44
 8008534:	4b45      	ldr	r3, [pc, #276]	; (800864c <HAL_UART_MspInit+0x1c0>)
 8008536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008538:	f003 0310 	and.w	r3, r3, #16
 800853c:	62bb      	str	r3, [r7, #40]	; 0x28
 800853e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008540:	2300      	movs	r3, #0
 8008542:	627b      	str	r3, [r7, #36]	; 0x24
 8008544:	4b41      	ldr	r3, [pc, #260]	; (800864c <HAL_UART_MspInit+0x1c0>)
 8008546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008548:	4a40      	ldr	r2, [pc, #256]	; (800864c <HAL_UART_MspInit+0x1c0>)
 800854a:	f043 0302 	orr.w	r3, r3, #2
 800854e:	6313      	str	r3, [r2, #48]	; 0x30
 8008550:	4b3e      	ldr	r3, [pc, #248]	; (800864c <HAL_UART_MspInit+0x1c0>)
 8008552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008554:	f003 0302 	and.w	r3, r3, #2
 8008558:	627b      	str	r3, [r7, #36]	; 0x24
 800855a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800855c:	23c0      	movs	r3, #192	; 0xc0
 800855e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008560:	2302      	movs	r3, #2
 8008562:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008564:	2301      	movs	r3, #1
 8008566:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008568:	2303      	movs	r3, #3
 800856a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800856c:	2307      	movs	r3, #7
 800856e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008570:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008574:	4619      	mov	r1, r3
 8008576:	4838      	ldr	r0, [pc, #224]	; (8008658 <HAL_UART_MspInit+0x1cc>)
 8008578:	f7f9 f830 	bl	80015dc <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800857c:	4b37      	ldr	r3, [pc, #220]	; (800865c <HAL_UART_MspInit+0x1d0>)
 800857e:	4a38      	ldr	r2, [pc, #224]	; (8008660 <HAL_UART_MspInit+0x1d4>)
 8008580:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8008582:	4b36      	ldr	r3, [pc, #216]	; (800865c <HAL_UART_MspInit+0x1d0>)
 8008584:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008588:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800858a:	4b34      	ldr	r3, [pc, #208]	; (800865c <HAL_UART_MspInit+0x1d0>)
 800858c:	2200      	movs	r2, #0
 800858e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008590:	4b32      	ldr	r3, [pc, #200]	; (800865c <HAL_UART_MspInit+0x1d0>)
 8008592:	2200      	movs	r2, #0
 8008594:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008596:	4b31      	ldr	r3, [pc, #196]	; (800865c <HAL_UART_MspInit+0x1d0>)
 8008598:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800859c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800859e:	4b2f      	ldr	r3, [pc, #188]	; (800865c <HAL_UART_MspInit+0x1d0>)
 80085a0:	2200      	movs	r2, #0
 80085a2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80085a4:	4b2d      	ldr	r3, [pc, #180]	; (800865c <HAL_UART_MspInit+0x1d0>)
 80085a6:	2200      	movs	r2, #0
 80085a8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80085aa:	4b2c      	ldr	r3, [pc, #176]	; (800865c <HAL_UART_MspInit+0x1d0>)
 80085ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80085b0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80085b2:	4b2a      	ldr	r3, [pc, #168]	; (800865c <HAL_UART_MspInit+0x1d0>)
 80085b4:	2200      	movs	r2, #0
 80085b6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80085b8:	4b28      	ldr	r3, [pc, #160]	; (800865c <HAL_UART_MspInit+0x1d0>)
 80085ba:	2200      	movs	r2, #0
 80085bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80085be:	4827      	ldr	r0, [pc, #156]	; (800865c <HAL_UART_MspInit+0x1d0>)
 80085c0:	f7f8 fc74 	bl	8000eac <HAL_DMA_Init>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d001      	beq.n	80085ce <HAL_UART_MspInit+0x142>
      Error_Handler();
 80085ca:	f7ff fc59 	bl	8007e80 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	4a22      	ldr	r2, [pc, #136]	; (800865c <HAL_UART_MspInit+0x1d0>)
 80085d2:	635a      	str	r2, [r3, #52]	; 0x34
 80085d4:	4a21      	ldr	r2, [pc, #132]	; (800865c <HAL_UART_MspInit+0x1d0>)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80085da:	4b22      	ldr	r3, [pc, #136]	; (8008664 <HAL_UART_MspInit+0x1d8>)
 80085dc:	4a22      	ldr	r2, [pc, #136]	; (8008668 <HAL_UART_MspInit+0x1dc>)
 80085de:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80085e0:	4b20      	ldr	r3, [pc, #128]	; (8008664 <HAL_UART_MspInit+0x1d8>)
 80085e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80085e6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80085e8:	4b1e      	ldr	r3, [pc, #120]	; (8008664 <HAL_UART_MspInit+0x1d8>)
 80085ea:	2240      	movs	r2, #64	; 0x40
 80085ec:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80085ee:	4b1d      	ldr	r3, [pc, #116]	; (8008664 <HAL_UART_MspInit+0x1d8>)
 80085f0:	2200      	movs	r2, #0
 80085f2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80085f4:	4b1b      	ldr	r3, [pc, #108]	; (8008664 <HAL_UART_MspInit+0x1d8>)
 80085f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80085fa:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80085fc:	4b19      	ldr	r3, [pc, #100]	; (8008664 <HAL_UART_MspInit+0x1d8>)
 80085fe:	2200      	movs	r2, #0
 8008600:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008602:	4b18      	ldr	r3, [pc, #96]	; (8008664 <HAL_UART_MspInit+0x1d8>)
 8008604:	2200      	movs	r2, #0
 8008606:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8008608:	4b16      	ldr	r3, [pc, #88]	; (8008664 <HAL_UART_MspInit+0x1d8>)
 800860a:	2200      	movs	r2, #0
 800860c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800860e:	4b15      	ldr	r3, [pc, #84]	; (8008664 <HAL_UART_MspInit+0x1d8>)
 8008610:	2200      	movs	r2, #0
 8008612:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008614:	4b13      	ldr	r3, [pc, #76]	; (8008664 <HAL_UART_MspInit+0x1d8>)
 8008616:	2200      	movs	r2, #0
 8008618:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800861a:	4812      	ldr	r0, [pc, #72]	; (8008664 <HAL_UART_MspInit+0x1d8>)
 800861c:	f7f8 fc46 	bl	8000eac <HAL_DMA_Init>
 8008620:	4603      	mov	r3, r0
 8008622:	2b00      	cmp	r3, #0
 8008624:	d001      	beq.n	800862a <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8008626:	f7ff fc2b 	bl	8007e80 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	4a0d      	ldr	r2, [pc, #52]	; (8008664 <HAL_UART_MspInit+0x1d8>)
 800862e:	631a      	str	r2, [r3, #48]	; 0x30
 8008630:	4a0c      	ldr	r2, [pc, #48]	; (8008664 <HAL_UART_MspInit+0x1d8>)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008636:	2200      	movs	r2, #0
 8008638:	2100      	movs	r1, #0
 800863a:	2025      	movs	r0, #37	; 0x25
 800863c:	f7f8 fbff 	bl	8000e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008640:	2025      	movs	r0, #37	; 0x25
 8008642:	f7f8 fc18 	bl	8000e76 <HAL_NVIC_EnableIRQ>
}
 8008646:	e196      	b.n	8008976 <HAL_UART_MspInit+0x4ea>
 8008648:	40004c00 	.word	0x40004c00
 800864c:	40023800 	.word	0x40023800
 8008650:	40020000 	.word	0x40020000
 8008654:	40011000 	.word	0x40011000
 8008658:	40020400 	.word	0x40020400
 800865c:	20001ca8 	.word	0x20001ca8
 8008660:	40026440 	.word	0x40026440
 8008664:	20001c48 	.word	0x20001c48
 8008668:	400264b8 	.word	0x400264b8
  else if(uartHandle->Instance==USART2)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a97      	ldr	r2, [pc, #604]	; (80088d0 <HAL_UART_MspInit+0x444>)
 8008672:	4293      	cmp	r3, r2
 8008674:	f040 8092 	bne.w	800879c <HAL_UART_MspInit+0x310>
    __HAL_RCC_USART2_CLK_ENABLE();
 8008678:	2300      	movs	r3, #0
 800867a:	623b      	str	r3, [r7, #32]
 800867c:	4b95      	ldr	r3, [pc, #596]	; (80088d4 <HAL_UART_MspInit+0x448>)
 800867e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008680:	4a94      	ldr	r2, [pc, #592]	; (80088d4 <HAL_UART_MspInit+0x448>)
 8008682:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008686:	6413      	str	r3, [r2, #64]	; 0x40
 8008688:	4b92      	ldr	r3, [pc, #584]	; (80088d4 <HAL_UART_MspInit+0x448>)
 800868a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800868c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008690:	623b      	str	r3, [r7, #32]
 8008692:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008694:	2300      	movs	r3, #0
 8008696:	61fb      	str	r3, [r7, #28]
 8008698:	4b8e      	ldr	r3, [pc, #568]	; (80088d4 <HAL_UART_MspInit+0x448>)
 800869a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800869c:	4a8d      	ldr	r2, [pc, #564]	; (80088d4 <HAL_UART_MspInit+0x448>)
 800869e:	f043 0301 	orr.w	r3, r3, #1
 80086a2:	6313      	str	r3, [r2, #48]	; 0x30
 80086a4:	4b8b      	ldr	r3, [pc, #556]	; (80088d4 <HAL_UART_MspInit+0x448>)
 80086a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a8:	f003 0301 	and.w	r3, r3, #1
 80086ac:	61fb      	str	r3, [r7, #28]
 80086ae:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80086b0:	230c      	movs	r3, #12
 80086b2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086b4:	2302      	movs	r3, #2
 80086b6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80086b8:	2301      	movs	r3, #1
 80086ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086bc:	2303      	movs	r3, #3
 80086be:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80086c0:	2307      	movs	r3, #7
 80086c2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80086c8:	4619      	mov	r1, r3
 80086ca:	4883      	ldr	r0, [pc, #524]	; (80088d8 <HAL_UART_MspInit+0x44c>)
 80086cc:	f7f8 ff86 	bl	80015dc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80086d0:	4b82      	ldr	r3, [pc, #520]	; (80088dc <HAL_UART_MspInit+0x450>)
 80086d2:	4a83      	ldr	r2, [pc, #524]	; (80088e0 <HAL_UART_MspInit+0x454>)
 80086d4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80086d6:	4b81      	ldr	r3, [pc, #516]	; (80088dc <HAL_UART_MspInit+0x450>)
 80086d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80086dc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80086de:	4b7f      	ldr	r3, [pc, #508]	; (80088dc <HAL_UART_MspInit+0x450>)
 80086e0:	2200      	movs	r2, #0
 80086e2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80086e4:	4b7d      	ldr	r3, [pc, #500]	; (80088dc <HAL_UART_MspInit+0x450>)
 80086e6:	2200      	movs	r2, #0
 80086e8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80086ea:	4b7c      	ldr	r3, [pc, #496]	; (80088dc <HAL_UART_MspInit+0x450>)
 80086ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80086f0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80086f2:	4b7a      	ldr	r3, [pc, #488]	; (80088dc <HAL_UART_MspInit+0x450>)
 80086f4:	2200      	movs	r2, #0
 80086f6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80086f8:	4b78      	ldr	r3, [pc, #480]	; (80088dc <HAL_UART_MspInit+0x450>)
 80086fa:	2200      	movs	r2, #0
 80086fc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80086fe:	4b77      	ldr	r3, [pc, #476]	; (80088dc <HAL_UART_MspInit+0x450>)
 8008700:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008704:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008706:	4b75      	ldr	r3, [pc, #468]	; (80088dc <HAL_UART_MspInit+0x450>)
 8008708:	2200      	movs	r2, #0
 800870a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800870c:	4b73      	ldr	r3, [pc, #460]	; (80088dc <HAL_UART_MspInit+0x450>)
 800870e:	2200      	movs	r2, #0
 8008710:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8008712:	4872      	ldr	r0, [pc, #456]	; (80088dc <HAL_UART_MspInit+0x450>)
 8008714:	f7f8 fbca 	bl	8000eac <HAL_DMA_Init>
 8008718:	4603      	mov	r3, r0
 800871a:	2b00      	cmp	r3, #0
 800871c:	d001      	beq.n	8008722 <HAL_UART_MspInit+0x296>
      Error_Handler();
 800871e:	f7ff fbaf 	bl	8007e80 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4a6d      	ldr	r2, [pc, #436]	; (80088dc <HAL_UART_MspInit+0x450>)
 8008726:	635a      	str	r2, [r3, #52]	; 0x34
 8008728:	4a6c      	ldr	r2, [pc, #432]	; (80088dc <HAL_UART_MspInit+0x450>)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800872e:	4b6d      	ldr	r3, [pc, #436]	; (80088e4 <HAL_UART_MspInit+0x458>)
 8008730:	4a6d      	ldr	r2, [pc, #436]	; (80088e8 <HAL_UART_MspInit+0x45c>)
 8008732:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8008734:	4b6b      	ldr	r3, [pc, #428]	; (80088e4 <HAL_UART_MspInit+0x458>)
 8008736:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800873a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800873c:	4b69      	ldr	r3, [pc, #420]	; (80088e4 <HAL_UART_MspInit+0x458>)
 800873e:	2240      	movs	r2, #64	; 0x40
 8008740:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008742:	4b68      	ldr	r3, [pc, #416]	; (80088e4 <HAL_UART_MspInit+0x458>)
 8008744:	2200      	movs	r2, #0
 8008746:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008748:	4b66      	ldr	r3, [pc, #408]	; (80088e4 <HAL_UART_MspInit+0x458>)
 800874a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800874e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008750:	4b64      	ldr	r3, [pc, #400]	; (80088e4 <HAL_UART_MspInit+0x458>)
 8008752:	2200      	movs	r2, #0
 8008754:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008756:	4b63      	ldr	r3, [pc, #396]	; (80088e4 <HAL_UART_MspInit+0x458>)
 8008758:	2200      	movs	r2, #0
 800875a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800875c:	4b61      	ldr	r3, [pc, #388]	; (80088e4 <HAL_UART_MspInit+0x458>)
 800875e:	2200      	movs	r2, #0
 8008760:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008762:	4b60      	ldr	r3, [pc, #384]	; (80088e4 <HAL_UART_MspInit+0x458>)
 8008764:	2200      	movs	r2, #0
 8008766:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008768:	4b5e      	ldr	r3, [pc, #376]	; (80088e4 <HAL_UART_MspInit+0x458>)
 800876a:	2200      	movs	r2, #0
 800876c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800876e:	485d      	ldr	r0, [pc, #372]	; (80088e4 <HAL_UART_MspInit+0x458>)
 8008770:	f7f8 fb9c 	bl	8000eac <HAL_DMA_Init>
 8008774:	4603      	mov	r3, r0
 8008776:	2b00      	cmp	r3, #0
 8008778:	d001      	beq.n	800877e <HAL_UART_MspInit+0x2f2>
      Error_Handler();
 800877a:	f7ff fb81 	bl	8007e80 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4a58      	ldr	r2, [pc, #352]	; (80088e4 <HAL_UART_MspInit+0x458>)
 8008782:	631a      	str	r2, [r3, #48]	; 0x30
 8008784:	4a57      	ldr	r2, [pc, #348]	; (80088e4 <HAL_UART_MspInit+0x458>)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800878a:	2200      	movs	r2, #0
 800878c:	2100      	movs	r1, #0
 800878e:	2026      	movs	r0, #38	; 0x26
 8008790:	f7f8 fb55 	bl	8000e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008794:	2026      	movs	r0, #38	; 0x26
 8008796:	f7f8 fb6e 	bl	8000e76 <HAL_NVIC_EnableIRQ>
}
 800879a:	e0ec      	b.n	8008976 <HAL_UART_MspInit+0x4ea>
  else if(uartHandle->Instance==USART3)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a52      	ldr	r2, [pc, #328]	; (80088ec <HAL_UART_MspInit+0x460>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	f040 80ae 	bne.w	8008904 <HAL_UART_MspInit+0x478>
    __HAL_RCC_USART3_CLK_ENABLE();
 80087a8:	2300      	movs	r3, #0
 80087aa:	61bb      	str	r3, [r7, #24]
 80087ac:	4b49      	ldr	r3, [pc, #292]	; (80088d4 <HAL_UART_MspInit+0x448>)
 80087ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b0:	4a48      	ldr	r2, [pc, #288]	; (80088d4 <HAL_UART_MspInit+0x448>)
 80087b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80087b6:	6413      	str	r3, [r2, #64]	; 0x40
 80087b8:	4b46      	ldr	r3, [pc, #280]	; (80088d4 <HAL_UART_MspInit+0x448>)
 80087ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80087c0:	61bb      	str	r3, [r7, #24]
 80087c2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80087c4:	2300      	movs	r3, #0
 80087c6:	617b      	str	r3, [r7, #20]
 80087c8:	4b42      	ldr	r3, [pc, #264]	; (80088d4 <HAL_UART_MspInit+0x448>)
 80087ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087cc:	4a41      	ldr	r2, [pc, #260]	; (80088d4 <HAL_UART_MspInit+0x448>)
 80087ce:	f043 0304 	orr.w	r3, r3, #4
 80087d2:	6313      	str	r3, [r2, #48]	; 0x30
 80087d4:	4b3f      	ldr	r3, [pc, #252]	; (80088d4 <HAL_UART_MspInit+0x448>)
 80087d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087d8:	f003 0304 	and.w	r3, r3, #4
 80087dc:	617b      	str	r3, [r7, #20]
 80087de:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80087e0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80087e4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087e6:	2302      	movs	r3, #2
 80087e8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80087ea:	2301      	movs	r3, #1
 80087ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087ee:	2303      	movs	r3, #3
 80087f0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80087f2:	2307      	movs	r3, #7
 80087f4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80087f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80087fa:	4619      	mov	r1, r3
 80087fc:	483c      	ldr	r0, [pc, #240]	; (80088f0 <HAL_UART_MspInit+0x464>)
 80087fe:	f7f8 feed 	bl	80015dc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8008802:	4b3c      	ldr	r3, [pc, #240]	; (80088f4 <HAL_UART_MspInit+0x468>)
 8008804:	4a3c      	ldr	r2, [pc, #240]	; (80088f8 <HAL_UART_MspInit+0x46c>)
 8008806:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8008808:	4b3a      	ldr	r3, [pc, #232]	; (80088f4 <HAL_UART_MspInit+0x468>)
 800880a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800880e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008810:	4b38      	ldr	r3, [pc, #224]	; (80088f4 <HAL_UART_MspInit+0x468>)
 8008812:	2200      	movs	r2, #0
 8008814:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008816:	4b37      	ldr	r3, [pc, #220]	; (80088f4 <HAL_UART_MspInit+0x468>)
 8008818:	2200      	movs	r2, #0
 800881a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800881c:	4b35      	ldr	r3, [pc, #212]	; (80088f4 <HAL_UART_MspInit+0x468>)
 800881e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008822:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008824:	4b33      	ldr	r3, [pc, #204]	; (80088f4 <HAL_UART_MspInit+0x468>)
 8008826:	2200      	movs	r2, #0
 8008828:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800882a:	4b32      	ldr	r3, [pc, #200]	; (80088f4 <HAL_UART_MspInit+0x468>)
 800882c:	2200      	movs	r2, #0
 800882e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8008830:	4b30      	ldr	r3, [pc, #192]	; (80088f4 <HAL_UART_MspInit+0x468>)
 8008832:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008836:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008838:	4b2e      	ldr	r3, [pc, #184]	; (80088f4 <HAL_UART_MspInit+0x468>)
 800883a:	2200      	movs	r2, #0
 800883c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800883e:	4b2d      	ldr	r3, [pc, #180]	; (80088f4 <HAL_UART_MspInit+0x468>)
 8008840:	2200      	movs	r2, #0
 8008842:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8008844:	482b      	ldr	r0, [pc, #172]	; (80088f4 <HAL_UART_MspInit+0x468>)
 8008846:	f7f8 fb31 	bl	8000eac <HAL_DMA_Init>
 800884a:	4603      	mov	r3, r0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d001      	beq.n	8008854 <HAL_UART_MspInit+0x3c8>
      Error_Handler();
 8008850:	f7ff fb16 	bl	8007e80 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	4a27      	ldr	r2, [pc, #156]	; (80088f4 <HAL_UART_MspInit+0x468>)
 8008858:	635a      	str	r2, [r3, #52]	; 0x34
 800885a:	4a26      	ldr	r2, [pc, #152]	; (80088f4 <HAL_UART_MspInit+0x468>)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8008860:	4b26      	ldr	r3, [pc, #152]	; (80088fc <HAL_UART_MspInit+0x470>)
 8008862:	4a27      	ldr	r2, [pc, #156]	; (8008900 <HAL_UART_MspInit+0x474>)
 8008864:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8008866:	4b25      	ldr	r3, [pc, #148]	; (80088fc <HAL_UART_MspInit+0x470>)
 8008868:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800886c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800886e:	4b23      	ldr	r3, [pc, #140]	; (80088fc <HAL_UART_MspInit+0x470>)
 8008870:	2240      	movs	r2, #64	; 0x40
 8008872:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008874:	4b21      	ldr	r3, [pc, #132]	; (80088fc <HAL_UART_MspInit+0x470>)
 8008876:	2200      	movs	r2, #0
 8008878:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800887a:	4b20      	ldr	r3, [pc, #128]	; (80088fc <HAL_UART_MspInit+0x470>)
 800887c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008880:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008882:	4b1e      	ldr	r3, [pc, #120]	; (80088fc <HAL_UART_MspInit+0x470>)
 8008884:	2200      	movs	r2, #0
 8008886:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008888:	4b1c      	ldr	r3, [pc, #112]	; (80088fc <HAL_UART_MspInit+0x470>)
 800888a:	2200      	movs	r2, #0
 800888c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800888e:	4b1b      	ldr	r3, [pc, #108]	; (80088fc <HAL_UART_MspInit+0x470>)
 8008890:	2200      	movs	r2, #0
 8008892:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008894:	4b19      	ldr	r3, [pc, #100]	; (80088fc <HAL_UART_MspInit+0x470>)
 8008896:	2200      	movs	r2, #0
 8008898:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800889a:	4b18      	ldr	r3, [pc, #96]	; (80088fc <HAL_UART_MspInit+0x470>)
 800889c:	2200      	movs	r2, #0
 800889e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80088a0:	4816      	ldr	r0, [pc, #88]	; (80088fc <HAL_UART_MspInit+0x470>)
 80088a2:	f7f8 fb03 	bl	8000eac <HAL_DMA_Init>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d001      	beq.n	80088b0 <HAL_UART_MspInit+0x424>
      Error_Handler();
 80088ac:	f7ff fae8 	bl	8007e80 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	4a12      	ldr	r2, [pc, #72]	; (80088fc <HAL_UART_MspInit+0x470>)
 80088b4:	631a      	str	r2, [r3, #48]	; 0x30
 80088b6:	4a11      	ldr	r2, [pc, #68]	; (80088fc <HAL_UART_MspInit+0x470>)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80088bc:	2200      	movs	r2, #0
 80088be:	2100      	movs	r1, #0
 80088c0:	2027      	movs	r0, #39	; 0x27
 80088c2:	f7f8 fabc 	bl	8000e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80088c6:	2027      	movs	r0, #39	; 0x27
 80088c8:	f7f8 fad5 	bl	8000e76 <HAL_NVIC_EnableIRQ>
}
 80088cc:	e053      	b.n	8008976 <HAL_UART_MspInit+0x4ea>
 80088ce:	bf00      	nop
 80088d0:	40004400 	.word	0x40004400
 80088d4:	40023800 	.word	0x40023800
 80088d8:	40020000 	.word	0x40020000
 80088dc:	20001ae8 	.word	0x20001ae8
 80088e0:	40026088 	.word	0x40026088
 80088e4:	20001d08 	.word	0x20001d08
 80088e8:	400260a0 	.word	0x400260a0
 80088ec:	40004800 	.word	0x40004800
 80088f0:	40020800 	.word	0x40020800
 80088f4:	20001b48 	.word	0x20001b48
 80088f8:	40026028 	.word	0x40026028
 80088fc:	20001be8 	.word	0x20001be8
 8008900:	40026058 	.word	0x40026058
  else if(uartHandle->Instance==USART6)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a1d      	ldr	r2, [pc, #116]	; (8008980 <HAL_UART_MspInit+0x4f4>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d133      	bne.n	8008976 <HAL_UART_MspInit+0x4ea>
    __HAL_RCC_USART6_CLK_ENABLE();
 800890e:	2300      	movs	r3, #0
 8008910:	613b      	str	r3, [r7, #16]
 8008912:	4b1c      	ldr	r3, [pc, #112]	; (8008984 <HAL_UART_MspInit+0x4f8>)
 8008914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008916:	4a1b      	ldr	r2, [pc, #108]	; (8008984 <HAL_UART_MspInit+0x4f8>)
 8008918:	f043 0320 	orr.w	r3, r3, #32
 800891c:	6453      	str	r3, [r2, #68]	; 0x44
 800891e:	4b19      	ldr	r3, [pc, #100]	; (8008984 <HAL_UART_MspInit+0x4f8>)
 8008920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008922:	f003 0320 	and.w	r3, r3, #32
 8008926:	613b      	str	r3, [r7, #16]
 8008928:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800892a:	2300      	movs	r3, #0
 800892c:	60fb      	str	r3, [r7, #12]
 800892e:	4b15      	ldr	r3, [pc, #84]	; (8008984 <HAL_UART_MspInit+0x4f8>)
 8008930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008932:	4a14      	ldr	r2, [pc, #80]	; (8008984 <HAL_UART_MspInit+0x4f8>)
 8008934:	f043 0304 	orr.w	r3, r3, #4
 8008938:	6313      	str	r3, [r2, #48]	; 0x30
 800893a:	4b12      	ldr	r3, [pc, #72]	; (8008984 <HAL_UART_MspInit+0x4f8>)
 800893c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800893e:	f003 0304 	and.w	r3, r3, #4
 8008942:	60fb      	str	r3, [r7, #12]
 8008944:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008946:	23c0      	movs	r3, #192	; 0xc0
 8008948:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800894a:	2302      	movs	r3, #2
 800894c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800894e:	2301      	movs	r3, #1
 8008950:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008952:	2303      	movs	r3, #3
 8008954:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8008956:	2308      	movs	r3, #8
 8008958:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800895a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800895e:	4619      	mov	r1, r3
 8008960:	4809      	ldr	r0, [pc, #36]	; (8008988 <HAL_UART_MspInit+0x4fc>)
 8008962:	f7f8 fe3b 	bl	80015dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8008966:	2200      	movs	r2, #0
 8008968:	2100      	movs	r1, #0
 800896a:	2047      	movs	r0, #71	; 0x47
 800896c:	f7f8 fa67 	bl	8000e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8008970:	2047      	movs	r0, #71	; 0x47
 8008972:	f7f8 fa80 	bl	8000e76 <HAL_NVIC_EnableIRQ>
}
 8008976:	bf00      	nop
 8008978:	3748      	adds	r7, #72	; 0x48
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop
 8008980:	40011400 	.word	0x40011400
 8008984:	40023800 	.word	0x40023800
 8008988:	40020800 	.word	0x40020800

0800898c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008990:	2200      	movs	r2, #0
 8008992:	4912      	ldr	r1, [pc, #72]	; (80089dc <MX_USB_DEVICE_Init+0x50>)
 8008994:	4812      	ldr	r0, [pc, #72]	; (80089e0 <MX_USB_DEVICE_Init+0x54>)
 8008996:	f7fd ff96 	bl	80068c6 <USBD_Init>
 800899a:	4603      	mov	r3, r0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d001      	beq.n	80089a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80089a0:	f7ff fa6e 	bl	8007e80 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80089a4:	490f      	ldr	r1, [pc, #60]	; (80089e4 <MX_USB_DEVICE_Init+0x58>)
 80089a6:	480e      	ldr	r0, [pc, #56]	; (80089e0 <MX_USB_DEVICE_Init+0x54>)
 80089a8:	f7fd ffb8 	bl	800691c <USBD_RegisterClass>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d001      	beq.n	80089b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80089b2:	f7ff fa65 	bl	8007e80 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80089b6:	490c      	ldr	r1, [pc, #48]	; (80089e8 <MX_USB_DEVICE_Init+0x5c>)
 80089b8:	4809      	ldr	r0, [pc, #36]	; (80089e0 <MX_USB_DEVICE_Init+0x54>)
 80089ba:	f7fd ff15 	bl	80067e8 <USBD_CDC_RegisterInterface>
 80089be:	4603      	mov	r3, r0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d001      	beq.n	80089c8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80089c4:	f7ff fa5c 	bl	8007e80 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80089c8:	4805      	ldr	r0, [pc, #20]	; (80089e0 <MX_USB_DEVICE_Init+0x54>)
 80089ca:	f7fd ffc1 	bl	8006950 <USBD_Start>
 80089ce:	4603      	mov	r3, r0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d001      	beq.n	80089d8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80089d4:	f7ff fa54 	bl	8007e80 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80089d8:	bf00      	nop
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	2000012c 	.word	0x2000012c
 80089e0:	20001e68 	.word	0x20001e68
 80089e4:	20000014 	.word	0x20000014
 80089e8:	2000011c 	.word	0x2000011c

080089ec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80089f0:	2200      	movs	r2, #0
 80089f2:	4905      	ldr	r1, [pc, #20]	; (8008a08 <CDC_Init_FS+0x1c>)
 80089f4:	4805      	ldr	r0, [pc, #20]	; (8008a0c <CDC_Init_FS+0x20>)
 80089f6:	f7fd ff0e 	bl	8006816 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80089fa:	4905      	ldr	r1, [pc, #20]	; (8008a10 <CDC_Init_FS+0x24>)
 80089fc:	4803      	ldr	r0, [pc, #12]	; (8008a0c <CDC_Init_FS+0x20>)
 80089fe:	f7fd ff24 	bl	800684a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008a02:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	20002904 	.word	0x20002904
 8008a0c:	20001e68 	.word	0x20001e68
 8008a10:	20002104 	.word	0x20002104

08008a14 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008a14:	b480      	push	{r7}
 8008a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008a18:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	6039      	str	r1, [r7, #0]
 8008a2e:	71fb      	strb	r3, [r7, #7]
 8008a30:	4613      	mov	r3, r2
 8008a32:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008a34:	79fb      	ldrb	r3, [r7, #7]
 8008a36:	2b23      	cmp	r3, #35	; 0x23
 8008a38:	d84a      	bhi.n	8008ad0 <CDC_Control_FS+0xac>
 8008a3a:	a201      	add	r2, pc, #4	; (adr r2, 8008a40 <CDC_Control_FS+0x1c>)
 8008a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a40:	08008ad1 	.word	0x08008ad1
 8008a44:	08008ad1 	.word	0x08008ad1
 8008a48:	08008ad1 	.word	0x08008ad1
 8008a4c:	08008ad1 	.word	0x08008ad1
 8008a50:	08008ad1 	.word	0x08008ad1
 8008a54:	08008ad1 	.word	0x08008ad1
 8008a58:	08008ad1 	.word	0x08008ad1
 8008a5c:	08008ad1 	.word	0x08008ad1
 8008a60:	08008ad1 	.word	0x08008ad1
 8008a64:	08008ad1 	.word	0x08008ad1
 8008a68:	08008ad1 	.word	0x08008ad1
 8008a6c:	08008ad1 	.word	0x08008ad1
 8008a70:	08008ad1 	.word	0x08008ad1
 8008a74:	08008ad1 	.word	0x08008ad1
 8008a78:	08008ad1 	.word	0x08008ad1
 8008a7c:	08008ad1 	.word	0x08008ad1
 8008a80:	08008ad1 	.word	0x08008ad1
 8008a84:	08008ad1 	.word	0x08008ad1
 8008a88:	08008ad1 	.word	0x08008ad1
 8008a8c:	08008ad1 	.word	0x08008ad1
 8008a90:	08008ad1 	.word	0x08008ad1
 8008a94:	08008ad1 	.word	0x08008ad1
 8008a98:	08008ad1 	.word	0x08008ad1
 8008a9c:	08008ad1 	.word	0x08008ad1
 8008aa0:	08008ad1 	.word	0x08008ad1
 8008aa4:	08008ad1 	.word	0x08008ad1
 8008aa8:	08008ad1 	.word	0x08008ad1
 8008aac:	08008ad1 	.word	0x08008ad1
 8008ab0:	08008ad1 	.word	0x08008ad1
 8008ab4:	08008ad1 	.word	0x08008ad1
 8008ab8:	08008ad1 	.word	0x08008ad1
 8008abc:	08008ad1 	.word	0x08008ad1
 8008ac0:	08008ad1 	.word	0x08008ad1
 8008ac4:	08008ad1 	.word	0x08008ad1
 8008ac8:	08008ad1 	.word	0x08008ad1
 8008acc:	08008ad1 	.word	0x08008ad1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008ad0:	bf00      	nop
  }

  return (USBD_OK);
 8008ad2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	370c      	adds	r7, #12
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008aea:	6879      	ldr	r1, [r7, #4]
 8008aec:	4808      	ldr	r0, [pc, #32]	; (8008b10 <CDC_Receive_FS+0x30>)
 8008aee:	f7fd feac 	bl	800684a <USBD_CDC_SetRxBuffer>
  Buf[*Len] = 0;
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	4413      	add	r3, r2
 8008afa:	2200      	movs	r2, #0
 8008afc:	701a      	strb	r2, [r3, #0]
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008afe:	4804      	ldr	r0, [pc, #16]	; (8008b10 <CDC_Receive_FS+0x30>)
 8008b00:	f7fd feb7 	bl	8006872 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008b04:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3708      	adds	r7, #8
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	bf00      	nop
 8008b10:	20001e68 	.word	0x20001e68

08008b14 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b08a      	sub	sp, #40	; 0x28
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b1c:	f107 0314 	add.w	r3, r7, #20
 8008b20:	2200      	movs	r2, #0
 8008b22:	601a      	str	r2, [r3, #0]
 8008b24:	605a      	str	r2, [r3, #4]
 8008b26:	609a      	str	r2, [r3, #8]
 8008b28:	60da      	str	r2, [r3, #12]
 8008b2a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b34:	d13a      	bne.n	8008bac <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b36:	2300      	movs	r3, #0
 8008b38:	613b      	str	r3, [r7, #16]
 8008b3a:	4b1e      	ldr	r3, [pc, #120]	; (8008bb4 <HAL_PCD_MspInit+0xa0>)
 8008b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b3e:	4a1d      	ldr	r2, [pc, #116]	; (8008bb4 <HAL_PCD_MspInit+0xa0>)
 8008b40:	f043 0301 	orr.w	r3, r3, #1
 8008b44:	6313      	str	r3, [r2, #48]	; 0x30
 8008b46:	4b1b      	ldr	r3, [pc, #108]	; (8008bb4 <HAL_PCD_MspInit+0xa0>)
 8008b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b4a:	f003 0301 	and.w	r3, r3, #1
 8008b4e:	613b      	str	r3, [r7, #16]
 8008b50:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008b52:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b58:	2302      	movs	r3, #2
 8008b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b60:	2303      	movs	r3, #3
 8008b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008b64:	230a      	movs	r3, #10
 8008b66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b68:	f107 0314 	add.w	r3, r7, #20
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	4812      	ldr	r0, [pc, #72]	; (8008bb8 <HAL_PCD_MspInit+0xa4>)
 8008b70:	f7f8 fd34 	bl	80015dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008b74:	4b0f      	ldr	r3, [pc, #60]	; (8008bb4 <HAL_PCD_MspInit+0xa0>)
 8008b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b78:	4a0e      	ldr	r2, [pc, #56]	; (8008bb4 <HAL_PCD_MspInit+0xa0>)
 8008b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b7e:	6353      	str	r3, [r2, #52]	; 0x34
 8008b80:	2300      	movs	r3, #0
 8008b82:	60fb      	str	r3, [r7, #12]
 8008b84:	4b0b      	ldr	r3, [pc, #44]	; (8008bb4 <HAL_PCD_MspInit+0xa0>)
 8008b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b88:	4a0a      	ldr	r2, [pc, #40]	; (8008bb4 <HAL_PCD_MspInit+0xa0>)
 8008b8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008b8e:	6453      	str	r3, [r2, #68]	; 0x44
 8008b90:	4b08      	ldr	r3, [pc, #32]	; (8008bb4 <HAL_PCD_MspInit+0xa0>)
 8008b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b98:	60fb      	str	r3, [r7, #12]
 8008b9a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	2100      	movs	r1, #0
 8008ba0:	2043      	movs	r0, #67	; 0x43
 8008ba2:	f7f8 f94c 	bl	8000e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008ba6:	2043      	movs	r0, #67	; 0x43
 8008ba8:	f7f8 f965 	bl	8000e76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008bac:	bf00      	nop
 8008bae:	3728      	adds	r7, #40	; 0x28
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	40023800 	.word	0x40023800
 8008bb8:	40020000 	.word	0x40020000

08008bbc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	4610      	mov	r0, r2
 8008bd4:	f7fd ff05 	bl	80069e2 <USBD_LL_SetupStage>
}
 8008bd8:	bf00      	nop
 8008bda:	3708      	adds	r7, #8
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b082      	sub	sp, #8
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	460b      	mov	r3, r1
 8008bea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008bf2:	78fa      	ldrb	r2, [r7, #3]
 8008bf4:	6879      	ldr	r1, [r7, #4]
 8008bf6:	4613      	mov	r3, r2
 8008bf8:	00db      	lsls	r3, r3, #3
 8008bfa:	1a9b      	subs	r3, r3, r2
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	440b      	add	r3, r1
 8008c00:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008c04:	681a      	ldr	r2, [r3, #0]
 8008c06:	78fb      	ldrb	r3, [r7, #3]
 8008c08:	4619      	mov	r1, r3
 8008c0a:	f7fd ff35 	bl	8006a78 <USBD_LL_DataOutStage>
}
 8008c0e:	bf00      	nop
 8008c10:	3708      	adds	r7, #8
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}

08008c16 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c16:	b580      	push	{r7, lr}
 8008c18:	b082      	sub	sp, #8
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
 8008c1e:	460b      	mov	r3, r1
 8008c20:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008c28:	78fa      	ldrb	r2, [r7, #3]
 8008c2a:	6879      	ldr	r1, [r7, #4]
 8008c2c:	4613      	mov	r3, r2
 8008c2e:	00db      	lsls	r3, r3, #3
 8008c30:	1a9b      	subs	r3, r3, r2
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	440b      	add	r3, r1
 8008c36:	3348      	adds	r3, #72	; 0x48
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	78fb      	ldrb	r3, [r7, #3]
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	f7fd ff8c 	bl	8006b5a <USBD_LL_DataInStage>
}
 8008c42:	bf00      	nop
 8008c44:	3708      	adds	r7, #8
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}

08008c4a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c4a:	b580      	push	{r7, lr}
 8008c4c:	b082      	sub	sp, #8
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7fe f89a 	bl	8006d92 <USBD_LL_SOF>
}
 8008c5e:	bf00      	nop
 8008c60:	3708      	adds	r7, #8
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8008c66:	b580      	push	{r7, lr}
 8008c68:	b084      	sub	sp, #16
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	68db      	ldr	r3, [r3, #12]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d102      	bne.n	8008c80 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	73fb      	strb	r3, [r7, #15]
 8008c7e:	e008      	b.n	8008c92 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	68db      	ldr	r3, [r3, #12]
 8008c84:	2b02      	cmp	r3, #2
 8008c86:	d102      	bne.n	8008c8e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	73fb      	strb	r3, [r7, #15]
 8008c8c:	e001      	b.n	8008c92 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008c8e:	f7ff f8f7 	bl	8007e80 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008c98:	7bfa      	ldrb	r2, [r7, #15]
 8008c9a:	4611      	mov	r1, r2
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f7fe f842 	bl	8006d26 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f7fd fffb 	bl	8006ca4 <USBD_LL_Reset>
}
 8008cae:	bf00      	nop
 8008cb0:	3710      	adds	r7, #16
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
	...

08008cb8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b082      	sub	sp, #8
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f7fe f83d 	bl	8006d46 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	6812      	ldr	r2, [r2, #0]
 8008cda:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008cde:	f043 0301 	orr.w	r3, r3, #1
 8008ce2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6a1b      	ldr	r3, [r3, #32]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d005      	beq.n	8008cf8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008cec:	4b04      	ldr	r3, [pc, #16]	; (8008d00 <HAL_PCD_SuspendCallback+0x48>)
 8008cee:	691b      	ldr	r3, [r3, #16]
 8008cf0:	4a03      	ldr	r2, [pc, #12]	; (8008d00 <HAL_PCD_SuspendCallback+0x48>)
 8008cf2:	f043 0306 	orr.w	r3, r3, #6
 8008cf6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008cf8:	bf00      	nop
 8008cfa:	3708      	adds	r7, #8
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}
 8008d00:	e000ed00 	.word	0xe000ed00

08008d04 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b082      	sub	sp, #8
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008d12:	4618      	mov	r0, r3
 8008d14:	f7fe f82c 	bl	8006d70 <USBD_LL_Resume>
}
 8008d18:	bf00      	nop
 8008d1a:	3708      	adds	r7, #8
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	460b      	mov	r3, r1
 8008d2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008d32:	78fa      	ldrb	r2, [r7, #3]
 8008d34:	4611      	mov	r1, r2
 8008d36:	4618      	mov	r0, r3
 8008d38:	f7fe f852 	bl	8006de0 <USBD_LL_IsoOUTIncomplete>
}
 8008d3c:	bf00      	nop
 8008d3e:	3708      	adds	r7, #8
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b082      	sub	sp, #8
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008d56:	78fa      	ldrb	r2, [r7, #3]
 8008d58:	4611      	mov	r1, r2
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f7fe f833 	bl	8006dc6 <USBD_LL_IsoINIncomplete>
}
 8008d60:	bf00      	nop
 8008d62:	3708      	adds	r7, #8
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008d76:	4618      	mov	r0, r3
 8008d78:	f7fe f83f 	bl	8006dfa <USBD_LL_DevConnected>
}
 8008d7c:	bf00      	nop
 8008d7e:	3708      	adds	r7, #8
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008d92:	4618      	mov	r0, r3
 8008d94:	f7fe f83c 	bl	8006e10 <USBD_LL_DevDisconnected>
}
 8008d98:	bf00      	nop
 8008d9a:	3708      	adds	r7, #8
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d13c      	bne.n	8008e2a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008db0:	4a20      	ldr	r2, [pc, #128]	; (8008e34 <USBD_LL_Init+0x94>)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	4a1e      	ldr	r2, [pc, #120]	; (8008e34 <USBD_LL_Init+0x94>)
 8008dbc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008dc0:	4b1c      	ldr	r3, [pc, #112]	; (8008e34 <USBD_LL_Init+0x94>)
 8008dc2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008dc6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008dc8:	4b1a      	ldr	r3, [pc, #104]	; (8008e34 <USBD_LL_Init+0x94>)
 8008dca:	2206      	movs	r2, #6
 8008dcc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008dce:	4b19      	ldr	r3, [pc, #100]	; (8008e34 <USBD_LL_Init+0x94>)
 8008dd0:	2202      	movs	r2, #2
 8008dd2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008dd4:	4b17      	ldr	r3, [pc, #92]	; (8008e34 <USBD_LL_Init+0x94>)
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008dda:	4b16      	ldr	r3, [pc, #88]	; (8008e34 <USBD_LL_Init+0x94>)
 8008ddc:	2202      	movs	r2, #2
 8008dde:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008de0:	4b14      	ldr	r3, [pc, #80]	; (8008e34 <USBD_LL_Init+0x94>)
 8008de2:	2200      	movs	r2, #0
 8008de4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008de6:	4b13      	ldr	r3, [pc, #76]	; (8008e34 <USBD_LL_Init+0x94>)
 8008de8:	2200      	movs	r2, #0
 8008dea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008dec:	4b11      	ldr	r3, [pc, #68]	; (8008e34 <USBD_LL_Init+0x94>)
 8008dee:	2200      	movs	r2, #0
 8008df0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008df2:	4b10      	ldr	r3, [pc, #64]	; (8008e34 <USBD_LL_Init+0x94>)
 8008df4:	2200      	movs	r2, #0
 8008df6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008df8:	4b0e      	ldr	r3, [pc, #56]	; (8008e34 <USBD_LL_Init+0x94>)
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008dfe:	480d      	ldr	r0, [pc, #52]	; (8008e34 <USBD_LL_Init+0x94>)
 8008e00:	f7f8 fdb2 	bl	8001968 <HAL_PCD_Init>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d001      	beq.n	8008e0e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008e0a:	f7ff f839 	bl	8007e80 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008e0e:	2180      	movs	r1, #128	; 0x80
 8008e10:	4808      	ldr	r0, [pc, #32]	; (8008e34 <USBD_LL_Init+0x94>)
 8008e12:	f7f9 ff4a 	bl	8002caa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008e16:	2240      	movs	r2, #64	; 0x40
 8008e18:	2100      	movs	r1, #0
 8008e1a:	4806      	ldr	r0, [pc, #24]	; (8008e34 <USBD_LL_Init+0x94>)
 8008e1c:	f7f9 fefe 	bl	8002c1c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008e20:	2280      	movs	r2, #128	; 0x80
 8008e22:	2101      	movs	r1, #1
 8008e24:	4803      	ldr	r0, [pc, #12]	; (8008e34 <USBD_LL_Init+0x94>)
 8008e26:	f7f9 fef9 	bl	8002c1c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008e2a:	2300      	movs	r3, #0
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3708      	adds	r7, #8
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}
 8008e34:	20003104 	.word	0x20003104

08008e38 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b084      	sub	sp, #16
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e40:	2300      	movs	r3, #0
 8008e42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e44:	2300      	movs	r3, #0
 8008e46:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7f8 feae 	bl	8001bb0 <HAL_PCD_Start>
 8008e54:	4603      	mov	r3, r0
 8008e56:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8008e58:	7bfb      	ldrb	r3, [r7, #15]
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f000 f97c 	bl	8009158 <USBD_Get_USB_Status>
 8008e60:	4603      	mov	r3, r0
 8008e62:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008e64:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3710      	adds	r7, #16
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b084      	sub	sp, #16
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
 8008e76:	4608      	mov	r0, r1
 8008e78:	4611      	mov	r1, r2
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	70fb      	strb	r3, [r7, #3]
 8008e80:	460b      	mov	r3, r1
 8008e82:	70bb      	strb	r3, [r7, #2]
 8008e84:	4613      	mov	r3, r2
 8008e86:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008e96:	78bb      	ldrb	r3, [r7, #2]
 8008e98:	883a      	ldrh	r2, [r7, #0]
 8008e9a:	78f9      	ldrb	r1, [r7, #3]
 8008e9c:	f7f9 fab0 	bl	8002400 <HAL_PCD_EP_Open>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ea4:	7bfb      	ldrb	r3, [r7, #15]
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f000 f956 	bl	8009158 <USBD_Get_USB_Status>
 8008eac:	4603      	mov	r3, r0
 8008eae:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008eb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3710      	adds	r7, #16
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}

08008eba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	b084      	sub	sp, #16
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
 8008ec2:	460b      	mov	r3, r1
 8008ec4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008ed4:	78fa      	ldrb	r2, [r7, #3]
 8008ed6:	4611      	mov	r1, r2
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7f9 faf9 	bl	80024d0 <HAL_PCD_EP_Close>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8008ee2:	7bfb      	ldrb	r3, [r7, #15]
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f000 f937 	bl	8009158 <USBD_Get_USB_Status>
 8008eea:	4603      	mov	r3, r0
 8008eec:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8008eee:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3710      	adds	r7, #16
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b084      	sub	sp, #16
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	460b      	mov	r3, r1
 8008f02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f04:	2300      	movs	r3, #0
 8008f06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008f12:	78fa      	ldrb	r2, [r7, #3]
 8008f14:	4611      	mov	r1, r2
 8008f16:	4618      	mov	r0, r3
 8008f18:	f7f9 fbd1 	bl	80026be <HAL_PCD_EP_SetStall>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f20:	7bfb      	ldrb	r3, [r7, #15]
 8008f22:	4618      	mov	r0, r3
 8008f24:	f000 f918 	bl	8009158 <USBD_Get_USB_Status>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8008f2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3710      	adds	r7, #16
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}

08008f36 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b084      	sub	sp, #16
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
 8008f3e:	460b      	mov	r3, r1
 8008f40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f42:	2300      	movs	r3, #0
 8008f44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f46:	2300      	movs	r3, #0
 8008f48:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008f50:	78fa      	ldrb	r2, [r7, #3]
 8008f52:	4611      	mov	r1, r2
 8008f54:	4618      	mov	r0, r3
 8008f56:	f7f9 fc16 	bl	8002786 <HAL_PCD_EP_ClrStall>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8008f5e:	7bfb      	ldrb	r3, [r7, #15]
 8008f60:	4618      	mov	r0, r3
 8008f62:	f000 f8f9 	bl	8009158 <USBD_Get_USB_Status>
 8008f66:	4603      	mov	r3, r0
 8008f68:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8008f6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3710      	adds	r7, #16
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b085      	sub	sp, #20
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	460b      	mov	r3, r1
 8008f7e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008f86:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8008f88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	da0b      	bge.n	8008fa8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8008f90:	78fb      	ldrb	r3, [r7, #3]
 8008f92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f96:	68f9      	ldr	r1, [r7, #12]
 8008f98:	4613      	mov	r3, r2
 8008f9a:	00db      	lsls	r3, r3, #3
 8008f9c:	1a9b      	subs	r3, r3, r2
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	440b      	add	r3, r1
 8008fa2:	333e      	adds	r3, #62	; 0x3e
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	e00b      	b.n	8008fc0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8008fa8:	78fb      	ldrb	r3, [r7, #3]
 8008faa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fae:	68f9      	ldr	r1, [r7, #12]
 8008fb0:	4613      	mov	r3, r2
 8008fb2:	00db      	lsls	r3, r3, #3
 8008fb4:	1a9b      	subs	r3, r3, r2
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	440b      	add	r3, r1
 8008fba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008fbe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3714      	adds	r7, #20
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr

08008fcc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008fe6:	78fa      	ldrb	r2, [r7, #3]
 8008fe8:	4611      	mov	r1, r2
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7f9 f9e3 	bl	80023b6 <HAL_PCD_SetAddress>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ff4:	7bfb      	ldrb	r3, [r7, #15]
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f000 f8ae 	bl	8009158 <USBD_Get_USB_Status>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8009000:	7bbb      	ldrb	r3, [r7, #14]
}
 8009002:	4618      	mov	r0, r3
 8009004:	3710      	adds	r7, #16
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}

0800900a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800900a:	b580      	push	{r7, lr}
 800900c:	b086      	sub	sp, #24
 800900e:	af00      	add	r7, sp, #0
 8009010:	60f8      	str	r0, [r7, #12]
 8009012:	607a      	str	r2, [r7, #4]
 8009014:	461a      	mov	r2, r3
 8009016:	460b      	mov	r3, r1
 8009018:	72fb      	strb	r3, [r7, #11]
 800901a:	4613      	mov	r3, r2
 800901c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800901e:	2300      	movs	r3, #0
 8009020:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009022:	2300      	movs	r3, #0
 8009024:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800902c:	893b      	ldrh	r3, [r7, #8]
 800902e:	7af9      	ldrb	r1, [r7, #11]
 8009030:	687a      	ldr	r2, [r7, #4]
 8009032:	f7f9 fafa 	bl	800262a <HAL_PCD_EP_Transmit>
 8009036:	4603      	mov	r3, r0
 8009038:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800903a:	7dfb      	ldrb	r3, [r7, #23]
 800903c:	4618      	mov	r0, r3
 800903e:	f000 f88b 	bl	8009158 <USBD_Get_USB_Status>
 8009042:	4603      	mov	r3, r0
 8009044:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8009046:	7dbb      	ldrb	r3, [r7, #22]
}
 8009048:	4618      	mov	r0, r3
 800904a:	3718      	adds	r7, #24
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b086      	sub	sp, #24
 8009054:	af00      	add	r7, sp, #0
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	607a      	str	r2, [r7, #4]
 800905a:	461a      	mov	r2, r3
 800905c:	460b      	mov	r3, r1
 800905e:	72fb      	strb	r3, [r7, #11]
 8009060:	4613      	mov	r3, r2
 8009062:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009064:	2300      	movs	r3, #0
 8009066:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009068:	2300      	movs	r3, #0
 800906a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009072:	893b      	ldrh	r3, [r7, #8]
 8009074:	7af9      	ldrb	r1, [r7, #11]
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	f7f9 fa74 	bl	8002564 <HAL_PCD_EP_Receive>
 800907c:	4603      	mov	r3, r0
 800907e:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8009080:	7dfb      	ldrb	r3, [r7, #23]
 8009082:	4618      	mov	r0, r3
 8009084:	f000 f868 	bl	8009158 <USBD_Get_USB_Status>
 8009088:	4603      	mov	r3, r0
 800908a:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800908c:	7dbb      	ldrb	r3, [r7, #22]
}
 800908e:	4618      	mov	r0, r3
 8009090:	3718      	adds	r7, #24
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}

08009096 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009096:	b580      	push	{r7, lr}
 8009098:	b082      	sub	sp, #8
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
 800909e:	460b      	mov	r3, r1
 80090a0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80090a8:	78fa      	ldrb	r2, [r7, #3]
 80090aa:	4611      	mov	r1, r2
 80090ac:	4618      	mov	r0, r3
 80090ae:	f7f9 faa4 	bl	80025fa <HAL_PCD_EP_GetRxCount>
 80090b2:	4603      	mov	r3, r0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3708      	adds	r7, #8
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	460b      	mov	r3, r1
 80090c6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80090c8:	78fb      	ldrb	r3, [r7, #3]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d002      	beq.n	80090d4 <HAL_PCDEx_LPM_Callback+0x18>
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d01f      	beq.n	8009112 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 80090d2:	e03b      	b.n	800914c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6a1b      	ldr	r3, [r3, #32]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d007      	beq.n	80090ec <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 80090dc:	f7fe fe46 	bl	8007d6c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80090e0:	4b1c      	ldr	r3, [pc, #112]	; (8009154 <HAL_PCDEx_LPM_Callback+0x98>)
 80090e2:	691b      	ldr	r3, [r3, #16]
 80090e4:	4a1b      	ldr	r2, [pc, #108]	; (8009154 <HAL_PCDEx_LPM_Callback+0x98>)
 80090e6:	f023 0306 	bic.w	r3, r3, #6
 80090ea:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	687a      	ldr	r2, [r7, #4]
 80090f8:	6812      	ldr	r2, [r2, #0]
 80090fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80090fe:	f023 0301 	bic.w	r3, r3, #1
 8009102:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800910a:	4618      	mov	r0, r3
 800910c:	f7fd fe30 	bl	8006d70 <USBD_LL_Resume>
    break;
 8009110:	e01c      	b.n	800914c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	6812      	ldr	r2, [r2, #0]
 8009120:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009124:	f043 0301 	orr.w	r3, r3, #1
 8009128:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009130:	4618      	mov	r0, r3
 8009132:	f7fd fe08 	bl	8006d46 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6a1b      	ldr	r3, [r3, #32]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d005      	beq.n	800914a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800913e:	4b05      	ldr	r3, [pc, #20]	; (8009154 <HAL_PCDEx_LPM_Callback+0x98>)
 8009140:	691b      	ldr	r3, [r3, #16]
 8009142:	4a04      	ldr	r2, [pc, #16]	; (8009154 <HAL_PCDEx_LPM_Callback+0x98>)
 8009144:	f043 0306 	orr.w	r3, r3, #6
 8009148:	6113      	str	r3, [r2, #16]
    break;   
 800914a:	bf00      	nop
}
 800914c:	bf00      	nop
 800914e:	3708      	adds	r7, #8
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}
 8009154:	e000ed00 	.word	0xe000ed00

08009158 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009158:	b480      	push	{r7}
 800915a:	b085      	sub	sp, #20
 800915c:	af00      	add	r7, sp, #0
 800915e:	4603      	mov	r3, r0
 8009160:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009162:	2300      	movs	r3, #0
 8009164:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009166:	79fb      	ldrb	r3, [r7, #7]
 8009168:	2b03      	cmp	r3, #3
 800916a:	d817      	bhi.n	800919c <USBD_Get_USB_Status+0x44>
 800916c:	a201      	add	r2, pc, #4	; (adr r2, 8009174 <USBD_Get_USB_Status+0x1c>)
 800916e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009172:	bf00      	nop
 8009174:	08009185 	.word	0x08009185
 8009178:	0800918b 	.word	0x0800918b
 800917c:	08009191 	.word	0x08009191
 8009180:	08009197 	.word	0x08009197
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009184:	2300      	movs	r3, #0
 8009186:	73fb      	strb	r3, [r7, #15]
    break;
 8009188:	e00b      	b.n	80091a2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800918a:	2302      	movs	r3, #2
 800918c:	73fb      	strb	r3, [r7, #15]
    break;
 800918e:	e008      	b.n	80091a2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009190:	2301      	movs	r3, #1
 8009192:	73fb      	strb	r3, [r7, #15]
    break;
 8009194:	e005      	b.n	80091a2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009196:	2302      	movs	r3, #2
 8009198:	73fb      	strb	r3, [r7, #15]
    break;
 800919a:	e002      	b.n	80091a2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800919c:	2302      	movs	r3, #2
 800919e:	73fb      	strb	r3, [r7, #15]
    break;
 80091a0:	bf00      	nop
  }
  return usb_status;
 80091a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3714      	adds	r7, #20
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr

080091b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b083      	sub	sp, #12
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	4603      	mov	r3, r0
 80091b8:	6039      	str	r1, [r7, #0]
 80091ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	2212      	movs	r2, #18
 80091c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80091c2:	4b03      	ldr	r3, [pc, #12]	; (80091d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	370c      	adds	r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr
 80091d0:	2000014c 	.word	0x2000014c

080091d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	4603      	mov	r3, r0
 80091dc:	6039      	str	r1, [r7, #0]
 80091de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	2204      	movs	r2, #4
 80091e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80091e6:	4b03      	ldr	r3, [pc, #12]	; (80091f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	370c      	adds	r7, #12
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr
 80091f4:	2000016c 	.word	0x2000016c

080091f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	4603      	mov	r3, r0
 8009200:	6039      	str	r1, [r7, #0]
 8009202:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009204:	79fb      	ldrb	r3, [r7, #7]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d105      	bne.n	8009216 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800920a:	683a      	ldr	r2, [r7, #0]
 800920c:	4907      	ldr	r1, [pc, #28]	; (800922c <USBD_FS_ProductStrDescriptor+0x34>)
 800920e:	4808      	ldr	r0, [pc, #32]	; (8009230 <USBD_FS_ProductStrDescriptor+0x38>)
 8009210:	f7fe faf2 	bl	80077f8 <USBD_GetString>
 8009214:	e004      	b.n	8009220 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009216:	683a      	ldr	r2, [r7, #0]
 8009218:	4904      	ldr	r1, [pc, #16]	; (800922c <USBD_FS_ProductStrDescriptor+0x34>)
 800921a:	4805      	ldr	r0, [pc, #20]	; (8009230 <USBD_FS_ProductStrDescriptor+0x38>)
 800921c:	f7fe faec 	bl	80077f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009220:	4b02      	ldr	r3, [pc, #8]	; (800922c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009222:	4618      	mov	r0, r3
 8009224:	3708      	adds	r7, #8
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop
 800922c:	2000350c 	.word	0x2000350c
 8009230:	080098e4 	.word	0x080098e4

08009234 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	af00      	add	r7, sp, #0
 800923a:	4603      	mov	r3, r0
 800923c:	6039      	str	r1, [r7, #0]
 800923e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009240:	683a      	ldr	r2, [r7, #0]
 8009242:	4904      	ldr	r1, [pc, #16]	; (8009254 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009244:	4804      	ldr	r0, [pc, #16]	; (8009258 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009246:	f7fe fad7 	bl	80077f8 <USBD_GetString>
  return USBD_StrDesc;
 800924a:	4b02      	ldr	r3, [pc, #8]	; (8009254 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800924c:	4618      	mov	r0, r3
 800924e:	3708      	adds	r7, #8
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}
 8009254:	2000350c 	.word	0x2000350c
 8009258:	080098fc 	.word	0x080098fc

0800925c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b082      	sub	sp, #8
 8009260:	af00      	add	r7, sp, #0
 8009262:	4603      	mov	r3, r0
 8009264:	6039      	str	r1, [r7, #0]
 8009266:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	221a      	movs	r2, #26
 800926c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800926e:	f000 f855 	bl	800931c <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 8009272:	4b02      	ldr	r3, [pc, #8]	; (800927c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009274:	4618      	mov	r0, r3
 8009276:	3708      	adds	r7, #8
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}
 800927c:	20000170 	.word	0x20000170

08009280 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b082      	sub	sp, #8
 8009284:	af00      	add	r7, sp, #0
 8009286:	4603      	mov	r3, r0
 8009288:	6039      	str	r1, [r7, #0]
 800928a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800928c:	79fb      	ldrb	r3, [r7, #7]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d105      	bne.n	800929e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009292:	683a      	ldr	r2, [r7, #0]
 8009294:	4907      	ldr	r1, [pc, #28]	; (80092b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009296:	4808      	ldr	r0, [pc, #32]	; (80092b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009298:	f7fe faae 	bl	80077f8 <USBD_GetString>
 800929c:	e004      	b.n	80092a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800929e:	683a      	ldr	r2, [r7, #0]
 80092a0:	4904      	ldr	r1, [pc, #16]	; (80092b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80092a2:	4805      	ldr	r0, [pc, #20]	; (80092b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80092a4:	f7fe faa8 	bl	80077f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80092a8:	4b02      	ldr	r3, [pc, #8]	; (80092b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3708      	adds	r7, #8
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
 80092b2:	bf00      	nop
 80092b4:	2000350c 	.word	0x2000350c
 80092b8:	08009910 	.word	0x08009910

080092bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	4603      	mov	r3, r0
 80092c4:	6039      	str	r1, [r7, #0]
 80092c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80092c8:	79fb      	ldrb	r3, [r7, #7]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d105      	bne.n	80092da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80092ce:	683a      	ldr	r2, [r7, #0]
 80092d0:	4907      	ldr	r1, [pc, #28]	; (80092f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80092d2:	4808      	ldr	r0, [pc, #32]	; (80092f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80092d4:	f7fe fa90 	bl	80077f8 <USBD_GetString>
 80092d8:	e004      	b.n	80092e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80092da:	683a      	ldr	r2, [r7, #0]
 80092dc:	4904      	ldr	r1, [pc, #16]	; (80092f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80092de:	4805      	ldr	r0, [pc, #20]	; (80092f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80092e0:	f7fe fa8a 	bl	80077f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80092e4:	4b02      	ldr	r3, [pc, #8]	; (80092f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3708      	adds	r7, #8
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop
 80092f0:	2000350c 	.word	0x2000350c
 80092f4:	0800991c 	.word	0x0800991c

080092f8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b083      	sub	sp, #12
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	4603      	mov	r3, r0
 8009300:	6039      	str	r1, [r7, #0]
 8009302:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	220c      	movs	r2, #12
 8009308:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800930a:	4b03      	ldr	r3, [pc, #12]	; (8009318 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800930c:	4618      	mov	r0, r3
 800930e:	370c      	adds	r7, #12
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr
 8009318:	20000160 	.word	0x20000160

0800931c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009322:	4b0f      	ldr	r3, [pc, #60]	; (8009360 <Get_SerialNum+0x44>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009328:	4b0e      	ldr	r3, [pc, #56]	; (8009364 <Get_SerialNum+0x48>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800932e:	4b0e      	ldr	r3, [pc, #56]	; (8009368 <Get_SerialNum+0x4c>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009334:	68fa      	ldr	r2, [r7, #12]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	4413      	add	r3, r2
 800933a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d009      	beq.n	8009356 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009342:	2208      	movs	r2, #8
 8009344:	4909      	ldr	r1, [pc, #36]	; (800936c <Get_SerialNum+0x50>)
 8009346:	68f8      	ldr	r0, [r7, #12]
 8009348:	f000 f814 	bl	8009374 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800934c:	2204      	movs	r2, #4
 800934e:	4908      	ldr	r1, [pc, #32]	; (8009370 <Get_SerialNum+0x54>)
 8009350:	68b8      	ldr	r0, [r7, #8]
 8009352:	f000 f80f 	bl	8009374 <IntToUnicode>
  }
}
 8009356:	bf00      	nop
 8009358:	3710      	adds	r7, #16
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	1fff7a10 	.word	0x1fff7a10
 8009364:	1fff7a14 	.word	0x1fff7a14
 8009368:	1fff7a18 	.word	0x1fff7a18
 800936c:	20000172 	.word	0x20000172
 8009370:	20000182 	.word	0x20000182

08009374 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009374:	b480      	push	{r7}
 8009376:	b087      	sub	sp, #28
 8009378:	af00      	add	r7, sp, #0
 800937a:	60f8      	str	r0, [r7, #12]
 800937c:	60b9      	str	r1, [r7, #8]
 800937e:	4613      	mov	r3, r2
 8009380:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009382:	2300      	movs	r3, #0
 8009384:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009386:	2300      	movs	r3, #0
 8009388:	75fb      	strb	r3, [r7, #23]
 800938a:	e027      	b.n	80093dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	0f1b      	lsrs	r3, r3, #28
 8009390:	2b09      	cmp	r3, #9
 8009392:	d80b      	bhi.n	80093ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	0f1b      	lsrs	r3, r3, #28
 8009398:	b2da      	uxtb	r2, r3
 800939a:	7dfb      	ldrb	r3, [r7, #23]
 800939c:	005b      	lsls	r3, r3, #1
 800939e:	4619      	mov	r1, r3
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	440b      	add	r3, r1
 80093a4:	3230      	adds	r2, #48	; 0x30
 80093a6:	b2d2      	uxtb	r2, r2
 80093a8:	701a      	strb	r2, [r3, #0]
 80093aa:	e00a      	b.n	80093c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	0f1b      	lsrs	r3, r3, #28
 80093b0:	b2da      	uxtb	r2, r3
 80093b2:	7dfb      	ldrb	r3, [r7, #23]
 80093b4:	005b      	lsls	r3, r3, #1
 80093b6:	4619      	mov	r1, r3
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	440b      	add	r3, r1
 80093bc:	3237      	adds	r2, #55	; 0x37
 80093be:	b2d2      	uxtb	r2, r2
 80093c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	011b      	lsls	r3, r3, #4
 80093c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80093c8:	7dfb      	ldrb	r3, [r7, #23]
 80093ca:	005b      	lsls	r3, r3, #1
 80093cc:	3301      	adds	r3, #1
 80093ce:	68ba      	ldr	r2, [r7, #8]
 80093d0:	4413      	add	r3, r2
 80093d2:	2200      	movs	r2, #0
 80093d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80093d6:	7dfb      	ldrb	r3, [r7, #23]
 80093d8:	3301      	adds	r3, #1
 80093da:	75fb      	strb	r3, [r7, #23]
 80093dc:	7dfa      	ldrb	r2, [r7, #23]
 80093de:	79fb      	ldrb	r3, [r7, #7]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d3d3      	bcc.n	800938c <IntToUnicode+0x18>
  }
}
 80093e4:	bf00      	nop
 80093e6:	371c      	adds	r7, #28
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr

080093f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80093f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009428 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80093f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80093f6:	e003      	b.n	8009400 <LoopCopyDataInit>

080093f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80093f8:	4b0c      	ldr	r3, [pc, #48]	; (800942c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80093fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80093fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80093fe:	3104      	adds	r1, #4

08009400 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009400:	480b      	ldr	r0, [pc, #44]	; (8009430 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009402:	4b0c      	ldr	r3, [pc, #48]	; (8009434 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009404:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009406:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009408:	d3f6      	bcc.n	80093f8 <CopyDataInit>
  ldr  r2, =_sbss
 800940a:	4a0b      	ldr	r2, [pc, #44]	; (8009438 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800940c:	e002      	b.n	8009414 <LoopFillZerobss>

0800940e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800940e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009410:	f842 3b04 	str.w	r3, [r2], #4

08009414 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009414:	4b09      	ldr	r3, [pc, #36]	; (800943c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009416:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009418:	d3f9      	bcc.n	800940e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800941a:	f7fe fe7d 	bl	8008118 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800941e:	f000 f95f 	bl	80096e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009422:	f7fe fc75 	bl	8007d10 <main>
  bx  lr    
 8009426:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009428:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800942c:	08009960 	.word	0x08009960
  ldr  r0, =_sdata
 8009430:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009434:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 8009438:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 800943c:	20003758 	.word	0x20003758

08009440 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009440:	e7fe      	b.n	8009440 <ADC_IRQHandler>
	...

08009444 <HAL_TIM_PeriodElapsedCallback>:
extern dataFrame_ST g_frame4;
extern dataFrame_ST g_frame5;
extern dataFrame_ST g_frame6;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a0a      	ldr	r2, [pc, #40]	; (800947c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d104      	bne.n	8009460 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1);
 8009456:	2103      	movs	r1, #3
 8009458:	4809      	ldr	r0, [pc, #36]	; (8009480 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800945a:	f7f8 fa6a 	bl	8001932 <HAL_GPIO_TogglePin>
	}
	else if(htim->Instance == TIM7)
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5);
	}
}
 800945e:	e008      	b.n	8009472 <HAL_TIM_PeriodElapsedCallback+0x2e>
	else if(htim->Instance == TIM7)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a07      	ldr	r2, [pc, #28]	; (8009484 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d103      	bne.n	8009472 <HAL_TIM_PeriodElapsedCallback+0x2e>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5);
 800946a:	2130      	movs	r1, #48	; 0x30
 800946c:	4806      	ldr	r0, [pc, #24]	; (8009488 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800946e:	f7f8 fa60 	bl	8001932 <HAL_GPIO_TogglePin>
}
 8009472:	bf00      	nop
 8009474:	3708      	adds	r7, #8
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	40001000 	.word	0x40001000
 8009480:	40020400 	.word	0x40020400
 8009484:	40001400 	.word	0x40001400
 8009488:	40020800 	.word	0x40020800

0800948c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4a22      	ldr	r2, [pc, #136]	; (8009524 <HAL_UART_TxCpltCallback+0x98>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d105      	bne.n	80094aa <HAL_UART_TxCpltCallback+0x1e>
	{
		g_counters.usart1TxCounter++;
 800949e:	4b22      	ldr	r3, [pc, #136]	; (8009528 <HAL_UART_TxCpltCallback+0x9c>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	3301      	adds	r3, #1
 80094a4:	4a20      	ldr	r2, [pc, #128]	; (8009528 <HAL_UART_TxCpltCallback+0x9c>)
 80094a6:	6013      	str	r3, [r2, #0]
	}
	else if(huart->Instance == USART6)
	{
		g_counters.usart6TxCounter++;
	}
}
 80094a8:	e035      	b.n	8009516 <HAL_UART_TxCpltCallback+0x8a>
	else if(huart->Instance == USART2)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a1f      	ldr	r2, [pc, #124]	; (800952c <HAL_UART_TxCpltCallback+0xa0>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d105      	bne.n	80094c0 <HAL_UART_TxCpltCallback+0x34>
		g_counters.usart2TxCounter++;
 80094b4:	4b1c      	ldr	r3, [pc, #112]	; (8009528 <HAL_UART_TxCpltCallback+0x9c>)
 80094b6:	689b      	ldr	r3, [r3, #8]
 80094b8:	3301      	adds	r3, #1
 80094ba:	4a1b      	ldr	r2, [pc, #108]	; (8009528 <HAL_UART_TxCpltCallback+0x9c>)
 80094bc:	6093      	str	r3, [r2, #8]
}
 80094be:	e02a      	b.n	8009516 <HAL_UART_TxCpltCallback+0x8a>
	else if(huart->Instance == USART3)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4a1a      	ldr	r2, [pc, #104]	; (8009530 <HAL_UART_TxCpltCallback+0xa4>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d105      	bne.n	80094d6 <HAL_UART_TxCpltCallback+0x4a>
		g_counters.usart3TxCounter++;
 80094ca:	4b17      	ldr	r3, [pc, #92]	; (8009528 <HAL_UART_TxCpltCallback+0x9c>)
 80094cc:	691b      	ldr	r3, [r3, #16]
 80094ce:	3301      	adds	r3, #1
 80094d0:	4a15      	ldr	r2, [pc, #84]	; (8009528 <HAL_UART_TxCpltCallback+0x9c>)
 80094d2:	6113      	str	r3, [r2, #16]
}
 80094d4:	e01f      	b.n	8009516 <HAL_UART_TxCpltCallback+0x8a>
	else if(huart->Instance == UART4)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a16      	ldr	r2, [pc, #88]	; (8009534 <HAL_UART_TxCpltCallback+0xa8>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d105      	bne.n	80094ec <HAL_UART_TxCpltCallback+0x60>
		g_counters.usart4TxCounter++;
 80094e0:	4b11      	ldr	r3, [pc, #68]	; (8009528 <HAL_UART_TxCpltCallback+0x9c>)
 80094e2:	699b      	ldr	r3, [r3, #24]
 80094e4:	3301      	adds	r3, #1
 80094e6:	4a10      	ldr	r2, [pc, #64]	; (8009528 <HAL_UART_TxCpltCallback+0x9c>)
 80094e8:	6193      	str	r3, [r2, #24]
}
 80094ea:	e014      	b.n	8009516 <HAL_UART_TxCpltCallback+0x8a>
	else if(huart->Instance == UART5)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a11      	ldr	r2, [pc, #68]	; (8009538 <HAL_UART_TxCpltCallback+0xac>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d105      	bne.n	8009502 <HAL_UART_TxCpltCallback+0x76>
		g_counters.usart5TxCounter++;
 80094f6:	4b0c      	ldr	r3, [pc, #48]	; (8009528 <HAL_UART_TxCpltCallback+0x9c>)
 80094f8:	6a1b      	ldr	r3, [r3, #32]
 80094fa:	3301      	adds	r3, #1
 80094fc:	4a0a      	ldr	r2, [pc, #40]	; (8009528 <HAL_UART_TxCpltCallback+0x9c>)
 80094fe:	6213      	str	r3, [r2, #32]
}
 8009500:	e009      	b.n	8009516 <HAL_UART_TxCpltCallback+0x8a>
	else if(huart->Instance == USART6)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4a0d      	ldr	r2, [pc, #52]	; (800953c <HAL_UART_TxCpltCallback+0xb0>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d104      	bne.n	8009516 <HAL_UART_TxCpltCallback+0x8a>
		g_counters.usart6TxCounter++;
 800950c:	4b06      	ldr	r3, [pc, #24]	; (8009528 <HAL_UART_TxCpltCallback+0x9c>)
 800950e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009510:	3301      	adds	r3, #1
 8009512:	4a05      	ldr	r2, [pc, #20]	; (8009528 <HAL_UART_TxCpltCallback+0x9c>)
 8009514:	6293      	str	r3, [r2, #40]	; 0x28
}
 8009516:	bf00      	nop
 8009518:	370c      	adds	r7, #12
 800951a:	46bd      	mov	sp, r7
 800951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009520:	4770      	bx	lr
 8009522:	bf00      	nop
 8009524:	40011000 	.word	0x40011000
 8009528:	2000370c 	.word	0x2000370c
 800952c:	40004400 	.word	0x40004400
 8009530:	40004800 	.word	0x40004800
 8009534:	40004c00 	.word	0x40004c00
 8009538:	40005000 	.word	0x40005000
 800953c:	40011400 	.word	0x40011400

08009540 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009540:	b480      	push	{r7}
 8009542:	b083      	sub	sp, #12
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4a22      	ldr	r2, [pc, #136]	; (80095d8 <HAL_UART_RxCpltCallback+0x98>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d105      	bne.n	800955e <HAL_UART_RxCpltCallback+0x1e>
	{
		g_counters.usart1RxCounter++;
 8009552:	4b22      	ldr	r3, [pc, #136]	; (80095dc <HAL_UART_RxCpltCallback+0x9c>)
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	3301      	adds	r3, #1
 8009558:	4a20      	ldr	r2, [pc, #128]	; (80095dc <HAL_UART_RxCpltCallback+0x9c>)
 800955a:	6053      	str	r3, [r2, #4]
	}
	else if(huart->Instance == USART6)
	{
		g_counters.usart6RxCounter++;
	}
}
 800955c:	e035      	b.n	80095ca <HAL_UART_RxCpltCallback+0x8a>
	else if(huart->Instance == USART2)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4a1f      	ldr	r2, [pc, #124]	; (80095e0 <HAL_UART_RxCpltCallback+0xa0>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d105      	bne.n	8009574 <HAL_UART_RxCpltCallback+0x34>
		g_counters.usart2RxCounter++;
 8009568:	4b1c      	ldr	r3, [pc, #112]	; (80095dc <HAL_UART_RxCpltCallback+0x9c>)
 800956a:	68db      	ldr	r3, [r3, #12]
 800956c:	3301      	adds	r3, #1
 800956e:	4a1b      	ldr	r2, [pc, #108]	; (80095dc <HAL_UART_RxCpltCallback+0x9c>)
 8009570:	60d3      	str	r3, [r2, #12]
}
 8009572:	e02a      	b.n	80095ca <HAL_UART_RxCpltCallback+0x8a>
	else if(huart->Instance == USART3)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a1a      	ldr	r2, [pc, #104]	; (80095e4 <HAL_UART_RxCpltCallback+0xa4>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d105      	bne.n	800958a <HAL_UART_RxCpltCallback+0x4a>
		g_counters.usart3RxCounter++;
 800957e:	4b17      	ldr	r3, [pc, #92]	; (80095dc <HAL_UART_RxCpltCallback+0x9c>)
 8009580:	695b      	ldr	r3, [r3, #20]
 8009582:	3301      	adds	r3, #1
 8009584:	4a15      	ldr	r2, [pc, #84]	; (80095dc <HAL_UART_RxCpltCallback+0x9c>)
 8009586:	6153      	str	r3, [r2, #20]
}
 8009588:	e01f      	b.n	80095ca <HAL_UART_RxCpltCallback+0x8a>
	else if(huart->Instance == UART4)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4a16      	ldr	r2, [pc, #88]	; (80095e8 <HAL_UART_RxCpltCallback+0xa8>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d105      	bne.n	80095a0 <HAL_UART_RxCpltCallback+0x60>
		g_counters.usart4RxCounter++;
 8009594:	4b11      	ldr	r3, [pc, #68]	; (80095dc <HAL_UART_RxCpltCallback+0x9c>)
 8009596:	69db      	ldr	r3, [r3, #28]
 8009598:	3301      	adds	r3, #1
 800959a:	4a10      	ldr	r2, [pc, #64]	; (80095dc <HAL_UART_RxCpltCallback+0x9c>)
 800959c:	61d3      	str	r3, [r2, #28]
}
 800959e:	e014      	b.n	80095ca <HAL_UART_RxCpltCallback+0x8a>
	else if(huart->Instance == UART5)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a11      	ldr	r2, [pc, #68]	; (80095ec <HAL_UART_RxCpltCallback+0xac>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d105      	bne.n	80095b6 <HAL_UART_RxCpltCallback+0x76>
		g_counters.usart5RxCounter++;
 80095aa:	4b0c      	ldr	r3, [pc, #48]	; (80095dc <HAL_UART_RxCpltCallback+0x9c>)
 80095ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ae:	3301      	adds	r3, #1
 80095b0:	4a0a      	ldr	r2, [pc, #40]	; (80095dc <HAL_UART_RxCpltCallback+0x9c>)
 80095b2:	6253      	str	r3, [r2, #36]	; 0x24
}
 80095b4:	e009      	b.n	80095ca <HAL_UART_RxCpltCallback+0x8a>
	else if(huart->Instance == USART6)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4a0d      	ldr	r2, [pc, #52]	; (80095f0 <HAL_UART_RxCpltCallback+0xb0>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d104      	bne.n	80095ca <HAL_UART_RxCpltCallback+0x8a>
		g_counters.usart6RxCounter++;
 80095c0:	4b06      	ldr	r3, [pc, #24]	; (80095dc <HAL_UART_RxCpltCallback+0x9c>)
 80095c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c4:	3301      	adds	r3, #1
 80095c6:	4a05      	ldr	r2, [pc, #20]	; (80095dc <HAL_UART_RxCpltCallback+0x9c>)
 80095c8:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80095ca:	bf00      	nop
 80095cc:	370c      	adds	r7, #12
 80095ce:	46bd      	mov	sp, r7
 80095d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d4:	4770      	bx	lr
 80095d6:	bf00      	nop
 80095d8:	40011000 	.word	0x40011000
 80095dc:	2000370c 	.word	0x2000370c
 80095e0:	40004400 	.word	0x40004400
 80095e4:	40004800 	.word	0x40004800
 80095e8:	40004c00 	.word	0x40004c00
 80095ec:	40005000 	.word	0x40005000
 80095f0:	40011400 	.word	0x40011400

080095f4 <_ZN8HardwareC1EP20__UART_HandleTypeDef>:

  public:
    Hardware(){
    }

    Hardware(UART_HandleTypeDef *huart_):
 80095f4:	b480      	push	{r7}
 80095f6:	b083      	sub	sp, #12
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	6039      	str	r1, [r7, #0]
      huart(huart_), rind(0), twind(0), tfind(0){
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	683a      	ldr	r2, [r7, #0]
 8009602:	601a      	str	r2, [r3, #0]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2200      	movs	r2, #0
 8009608:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2200      	movs	r2, #0
 8009610:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2200      	movs	r2, #0
 8009618:	f8c3 2c0c 	str.w	r2, [r3, #3084]	; 0xc0c
    }
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	4618      	mov	r0, r3
 8009620:	370c      	adds	r7, #12
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr

0800962a <_ZN8Hardware4initEv>:

    void init(){
 800962a:	b580      	push	{r7, lr}
 800962c:	b082      	sub	sp, #8
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f000 f804 	bl	8009640 <_ZN8Hardware10reset_rbufEv>
    }
 8009638:	bf00      	nop
 800963a:	3708      	adds	r7, #8
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}

08009640 <_ZN8Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8009640:	b580      	push	{r7, lr}
 8009642:	b082      	sub	sp, #8
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6818      	ldr	r0, [r3, #0]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	3304      	adds	r3, #4
 8009650:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009654:	4619      	mov	r1, r3
 8009656:	f7fa fe5b 	bl	8004310 <HAL_UART_Receive_DMA>
    }
 800965a:	bf00      	nop
 800965c:	3708      	adds	r7, #8
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
	...

08009664 <init>:

Hardware __uart1(&huart1);
Hardware __uart3(&huart3);

void init(void)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	af00      	add	r7, sp, #0
	__uart1.init();
 8009668:	4803      	ldr	r0, [pc, #12]	; (8009678 <init+0x14>)
 800966a:	f7ff ffde 	bl	800962a <_ZN8Hardware4initEv>
	__uart3.init();
 800966e:	4803      	ldr	r0, [pc, #12]	; (800967c <init+0x18>)
 8009670:	f7ff ffdb 	bl	800962a <_ZN8Hardware4initEv>
}
 8009674:	bf00      	nop
 8009676:	bd80      	pop	{r7, pc}
 8009678:	20000214 	.word	0x20000214
 800967c:	20000e24 	.word	0x20000e24

08009680 <_Z41__static_initialization_and_destruction_0ii>:
 * motor control
 * */
void timer_10ms(void)
{

}
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2b01      	cmp	r3, #1
 800968e:	d10c      	bne.n	80096aa <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009696:	4293      	cmp	r3, r2
 8009698:	d107      	bne.n	80096aa <_Z41__static_initialization_and_destruction_0ii+0x2a>
Hardware __uart1(&huart1);
 800969a:	4906      	ldr	r1, [pc, #24]	; (80096b4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800969c:	4806      	ldr	r0, [pc, #24]	; (80096b8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 800969e:	f7ff ffa9 	bl	80095f4 <_ZN8HardwareC1EP20__UART_HandleTypeDef>
Hardware __uart3(&huart3);
 80096a2:	4906      	ldr	r1, [pc, #24]	; (80096bc <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80096a4:	4806      	ldr	r0, [pc, #24]	; (80096c0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80096a6:	f7ff ffa5 	bl	80095f4 <_ZN8HardwareC1EP20__UART_HandleTypeDef>
}
 80096aa:	bf00      	nop
 80096ac:	3708      	adds	r7, #8
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	20001d68 	.word	0x20001d68
 80096b8:	20000214 	.word	0x20000214
 80096bc:	20001ba8 	.word	0x20001ba8
 80096c0:	20000e24 	.word	0x20000e24

080096c4 <_GLOBAL__sub_I_g_frame1>:
 80096c4:	b580      	push	{r7, lr}
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80096cc:	2001      	movs	r0, #1
 80096ce:	f7ff ffd7 	bl	8009680 <_Z41__static_initialization_and_destruction_0ii>
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <__errno>:
 80096d4:	4b01      	ldr	r3, [pc, #4]	; (80096dc <__errno+0x8>)
 80096d6:	6818      	ldr	r0, [r3, #0]
 80096d8:	4770      	bx	lr
 80096da:	bf00      	nop
 80096dc:	2000018c 	.word	0x2000018c

080096e0 <__libc_init_array>:
 80096e0:	b570      	push	{r4, r5, r6, lr}
 80096e2:	4e0d      	ldr	r6, [pc, #52]	; (8009718 <__libc_init_array+0x38>)
 80096e4:	4c0d      	ldr	r4, [pc, #52]	; (800971c <__libc_init_array+0x3c>)
 80096e6:	1ba4      	subs	r4, r4, r6
 80096e8:	10a4      	asrs	r4, r4, #2
 80096ea:	2500      	movs	r5, #0
 80096ec:	42a5      	cmp	r5, r4
 80096ee:	d109      	bne.n	8009704 <__libc_init_array+0x24>
 80096f0:	4e0b      	ldr	r6, [pc, #44]	; (8009720 <__libc_init_array+0x40>)
 80096f2:	4c0c      	ldr	r4, [pc, #48]	; (8009724 <__libc_init_array+0x44>)
 80096f4:	f000 f8ea 	bl	80098cc <_init>
 80096f8:	1ba4      	subs	r4, r4, r6
 80096fa:	10a4      	asrs	r4, r4, #2
 80096fc:	2500      	movs	r5, #0
 80096fe:	42a5      	cmp	r5, r4
 8009700:	d105      	bne.n	800970e <__libc_init_array+0x2e>
 8009702:	bd70      	pop	{r4, r5, r6, pc}
 8009704:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009708:	4798      	blx	r3
 800970a:	3501      	adds	r5, #1
 800970c:	e7ee      	b.n	80096ec <__libc_init_array+0xc>
 800970e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009712:	4798      	blx	r3
 8009714:	3501      	adds	r5, #1
 8009716:	e7f2      	b.n	80096fe <__libc_init_array+0x1e>
 8009718:	08009954 	.word	0x08009954
 800971c:	08009954 	.word	0x08009954
 8009720:	08009954 	.word	0x08009954
 8009724:	0800995c 	.word	0x0800995c

08009728 <malloc>:
 8009728:	4b02      	ldr	r3, [pc, #8]	; (8009734 <malloc+0xc>)
 800972a:	4601      	mov	r1, r0
 800972c:	6818      	ldr	r0, [r3, #0]
 800972e:	f000 b861 	b.w	80097f4 <_malloc_r>
 8009732:	bf00      	nop
 8009734:	2000018c 	.word	0x2000018c

08009738 <free>:
 8009738:	4b02      	ldr	r3, [pc, #8]	; (8009744 <free+0xc>)
 800973a:	4601      	mov	r1, r0
 800973c:	6818      	ldr	r0, [r3, #0]
 800973e:	f000 b80b 	b.w	8009758 <_free_r>
 8009742:	bf00      	nop
 8009744:	2000018c 	.word	0x2000018c

08009748 <memset>:
 8009748:	4402      	add	r2, r0
 800974a:	4603      	mov	r3, r0
 800974c:	4293      	cmp	r3, r2
 800974e:	d100      	bne.n	8009752 <memset+0xa>
 8009750:	4770      	bx	lr
 8009752:	f803 1b01 	strb.w	r1, [r3], #1
 8009756:	e7f9      	b.n	800974c <memset+0x4>

08009758 <_free_r>:
 8009758:	b538      	push	{r3, r4, r5, lr}
 800975a:	4605      	mov	r5, r0
 800975c:	2900      	cmp	r1, #0
 800975e:	d045      	beq.n	80097ec <_free_r+0x94>
 8009760:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009764:	1f0c      	subs	r4, r1, #4
 8009766:	2b00      	cmp	r3, #0
 8009768:	bfb8      	it	lt
 800976a:	18e4      	addlt	r4, r4, r3
 800976c:	f000 f8ac 	bl	80098c8 <__malloc_lock>
 8009770:	4a1f      	ldr	r2, [pc, #124]	; (80097f0 <_free_r+0x98>)
 8009772:	6813      	ldr	r3, [r2, #0]
 8009774:	4610      	mov	r0, r2
 8009776:	b933      	cbnz	r3, 8009786 <_free_r+0x2e>
 8009778:	6063      	str	r3, [r4, #4]
 800977a:	6014      	str	r4, [r2, #0]
 800977c:	4628      	mov	r0, r5
 800977e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009782:	f000 b8a2 	b.w	80098ca <__malloc_unlock>
 8009786:	42a3      	cmp	r3, r4
 8009788:	d90c      	bls.n	80097a4 <_free_r+0x4c>
 800978a:	6821      	ldr	r1, [r4, #0]
 800978c:	1862      	adds	r2, r4, r1
 800978e:	4293      	cmp	r3, r2
 8009790:	bf04      	itt	eq
 8009792:	681a      	ldreq	r2, [r3, #0]
 8009794:	685b      	ldreq	r3, [r3, #4]
 8009796:	6063      	str	r3, [r4, #4]
 8009798:	bf04      	itt	eq
 800979a:	1852      	addeq	r2, r2, r1
 800979c:	6022      	streq	r2, [r4, #0]
 800979e:	6004      	str	r4, [r0, #0]
 80097a0:	e7ec      	b.n	800977c <_free_r+0x24>
 80097a2:	4613      	mov	r3, r2
 80097a4:	685a      	ldr	r2, [r3, #4]
 80097a6:	b10a      	cbz	r2, 80097ac <_free_r+0x54>
 80097a8:	42a2      	cmp	r2, r4
 80097aa:	d9fa      	bls.n	80097a2 <_free_r+0x4a>
 80097ac:	6819      	ldr	r1, [r3, #0]
 80097ae:	1858      	adds	r0, r3, r1
 80097b0:	42a0      	cmp	r0, r4
 80097b2:	d10b      	bne.n	80097cc <_free_r+0x74>
 80097b4:	6820      	ldr	r0, [r4, #0]
 80097b6:	4401      	add	r1, r0
 80097b8:	1858      	adds	r0, r3, r1
 80097ba:	4282      	cmp	r2, r0
 80097bc:	6019      	str	r1, [r3, #0]
 80097be:	d1dd      	bne.n	800977c <_free_r+0x24>
 80097c0:	6810      	ldr	r0, [r2, #0]
 80097c2:	6852      	ldr	r2, [r2, #4]
 80097c4:	605a      	str	r2, [r3, #4]
 80097c6:	4401      	add	r1, r0
 80097c8:	6019      	str	r1, [r3, #0]
 80097ca:	e7d7      	b.n	800977c <_free_r+0x24>
 80097cc:	d902      	bls.n	80097d4 <_free_r+0x7c>
 80097ce:	230c      	movs	r3, #12
 80097d0:	602b      	str	r3, [r5, #0]
 80097d2:	e7d3      	b.n	800977c <_free_r+0x24>
 80097d4:	6820      	ldr	r0, [r4, #0]
 80097d6:	1821      	adds	r1, r4, r0
 80097d8:	428a      	cmp	r2, r1
 80097da:	bf04      	itt	eq
 80097dc:	6811      	ldreq	r1, [r2, #0]
 80097de:	6852      	ldreq	r2, [r2, #4]
 80097e0:	6062      	str	r2, [r4, #4]
 80097e2:	bf04      	itt	eq
 80097e4:	1809      	addeq	r1, r1, r0
 80097e6:	6021      	streq	r1, [r4, #0]
 80097e8:	605c      	str	r4, [r3, #4]
 80097ea:	e7c7      	b.n	800977c <_free_r+0x24>
 80097ec:	bd38      	pop	{r3, r4, r5, pc}
 80097ee:	bf00      	nop
 80097f0:	20001a34 	.word	0x20001a34

080097f4 <_malloc_r>:
 80097f4:	b570      	push	{r4, r5, r6, lr}
 80097f6:	1ccd      	adds	r5, r1, #3
 80097f8:	f025 0503 	bic.w	r5, r5, #3
 80097fc:	3508      	adds	r5, #8
 80097fe:	2d0c      	cmp	r5, #12
 8009800:	bf38      	it	cc
 8009802:	250c      	movcc	r5, #12
 8009804:	2d00      	cmp	r5, #0
 8009806:	4606      	mov	r6, r0
 8009808:	db01      	blt.n	800980e <_malloc_r+0x1a>
 800980a:	42a9      	cmp	r1, r5
 800980c:	d903      	bls.n	8009816 <_malloc_r+0x22>
 800980e:	230c      	movs	r3, #12
 8009810:	6033      	str	r3, [r6, #0]
 8009812:	2000      	movs	r0, #0
 8009814:	bd70      	pop	{r4, r5, r6, pc}
 8009816:	f000 f857 	bl	80098c8 <__malloc_lock>
 800981a:	4a21      	ldr	r2, [pc, #132]	; (80098a0 <_malloc_r+0xac>)
 800981c:	6814      	ldr	r4, [r2, #0]
 800981e:	4621      	mov	r1, r4
 8009820:	b991      	cbnz	r1, 8009848 <_malloc_r+0x54>
 8009822:	4c20      	ldr	r4, [pc, #128]	; (80098a4 <_malloc_r+0xb0>)
 8009824:	6823      	ldr	r3, [r4, #0]
 8009826:	b91b      	cbnz	r3, 8009830 <_malloc_r+0x3c>
 8009828:	4630      	mov	r0, r6
 800982a:	f000 f83d 	bl	80098a8 <_sbrk_r>
 800982e:	6020      	str	r0, [r4, #0]
 8009830:	4629      	mov	r1, r5
 8009832:	4630      	mov	r0, r6
 8009834:	f000 f838 	bl	80098a8 <_sbrk_r>
 8009838:	1c43      	adds	r3, r0, #1
 800983a:	d124      	bne.n	8009886 <_malloc_r+0x92>
 800983c:	230c      	movs	r3, #12
 800983e:	6033      	str	r3, [r6, #0]
 8009840:	4630      	mov	r0, r6
 8009842:	f000 f842 	bl	80098ca <__malloc_unlock>
 8009846:	e7e4      	b.n	8009812 <_malloc_r+0x1e>
 8009848:	680b      	ldr	r3, [r1, #0]
 800984a:	1b5b      	subs	r3, r3, r5
 800984c:	d418      	bmi.n	8009880 <_malloc_r+0x8c>
 800984e:	2b0b      	cmp	r3, #11
 8009850:	d90f      	bls.n	8009872 <_malloc_r+0x7e>
 8009852:	600b      	str	r3, [r1, #0]
 8009854:	50cd      	str	r5, [r1, r3]
 8009856:	18cc      	adds	r4, r1, r3
 8009858:	4630      	mov	r0, r6
 800985a:	f000 f836 	bl	80098ca <__malloc_unlock>
 800985e:	f104 000b 	add.w	r0, r4, #11
 8009862:	1d23      	adds	r3, r4, #4
 8009864:	f020 0007 	bic.w	r0, r0, #7
 8009868:	1ac3      	subs	r3, r0, r3
 800986a:	d0d3      	beq.n	8009814 <_malloc_r+0x20>
 800986c:	425a      	negs	r2, r3
 800986e:	50e2      	str	r2, [r4, r3]
 8009870:	e7d0      	b.n	8009814 <_malloc_r+0x20>
 8009872:	428c      	cmp	r4, r1
 8009874:	684b      	ldr	r3, [r1, #4]
 8009876:	bf16      	itet	ne
 8009878:	6063      	strne	r3, [r4, #4]
 800987a:	6013      	streq	r3, [r2, #0]
 800987c:	460c      	movne	r4, r1
 800987e:	e7eb      	b.n	8009858 <_malloc_r+0x64>
 8009880:	460c      	mov	r4, r1
 8009882:	6849      	ldr	r1, [r1, #4]
 8009884:	e7cc      	b.n	8009820 <_malloc_r+0x2c>
 8009886:	1cc4      	adds	r4, r0, #3
 8009888:	f024 0403 	bic.w	r4, r4, #3
 800988c:	42a0      	cmp	r0, r4
 800988e:	d005      	beq.n	800989c <_malloc_r+0xa8>
 8009890:	1a21      	subs	r1, r4, r0
 8009892:	4630      	mov	r0, r6
 8009894:	f000 f808 	bl	80098a8 <_sbrk_r>
 8009898:	3001      	adds	r0, #1
 800989a:	d0cf      	beq.n	800983c <_malloc_r+0x48>
 800989c:	6025      	str	r5, [r4, #0]
 800989e:	e7db      	b.n	8009858 <_malloc_r+0x64>
 80098a0:	20001a34 	.word	0x20001a34
 80098a4:	20001a38 	.word	0x20001a38

080098a8 <_sbrk_r>:
 80098a8:	b538      	push	{r3, r4, r5, lr}
 80098aa:	4c06      	ldr	r4, [pc, #24]	; (80098c4 <_sbrk_r+0x1c>)
 80098ac:	2300      	movs	r3, #0
 80098ae:	4605      	mov	r5, r0
 80098b0:	4608      	mov	r0, r1
 80098b2:	6023      	str	r3, [r4, #0]
 80098b4:	f7fe fc04 	bl	80080c0 <_sbrk>
 80098b8:	1c43      	adds	r3, r0, #1
 80098ba:	d102      	bne.n	80098c2 <_sbrk_r+0x1a>
 80098bc:	6823      	ldr	r3, [r4, #0]
 80098be:	b103      	cbz	r3, 80098c2 <_sbrk_r+0x1a>
 80098c0:	602b      	str	r3, [r5, #0]
 80098c2:	bd38      	pop	{r3, r4, r5, pc}
 80098c4:	20003754 	.word	0x20003754

080098c8 <__malloc_lock>:
 80098c8:	4770      	bx	lr

080098ca <__malloc_unlock>:
 80098ca:	4770      	bx	lr

080098cc <_init>:
 80098cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ce:	bf00      	nop
 80098d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098d2:	bc08      	pop	{r3}
 80098d4:	469e      	mov	lr, r3
 80098d6:	4770      	bx	lr

080098d8 <_fini>:
 80098d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098da:	bf00      	nop
 80098dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098de:	bc08      	pop	{r3}
 80098e0:	469e      	mov	lr, r3
 80098e2:	4770      	bx	lr
