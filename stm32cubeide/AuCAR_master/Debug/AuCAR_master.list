
AuCAR_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008958  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08008b1c  08008b1c  00018b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b7c  08008b7c  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  08008b7c  08008b7c  00018b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b84  08008b84  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b84  08008b84  00018b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b88  08008b88  00018b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08008b8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b08  200001f0  08008d7c  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001cf8  08008d7c  00021cf8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cde6  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003edf  00000000  00000000  0003d006  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001580  00000000  00000000  00040ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001388  00000000  00000000  00042468  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000267af  00000000  00000000  000437f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000146a9  00000000  00000000  00069f9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d599a  00000000  00000000  0007e648  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00153fe2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005984  00000000  00000000  00154060  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200001f0 	.word	0x200001f0
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08008b04 	.word	0x08008b04

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200001f4 	.word	0x200001f4
 8000200:	08008b04 	.word	0x08008b04

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000508:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <HAL_Init+0x40>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a0d      	ldr	r2, [pc, #52]	; (8000544 <HAL_Init+0x40>)
 800050e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000512:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <HAL_Init+0x40>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <HAL_Init+0x40>)
 800051a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800051e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <HAL_Init+0x40>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a07      	ldr	r2, [pc, #28]	; (8000544 <HAL_Init+0x40>)
 8000526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800052a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 fc7b 	bl	8000e28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 f808 	bl	8000548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000538:	f007 f886 	bl	8007648 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800053c:	2300      	movs	r3, #0
}
 800053e:	4618      	mov	r0, r3
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40023c00 	.word	0x40023c00

08000548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <HAL_InitTick+0x54>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <HAL_InitTick+0x58>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4619      	mov	r1, r3
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000562:	fbb2 f3f3 	udiv	r3, r2, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f000 fc93 	bl	8000e92 <HAL_SYSTICK_Config>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000572:	2301      	movs	r3, #1
 8000574:	e00e      	b.n	8000594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2b0f      	cmp	r3, #15
 800057a:	d80a      	bhi.n	8000592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800057c:	2200      	movs	r2, #0
 800057e:	6879      	ldr	r1, [r7, #4]
 8000580:	f04f 30ff 	mov.w	r0, #4294967295
 8000584:	f000 fc5b 	bl	8000e3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <HAL_InitTick+0x5c>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800058e:	2300      	movs	r3, #0
 8000590:	e000      	b.n	8000594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000592:	2301      	movs	r3, #1
}
 8000594:	4618      	mov	r0, r3
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000118 	.word	0x20000118
 80005a0:	20000004 	.word	0x20000004
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_IncTick+0x20>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_IncTick+0x24>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	4a04      	ldr	r2, [pc, #16]	; (80005cc <HAL_IncTick+0x24>)
 80005ba:	6013      	str	r3, [r2, #0]
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000004 	.word	0x20000004
 80005cc:	2000021c 	.word	0x2000021c

080005d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  return uwTick;
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <HAL_GetTick+0x14>)
 80005d6:	681b      	ldr	r3, [r3, #0]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	2000021c 	.word	0x2000021c

080005e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005f0:	f7ff ffee 	bl	80005d0 <HAL_GetTick>
 80005f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000600:	d005      	beq.n	800060e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <HAL_Delay+0x40>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	461a      	mov	r2, r3
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	4413      	add	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800060e:	bf00      	nop
 8000610:	f7ff ffde 	bl	80005d0 <HAL_GetTick>
 8000614:	4602      	mov	r2, r0
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	429a      	cmp	r2, r3
 800061e:	d8f7      	bhi.n	8000610 <HAL_Delay+0x28>
  {
  }
}
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000004 	.word	0x20000004

0800062c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d101      	bne.n	800063e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800063a:	2301      	movs	r3, #1
 800063c:	e0ed      	b.n	800081a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000644:	b2db      	uxtb	r3, r3
 8000646:	2b00      	cmp	r3, #0
 8000648:	d102      	bne.n	8000650 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800064a:	6878      	ldr	r0, [r7, #4]
 800064c:	f006 fd44 	bl	80070d8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f022 0202 	bic.w	r2, r2, #2
 800065e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000660:	f7ff ffb6 	bl	80005d0 <HAL_GetTick>
 8000664:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000666:	e012      	b.n	800068e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000668:	f7ff ffb2 	bl	80005d0 <HAL_GetTick>
 800066c:	4602      	mov	r2, r0
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	1ad3      	subs	r3, r2, r3
 8000672:	2b0a      	cmp	r3, #10
 8000674:	d90b      	bls.n	800068e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800067a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2205      	movs	r2, #5
 8000686:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800068a:	2301      	movs	r3, #1
 800068c:	e0c5      	b.n	800081a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	f003 0302 	and.w	r3, r3, #2
 8000698:	2b00      	cmp	r3, #0
 800069a:	d1e5      	bne.n	8000668 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f042 0201 	orr.w	r2, r2, #1
 80006aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80006ac:	f7ff ff90 	bl	80005d0 <HAL_GetTick>
 80006b0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80006b2:	e012      	b.n	80006da <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80006b4:	f7ff ff8c 	bl	80005d0 <HAL_GetTick>
 80006b8:	4602      	mov	r2, r0
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	2b0a      	cmp	r3, #10
 80006c0:	d90b      	bls.n	80006da <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2205      	movs	r2, #5
 80006d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80006d6:	2301      	movs	r3, #1
 80006d8:	e09f      	b.n	800081a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	f003 0301 	and.w	r3, r3, #1
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d0e5      	beq.n	80006b4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	7e1b      	ldrb	r3, [r3, #24]
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d108      	bne.n	8000702 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	e007      	b.n	8000712 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000710:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	7e5b      	ldrb	r3, [r3, #25]
 8000716:	2b01      	cmp	r3, #1
 8000718:	d108      	bne.n	800072c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	e007      	b.n	800073c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800073a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	7e9b      	ldrb	r3, [r3, #26]
 8000740:	2b01      	cmp	r3, #1
 8000742:	d108      	bne.n	8000756 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f042 0220 	orr.w	r2, r2, #32
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	e007      	b.n	8000766 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f022 0220 	bic.w	r2, r2, #32
 8000764:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	7edb      	ldrb	r3, [r3, #27]
 800076a:	2b01      	cmp	r3, #1
 800076c:	d108      	bne.n	8000780 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f022 0210 	bic.w	r2, r2, #16
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	e007      	b.n	8000790 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f042 0210 	orr.w	r2, r2, #16
 800078e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	7f1b      	ldrb	r3, [r3, #28]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d108      	bne.n	80007aa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f042 0208 	orr.w	r2, r2, #8
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	e007      	b.n	80007ba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f022 0208 	bic.w	r2, r2, #8
 80007b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	7f5b      	ldrb	r3, [r3, #29]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d108      	bne.n	80007d4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f042 0204 	orr.w	r2, r2, #4
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	e007      	b.n	80007e4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f022 0204 	bic.w	r2, r2, #4
 80007e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	689a      	ldr	r2, [r3, #8]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	68db      	ldr	r3, [r3, #12]
 80007ec:	431a      	orrs	r2, r3
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	691b      	ldr	r3, [r3, #16]
 80007f2:	431a      	orrs	r2, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	695b      	ldr	r3, [r3, #20]
 80007f8:	ea42 0103 	orr.w	r1, r2, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	1e5a      	subs	r2, r3, #1
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	430a      	orrs	r2, r1
 8000808:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2200      	movs	r2, #0
 800080e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2201      	movs	r2, #1
 8000814:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000818:	2300      	movs	r3, #0
}
 800081a:	4618      	mov	r0, r3
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b08a      	sub	sp, #40	; 0x28
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800082a:	2300      	movs	r3, #0
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	695b      	ldr	r3, [r3, #20]
 8000834:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	689b      	ldr	r3, [r3, #8]
 8000844:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	691b      	ldr	r3, [r3, #16]
 8000854:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800085e:	6a3b      	ldr	r3, [r7, #32]
 8000860:	f003 0301 	and.w	r3, r3, #1
 8000864:	2b00      	cmp	r3, #0
 8000866:	d07c      	beq.n	8000962 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000868:	69bb      	ldr	r3, [r7, #24]
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	2b00      	cmp	r3, #0
 8000870:	d023      	beq.n	80008ba <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	2201      	movs	r2, #1
 8000878:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800087a:	69bb      	ldr	r3, [r7, #24]
 800087c:	f003 0302 	and.w	r3, r3, #2
 8000880:	2b00      	cmp	r3, #0
 8000882:	d003      	beq.n	800088c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f000 f97d 	bl	8000b84 <HAL_CAN_TxMailbox0CompleteCallback>
 800088a:	e016      	b.n	80008ba <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800088c:	69bb      	ldr	r3, [r7, #24]
 800088e:	f003 0304 	and.w	r3, r3, #4
 8000892:	2b00      	cmp	r3, #0
 8000894:	d004      	beq.n	80008a0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000898:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
 800089e:	e00c      	b.n	80008ba <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80008a0:	69bb      	ldr	r3, [r7, #24]
 80008a2:	f003 0308 	and.w	r3, r3, #8
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d004      	beq.n	80008b4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80008aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
 80008b2:	e002      	b.n	80008ba <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	f000 f983 	bl	8000bc0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80008ba:	69bb      	ldr	r3, [r7, #24]
 80008bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d024      	beq.n	800090e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008cc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80008ce:	69bb      	ldr	r3, [r7, #24]
 80008d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d003      	beq.n	80008e0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	f000 f95d 	bl	8000b98 <HAL_CAN_TxMailbox1CompleteCallback>
 80008de:	e016      	b.n	800090e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80008e0:	69bb      	ldr	r3, [r7, #24]
 80008e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d004      	beq.n	80008f4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80008ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
 80008f2:	e00c      	b.n	800090e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80008f4:	69bb      	ldr	r3, [r7, #24]
 80008f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d004      	beq.n	8000908 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80008fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
 8000906:	e002      	b.n	800090e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f000 f963 	bl	8000bd4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800090e:	69bb      	ldr	r3, [r7, #24]
 8000910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000914:	2b00      	cmp	r3, #0
 8000916:	d024      	beq.n	8000962 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000920:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000922:	69bb      	ldr	r3, [r7, #24]
 8000924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000928:	2b00      	cmp	r3, #0
 800092a:	d003      	beq.n	8000934 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f000 f93d 	bl	8000bac <HAL_CAN_TxMailbox2CompleteCallback>
 8000932:	e016      	b.n	8000962 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000934:	69bb      	ldr	r3, [r7, #24]
 8000936:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800093a:	2b00      	cmp	r3, #0
 800093c:	d004      	beq.n	8000948 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800093e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000940:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
 8000946:	e00c      	b.n	8000962 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000948:	69bb      	ldr	r3, [r7, #24]
 800094a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800094e:	2b00      	cmp	r3, #0
 8000950:	d004      	beq.n	800095c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
 800095a:	e002      	b.n	8000962 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f000 f943 	bl	8000be8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000962:	6a3b      	ldr	r3, [r7, #32]
 8000964:	f003 0308 	and.w	r3, r3, #8
 8000968:	2b00      	cmp	r3, #0
 800096a:	d00c      	beq.n	8000986 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	f003 0310 	and.w	r3, r3, #16
 8000972:	2b00      	cmp	r3, #0
 8000974:	d007      	beq.n	8000986 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000978:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800097c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	2210      	movs	r2, #16
 8000984:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000986:	6a3b      	ldr	r3, [r7, #32]
 8000988:	f003 0304 	and.w	r3, r3, #4
 800098c:	2b00      	cmp	r3, #0
 800098e:	d00b      	beq.n	80009a8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	f003 0308 	and.w	r3, r3, #8
 8000996:	2b00      	cmp	r3, #0
 8000998:	d006      	beq.n	80009a8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2208      	movs	r2, #8
 80009a0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f000 f934 	bl	8000c10 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80009a8:	6a3b      	ldr	r3, [r7, #32]
 80009aa:	f003 0302 	and.w	r3, r3, #2
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d009      	beq.n	80009c6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	f003 0303 	and.w	r3, r3, #3
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d002      	beq.n	80009c6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f000 f91b 	bl	8000bfc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80009c6:	6a3b      	ldr	r3, [r7, #32]
 80009c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d00c      	beq.n	80009ea <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80009d0:	693b      	ldr	r3, [r7, #16]
 80009d2:	f003 0310 	and.w	r3, r3, #16
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d007      	beq.n	80009ea <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80009da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2210      	movs	r2, #16
 80009e8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80009ea:	6a3b      	ldr	r3, [r7, #32]
 80009ec:	f003 0320 	and.w	r3, r3, #32
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d00b      	beq.n	8000a0c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	f003 0308 	and.w	r3, r3, #8
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d006      	beq.n	8000a0c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	2208      	movs	r2, #8
 8000a04:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f000 f916 	bl	8000c38 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000a0c:	6a3b      	ldr	r3, [r7, #32]
 8000a0e:	f003 0310 	and.w	r3, r3, #16
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d009      	beq.n	8000a2a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	691b      	ldr	r3, [r3, #16]
 8000a1c:	f003 0303 	and.w	r3, r3, #3
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d002      	beq.n	8000a2a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f000 f8fd 	bl	8000c24 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000a2a:	6a3b      	ldr	r3, [r7, #32]
 8000a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d00b      	beq.n	8000a4c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	f003 0310 	and.w	r3, r3, #16
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d006      	beq.n	8000a4c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	2210      	movs	r2, #16
 8000a44:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f000 f900 	bl	8000c4c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000a4c:	6a3b      	ldr	r3, [r7, #32]
 8000a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d00b      	beq.n	8000a6e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	f003 0308 	and.w	r3, r3, #8
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d006      	beq.n	8000a6e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2208      	movs	r2, #8
 8000a66:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f000 f8f9 	bl	8000c60 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000a6e:	6a3b      	ldr	r3, [r7, #32]
 8000a70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d075      	beq.n	8000b64 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000a78:	69fb      	ldr	r3, [r7, #28]
 8000a7a:	f003 0304 	and.w	r3, r3, #4
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d06c      	beq.n	8000b5c <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000a82:	6a3b      	ldr	r3, [r7, #32]
 8000a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d008      	beq.n	8000a9e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d003      	beq.n	8000a9e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000a9e:	6a3b      	ldr	r3, [r7, #32]
 8000aa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d008      	beq.n	8000aba <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d003      	beq.n	8000aba <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab4:	f043 0302 	orr.w	r3, r3, #2
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000aba:	6a3b      	ldr	r3, [r7, #32]
 8000abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d008      	beq.n	8000ad6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d003      	beq.n	8000ad6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad0:	f043 0304 	orr.w	r3, r3, #4
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000ad6:	6a3b      	ldr	r3, [r7, #32]
 8000ad8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d03d      	beq.n	8000b5c <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d038      	beq.n	8000b5c <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000af0:	2b30      	cmp	r3, #48	; 0x30
 8000af2:	d017      	beq.n	8000b24 <HAL_CAN_IRQHandler+0x302>
 8000af4:	2b30      	cmp	r3, #48	; 0x30
 8000af6:	d804      	bhi.n	8000b02 <HAL_CAN_IRQHandler+0x2e0>
 8000af8:	2b10      	cmp	r3, #16
 8000afa:	d009      	beq.n	8000b10 <HAL_CAN_IRQHandler+0x2ee>
 8000afc:	2b20      	cmp	r3, #32
 8000afe:	d00c      	beq.n	8000b1a <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8000b00:	e024      	b.n	8000b4c <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8000b02:	2b50      	cmp	r3, #80	; 0x50
 8000b04:	d018      	beq.n	8000b38 <HAL_CAN_IRQHandler+0x316>
 8000b06:	2b60      	cmp	r3, #96	; 0x60
 8000b08:	d01b      	beq.n	8000b42 <HAL_CAN_IRQHandler+0x320>
 8000b0a:	2b40      	cmp	r3, #64	; 0x40
 8000b0c:	d00f      	beq.n	8000b2e <HAL_CAN_IRQHandler+0x30c>
            break;
 8000b0e:	e01d      	b.n	8000b4c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8000b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b12:	f043 0308 	orr.w	r3, r3, #8
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000b18:	e018      	b.n	8000b4c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b1c:	f043 0310 	orr.w	r3, r3, #16
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000b22:	e013      	b.n	8000b4c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b26:	f043 0320 	orr.w	r3, r3, #32
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000b2c:	e00e      	b.n	8000b4c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8000b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000b36:	e009      	b.n	8000b4c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8000b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000b40:	e004      	b.n	8000b4c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000b4a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	699a      	ldr	r2, [r3, #24]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000b5a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2204      	movs	r2, #4
 8000b62:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d008      	beq.n	8000b7c <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b70:	431a      	orrs	r2, r3
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f000 f87c 	bl	8000c74 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8000b7c:	bf00      	nop
 8000b7e:	3728      	adds	r7, #40	; 0x28
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <__NVIC_SetPriorityGrouping+0x44>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cba:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <__NVIC_SetPriorityGrouping+0x44>)
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	60d3      	str	r3, [r2, #12]
}
 8000cc0:	bf00      	nop
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd4:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	0a1b      	lsrs	r3, r3, #8
 8000cda:	f003 0307 	and.w	r3, r3, #7
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	db0b      	blt.n	8000d16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	f003 021f 	and.w	r2, r3, #31
 8000d04:	4907      	ldr	r1, [pc, #28]	; (8000d24 <__NVIC_EnableIRQ+0x38>)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	095b      	lsrs	r3, r3, #5
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	e000e100 	.word	0xe000e100

08000d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	6039      	str	r1, [r7, #0]
 8000d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	db0a      	blt.n	8000d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	490c      	ldr	r1, [pc, #48]	; (8000d74 <__NVIC_SetPriority+0x4c>)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	0112      	lsls	r2, r2, #4
 8000d48:	b2d2      	uxtb	r2, r2
 8000d4a:	440b      	add	r3, r1
 8000d4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d50:	e00a      	b.n	8000d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	4908      	ldr	r1, [pc, #32]	; (8000d78 <__NVIC_SetPriority+0x50>)
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	f003 030f 	and.w	r3, r3, #15
 8000d5e:	3b04      	subs	r3, #4
 8000d60:	0112      	lsls	r2, r2, #4
 8000d62:	b2d2      	uxtb	r2, r2
 8000d64:	440b      	add	r3, r1
 8000d66:	761a      	strb	r2, [r3, #24]
}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000e100 	.word	0xe000e100
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b089      	sub	sp, #36	; 0x24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	f1c3 0307 	rsb	r3, r3, #7
 8000d96:	2b04      	cmp	r3, #4
 8000d98:	bf28      	it	cs
 8000d9a:	2304      	movcs	r3, #4
 8000d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3304      	adds	r3, #4
 8000da2:	2b06      	cmp	r3, #6
 8000da4:	d902      	bls.n	8000dac <NVIC_EncodePriority+0x30>
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	3b03      	subs	r3, #3
 8000daa:	e000      	b.n	8000dae <NVIC_EncodePriority+0x32>
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db0:	f04f 32ff 	mov.w	r2, #4294967295
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43da      	mvns	r2, r3
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	401a      	ands	r2, r3
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	fa01 f303 	lsl.w	r3, r1, r3
 8000dce:	43d9      	mvns	r1, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd4:	4313      	orrs	r3, r2
         );
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3724      	adds	r7, #36	; 0x24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
	...

08000de4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000df4:	d301      	bcc.n	8000dfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000df6:	2301      	movs	r3, #1
 8000df8:	e00f      	b.n	8000e1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dfa:	4a0a      	ldr	r2, [pc, #40]	; (8000e24 <SysTick_Config+0x40>)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e02:	210f      	movs	r1, #15
 8000e04:	f04f 30ff 	mov.w	r0, #4294967295
 8000e08:	f7ff ff8e 	bl	8000d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e0c:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <SysTick_Config+0x40>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e12:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <SysTick_Config+0x40>)
 8000e14:	2207      	movs	r2, #7
 8000e16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	e000e010 	.word	0xe000e010

08000e28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f7ff ff29 	bl	8000c88 <__NVIC_SetPriorityGrouping>
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b086      	sub	sp, #24
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	4603      	mov	r3, r0
 8000e46:	60b9      	str	r1, [r7, #8]
 8000e48:	607a      	str	r2, [r7, #4]
 8000e4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e50:	f7ff ff3e 	bl	8000cd0 <__NVIC_GetPriorityGrouping>
 8000e54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	68b9      	ldr	r1, [r7, #8]
 8000e5a:	6978      	ldr	r0, [r7, #20]
 8000e5c:	f7ff ff8e 	bl	8000d7c <NVIC_EncodePriority>
 8000e60:	4602      	mov	r2, r0
 8000e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e66:	4611      	mov	r1, r2
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff5d 	bl	8000d28 <__NVIC_SetPriority>
}
 8000e6e:	bf00      	nop
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff31 	bl	8000cec <__NVIC_EnableIRQ>
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff ffa2 	bl	8000de4 <SysTick_Config>
 8000ea0:	4603      	mov	r3, r0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	b083      	sub	sp, #12
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d004      	beq.n	8000ec8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2280      	movs	r2, #128	; 0x80
 8000ec2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e00c      	b.n	8000ee2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2205      	movs	r2, #5
 8000ecc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f022 0201 	bic.w	r2, r2, #1
 8000ede:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
	...

08000ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b089      	sub	sp, #36	; 0x24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
 8000f0a:	e165      	b.n	80011d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	697a      	ldr	r2, [r7, #20]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	f040 8154 	bne.w	80011d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d003      	beq.n	8000f3a <HAL_GPIO_Init+0x4a>
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	2b12      	cmp	r3, #18
 8000f38:	d123      	bne.n	8000f82 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	08da      	lsrs	r2, r3, #3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	3208      	adds	r2, #8
 8000f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	220f      	movs	r2, #15
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43db      	mvns	r3, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	691a      	ldr	r2, [r3, #16]
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	f003 0307 	and.w	r3, r3, #7
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	08da      	lsrs	r2, r3, #3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3208      	adds	r2, #8
 8000f7c:	69b9      	ldr	r1, [r7, #24]
 8000f7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4013      	ands	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 0203 	and.w	r2, r3, #3
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d00b      	beq.n	8000fd6 <HAL_GPIO_Init+0xe6>
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d007      	beq.n	8000fd6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fca:	2b11      	cmp	r3, #17
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	2b12      	cmp	r3, #18
 8000fd4:	d130      	bne.n	8001038 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4013      	ands	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	68da      	ldr	r2, [r3, #12]
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800100c:	2201      	movs	r2, #1
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	091b      	lsrs	r3, r3, #4
 8001022:	f003 0201 	and.w	r2, r3, #1
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	2203      	movs	r2, #3
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	689a      	ldr	r2, [r3, #8]
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001070:	2b00      	cmp	r3, #0
 8001072:	f000 80ae 	beq.w	80011d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	4b5c      	ldr	r3, [pc, #368]	; (80011ec <HAL_GPIO_Init+0x2fc>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	4a5b      	ldr	r2, [pc, #364]	; (80011ec <HAL_GPIO_Init+0x2fc>)
 8001080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001084:	6453      	str	r3, [r2, #68]	; 0x44
 8001086:	4b59      	ldr	r3, [pc, #356]	; (80011ec <HAL_GPIO_Init+0x2fc>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001092:	4a57      	ldr	r2, [pc, #348]	; (80011f0 <HAL_GPIO_Init+0x300>)
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	089b      	lsrs	r3, r3, #2
 8001098:	3302      	adds	r3, #2
 800109a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	f003 0303 	and.w	r3, r3, #3
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	220f      	movs	r2, #15
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4013      	ands	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a4e      	ldr	r2, [pc, #312]	; (80011f4 <HAL_GPIO_Init+0x304>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d025      	beq.n	800110a <HAL_GPIO_Init+0x21a>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a4d      	ldr	r2, [pc, #308]	; (80011f8 <HAL_GPIO_Init+0x308>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d01f      	beq.n	8001106 <HAL_GPIO_Init+0x216>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4c      	ldr	r2, [pc, #304]	; (80011fc <HAL_GPIO_Init+0x30c>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d019      	beq.n	8001102 <HAL_GPIO_Init+0x212>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4b      	ldr	r2, [pc, #300]	; (8001200 <HAL_GPIO_Init+0x310>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d013      	beq.n	80010fe <HAL_GPIO_Init+0x20e>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4a      	ldr	r2, [pc, #296]	; (8001204 <HAL_GPIO_Init+0x314>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d00d      	beq.n	80010fa <HAL_GPIO_Init+0x20a>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a49      	ldr	r2, [pc, #292]	; (8001208 <HAL_GPIO_Init+0x318>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d007      	beq.n	80010f6 <HAL_GPIO_Init+0x206>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a48      	ldr	r2, [pc, #288]	; (800120c <HAL_GPIO_Init+0x31c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d101      	bne.n	80010f2 <HAL_GPIO_Init+0x202>
 80010ee:	2306      	movs	r3, #6
 80010f0:	e00c      	b.n	800110c <HAL_GPIO_Init+0x21c>
 80010f2:	2307      	movs	r3, #7
 80010f4:	e00a      	b.n	800110c <HAL_GPIO_Init+0x21c>
 80010f6:	2305      	movs	r3, #5
 80010f8:	e008      	b.n	800110c <HAL_GPIO_Init+0x21c>
 80010fa:	2304      	movs	r3, #4
 80010fc:	e006      	b.n	800110c <HAL_GPIO_Init+0x21c>
 80010fe:	2303      	movs	r3, #3
 8001100:	e004      	b.n	800110c <HAL_GPIO_Init+0x21c>
 8001102:	2302      	movs	r3, #2
 8001104:	e002      	b.n	800110c <HAL_GPIO_Init+0x21c>
 8001106:	2301      	movs	r3, #1
 8001108:	e000      	b.n	800110c <HAL_GPIO_Init+0x21c>
 800110a:	2300      	movs	r3, #0
 800110c:	69fa      	ldr	r2, [r7, #28]
 800110e:	f002 0203 	and.w	r2, r2, #3
 8001112:	0092      	lsls	r2, r2, #2
 8001114:	4093      	lsls	r3, r2
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4313      	orrs	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800111c:	4934      	ldr	r1, [pc, #208]	; (80011f0 <HAL_GPIO_Init+0x300>)
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	089b      	lsrs	r3, r3, #2
 8001122:	3302      	adds	r3, #2
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800112a:	4b39      	ldr	r3, [pc, #228]	; (8001210 <HAL_GPIO_Init+0x320>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	43db      	mvns	r3, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4013      	ands	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800114e:	4a30      	ldr	r2, [pc, #192]	; (8001210 <HAL_GPIO_Init+0x320>)
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001154:	4b2e      	ldr	r3, [pc, #184]	; (8001210 <HAL_GPIO_Init+0x320>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001178:	4a25      	ldr	r2, [pc, #148]	; (8001210 <HAL_GPIO_Init+0x320>)
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800117e:	4b24      	ldr	r3, [pc, #144]	; (8001210 <HAL_GPIO_Init+0x320>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	43db      	mvns	r3, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4013      	ands	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011a2:	4a1b      	ldr	r2, [pc, #108]	; (8001210 <HAL_GPIO_Init+0x320>)
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011a8:	4b19      	ldr	r3, [pc, #100]	; (8001210 <HAL_GPIO_Init+0x320>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011cc:	4a10      	ldr	r2, [pc, #64]	; (8001210 <HAL_GPIO_Init+0x320>)
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3301      	adds	r3, #1
 80011d6:	61fb      	str	r3, [r7, #28]
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	2b0f      	cmp	r3, #15
 80011dc:	f67f ae96 	bls.w	8000f0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011e0:	bf00      	nop
 80011e2:	3724      	adds	r7, #36	; 0x24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40013800 	.word	0x40013800
 80011f4:	40020000 	.word	0x40020000
 80011f8:	40020400 	.word	0x40020400
 80011fc:	40020800 	.word	0x40020800
 8001200:	40020c00 	.word	0x40020c00
 8001204:	40021000 	.word	0x40021000
 8001208:	40021400 	.word	0x40021400
 800120c:	40021800 	.word	0x40021800
 8001210:	40013c00 	.word	0x40013c00

08001214 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	460b      	mov	r3, r1
 800121e:	807b      	strh	r3, [r7, #2]
 8001220:	4613      	mov	r3, r2
 8001222:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001224:	787b      	ldrb	r3, [r7, #1]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800122a:	887a      	ldrh	r2, [r7, #2]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001230:	e003      	b.n	800123a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001232:	887b      	ldrh	r3, [r7, #2]
 8001234:	041a      	lsls	r2, r3, #16
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	619a      	str	r2, [r3, #24]
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001246:	b480      	push	{r7}
 8001248:	b083      	sub	sp, #12
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
 800124e:	460b      	mov	r3, r1
 8001250:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	695a      	ldr	r2, [r3, #20]
 8001256:	887b      	ldrh	r3, [r7, #2]
 8001258:	401a      	ands	r2, r3
 800125a:	887b      	ldrh	r3, [r7, #2]
 800125c:	429a      	cmp	r2, r3
 800125e:	d104      	bne.n	800126a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001260:	887b      	ldrh	r3, [r7, #2]
 8001262:	041a      	lsls	r2, r3, #16
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001268:	e002      	b.n	8001270 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800126a:	887a      	ldrh	r2, [r7, #2]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	619a      	str	r2, [r3, #24]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800127c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800127e:	b08f      	sub	sp, #60	; 0x3c
 8001280:	af0a      	add	r7, sp, #40	; 0x28
 8001282:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d101      	bne.n	800128e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e116      	b.n	80014bc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800129a:	b2db      	uxtb	r3, r3
 800129c:	2b00      	cmp	r3, #0
 800129e:	d106      	bne.n	80012ae <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f006 fe97 	bl	8007fdc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2203      	movs	r2, #3
 80012b2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d102      	bne.n	80012c8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f003 f9f0 	bl	80046b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	687e      	ldr	r6, [r7, #4]
 80012da:	466d      	mov	r5, sp
 80012dc:	f106 0410 	add.w	r4, r6, #16
 80012e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80012f0:	1d33      	adds	r3, r6, #4
 80012f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012f4:	6838      	ldr	r0, [r7, #0]
 80012f6:	f003 f8c7 	bl	8004488 <USB_CoreInit>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d005      	beq.n	800130c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2202      	movs	r2, #2
 8001304:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e0d7      	b.n	80014bc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2100      	movs	r1, #0
 8001312:	4618      	mov	r0, r3
 8001314:	f003 f9de 	bl	80046d4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001318:	2300      	movs	r3, #0
 800131a:	73fb      	strb	r3, [r7, #15]
 800131c:	e04a      	b.n	80013b4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800131e:	7bfa      	ldrb	r2, [r7, #15]
 8001320:	6879      	ldr	r1, [r7, #4]
 8001322:	4613      	mov	r3, r2
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	1a9b      	subs	r3, r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	440b      	add	r3, r1
 800132c:	333d      	adds	r3, #61	; 0x3d
 800132e:	2201      	movs	r2, #1
 8001330:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001332:	7bfa      	ldrb	r2, [r7, #15]
 8001334:	6879      	ldr	r1, [r7, #4]
 8001336:	4613      	mov	r3, r2
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	1a9b      	subs	r3, r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	440b      	add	r3, r1
 8001340:	333c      	adds	r3, #60	; 0x3c
 8001342:	7bfa      	ldrb	r2, [r7, #15]
 8001344:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001346:	7bfa      	ldrb	r2, [r7, #15]
 8001348:	7bfb      	ldrb	r3, [r7, #15]
 800134a:	b298      	uxth	r0, r3
 800134c:	6879      	ldr	r1, [r7, #4]
 800134e:	4613      	mov	r3, r2
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	1a9b      	subs	r3, r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	440b      	add	r3, r1
 8001358:	3342      	adds	r3, #66	; 0x42
 800135a:	4602      	mov	r2, r0
 800135c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800135e:	7bfa      	ldrb	r2, [r7, #15]
 8001360:	6879      	ldr	r1, [r7, #4]
 8001362:	4613      	mov	r3, r2
 8001364:	00db      	lsls	r3, r3, #3
 8001366:	1a9b      	subs	r3, r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	440b      	add	r3, r1
 800136c:	333f      	adds	r3, #63	; 0x3f
 800136e:	2200      	movs	r2, #0
 8001370:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001372:	7bfa      	ldrb	r2, [r7, #15]
 8001374:	6879      	ldr	r1, [r7, #4]
 8001376:	4613      	mov	r3, r2
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	1a9b      	subs	r3, r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	440b      	add	r3, r1
 8001380:	3344      	adds	r3, #68	; 0x44
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001386:	7bfa      	ldrb	r2, [r7, #15]
 8001388:	6879      	ldr	r1, [r7, #4]
 800138a:	4613      	mov	r3, r2
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	1a9b      	subs	r3, r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	440b      	add	r3, r1
 8001394:	3348      	adds	r3, #72	; 0x48
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800139a:	7bfa      	ldrb	r2, [r7, #15]
 800139c:	6879      	ldr	r1, [r7, #4]
 800139e:	4613      	mov	r3, r2
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	1a9b      	subs	r3, r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	440b      	add	r3, r1
 80013a8:	3350      	adds	r3, #80	; 0x50
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
 80013b0:	3301      	adds	r3, #1
 80013b2:	73fb      	strb	r3, [r7, #15]
 80013b4:	7bfa      	ldrb	r2, [r7, #15]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d3af      	bcc.n	800131e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013be:	2300      	movs	r3, #0
 80013c0:	73fb      	strb	r3, [r7, #15]
 80013c2:	e044      	b.n	800144e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80013c4:	7bfa      	ldrb	r2, [r7, #15]
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	4613      	mov	r3, r2
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	1a9b      	subs	r3, r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	440b      	add	r3, r1
 80013d2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80013d6:	2200      	movs	r2, #0
 80013d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80013da:	7bfa      	ldrb	r2, [r7, #15]
 80013dc:	6879      	ldr	r1, [r7, #4]
 80013de:	4613      	mov	r3, r2
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	1a9b      	subs	r3, r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	440b      	add	r3, r1
 80013e8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80013ec:	7bfa      	ldrb	r2, [r7, #15]
 80013ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80013f0:	7bfa      	ldrb	r2, [r7, #15]
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	4613      	mov	r3, r2
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	1a9b      	subs	r3, r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	440b      	add	r3, r1
 80013fe:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001406:	7bfa      	ldrb	r2, [r7, #15]
 8001408:	6879      	ldr	r1, [r7, #4]
 800140a:	4613      	mov	r3, r2
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	1a9b      	subs	r3, r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	440b      	add	r3, r1
 8001414:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800141c:	7bfa      	ldrb	r2, [r7, #15]
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	4613      	mov	r3, r2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	1a9b      	subs	r3, r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	440b      	add	r3, r1
 800142a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001432:	7bfa      	ldrb	r2, [r7, #15]
 8001434:	6879      	ldr	r1, [r7, #4]
 8001436:	4613      	mov	r3, r2
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	1a9b      	subs	r3, r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	440b      	add	r3, r1
 8001440:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	3301      	adds	r3, #1
 800144c:	73fb      	strb	r3, [r7, #15]
 800144e:	7bfa      	ldrb	r2, [r7, #15]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	429a      	cmp	r2, r3
 8001456:	d3b5      	bcc.n	80013c4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	603b      	str	r3, [r7, #0]
 800145e:	687e      	ldr	r6, [r7, #4]
 8001460:	466d      	mov	r5, sp
 8001462:	f106 0410 	add.w	r4, r6, #16
 8001466:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001468:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800146a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800146c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800146e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001472:	e885 0003 	stmia.w	r5, {r0, r1}
 8001476:	1d33      	adds	r3, r6, #4
 8001478:	cb0e      	ldmia	r3, {r1, r2, r3}
 800147a:	6838      	ldr	r0, [r7, #0]
 800147c:	f003 f954 	bl	8004728 <USB_DevInit>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d005      	beq.n	8001492 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2202      	movs	r2, #2
 800148a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e014      	b.n	80014bc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2201      	movs	r2, #1
 800149e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d102      	bne.n	80014b0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f001 f898 	bl	80025e0 <HAL_PCDEx_ActivateLPM>
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f004 f93c 	bl	8005732 <USB_DevDisconnect>

  return HAL_OK;
 80014ba:	2300      	movs	r3, #0
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3714      	adds	r7, #20
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014c4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d101      	bne.n	80014e0 <HAL_PCD_Start+0x1c>
 80014dc:	2302      	movs	r3, #2
 80014de:	e020      	b.n	8001522 <HAL_PCD_Start+0x5e>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2201      	movs	r2, #1
 80014e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d109      	bne.n	8001504 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d005      	beq.n	8001504 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f004 f8fa 	bl	8005702 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f003 f8bc 	bl	8004690 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800152a:	b590      	push	{r4, r7, lr}
 800152c:	b08d      	sub	sp, #52	; 0x34
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001538:	6a3b      	ldr	r3, [r7, #32]
 800153a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4618      	mov	r0, r3
 8001542:	f004 f9a1 	bl	8005888 <USB_GetMode>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	f040 83bb 	bne.w	8001cc4 <HAL_PCD_IRQHandler+0x79a>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f004 f905 	bl	8005762 <USB_ReadInterrupts>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	f000 83b1 	beq.w	8001cc2 <HAL_PCD_IRQHandler+0x798>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f004 f8fc 	bl	8005762 <USB_ReadInterrupts>
 800156a:	4603      	mov	r3, r0
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b02      	cmp	r3, #2
 8001572:	d107      	bne.n	8001584 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	695a      	ldr	r2, [r3, #20]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f002 0202 	and.w	r2, r2, #2
 8001582:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f004 f8ea 	bl	8005762 <USB_ReadInterrupts>
 800158e:	4603      	mov	r3, r0
 8001590:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001594:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001598:	d17b      	bne.n	8001692 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 800159a:	2300      	movs	r3, #0
 800159c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f004 f8f0 	bl	8005788 <USB_ReadDevAllOutEpInterrupt>
 80015a8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80015aa:	e06f      	b.n	800168c <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 80015ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d064      	beq.n	8001680 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015bc:	b2d2      	uxtb	r2, r2
 80015be:	4611      	mov	r1, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f004 f915 	bl	80057f0 <USB_ReadDevOutEPInterrupt>
 80015c6:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d00c      	beq.n	80015ec <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80015d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d4:	015a      	lsls	r2, r3, #5
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	4413      	add	r3, r2
 80015da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015de:	461a      	mov	r2, r3
 80015e0:	2301      	movs	r3, #1
 80015e2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80015e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 fe3a 	bl	8002260 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	f003 0308 	and.w	r3, r3, #8
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d00c      	beq.n	8001610 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80015f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f000 ff39 	bl	8002470 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	015a      	lsls	r2, r3, #5
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	4413      	add	r3, r2
 8001606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800160a:	461a      	mov	r2, r3
 800160c:	2308      	movs	r3, #8
 800160e:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	f003 0310 	and.w	r3, r3, #16
 8001616:	2b00      	cmp	r3, #0
 8001618:	d008      	beq.n	800162c <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161c:	015a      	lsls	r2, r3, #5
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	4413      	add	r3, r2
 8001622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001626:	461a      	mov	r2, r3
 8001628:	2310      	movs	r3, #16
 800162a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	f003 0320 	and.w	r3, r3, #32
 8001632:	2b00      	cmp	r3, #0
 8001634:	d015      	beq.n	8001662 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	691b      	ldr	r3, [r3, #16]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d108      	bne.n	8001650 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6818      	ldr	r0, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001648:	461a      	mov	r2, r3
 800164a:	2101      	movs	r1, #1
 800164c:	f004 f960 	bl	8005910 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001652:	015a      	lsls	r2, r3, #5
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	4413      	add	r3, r2
 8001658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800165c:	461a      	mov	r2, r3
 800165e:	2320      	movs	r3, #32
 8001660:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d009      	beq.n	8001680 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	015a      	lsls	r2, r3, #5
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	4413      	add	r3, r2
 8001674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001678:	461a      	mov	r2, r3
 800167a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800167e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001682:	3301      	adds	r3, #1
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001688:	085b      	lsrs	r3, r3, #1
 800168a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800168c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800168e:	2b00      	cmp	r3, #0
 8001690:	d18c      	bne.n	80015ac <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f004 f863 	bl	8005762 <USB_ReadInterrupts>
 800169c:	4603      	mov	r3, r0
 800169e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80016a6:	f040 80c4 	bne.w	8001832 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f004 f884 	bl	80057bc <USB_ReadDevAllInEpInterrupt>
 80016b4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80016b6:	2300      	movs	r3, #0
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80016ba:	e0b6      	b.n	800182a <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80016bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f000 80ab 	beq.w	800181e <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	4611      	mov	r1, r2
 80016d2:	4618      	mov	r0, r3
 80016d4:	f004 f8aa 	bl	800582c <USB_ReadDevInEPInterrupt>
 80016d8:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d05b      	beq.n	800179c <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80016e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	2201      	movs	r2, #1
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	43db      	mvns	r3, r3
 80016fe:	69f9      	ldr	r1, [r7, #28]
 8001700:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001704:	4013      	ands	r3, r2
 8001706:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170a:	015a      	lsls	r2, r3, #5
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	4413      	add	r3, r2
 8001710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001714:	461a      	mov	r2, r3
 8001716:	2301      	movs	r3, #1
 8001718:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d11b      	bne.n	800175a <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001726:	4613      	mov	r3, r2
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	1a9b      	subs	r3, r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	440b      	add	r3, r1
 8001730:	3348      	adds	r3, #72	; 0x48
 8001732:	6819      	ldr	r1, [r3, #0]
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001738:	4613      	mov	r3, r2
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	1a9b      	subs	r3, r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4403      	add	r3, r0
 8001742:	3344      	adds	r3, #68	; 0x44
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4419      	add	r1, r3
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800174c:	4613      	mov	r3, r2
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	1a9b      	subs	r3, r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4403      	add	r3, r0
 8001756:	3348      	adds	r3, #72	; 0x48
 8001758:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175c:	b2db      	uxtb	r3, r3
 800175e:	4619      	mov	r1, r3
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f006 fcbc 	bl	80080de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d116      	bne.n	800179c <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001770:	2b00      	cmp	r3, #0
 8001772:	d113      	bne.n	800179c <HAL_PCD_IRQHandler+0x272>
 8001774:	6879      	ldr	r1, [r7, #4]
 8001776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001778:	4613      	mov	r3, r2
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	1a9b      	subs	r3, r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	440b      	add	r3, r1
 8001782:	3350      	adds	r3, #80	; 0x50
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d108      	bne.n	800179c <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6818      	ldr	r0, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001794:	461a      	mov	r2, r3
 8001796:	2101      	movs	r1, #1
 8001798:	f004 f8ba 	bl	8005910 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	f003 0308 	and.w	r3, r3, #8
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d008      	beq.n	80017b8 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a8:	015a      	lsls	r2, r3, #5
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	4413      	add	r3, r2
 80017ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017b2:	461a      	mov	r2, r3
 80017b4:	2308      	movs	r3, #8
 80017b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	f003 0310 	and.w	r3, r3, #16
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d008      	beq.n	80017d4 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	015a      	lsls	r2, r3, #5
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	4413      	add	r3, r2
 80017ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017ce:	461a      	mov	r2, r3
 80017d0:	2310      	movs	r3, #16
 80017d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d008      	beq.n	80017f0 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	015a      	lsls	r2, r3, #5
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	4413      	add	r3, r2
 80017e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017ea:	461a      	mov	r2, r3
 80017ec:	2340      	movs	r3, #64	; 0x40
 80017ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d008      	beq.n	800180c <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80017fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fc:	015a      	lsls	r2, r3, #5
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	4413      	add	r3, r2
 8001802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001806:	461a      	mov	r2, r3
 8001808:	2302      	movs	r3, #2
 800180a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001816:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 fc94 	bl	8002146 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	3301      	adds	r3, #1
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001826:	085b      	lsrs	r3, r3, #1
 8001828:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800182a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800182c:	2b00      	cmp	r3, #0
 800182e:	f47f af45 	bne.w	80016bc <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f003 ff93 	bl	8005762 <USB_ReadInterrupts>
 800183c:	4603      	mov	r3, r0
 800183e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001842:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001846:	d122      	bne.n	800188e <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	69fa      	ldr	r2, [r7, #28]
 8001852:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001856:	f023 0301 	bic.w	r3, r3, #1
 800185a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001862:	2b01      	cmp	r3, #1
 8001864:	d108      	bne.n	8001878 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800186e:	2100      	movs	r1, #0
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f006 fe87 	bl	8008584 <HAL_PCDEx_LPM_Callback>
 8001876:	e002      	b.n	800187e <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f006 fca7 	bl	80081cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	695a      	ldr	r2, [r3, #20]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800188c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f003 ff65 	bl	8005762 <USB_ReadInterrupts>
 8001898:	4603      	mov	r3, r0
 800189a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800189e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018a2:	d112      	bne.n	80018ca <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d102      	bne.n	80018ba <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f006 fc63 	bl	8008180 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	695a      	ldr	r2, [r3, #20]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80018c8:	615a      	str	r2, [r3, #20]
    }
    #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f003 ff47 	bl	8005762 <USB_ReadInterrupts>
 80018d4:	4603      	mov	r3, r0
 80018d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80018da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80018de:	d121      	bne.n	8001924 <HAL_PCD_IRQHandler+0x3fa>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	695a      	ldr	r2, [r3, #20]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80018ee:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d111      	bne.n	800191e <HAL_PCD_IRQHandler+0x3f4>
      {
        hpcd->LPM_State = LPM_L1;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2201      	movs	r2, #1
 80018fe:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001908:	089b      	lsrs	r3, r3, #2
 800190a:	f003 020f 	and.w	r2, r3, #15
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001914:	2101      	movs	r1, #1
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f006 fe34 	bl	8008584 <HAL_PCDEx_LPM_Callback>
 800191c:	e002      	b.n	8001924 <HAL_PCD_IRQHandler+0x3fa>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f006 fc2e 	bl	8008180 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f003 ff1a 	bl	8005762 <USB_ReadInterrupts>
 800192e:	4603      	mov	r3, r0
 8001930:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001934:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001938:	f040 80a7 	bne.w	8001a8a <HAL_PCD_IRQHandler+0x560>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	69fa      	ldr	r2, [r7, #28]
 8001946:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800194a:	f023 0301 	bic.w	r3, r3, #1
 800194e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2110      	movs	r1, #16
 8001956:	4618      	mov	r0, r3
 8001958:	f003 f852 	bl	8004a00 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800195c:	2300      	movs	r3, #0
 800195e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001960:	e036      	b.n	80019d0 <HAL_PCD_IRQHandler+0x4a6>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001964:	015a      	lsls	r2, r3, #5
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	4413      	add	r3, r2
 800196a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800196e:	461a      	mov	r2, r3
 8001970:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001974:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001978:	015a      	lsls	r2, r3, #5
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	4413      	add	r3, r2
 800197e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001986:	0151      	lsls	r1, r2, #5
 8001988:	69fa      	ldr	r2, [r7, #28]
 800198a:	440a      	add	r2, r1
 800198c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001990:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001994:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001998:	015a      	lsls	r2, r3, #5
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	4413      	add	r3, r2
 800199e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019a2:	461a      	mov	r2, r3
 80019a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80019a8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80019aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ac:	015a      	lsls	r2, r3, #5
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	4413      	add	r3, r2
 80019b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019ba:	0151      	lsls	r1, r2, #5
 80019bc:	69fa      	ldr	r2, [r7, #28]
 80019be:	440a      	add	r2, r1
 80019c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80019c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80019c8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019cc:	3301      	adds	r3, #1
 80019ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d3c3      	bcc.n	8001962 <HAL_PCD_IRQHandler+0x438>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	69fa      	ldr	r2, [r7, #28]
 80019e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019e8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80019ec:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d016      	beq.n	8001a24 <HAL_PCD_IRQHandler+0x4fa>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a00:	69fa      	ldr	r2, [r7, #28]
 8001a02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a06:	f043 030b 	orr.w	r3, r3, #11
 8001a0a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a16:	69fa      	ldr	r2, [r7, #28]
 8001a18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a1c:	f043 030b 	orr.w	r3, r3, #11
 8001a20:	6453      	str	r3, [r2, #68]	; 0x44
 8001a22:	e015      	b.n	8001a50 <HAL_PCD_IRQHandler+0x526>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	69fa      	ldr	r2, [r7, #28]
 8001a2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a32:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a36:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001a3a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	69fa      	ldr	r2, [r7, #28]
 8001a46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a4a:	f043 030b 	orr.w	r3, r3, #11
 8001a4e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	69fa      	ldr	r2, [r7, #28]
 8001a5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a5e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001a62:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6818      	ldr	r0, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a74:	461a      	mov	r2, r3
 8001a76:	f003 ff4b 	bl	8005910 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	695a      	ldr	r2, [r3, #20]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001a88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f003 fe67 	bl	8005762 <USB_ReadInterrupts>
 8001a94:	4603      	mov	r3, r0
 8001a96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a9e:	d124      	bne.n	8001aea <HAL_PCD_IRQHandler+0x5c0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f003 fefd 	bl	80058a4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f003 f807 	bl	8004ac2 <USB_GetDevSpeed>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681c      	ldr	r4, [r3, #0]
 8001ac0:	f000 fe94 	bl	80027ec <HAL_RCC_GetHCLKFreq>
 8001ac4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	461a      	mov	r2, r3
 8001ace:	4620      	mov	r0, r4
 8001ad0:	f002 fd3c 	bl	800454c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f006 fb2a 	bl	800812e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	695a      	ldr	r2, [r3, #20]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001ae8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f003 fe37 	bl	8005762 <USB_ReadInterrupts>
 8001af4:	4603      	mov	r3, r0
 8001af6:	f003 0310 	and.w	r3, r3, #16
 8001afa:	2b10      	cmp	r3, #16
 8001afc:	d161      	bne.n	8001bc2 <HAL_PCD_IRQHandler+0x698>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	699a      	ldr	r2, [r3, #24]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 0210 	bic.w	r2, r2, #16
 8001b0c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001b0e:	6a3b      	ldr	r3, [r7, #32]
 8001b10:	6a1b      	ldr	r3, [r3, #32]
 8001b12:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	f003 020f 	and.w	r2, r3, #15
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	1a9b      	subs	r3, r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	4413      	add	r3, r2
 8001b2a:	3304      	adds	r3, #4
 8001b2c:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	0c5b      	lsrs	r3, r3, #17
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d124      	bne.n	8001b84 <HAL_PCD_IRQHandler+0x65a>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001b40:	4013      	ands	r3, r2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d035      	beq.n	8001bb2 <HAL_PCD_IRQHandler+0x688>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	091b      	lsrs	r3, r3, #4
 8001b4e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	461a      	mov	r2, r3
 8001b58:	6a38      	ldr	r0, [r7, #32]
 8001b5a:	f003 fcaf 	bl	80054bc <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	68da      	ldr	r2, [r3, #12]
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	091b      	lsrs	r3, r3, #4
 8001b66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b6a:	441a      	add	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	699a      	ldr	r2, [r3, #24]
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	091b      	lsrs	r3, r3, #4
 8001b78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b7c:	441a      	add	r2, r3
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	619a      	str	r2, [r3, #24]
 8001b82:	e016      	b.n	8001bb2 <HAL_PCD_IRQHandler+0x688>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	0c5b      	lsrs	r3, r3, #17
 8001b88:	f003 030f 	and.w	r3, r3, #15
 8001b8c:	2b06      	cmp	r3, #6
 8001b8e:	d110      	bne.n	8001bb2 <HAL_PCD_IRQHandler+0x688>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001b96:	2208      	movs	r2, #8
 8001b98:	4619      	mov	r1, r3
 8001b9a:	6a38      	ldr	r0, [r7, #32]
 8001b9c:	f003 fc8e 	bl	80054bc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	699a      	ldr	r2, [r3, #24]
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	091b      	lsrs	r3, r3, #4
 8001ba8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bac:	441a      	add	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	699a      	ldr	r2, [r3, #24]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f042 0210 	orr.w	r2, r2, #16
 8001bc0:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f003 fdcb 	bl	8005762 <USB_ReadInterrupts>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	f003 0308 	and.w	r3, r3, #8
 8001bd2:	2b08      	cmp	r3, #8
 8001bd4:	d10a      	bne.n	8001bec <HAL_PCD_IRQHandler+0x6c2>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f006 fa9b 	bl	8008112 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	695a      	ldr	r2, [r3, #20]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f002 0208 	and.w	r2, r2, #8
 8001bea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f003 fdb6 	bl	8005762 <USB_ReadInterrupts>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c00:	d10f      	bne.n	8001c22 <HAL_PCD_IRQHandler+0x6f8>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f006 fafd 	bl	800820c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	695a      	ldr	r2, [r3, #20]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001c20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f003 fd9b 	bl	8005762 <USB_ReadInterrupts>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c36:	d10f      	bne.n	8001c58 <HAL_PCD_IRQHandler+0x72e>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	4619      	mov	r1, r3
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f006 fad0 	bl	80081e8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	695a      	ldr	r2, [r3, #20]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001c56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f003 fd80 	bl	8005762 <USB_ReadInterrupts>
 8001c62:	4603      	mov	r3, r0
 8001c64:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c6c:	d10a      	bne.n	8001c84 <HAL_PCD_IRQHandler+0x75a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f006 fade 	bl	8008230 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	695a      	ldr	r2, [r3, #20]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001c82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f003 fd6a 	bl	8005762 <USB_ReadInterrupts>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d115      	bne.n	8001cc4 <HAL_PCD_IRQHandler+0x79a>
    {
      temp = hpcd->Instance->GOTGINT;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	f003 0304 	and.w	r3, r3, #4
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d002      	beq.n	8001cb0 <HAL_PCD_IRQHandler+0x786>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f006 face 	bl	800824c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6859      	ldr	r1, [r3, #4]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	605a      	str	r2, [r3, #4]
 8001cc0:	e000      	b.n	8001cc4 <HAL_PCD_IRQHandler+0x79a>
      return;
 8001cc2:	bf00      	nop
    }
  }
}
 8001cc4:	3734      	adds	r7, #52	; 0x34
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd90      	pop	{r4, r7, pc}

08001cca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d101      	bne.n	8001ce4 <HAL_PCD_SetAddress+0x1a>
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	e013      	b.n	8001d0c <HAL_PCD_SetAddress+0x42>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	78fa      	ldrb	r2, [r7, #3]
 8001cf0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	78fa      	ldrb	r2, [r7, #3]
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f003 fcda 	bl	80056b6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	4608      	mov	r0, r1
 8001d1e:	4611      	mov	r1, r2
 8001d20:	461a      	mov	r2, r3
 8001d22:	4603      	mov	r3, r0
 8001d24:	70fb      	strb	r3, [r7, #3]
 8001d26:	460b      	mov	r3, r1
 8001d28:	803b      	strh	r3, [r7, #0]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	da0f      	bge.n	8001d5a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d3a:	78fb      	ldrb	r3, [r7, #3]
 8001d3c:	f003 020f 	and.w	r2, r3, #15
 8001d40:	4613      	mov	r3, r2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	1a9b      	subs	r3, r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	3338      	adds	r3, #56	; 0x38
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	3304      	adds	r3, #4
 8001d50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2201      	movs	r2, #1
 8001d56:	705a      	strb	r2, [r3, #1]
 8001d58:	e00f      	b.n	8001d7a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d5a:	78fb      	ldrb	r3, [r7, #3]
 8001d5c:	f003 020f 	and.w	r2, r3, #15
 8001d60:	4613      	mov	r3, r2
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	1a9b      	subs	r3, r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	4413      	add	r3, r2
 8001d70:	3304      	adds	r3, #4
 8001d72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d7a:	78fb      	ldrb	r3, [r7, #3]
 8001d7c:	f003 030f 	and.w	r3, r3, #15
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d86:	883a      	ldrh	r2, [r7, #0]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	78ba      	ldrb	r2, [r7, #2]
 8001d90:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	785b      	ldrb	r3, [r3, #1]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d004      	beq.n	8001da4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001da4:	78bb      	ldrb	r3, [r7, #2]
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d102      	bne.n	8001db0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d101      	bne.n	8001dbe <HAL_PCD_EP_Open+0xaa>
 8001dba:	2302      	movs	r3, #2
 8001dbc:	e00e      	b.n	8001ddc <HAL_PCD_EP_Open+0xc8>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68f9      	ldr	r1, [r7, #12]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f002 fe9d 	bl	8004b0c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001dda:	7afb      	ldrb	r3, [r7, #11]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	460b      	mov	r3, r1
 8001dee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001df0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	da0f      	bge.n	8001e18 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001df8:	78fb      	ldrb	r3, [r7, #3]
 8001dfa:	f003 020f 	and.w	r2, r3, #15
 8001dfe:	4613      	mov	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	1a9b      	subs	r3, r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	3338      	adds	r3, #56	; 0x38
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2201      	movs	r2, #1
 8001e14:	705a      	strb	r2, [r3, #1]
 8001e16:	e00f      	b.n	8001e38 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e18:	78fb      	ldrb	r3, [r7, #3]
 8001e1a:	f003 020f 	and.w	r2, r3, #15
 8001e1e:	4613      	mov	r3, r2
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	1a9b      	subs	r3, r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	3304      	adds	r3, #4
 8001e30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2200      	movs	r2, #0
 8001e36:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e38:	78fb      	ldrb	r3, [r7, #3]
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d101      	bne.n	8001e52 <HAL_PCD_EP_Close+0x6e>
 8001e4e:	2302      	movs	r3, #2
 8001e50:	e00e      	b.n	8001e70 <HAL_PCD_EP_Close+0x8c>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68f9      	ldr	r1, [r7, #12]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f002 fedb 	bl	8004c1c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	607a      	str	r2, [r7, #4]
 8001e82:	603b      	str	r3, [r7, #0]
 8001e84:	460b      	mov	r3, r1
 8001e86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e88:	7afb      	ldrb	r3, [r7, #11]
 8001e8a:	f003 020f 	and.w	r2, r3, #15
 8001e8e:	4613      	mov	r3, r2
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	1a9b      	subs	r3, r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3304      	adds	r3, #4
 8001ea0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001eba:	7afb      	ldrb	r3, [r7, #11]
 8001ebc:	f003 030f 	and.w	r3, r3, #15
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d102      	bne.n	8001ed4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ed4:	7afb      	ldrb	r3, [r7, #11]
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d109      	bne.n	8001ef2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6818      	ldr	r0, [r3, #0]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	461a      	mov	r2, r3
 8001eea:	6979      	ldr	r1, [r7, #20]
 8001eec:	f003 f95e 	bl	80051ac <USB_EP0StartXfer>
 8001ef0:	e008      	b.n	8001f04 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6818      	ldr	r0, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	461a      	mov	r2, r3
 8001efe:	6979      	ldr	r1, [r7, #20]
 8001f00:	f002 ff10 	bl	8004d24 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
 8001f16:	460b      	mov	r3, r1
 8001f18:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f1a:	78fb      	ldrb	r3, [r7, #3]
 8001f1c:	f003 020f 	and.w	r2, r3, #15
 8001f20:	6879      	ldr	r1, [r7, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	1a9b      	subs	r3, r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	440b      	add	r3, r1
 8001f2c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001f30:	681b      	ldr	r3, [r3, #0]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b086      	sub	sp, #24
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	60f8      	str	r0, [r7, #12]
 8001f46:	607a      	str	r2, [r7, #4]
 8001f48:	603b      	str	r3, [r7, #0]
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f4e:	7afb      	ldrb	r3, [r7, #11]
 8001f50:	f003 020f 	and.w	r2, r3, #15
 8001f54:	4613      	mov	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	1a9b      	subs	r3, r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	3338      	adds	r3, #56	; 0x38
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	4413      	add	r3, r2
 8001f62:	3304      	adds	r3, #4
 8001f64:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	2200      	movs	r2, #0
 8001f76:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f7e:	7afb      	ldrb	r3, [r7, #11]
 8001f80:	f003 030f 	and.w	r3, r3, #15
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d102      	bne.n	8001f98 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f98:	7afb      	ldrb	r3, [r7, #11]
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d109      	bne.n	8001fb6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6818      	ldr	r0, [r3, #0]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	461a      	mov	r2, r3
 8001fae:	6979      	ldr	r1, [r7, #20]
 8001fb0:	f003 f8fc 	bl	80051ac <USB_EP0StartXfer>
 8001fb4:	e008      	b.n	8001fc8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6818      	ldr	r0, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	6979      	ldr	r1, [r7, #20]
 8001fc4:	f002 feae 	bl	8004d24 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3718      	adds	r7, #24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b084      	sub	sp, #16
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001fde:	78fb      	ldrb	r3, [r7, #3]
 8001fe0:	f003 020f 	and.w	r2, r3, #15
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d901      	bls.n	8001ff0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e050      	b.n	8002092 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ff0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	da0f      	bge.n	8002018 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ff8:	78fb      	ldrb	r3, [r7, #3]
 8001ffa:	f003 020f 	and.w	r2, r3, #15
 8001ffe:	4613      	mov	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	1a9b      	subs	r3, r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	3338      	adds	r3, #56	; 0x38
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	4413      	add	r3, r2
 800200c:	3304      	adds	r3, #4
 800200e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2201      	movs	r2, #1
 8002014:	705a      	strb	r2, [r3, #1]
 8002016:	e00d      	b.n	8002034 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002018:	78fa      	ldrb	r2, [r7, #3]
 800201a:	4613      	mov	r3, r2
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	1a9b      	subs	r3, r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	4413      	add	r3, r2
 800202a:	3304      	adds	r3, #4
 800202c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2201      	movs	r2, #1
 8002038:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800203a:	78fb      	ldrb	r3, [r7, #3]
 800203c:	f003 030f 	and.w	r3, r3, #15
 8002040:	b2da      	uxtb	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800204c:	2b01      	cmp	r3, #1
 800204e:	d101      	bne.n	8002054 <HAL_PCD_EP_SetStall+0x82>
 8002050:	2302      	movs	r3, #2
 8002052:	e01e      	b.n	8002092 <HAL_PCD_EP_SetStall+0xc0>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68f9      	ldr	r1, [r7, #12]
 8002062:	4618      	mov	r0, r3
 8002064:	f003 fa53 	bl	800550e <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002068:	78fb      	ldrb	r3, [r7, #3]
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10a      	bne.n	8002088 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6818      	ldr	r0, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	b2d9      	uxtb	r1, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002082:	461a      	mov	r2, r3
 8002084:	f003 fc44 	bl	8005910 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b084      	sub	sp, #16
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
 80020a2:	460b      	mov	r3, r1
 80020a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020a6:	78fb      	ldrb	r3, [r7, #3]
 80020a8:	f003 020f 	and.w	r2, r3, #15
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d901      	bls.n	80020b8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e042      	b.n	800213e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	da0f      	bge.n	80020e0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020c0:	78fb      	ldrb	r3, [r7, #3]
 80020c2:	f003 020f 	and.w	r2, r3, #15
 80020c6:	4613      	mov	r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	1a9b      	subs	r3, r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	3338      	adds	r3, #56	; 0x38
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	4413      	add	r3, r2
 80020d4:	3304      	adds	r3, #4
 80020d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2201      	movs	r2, #1
 80020dc:	705a      	strb	r2, [r3, #1]
 80020de:	e00f      	b.n	8002100 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020e0:	78fb      	ldrb	r3, [r7, #3]
 80020e2:	f003 020f 	and.w	r2, r3, #15
 80020e6:	4613      	mov	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	1a9b      	subs	r3, r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	4413      	add	r3, r2
 80020f6:	3304      	adds	r3, #4
 80020f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002106:	78fb      	ldrb	r3, [r7, #3]
 8002108:	f003 030f 	and.w	r3, r3, #15
 800210c:	b2da      	uxtb	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002118:	2b01      	cmp	r3, #1
 800211a:	d101      	bne.n	8002120 <HAL_PCD_EP_ClrStall+0x86>
 800211c:	2302      	movs	r3, #2
 800211e:	e00e      	b.n	800213e <HAL_PCD_EP_ClrStall+0xa4>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68f9      	ldr	r1, [r7, #12]
 800212e:	4618      	mov	r0, r3
 8002130:	f003 fa5b 	bl	80055ea <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b08a      	sub	sp, #40	; 0x28
 800214a:	af02      	add	r7, sp, #8
 800214c:	6078      	str	r0, [r7, #4]
 800214e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	4613      	mov	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	1a9b      	subs	r3, r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	3338      	adds	r3, #56	; 0x38
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	4413      	add	r3, r2
 800216a:	3304      	adds	r3, #4
 800216c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	699a      	ldr	r2, [r3, #24]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	429a      	cmp	r2, r3
 8002178:	d901      	bls.n	800217e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e06c      	b.n	8002258 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	695a      	ldr	r2, [r3, #20]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	69fa      	ldr	r2, [r7, #28]
 8002190:	429a      	cmp	r2, r3
 8002192:	d902      	bls.n	800219a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	3303      	adds	r3, #3
 800219e:	089b      	lsrs	r3, r3, #2
 80021a0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021a2:	e02b      	b.n	80021fc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	695a      	ldr	r2, [r3, #20]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	69fa      	ldr	r2, [r7, #28]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d902      	bls.n	80021c0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	3303      	adds	r3, #3
 80021c4:	089b      	lsrs	r3, r3, #2
 80021c6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	68d9      	ldr	r1, [r3, #12]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	4603      	mov	r3, r0
 80021de:	6978      	ldr	r0, [r7, #20]
 80021e0:	f003 f937 	bl	8005452 <USB_WritePacket>

    ep->xfer_buff  += len;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	68da      	ldr	r2, [r3, #12]
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	441a      	add	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	699a      	ldr	r2, [r3, #24]
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	441a      	add	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	015a      	lsls	r2, r3, #5
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	4413      	add	r3, r2
 8002204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	b29b      	uxth	r3, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	429a      	cmp	r2, r3
 8002210:	d809      	bhi.n	8002226 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	699a      	ldr	r2, [r3, #24]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800221a:	429a      	cmp	r2, r3
 800221c:	d203      	bcs.n	8002226 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1be      	bne.n	80021a4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	695a      	ldr	r2, [r3, #20]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	429a      	cmp	r2, r3
 8002230:	d811      	bhi.n	8002256 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	f003 030f 	and.w	r3, r3, #15
 8002238:	2201      	movs	r2, #1
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002246:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	43db      	mvns	r3, r3
 800224c:	6939      	ldr	r1, [r7, #16]
 800224e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002252:	4013      	ands	r3, r2
 8002254:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	3720      	adds	r7, #32
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	333c      	adds	r3, #60	; 0x3c
 8002278:	3304      	adds	r3, #4
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	015a      	lsls	r2, r3, #5
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4413      	add	r3, r2
 8002286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	2b01      	cmp	r3, #1
 8002294:	f040 80b3 	bne.w	80023fe <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	f003 0308 	and.w	r3, r3, #8
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d028      	beq.n	80022f4 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	4a70      	ldr	r2, [pc, #448]	; (8002468 <PCD_EP_OutXfrComplete_int+0x208>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d90e      	bls.n	80022c8 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d009      	beq.n	80022c8 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	015a      	lsls	r2, r3, #5
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4413      	add	r3, r2
 80022bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022c0:	461a      	mov	r2, r3
 80022c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022c6:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f005 fedb 	bl	8008084 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6818      	ldr	r0, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80022d8:	461a      	mov	r2, r3
 80022da:	2101      	movs	r1, #1
 80022dc:	f003 fb18 	bl	8005910 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	015a      	lsls	r2, r3, #5
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4413      	add	r3, r2
 80022e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ec:	461a      	mov	r2, r3
 80022ee:	2308      	movs	r3, #8
 80022f0:	6093      	str	r3, [r2, #8]
 80022f2:	e0b3      	b.n	800245c <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	f003 0320 	and.w	r3, r3, #32
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d009      	beq.n	8002312 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	015a      	lsls	r2, r3, #5
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	4413      	add	r3, r2
 8002306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800230a:	461a      	mov	r2, r3
 800230c:	2320      	movs	r3, #32
 800230e:	6093      	str	r3, [r2, #8]
 8002310:	e0a4      	b.n	800245c <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002318:	2b00      	cmp	r3, #0
 800231a:	f040 809f 	bne.w	800245c <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	4a51      	ldr	r2, [pc, #324]	; (8002468 <PCD_EP_OutXfrComplete_int+0x208>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d90f      	bls.n	8002346 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00a      	beq.n	8002346 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	015a      	lsls	r2, r3, #5
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	4413      	add	r3, r2
 8002338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800233c:	461a      	mov	r2, r3
 800233e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002342:	6093      	str	r3, [r2, #8]
 8002344:	e08a      	b.n	800245c <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	4613      	mov	r3, r2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	1a9b      	subs	r3, r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	440b      	add	r3, r1
 8002354:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002358:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	0159      	lsls	r1, r3, #5
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	440b      	add	r3, r1
 8002362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800236c:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	4613      	mov	r3, r2
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	1a9b      	subs	r3, r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4403      	add	r3, r0
 800237c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002380:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	4613      	mov	r3, r2
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	1a9b      	subs	r3, r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	440b      	add	r3, r1
 8002390:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002394:	6819      	ldr	r1, [r3, #0]
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	4613      	mov	r3, r2
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	1a9b      	subs	r3, r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4403      	add	r3, r0
 80023a4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4419      	add	r1, r3
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	4613      	mov	r3, r2
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	1a9b      	subs	r3, r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4403      	add	r3, r0
 80023ba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023be:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	4619      	mov	r1, r3
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f005 fe6e 	bl	80080a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d144      	bne.n	800245c <PCD_EP_OutXfrComplete_int+0x1fc>
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	4613      	mov	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	1a9b      	subs	r3, r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	440b      	add	r3, r1
 80023e0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d138      	bne.n	800245c <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6818      	ldr	r0, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80023f4:	461a      	mov	r2, r3
 80023f6:	2101      	movs	r1, #1
 80023f8:	f003 fa8a 	bl	8005910 <USB_EP0_OutStart>
 80023fc:	e02e      	b.n	800245c <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	4a1a      	ldr	r2, [pc, #104]	; (800246c <PCD_EP_OutXfrComplete_int+0x20c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d124      	bne.n	8002450 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00a      	beq.n	8002426 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	015a      	lsls	r2, r3, #5
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	4413      	add	r3, r2
 8002418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800241c:	461a      	mov	r2, r3
 800241e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002422:	6093      	str	r3, [r2, #8]
 8002424:	e01a      	b.n	800245c <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	f003 0320 	and.w	r3, r3, #32
 800242c:	2b00      	cmp	r3, #0
 800242e:	d008      	beq.n	8002442 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	015a      	lsls	r2, r3, #5
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	4413      	add	r3, r2
 8002438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800243c:	461a      	mov	r2, r3
 800243e:	2320      	movs	r3, #32
 8002440:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	b2db      	uxtb	r3, r3
 8002446:	4619      	mov	r1, r3
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f005 fe2d 	bl	80080a8 <HAL_PCD_DataOutStageCallback>
 800244e:	e005      	b.n	800245c <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	b2db      	uxtb	r3, r3
 8002454:	4619      	mov	r1, r3
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f005 fe26 	bl	80080a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	4f54300a 	.word	0x4f54300a
 800246c:	4f54310a 	.word	0x4f54310a

08002470 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	333c      	adds	r3, #60	; 0x3c
 8002488:	3304      	adds	r3, #4
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	015a      	lsls	r2, r3, #5
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	4413      	add	r3, r2
 8002496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d113      	bne.n	80024ce <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	4a1f      	ldr	r2, [pc, #124]	; (8002528 <PCD_EP_OutSetupPacket_int+0xb8>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d922      	bls.n	80024f4 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d01d      	beq.n	80024f4 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	015a      	lsls	r2, r3, #5
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	4413      	add	r3, r2
 80024c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024c4:	461a      	mov	r2, r3
 80024c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024ca:	6093      	str	r3, [r2, #8]
 80024cc:	e012      	b.n	80024f4 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	4a16      	ldr	r2, [pc, #88]	; (800252c <PCD_EP_OutSetupPacket_int+0xbc>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d10e      	bne.n	80024f4 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d009      	beq.n	80024f4 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	015a      	lsls	r2, r3, #5
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	4413      	add	r3, r2
 80024e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024ec:	461a      	mov	r2, r3
 80024ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024f2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f005 fdc5 	bl	8008084 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	4a0a      	ldr	r2, [pc, #40]	; (8002528 <PCD_EP_OutSetupPacket_int+0xb8>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d90c      	bls.n	800251c <PCD_EP_OutSetupPacket_int+0xac>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d108      	bne.n	800251c <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6818      	ldr	r0, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002514:	461a      	mov	r2, r3
 8002516:	2101      	movs	r1, #1
 8002518:	f003 f9fa 	bl	8005910 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	4f54300a 	.word	0x4f54300a
 800252c:	4f54310a 	.word	0x4f54310a

08002530 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	70fb      	strb	r3, [r7, #3]
 800253c:	4613      	mov	r3, r2
 800253e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002546:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002548:	78fb      	ldrb	r3, [r7, #3]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d107      	bne.n	800255e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800254e:	883b      	ldrh	r3, [r7, #0]
 8002550:	0419      	lsls	r1, r3, #16
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	430a      	orrs	r2, r1
 800255a:	629a      	str	r2, [r3, #40]	; 0x28
 800255c:	e028      	b.n	80025b0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002564:	0c1b      	lsrs	r3, r3, #16
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	4413      	add	r3, r2
 800256a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800256c:	2300      	movs	r3, #0
 800256e:	73fb      	strb	r3, [r7, #15]
 8002570:	e00d      	b.n	800258e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	7bfb      	ldrb	r3, [r7, #15]
 8002578:	3340      	adds	r3, #64	; 0x40
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	0c1b      	lsrs	r3, r3, #16
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	4413      	add	r3, r2
 8002586:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002588:	7bfb      	ldrb	r3, [r7, #15]
 800258a:	3301      	adds	r3, #1
 800258c:	73fb      	strb	r3, [r7, #15]
 800258e:	7bfa      	ldrb	r2, [r7, #15]
 8002590:	78fb      	ldrb	r3, [r7, #3]
 8002592:	3b01      	subs	r3, #1
 8002594:	429a      	cmp	r2, r3
 8002596:	d3ec      	bcc.n	8002572 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002598:	883b      	ldrh	r3, [r7, #0]
 800259a:	0418      	lsls	r0, r3, #16
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6819      	ldr	r1, [r3, #0]
 80025a0:	78fb      	ldrb	r3, [r7, #3]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	4302      	orrs	r2, r0
 80025a8:	3340      	adds	r3, #64	; 0x40
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
 80025c6:	460b      	mov	r3, r1
 80025c8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	887a      	ldrh	r2, [r7, #2]
 80025d0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800260e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002612:	f043 0303 	orr.w	r3, r3, #3
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e0ca      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800263c:	4b67      	ldr	r3, [pc, #412]	; (80027dc <HAL_RCC_ClockConfig+0x1b4>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 030f 	and.w	r3, r3, #15
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d90c      	bls.n	8002664 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264a:	4b64      	ldr	r3, [pc, #400]	; (80027dc <HAL_RCC_ClockConfig+0x1b4>)
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002652:	4b62      	ldr	r3, [pc, #392]	; (80027dc <HAL_RCC_ClockConfig+0x1b4>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 030f 	and.w	r3, r3, #15
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	429a      	cmp	r2, r3
 800265e:	d001      	beq.n	8002664 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e0b6      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d020      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	2b00      	cmp	r3, #0
 800267a:	d005      	beq.n	8002688 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800267c:	4b58      	ldr	r3, [pc, #352]	; (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	4a57      	ldr	r2, [pc, #348]	; (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002682:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002686:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0308 	and.w	r3, r3, #8
 8002690:	2b00      	cmp	r3, #0
 8002692:	d005      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002694:	4b52      	ldr	r3, [pc, #328]	; (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	4a51      	ldr	r2, [pc, #324]	; (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 800269a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800269e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026a0:	4b4f      	ldr	r3, [pc, #316]	; (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	494c      	ldr	r1, [pc, #304]	; (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d044      	beq.n	8002748 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d107      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c6:	4b46      	ldr	r3, [pc, #280]	; (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d119      	bne.n	8002706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e07d      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d003      	beq.n	80026e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026e2:	2b03      	cmp	r3, #3
 80026e4:	d107      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e6:	4b3e      	ldr	r3, [pc, #248]	; (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d109      	bne.n	8002706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e06d      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f6:	4b3a      	ldr	r3, [pc, #232]	; (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e065      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002706:	4b36      	ldr	r3, [pc, #216]	; (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f023 0203 	bic.w	r2, r3, #3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	4933      	ldr	r1, [pc, #204]	; (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002714:	4313      	orrs	r3, r2
 8002716:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002718:	f7fd ff5a 	bl	80005d0 <HAL_GetTick>
 800271c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800271e:	e00a      	b.n	8002736 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002720:	f7fd ff56 	bl	80005d0 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	f241 3288 	movw	r2, #5000	; 0x1388
 800272e:	4293      	cmp	r3, r2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e04d      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002736:	4b2a      	ldr	r3, [pc, #168]	; (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 020c 	and.w	r2, r3, #12
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	429a      	cmp	r2, r3
 8002746:	d1eb      	bne.n	8002720 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002748:	4b24      	ldr	r3, [pc, #144]	; (80027dc <HAL_RCC_ClockConfig+0x1b4>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 030f 	and.w	r3, r3, #15
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	d20c      	bcs.n	8002770 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002756:	4b21      	ldr	r3, [pc, #132]	; (80027dc <HAL_RCC_ClockConfig+0x1b4>)
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800275e:	4b1f      	ldr	r3, [pc, #124]	; (80027dc <HAL_RCC_ClockConfig+0x1b4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	429a      	cmp	r2, r3
 800276a:	d001      	beq.n	8002770 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e030      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b00      	cmp	r3, #0
 800277a:	d008      	beq.n	800278e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800277c:	4b18      	ldr	r3, [pc, #96]	; (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4915      	ldr	r1, [pc, #84]	; (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 800278a:	4313      	orrs	r3, r2
 800278c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0308 	and.w	r3, r3, #8
 8002796:	2b00      	cmp	r3, #0
 8002798:	d009      	beq.n	80027ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800279a:	4b11      	ldr	r3, [pc, #68]	; (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	490d      	ldr	r1, [pc, #52]	; (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027ae:	f000 fb7b 	bl	8002ea8 <HAL_RCC_GetSysClockFreq>
 80027b2:	4601      	mov	r1, r0
 80027b4:	4b0a      	ldr	r3, [pc, #40]	; (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	091b      	lsrs	r3, r3, #4
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	4a09      	ldr	r2, [pc, #36]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 80027c0:	5cd3      	ldrb	r3, [r2, r3]
 80027c2:	fa21 f303 	lsr.w	r3, r1, r3
 80027c6:	4a08      	ldr	r2, [pc, #32]	; (80027e8 <HAL_RCC_ClockConfig+0x1c0>)
 80027c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80027ca:	2000      	movs	r0, #0
 80027cc:	f7fd febc 	bl	8000548 <HAL_InitTick>

  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40023c00 	.word	0x40023c00
 80027e0:	40023800 	.word	0x40023800
 80027e4:	08008b64 	.word	0x08008b64
 80027e8:	20000118 	.word	0x20000118

080027ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027f0:	4b03      	ldr	r3, [pc, #12]	; (8002800 <HAL_RCC_GetHCLKFreq+0x14>)
 80027f2:	681b      	ldr	r3, [r3, #0]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	20000118 	.word	0x20000118

08002804 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002808:	f7ff fff0 	bl	80027ec <HAL_RCC_GetHCLKFreq>
 800280c:	4601      	mov	r1, r0
 800280e:	4b05      	ldr	r3, [pc, #20]	; (8002824 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	0a9b      	lsrs	r3, r3, #10
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	4a03      	ldr	r2, [pc, #12]	; (8002828 <HAL_RCC_GetPCLK1Freq+0x24>)
 800281a:	5cd3      	ldrb	r3, [r2, r3]
 800281c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002820:	4618      	mov	r0, r3
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40023800 	.word	0x40023800
 8002828:	08008b74 	.word	0x08008b74

0800282c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002830:	f7ff ffdc 	bl	80027ec <HAL_RCC_GetHCLKFreq>
 8002834:	4601      	mov	r1, r0
 8002836:	4b05      	ldr	r3, [pc, #20]	; (800284c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	0b5b      	lsrs	r3, r3, #13
 800283c:	f003 0307 	and.w	r3, r3, #7
 8002840:	4a03      	ldr	r2, [pc, #12]	; (8002850 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002842:	5cd3      	ldrb	r3, [r2, r3]
 8002844:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002848:	4618      	mov	r0, r3
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40023800 	.word	0x40023800
 8002850:	08008b74 	.word	0x08008b74

08002854 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b08c      	sub	sp, #48	; 0x30
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800285c:	2300      	movs	r3, #0
 800285e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002860:	2300      	movs	r3, #0
 8002862:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002864:	2300      	movs	r3, #0
 8002866:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002868:	2300      	movs	r3, #0
 800286a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002874:	2300      	movs	r3, #0
 8002876:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002878:	2300      	movs	r3, #0
 800287a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800287c:	2300      	movs	r3, #0
 800287e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b00      	cmp	r3, #0
 800288a:	d010      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800288c:	4b6f      	ldr	r3, [pc, #444]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800288e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002892:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289a:	496c      	ldr	r1, [pc, #432]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800289c:	4313      	orrs	r3, r2
 800289e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80028aa:	2301      	movs	r3, #1
 80028ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d010      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80028ba:	4b64      	ldr	r3, [pc, #400]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028c0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c8:	4960      	ldr	r1, [pc, #384]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80028d8:	2301      	movs	r3, #1
 80028da:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d017      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028e8:	4b58      	ldr	r3, [pc, #352]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f6:	4955      	ldr	r1, [pc, #340]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002906:	d101      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002908:	2301      	movs	r3, #1
 800290a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002914:	2301      	movs	r3, #1
 8002916:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0308 	and.w	r3, r3, #8
 8002920:	2b00      	cmp	r3, #0
 8002922:	d017      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002924:	4b49      	ldr	r3, [pc, #292]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002926:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800292a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002932:	4946      	ldr	r1, [pc, #280]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002934:	4313      	orrs	r3, r2
 8002936:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800293e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002942:	d101      	bne.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002944:	2301      	movs	r3, #1
 8002946:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002950:	2301      	movs	r3, #1
 8002952:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0320 	and.w	r3, r3, #32
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 808a 	beq.w	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002962:	2300      	movs	r3, #0
 8002964:	60bb      	str	r3, [r7, #8]
 8002966:	4b39      	ldr	r3, [pc, #228]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	4a38      	ldr	r2, [pc, #224]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800296c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002970:	6413      	str	r3, [r2, #64]	; 0x40
 8002972:	4b36      	ldr	r3, [pc, #216]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297a:	60bb      	str	r3, [r7, #8]
 800297c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800297e:	4b34      	ldr	r3, [pc, #208]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a33      	ldr	r2, [pc, #204]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002988:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800298a:	f7fd fe21 	bl	80005d0 <HAL_GetTick>
 800298e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002990:	e008      	b.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002992:	f7fd fe1d 	bl	80005d0 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e278      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80029a4:	4b2a      	ldr	r3, [pc, #168]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0f0      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029b0:	4b26      	ldr	r3, [pc, #152]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029b8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029ba:	6a3b      	ldr	r3, [r7, #32]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d02f      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029c8:	6a3a      	ldr	r2, [r7, #32]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d028      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029ce:	4b1f      	ldr	r3, [pc, #124]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029d6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029d8:	4b1e      	ldr	r3, [pc, #120]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80029da:	2201      	movs	r2, #1
 80029dc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029de:	4b1d      	ldr	r3, [pc, #116]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80029e4:	4a19      	ldr	r2, [pc, #100]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029e6:	6a3b      	ldr	r3, [r7, #32]
 80029e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80029ea:	4b18      	ldr	r3, [pc, #96]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d114      	bne.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80029f6:	f7fd fdeb 	bl	80005d0 <HAL_GetTick>
 80029fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029fc:	e00a      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029fe:	f7fd fde7 	bl	80005d0 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e240      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a14:	4b0d      	ldr	r3, [pc, #52]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0ee      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a2c:	d114      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002a2e:	4b07      	ldr	r3, [pc, #28]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002a3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a42:	4902      	ldr	r1, [pc, #8]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	608b      	str	r3, [r1, #8]
 8002a48:	e00c      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002a4a:	bf00      	nop
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	40007000 	.word	0x40007000
 8002a54:	42470e40 	.word	0x42470e40
 8002a58:	4b4a      	ldr	r3, [pc, #296]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	4a49      	ldr	r2, [pc, #292]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a5e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002a62:	6093      	str	r3, [r2, #8]
 8002a64:	4b47      	ldr	r3, [pc, #284]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a70:	4944      	ldr	r1, [pc, #272]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0310 	and.w	r3, r3, #16
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d004      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002a88:	4b3f      	ldr	r3, [pc, #252]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002a8a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00a      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002a98:	4b3a      	ldr	r3, [pc, #232]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a9e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa6:	4937      	ldr	r1, [pc, #220]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00a      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002aba:	4b32      	ldr	r3, [pc, #200]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002abc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ac0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ac8:	492e      	ldr	r1, [pc, #184]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d011      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002adc:	4b29      	ldr	r3, [pc, #164]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ae2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aea:	4926      	ldr	r1, [pc, #152]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002afa:	d101      	bne.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002afc:	2301      	movs	r3, #1
 8002afe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00a      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002b0c:	4b1d      	ldr	r3, [pc, #116]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b12:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1a:	491a      	ldr	r1, [pc, #104]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d011      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002b2e:	4b15      	ldr	r3, [pc, #84]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b34:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b3c:	4911      	ldr	r1, [pc, #68]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b4c:	d101      	bne.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d005      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b60:	f040 80ff 	bne.w	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b64:	4b09      	ldr	r3, [pc, #36]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b6a:	f7fd fd31 	bl	80005d0 <HAL_GetTick>
 8002b6e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b70:	e00e      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002b72:	f7fd fd2d 	bl	80005d0 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d907      	bls.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e188      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002b84:	40023800 	.word	0x40023800
 8002b88:	424711e0 	.word	0x424711e0
 8002b8c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b90:	4b7e      	ldr	r3, [pc, #504]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1ea      	bne.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d003      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d009      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d028      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d124      	bne.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002bc4:	4b71      	ldr	r3, [pc, #452]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bca:	0c1b      	lsrs	r3, r3, #16
 8002bcc:	f003 0303 	and.w	r3, r3, #3
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002bd6:	4b6d      	ldr	r3, [pc, #436]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bdc:	0e1b      	lsrs	r3, r3, #24
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	019b      	lsls	r3, r3, #6
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	085b      	lsrs	r3, r3, #1
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	041b      	lsls	r3, r3, #16
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	061b      	lsls	r3, r3, #24
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	071b      	lsls	r3, r3, #28
 8002c06:	4961      	ldr	r1, [pc, #388]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0304 	and.w	r3, r3, #4
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d004      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c22:	d00a      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d035      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c38:	d130      	bne.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002c3a:	4b54      	ldr	r3, [pc, #336]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c40:	0c1b      	lsrs	r3, r3, #16
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	3301      	adds	r3, #1
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c4c:	4b4f      	ldr	r3, [pc, #316]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c52:	0f1b      	lsrs	r3, r3, #28
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	019b      	lsls	r3, r3, #6
 8002c64:	431a      	orrs	r2, r3
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	085b      	lsrs	r3, r3, #1
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	041b      	lsls	r3, r3, #16
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	061b      	lsls	r3, r3, #24
 8002c76:	431a      	orrs	r2, r3
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	071b      	lsls	r3, r3, #28
 8002c7c:	4943      	ldr	r1, [pc, #268]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002c84:	4b41      	ldr	r3, [pc, #260]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c8a:	f023 021f 	bic.w	r2, r3, #31
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c92:	3b01      	subs	r3, #1
 8002c94:	493d      	ldr	r1, [pc, #244]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d029      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cb0:	d124      	bne.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002cb2:	4b36      	ldr	r3, [pc, #216]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002cb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cb8:	0c1b      	lsrs	r3, r3, #16
 8002cba:	f003 0303 	and.w	r3, r3, #3
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002cc4:	4b31      	ldr	r3, [pc, #196]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002cc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cca:	0f1b      	lsrs	r3, r3, #28
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	019b      	lsls	r3, r3, #6
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	085b      	lsrs	r3, r3, #1
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	041b      	lsls	r3, r3, #16
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	061b      	lsls	r3, r3, #24
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	071b      	lsls	r3, r3, #28
 8002cf4:	4925      	ldr	r1, [pc, #148]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d016      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	019b      	lsls	r3, r3, #6
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	085b      	lsrs	r3, r3, #1
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	041b      	lsls	r3, r3, #16
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	061b      	lsls	r3, r3, #24
 8002d26:	431a      	orrs	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	071b      	lsls	r3, r3, #28
 8002d2e:	4917      	ldr	r1, [pc, #92]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d36:	4b16      	ldr	r3, [pc, #88]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002d38:	2201      	movs	r2, #1
 8002d3a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d3c:	f7fd fc48 	bl	80005d0 <HAL_GetTick>
 8002d40:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d42:	e008      	b.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002d44:	f7fd fc44 	bl	80005d0 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e09f      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d56:	4b0d      	ldr	r3, [pc, #52]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d0f0      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	f040 8095 	bne.w	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002d6a:	4b0a      	ldr	r3, [pc, #40]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d70:	f7fd fc2e 	bl	80005d0 <HAL_GetTick>
 8002d74:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d76:	e00f      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002d78:	f7fd fc2a 	bl	80005d0 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d908      	bls.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e085      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002d8a:	bf00      	nop
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	42470068 	.word	0x42470068
 8002d94:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d98:	4b41      	ldr	r3, [pc, #260]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002da0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002da4:	d0e8      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0304 	and.w	r3, r3, #4
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d009      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d02b      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d127      	bne.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002dce:	4b34      	ldr	r3, [pc, #208]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd4:	0c1b      	lsrs	r3, r3, #16
 8002dd6:	f003 0303 	and.w	r3, r3, #3
 8002dda:	3301      	adds	r3, #1
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	699a      	ldr	r2, [r3, #24]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	69db      	ldr	r3, [r3, #28]
 8002de8:	019b      	lsls	r3, r3, #6
 8002dea:	431a      	orrs	r2, r3
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	085b      	lsrs	r3, r3, #1
 8002df0:	3b01      	subs	r3, #1
 8002df2:	041b      	lsls	r3, r3, #16
 8002df4:	431a      	orrs	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfa:	061b      	lsls	r3, r3, #24
 8002dfc:	4928      	ldr	r1, [pc, #160]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002e04:	4b26      	ldr	r3, [pc, #152]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e0a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e12:	3b01      	subs	r3, #1
 8002e14:	021b      	lsls	r3, r3, #8
 8002e16:	4922      	ldr	r1, [pc, #136]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d01d      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e32:	d118      	bne.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e34:	4b1a      	ldr	r3, [pc, #104]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3a:	0e1b      	lsrs	r3, r3, #24
 8002e3c:	f003 030f 	and.w	r3, r3, #15
 8002e40:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	699a      	ldr	r2, [r3, #24]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	019b      	lsls	r3, r3, #6
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	085b      	lsrs	r3, r3, #1
 8002e54:	3b01      	subs	r3, #1
 8002e56:	041b      	lsls	r3, r3, #16
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	061b      	lsls	r3, r3, #24
 8002e5e:	4910      	ldr	r1, [pc, #64]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002e66:	4b0f      	ldr	r3, [pc, #60]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002e68:	2201      	movs	r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e6c:	f7fd fbb0 	bl	80005d0 <HAL_GetTick>
 8002e70:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e72:	e008      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002e74:	f7fd fbac 	bl	80005d0 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e007      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e86:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e92:	d1ef      	bne.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3730      	adds	r7, #48	; 0x30
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	42470070 	.word	0x42470070

08002ea8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eaa:	b087      	sub	sp, #28
 8002eac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ec2:	4bc6      	ldr	r3, [pc, #792]	; (80031dc <HAL_RCC_GetSysClockFreq+0x334>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 030c 	and.w	r3, r3, #12
 8002eca:	2b0c      	cmp	r3, #12
 8002ecc:	f200 817e 	bhi.w	80031cc <HAL_RCC_GetSysClockFreq+0x324>
 8002ed0:	a201      	add	r2, pc, #4	; (adr r2, 8002ed8 <HAL_RCC_GetSysClockFreq+0x30>)
 8002ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed6:	bf00      	nop
 8002ed8:	08002f0d 	.word	0x08002f0d
 8002edc:	080031cd 	.word	0x080031cd
 8002ee0:	080031cd 	.word	0x080031cd
 8002ee4:	080031cd 	.word	0x080031cd
 8002ee8:	08002f13 	.word	0x08002f13
 8002eec:	080031cd 	.word	0x080031cd
 8002ef0:	080031cd 	.word	0x080031cd
 8002ef4:	080031cd 	.word	0x080031cd
 8002ef8:	08002f19 	.word	0x08002f19
 8002efc:	080031cd 	.word	0x080031cd
 8002f00:	080031cd 	.word	0x080031cd
 8002f04:	080031cd 	.word	0x080031cd
 8002f08:	08003075 	.word	0x08003075
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f0c:	4bb4      	ldr	r3, [pc, #720]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x338>)
 8002f0e:	613b      	str	r3, [r7, #16]
       break;
 8002f10:	e15f      	b.n	80031d2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f12:	4bb3      	ldr	r3, [pc, #716]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x338>)
 8002f14:	613b      	str	r3, [r7, #16]
      break;
 8002f16:	e15c      	b.n	80031d2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f18:	4bb0      	ldr	r3, [pc, #704]	; (80031dc <HAL_RCC_GetSysClockFreq+0x334>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f20:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f22:	4bae      	ldr	r3, [pc, #696]	; (80031dc <HAL_RCC_GetSysClockFreq+0x334>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d04a      	beq.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f2e:	4bab      	ldr	r3, [pc, #684]	; (80031dc <HAL_RCC_GetSysClockFreq+0x334>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	099b      	lsrs	r3, r3, #6
 8002f34:	f04f 0400 	mov.w	r4, #0
 8002f38:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f3c:	f04f 0200 	mov.w	r2, #0
 8002f40:	ea03 0501 	and.w	r5, r3, r1
 8002f44:	ea04 0602 	and.w	r6, r4, r2
 8002f48:	4629      	mov	r1, r5
 8002f4a:	4632      	mov	r2, r6
 8002f4c:	f04f 0300 	mov.w	r3, #0
 8002f50:	f04f 0400 	mov.w	r4, #0
 8002f54:	0154      	lsls	r4, r2, #5
 8002f56:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f5a:	014b      	lsls	r3, r1, #5
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4622      	mov	r2, r4
 8002f60:	1b49      	subs	r1, r1, r5
 8002f62:	eb62 0206 	sbc.w	r2, r2, r6
 8002f66:	f04f 0300 	mov.w	r3, #0
 8002f6a:	f04f 0400 	mov.w	r4, #0
 8002f6e:	0194      	lsls	r4, r2, #6
 8002f70:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002f74:	018b      	lsls	r3, r1, #6
 8002f76:	1a5b      	subs	r3, r3, r1
 8002f78:	eb64 0402 	sbc.w	r4, r4, r2
 8002f7c:	f04f 0100 	mov.w	r1, #0
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	00e2      	lsls	r2, r4, #3
 8002f86:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002f8a:	00d9      	lsls	r1, r3, #3
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	4614      	mov	r4, r2
 8002f90:	195b      	adds	r3, r3, r5
 8002f92:	eb44 0406 	adc.w	r4, r4, r6
 8002f96:	f04f 0100 	mov.w	r1, #0
 8002f9a:	f04f 0200 	mov.w	r2, #0
 8002f9e:	02a2      	lsls	r2, r4, #10
 8002fa0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002fa4:	0299      	lsls	r1, r3, #10
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	4614      	mov	r4, r2
 8002faa:	4618      	mov	r0, r3
 8002fac:	4621      	mov	r1, r4
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f04f 0400 	mov.w	r4, #0
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	4623      	mov	r3, r4
 8002fb8:	f7fd f924 	bl	8000204 <__aeabi_uldivmod>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	460c      	mov	r4, r1
 8002fc0:	617b      	str	r3, [r7, #20]
 8002fc2:	e049      	b.n	8003058 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fc4:	4b85      	ldr	r3, [pc, #532]	; (80031dc <HAL_RCC_GetSysClockFreq+0x334>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	099b      	lsrs	r3, r3, #6
 8002fca:	f04f 0400 	mov.w	r4, #0
 8002fce:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002fd2:	f04f 0200 	mov.w	r2, #0
 8002fd6:	ea03 0501 	and.w	r5, r3, r1
 8002fda:	ea04 0602 	and.w	r6, r4, r2
 8002fde:	4629      	mov	r1, r5
 8002fe0:	4632      	mov	r2, r6
 8002fe2:	f04f 0300 	mov.w	r3, #0
 8002fe6:	f04f 0400 	mov.w	r4, #0
 8002fea:	0154      	lsls	r4, r2, #5
 8002fec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ff0:	014b      	lsls	r3, r1, #5
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	4622      	mov	r2, r4
 8002ff6:	1b49      	subs	r1, r1, r5
 8002ff8:	eb62 0206 	sbc.w	r2, r2, r6
 8002ffc:	f04f 0300 	mov.w	r3, #0
 8003000:	f04f 0400 	mov.w	r4, #0
 8003004:	0194      	lsls	r4, r2, #6
 8003006:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800300a:	018b      	lsls	r3, r1, #6
 800300c:	1a5b      	subs	r3, r3, r1
 800300e:	eb64 0402 	sbc.w	r4, r4, r2
 8003012:	f04f 0100 	mov.w	r1, #0
 8003016:	f04f 0200 	mov.w	r2, #0
 800301a:	00e2      	lsls	r2, r4, #3
 800301c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003020:	00d9      	lsls	r1, r3, #3
 8003022:	460b      	mov	r3, r1
 8003024:	4614      	mov	r4, r2
 8003026:	195b      	adds	r3, r3, r5
 8003028:	eb44 0406 	adc.w	r4, r4, r6
 800302c:	f04f 0100 	mov.w	r1, #0
 8003030:	f04f 0200 	mov.w	r2, #0
 8003034:	02a2      	lsls	r2, r4, #10
 8003036:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800303a:	0299      	lsls	r1, r3, #10
 800303c:	460b      	mov	r3, r1
 800303e:	4614      	mov	r4, r2
 8003040:	4618      	mov	r0, r3
 8003042:	4621      	mov	r1, r4
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f04f 0400 	mov.w	r4, #0
 800304a:	461a      	mov	r2, r3
 800304c:	4623      	mov	r3, r4
 800304e:	f7fd f8d9 	bl	8000204 <__aeabi_uldivmod>
 8003052:	4603      	mov	r3, r0
 8003054:	460c      	mov	r4, r1
 8003056:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003058:	4b60      	ldr	r3, [pc, #384]	; (80031dc <HAL_RCC_GetSysClockFreq+0x334>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	0c1b      	lsrs	r3, r3, #16
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	3301      	adds	r3, #1
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003070:	613b      	str	r3, [r7, #16]
      break;
 8003072:	e0ae      	b.n	80031d2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003074:	4b59      	ldr	r3, [pc, #356]	; (80031dc <HAL_RCC_GetSysClockFreq+0x334>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800307c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800307e:	4b57      	ldr	r3, [pc, #348]	; (80031dc <HAL_RCC_GetSysClockFreq+0x334>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d04a      	beq.n	8003120 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800308a:	4b54      	ldr	r3, [pc, #336]	; (80031dc <HAL_RCC_GetSysClockFreq+0x334>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	099b      	lsrs	r3, r3, #6
 8003090:	f04f 0400 	mov.w	r4, #0
 8003094:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	ea03 0501 	and.w	r5, r3, r1
 80030a0:	ea04 0602 	and.w	r6, r4, r2
 80030a4:	4629      	mov	r1, r5
 80030a6:	4632      	mov	r2, r6
 80030a8:	f04f 0300 	mov.w	r3, #0
 80030ac:	f04f 0400 	mov.w	r4, #0
 80030b0:	0154      	lsls	r4, r2, #5
 80030b2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80030b6:	014b      	lsls	r3, r1, #5
 80030b8:	4619      	mov	r1, r3
 80030ba:	4622      	mov	r2, r4
 80030bc:	1b49      	subs	r1, r1, r5
 80030be:	eb62 0206 	sbc.w	r2, r2, r6
 80030c2:	f04f 0300 	mov.w	r3, #0
 80030c6:	f04f 0400 	mov.w	r4, #0
 80030ca:	0194      	lsls	r4, r2, #6
 80030cc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80030d0:	018b      	lsls	r3, r1, #6
 80030d2:	1a5b      	subs	r3, r3, r1
 80030d4:	eb64 0402 	sbc.w	r4, r4, r2
 80030d8:	f04f 0100 	mov.w	r1, #0
 80030dc:	f04f 0200 	mov.w	r2, #0
 80030e0:	00e2      	lsls	r2, r4, #3
 80030e2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80030e6:	00d9      	lsls	r1, r3, #3
 80030e8:	460b      	mov	r3, r1
 80030ea:	4614      	mov	r4, r2
 80030ec:	195b      	adds	r3, r3, r5
 80030ee:	eb44 0406 	adc.w	r4, r4, r6
 80030f2:	f04f 0100 	mov.w	r1, #0
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	02a2      	lsls	r2, r4, #10
 80030fc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003100:	0299      	lsls	r1, r3, #10
 8003102:	460b      	mov	r3, r1
 8003104:	4614      	mov	r4, r2
 8003106:	4618      	mov	r0, r3
 8003108:	4621      	mov	r1, r4
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f04f 0400 	mov.w	r4, #0
 8003110:	461a      	mov	r2, r3
 8003112:	4623      	mov	r3, r4
 8003114:	f7fd f876 	bl	8000204 <__aeabi_uldivmod>
 8003118:	4603      	mov	r3, r0
 800311a:	460c      	mov	r4, r1
 800311c:	617b      	str	r3, [r7, #20]
 800311e:	e049      	b.n	80031b4 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003120:	4b2e      	ldr	r3, [pc, #184]	; (80031dc <HAL_RCC_GetSysClockFreq+0x334>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	099b      	lsrs	r3, r3, #6
 8003126:	f04f 0400 	mov.w	r4, #0
 800312a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800312e:	f04f 0200 	mov.w	r2, #0
 8003132:	ea03 0501 	and.w	r5, r3, r1
 8003136:	ea04 0602 	and.w	r6, r4, r2
 800313a:	4629      	mov	r1, r5
 800313c:	4632      	mov	r2, r6
 800313e:	f04f 0300 	mov.w	r3, #0
 8003142:	f04f 0400 	mov.w	r4, #0
 8003146:	0154      	lsls	r4, r2, #5
 8003148:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800314c:	014b      	lsls	r3, r1, #5
 800314e:	4619      	mov	r1, r3
 8003150:	4622      	mov	r2, r4
 8003152:	1b49      	subs	r1, r1, r5
 8003154:	eb62 0206 	sbc.w	r2, r2, r6
 8003158:	f04f 0300 	mov.w	r3, #0
 800315c:	f04f 0400 	mov.w	r4, #0
 8003160:	0194      	lsls	r4, r2, #6
 8003162:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003166:	018b      	lsls	r3, r1, #6
 8003168:	1a5b      	subs	r3, r3, r1
 800316a:	eb64 0402 	sbc.w	r4, r4, r2
 800316e:	f04f 0100 	mov.w	r1, #0
 8003172:	f04f 0200 	mov.w	r2, #0
 8003176:	00e2      	lsls	r2, r4, #3
 8003178:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800317c:	00d9      	lsls	r1, r3, #3
 800317e:	460b      	mov	r3, r1
 8003180:	4614      	mov	r4, r2
 8003182:	195b      	adds	r3, r3, r5
 8003184:	eb44 0406 	adc.w	r4, r4, r6
 8003188:	f04f 0100 	mov.w	r1, #0
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	02a2      	lsls	r2, r4, #10
 8003192:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003196:	0299      	lsls	r1, r3, #10
 8003198:	460b      	mov	r3, r1
 800319a:	4614      	mov	r4, r2
 800319c:	4618      	mov	r0, r3
 800319e:	4621      	mov	r1, r4
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f04f 0400 	mov.w	r4, #0
 80031a6:	461a      	mov	r2, r3
 80031a8:	4623      	mov	r3, r4
 80031aa:	f7fd f82b 	bl	8000204 <__aeabi_uldivmod>
 80031ae:	4603      	mov	r3, r0
 80031b0:	460c      	mov	r4, r1
 80031b2:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80031b4:	4b09      	ldr	r3, [pc, #36]	; (80031dc <HAL_RCC_GetSysClockFreq+0x334>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	0f1b      	lsrs	r3, r3, #28
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c8:	613b      	str	r3, [r7, #16]
      break;
 80031ca:	e002      	b.n	80031d2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031cc:	4b04      	ldr	r3, [pc, #16]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x338>)
 80031ce:	613b      	str	r3, [r7, #16]
      break;
 80031d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031d2:	693b      	ldr	r3, [r7, #16]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	371c      	adds	r7, #28
 80031d8:	46bd      	mov	sp, r7
 80031da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031dc:	40023800 	.word	0x40023800
 80031e0:	00f42400 	.word	0x00f42400

080031e4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031ec:	2300      	movs	r3, #0
 80031ee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 8083 	beq.w	8003304 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031fe:	4b95      	ldr	r3, [pc, #596]	; (8003454 <HAL_RCC_OscConfig+0x270>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 030c 	and.w	r3, r3, #12
 8003206:	2b04      	cmp	r3, #4
 8003208:	d019      	beq.n	800323e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800320a:	4b92      	ldr	r3, [pc, #584]	; (8003454 <HAL_RCC_OscConfig+0x270>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003212:	2b08      	cmp	r3, #8
 8003214:	d106      	bne.n	8003224 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003216:	4b8f      	ldr	r3, [pc, #572]	; (8003454 <HAL_RCC_OscConfig+0x270>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800321e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003222:	d00c      	beq.n	800323e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003224:	4b8b      	ldr	r3, [pc, #556]	; (8003454 <HAL_RCC_OscConfig+0x270>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800322c:	2b0c      	cmp	r3, #12
 800322e:	d112      	bne.n	8003256 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003230:	4b88      	ldr	r3, [pc, #544]	; (8003454 <HAL_RCC_OscConfig+0x270>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003238:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800323c:	d10b      	bne.n	8003256 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800323e:	4b85      	ldr	r3, [pc, #532]	; (8003454 <HAL_RCC_OscConfig+0x270>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d05b      	beq.n	8003302 <HAL_RCC_OscConfig+0x11e>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d157      	bne.n	8003302 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e216      	b.n	8003684 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800325e:	d106      	bne.n	800326e <HAL_RCC_OscConfig+0x8a>
 8003260:	4b7c      	ldr	r3, [pc, #496]	; (8003454 <HAL_RCC_OscConfig+0x270>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a7b      	ldr	r2, [pc, #492]	; (8003454 <HAL_RCC_OscConfig+0x270>)
 8003266:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800326a:	6013      	str	r3, [r2, #0]
 800326c:	e01d      	b.n	80032aa <HAL_RCC_OscConfig+0xc6>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003276:	d10c      	bne.n	8003292 <HAL_RCC_OscConfig+0xae>
 8003278:	4b76      	ldr	r3, [pc, #472]	; (8003454 <HAL_RCC_OscConfig+0x270>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a75      	ldr	r2, [pc, #468]	; (8003454 <HAL_RCC_OscConfig+0x270>)
 800327e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003282:	6013      	str	r3, [r2, #0]
 8003284:	4b73      	ldr	r3, [pc, #460]	; (8003454 <HAL_RCC_OscConfig+0x270>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a72      	ldr	r2, [pc, #456]	; (8003454 <HAL_RCC_OscConfig+0x270>)
 800328a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800328e:	6013      	str	r3, [r2, #0]
 8003290:	e00b      	b.n	80032aa <HAL_RCC_OscConfig+0xc6>
 8003292:	4b70      	ldr	r3, [pc, #448]	; (8003454 <HAL_RCC_OscConfig+0x270>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a6f      	ldr	r2, [pc, #444]	; (8003454 <HAL_RCC_OscConfig+0x270>)
 8003298:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800329c:	6013      	str	r3, [r2, #0]
 800329e:	4b6d      	ldr	r3, [pc, #436]	; (8003454 <HAL_RCC_OscConfig+0x270>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a6c      	ldr	r2, [pc, #432]	; (8003454 <HAL_RCC_OscConfig+0x270>)
 80032a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032a8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d013      	beq.n	80032da <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b2:	f7fd f98d 	bl	80005d0 <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b8:	e008      	b.n	80032cc <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032ba:	f7fd f989 	bl	80005d0 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b64      	cmp	r3, #100	; 0x64
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e1db      	b.n	8003684 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032cc:	4b61      	ldr	r3, [pc, #388]	; (8003454 <HAL_RCC_OscConfig+0x270>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0f0      	beq.n	80032ba <HAL_RCC_OscConfig+0xd6>
 80032d8:	e014      	b.n	8003304 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032da:	f7fd f979 	bl	80005d0 <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032e2:	f7fd f975 	bl	80005d0 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b64      	cmp	r3, #100	; 0x64
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e1c7      	b.n	8003684 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032f4:	4b57      	ldr	r3, [pc, #348]	; (8003454 <HAL_RCC_OscConfig+0x270>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1f0      	bne.n	80032e2 <HAL_RCC_OscConfig+0xfe>
 8003300:	e000      	b.n	8003304 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003302:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d06f      	beq.n	80033f0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003310:	4b50      	ldr	r3, [pc, #320]	; (8003454 <HAL_RCC_OscConfig+0x270>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f003 030c 	and.w	r3, r3, #12
 8003318:	2b00      	cmp	r3, #0
 800331a:	d017      	beq.n	800334c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800331c:	4b4d      	ldr	r3, [pc, #308]	; (8003454 <HAL_RCC_OscConfig+0x270>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003324:	2b08      	cmp	r3, #8
 8003326:	d105      	bne.n	8003334 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003328:	4b4a      	ldr	r3, [pc, #296]	; (8003454 <HAL_RCC_OscConfig+0x270>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00b      	beq.n	800334c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003334:	4b47      	ldr	r3, [pc, #284]	; (8003454 <HAL_RCC_OscConfig+0x270>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800333c:	2b0c      	cmp	r3, #12
 800333e:	d11c      	bne.n	800337a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003340:	4b44      	ldr	r3, [pc, #272]	; (8003454 <HAL_RCC_OscConfig+0x270>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d116      	bne.n	800337a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800334c:	4b41      	ldr	r3, [pc, #260]	; (8003454 <HAL_RCC_OscConfig+0x270>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d005      	beq.n	8003364 <HAL_RCC_OscConfig+0x180>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d001      	beq.n	8003364 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e18f      	b.n	8003684 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003364:	4b3b      	ldr	r3, [pc, #236]	; (8003454 <HAL_RCC_OscConfig+0x270>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	4938      	ldr	r1, [pc, #224]	; (8003454 <HAL_RCC_OscConfig+0x270>)
 8003374:	4313      	orrs	r3, r2
 8003376:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003378:	e03a      	b.n	80033f0 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d020      	beq.n	80033c4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003382:	4b35      	ldr	r3, [pc, #212]	; (8003458 <HAL_RCC_OscConfig+0x274>)
 8003384:	2201      	movs	r2, #1
 8003386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003388:	f7fd f922 	bl	80005d0 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003390:	f7fd f91e 	bl	80005d0 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e170      	b.n	8003684 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a2:	4b2c      	ldr	r3, [pc, #176]	; (8003454 <HAL_RCC_OscConfig+0x270>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0f0      	beq.n	8003390 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ae:	4b29      	ldr	r3, [pc, #164]	; (8003454 <HAL_RCC_OscConfig+0x270>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	4925      	ldr	r1, [pc, #148]	; (8003454 <HAL_RCC_OscConfig+0x270>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	600b      	str	r3, [r1, #0]
 80033c2:	e015      	b.n	80033f0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033c4:	4b24      	ldr	r3, [pc, #144]	; (8003458 <HAL_RCC_OscConfig+0x274>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ca:	f7fd f901 	bl	80005d0 <HAL_GetTick>
 80033ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033d0:	e008      	b.n	80033e4 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033d2:	f7fd f8fd 	bl	80005d0 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e14f      	b.n	8003684 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033e4:	4b1b      	ldr	r3, [pc, #108]	; (8003454 <HAL_RCC_OscConfig+0x270>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1f0      	bne.n	80033d2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0308 	and.w	r3, r3, #8
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d037      	beq.n	800346c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d016      	beq.n	8003432 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003404:	4b15      	ldr	r3, [pc, #84]	; (800345c <HAL_RCC_OscConfig+0x278>)
 8003406:	2201      	movs	r2, #1
 8003408:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340a:	f7fd f8e1 	bl	80005d0 <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003412:	f7fd f8dd 	bl	80005d0 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e12f      	b.n	8003684 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003424:	4b0b      	ldr	r3, [pc, #44]	; (8003454 <HAL_RCC_OscConfig+0x270>)
 8003426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0f0      	beq.n	8003412 <HAL_RCC_OscConfig+0x22e>
 8003430:	e01c      	b.n	800346c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003432:	4b0a      	ldr	r3, [pc, #40]	; (800345c <HAL_RCC_OscConfig+0x278>)
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003438:	f7fd f8ca 	bl	80005d0 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800343e:	e00f      	b.n	8003460 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003440:	f7fd f8c6 	bl	80005d0 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d908      	bls.n	8003460 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e118      	b.n	8003684 <HAL_RCC_OscConfig+0x4a0>
 8003452:	bf00      	nop
 8003454:	40023800 	.word	0x40023800
 8003458:	42470000 	.word	0x42470000
 800345c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003460:	4b8a      	ldr	r3, [pc, #552]	; (800368c <HAL_RCC_OscConfig+0x4a8>)
 8003462:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1e9      	bne.n	8003440 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 8097 	beq.w	80035a8 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800347a:	2300      	movs	r3, #0
 800347c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800347e:	4b83      	ldr	r3, [pc, #524]	; (800368c <HAL_RCC_OscConfig+0x4a8>)
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10f      	bne.n	80034aa <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800348a:	2300      	movs	r3, #0
 800348c:	60fb      	str	r3, [r7, #12]
 800348e:	4b7f      	ldr	r3, [pc, #508]	; (800368c <HAL_RCC_OscConfig+0x4a8>)
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	4a7e      	ldr	r2, [pc, #504]	; (800368c <HAL_RCC_OscConfig+0x4a8>)
 8003494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003498:	6413      	str	r3, [r2, #64]	; 0x40
 800349a:	4b7c      	ldr	r3, [pc, #496]	; (800368c <HAL_RCC_OscConfig+0x4a8>)
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80034a6:	2301      	movs	r3, #1
 80034a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034aa:	4b79      	ldr	r3, [pc, #484]	; (8003690 <HAL_RCC_OscConfig+0x4ac>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d118      	bne.n	80034e8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034b6:	4b76      	ldr	r3, [pc, #472]	; (8003690 <HAL_RCC_OscConfig+0x4ac>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a75      	ldr	r2, [pc, #468]	; (8003690 <HAL_RCC_OscConfig+0x4ac>)
 80034bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034c2:	f7fd f885 	bl	80005d0 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ca:	f7fd f881 	bl	80005d0 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e0d3      	b.n	8003684 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034dc:	4b6c      	ldr	r3, [pc, #432]	; (8003690 <HAL_RCC_OscConfig+0x4ac>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0f0      	beq.n	80034ca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d106      	bne.n	80034fe <HAL_RCC_OscConfig+0x31a>
 80034f0:	4b66      	ldr	r3, [pc, #408]	; (800368c <HAL_RCC_OscConfig+0x4a8>)
 80034f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f4:	4a65      	ldr	r2, [pc, #404]	; (800368c <HAL_RCC_OscConfig+0x4a8>)
 80034f6:	f043 0301 	orr.w	r3, r3, #1
 80034fa:	6713      	str	r3, [r2, #112]	; 0x70
 80034fc:	e01c      	b.n	8003538 <HAL_RCC_OscConfig+0x354>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	2b05      	cmp	r3, #5
 8003504:	d10c      	bne.n	8003520 <HAL_RCC_OscConfig+0x33c>
 8003506:	4b61      	ldr	r3, [pc, #388]	; (800368c <HAL_RCC_OscConfig+0x4a8>)
 8003508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350a:	4a60      	ldr	r2, [pc, #384]	; (800368c <HAL_RCC_OscConfig+0x4a8>)
 800350c:	f043 0304 	orr.w	r3, r3, #4
 8003510:	6713      	str	r3, [r2, #112]	; 0x70
 8003512:	4b5e      	ldr	r3, [pc, #376]	; (800368c <HAL_RCC_OscConfig+0x4a8>)
 8003514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003516:	4a5d      	ldr	r2, [pc, #372]	; (800368c <HAL_RCC_OscConfig+0x4a8>)
 8003518:	f043 0301 	orr.w	r3, r3, #1
 800351c:	6713      	str	r3, [r2, #112]	; 0x70
 800351e:	e00b      	b.n	8003538 <HAL_RCC_OscConfig+0x354>
 8003520:	4b5a      	ldr	r3, [pc, #360]	; (800368c <HAL_RCC_OscConfig+0x4a8>)
 8003522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003524:	4a59      	ldr	r2, [pc, #356]	; (800368c <HAL_RCC_OscConfig+0x4a8>)
 8003526:	f023 0301 	bic.w	r3, r3, #1
 800352a:	6713      	str	r3, [r2, #112]	; 0x70
 800352c:	4b57      	ldr	r3, [pc, #348]	; (800368c <HAL_RCC_OscConfig+0x4a8>)
 800352e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003530:	4a56      	ldr	r2, [pc, #344]	; (800368c <HAL_RCC_OscConfig+0x4a8>)
 8003532:	f023 0304 	bic.w	r3, r3, #4
 8003536:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d015      	beq.n	800356c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003540:	f7fd f846 	bl	80005d0 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003546:	e00a      	b.n	800355e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003548:	f7fd f842 	bl	80005d0 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	f241 3288 	movw	r2, #5000	; 0x1388
 8003556:	4293      	cmp	r3, r2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e092      	b.n	8003684 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800355e:	4b4b      	ldr	r3, [pc, #300]	; (800368c <HAL_RCC_OscConfig+0x4a8>)
 8003560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0ee      	beq.n	8003548 <HAL_RCC_OscConfig+0x364>
 800356a:	e014      	b.n	8003596 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800356c:	f7fd f830 	bl	80005d0 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003572:	e00a      	b.n	800358a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003574:	f7fd f82c 	bl	80005d0 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003582:	4293      	cmp	r3, r2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e07c      	b.n	8003684 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800358a:	4b40      	ldr	r3, [pc, #256]	; (800368c <HAL_RCC_OscConfig+0x4a8>)
 800358c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1ee      	bne.n	8003574 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003596:	7dfb      	ldrb	r3, [r7, #23]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d105      	bne.n	80035a8 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800359c:	4b3b      	ldr	r3, [pc, #236]	; (800368c <HAL_RCC_OscConfig+0x4a8>)
 800359e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a0:	4a3a      	ldr	r2, [pc, #232]	; (800368c <HAL_RCC_OscConfig+0x4a8>)
 80035a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d068      	beq.n	8003682 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035b0:	4b36      	ldr	r3, [pc, #216]	; (800368c <HAL_RCC_OscConfig+0x4a8>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f003 030c 	and.w	r3, r3, #12
 80035b8:	2b08      	cmp	r3, #8
 80035ba:	d060      	beq.n	800367e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d145      	bne.n	8003650 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035c4:	4b33      	ldr	r3, [pc, #204]	; (8003694 <HAL_RCC_OscConfig+0x4b0>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ca:	f7fd f801 	bl	80005d0 <HAL_GetTick>
 80035ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035d0:	e008      	b.n	80035e4 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035d2:	f7fc fffd 	bl	80005d0 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e04f      	b.n	8003684 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035e4:	4b29      	ldr	r3, [pc, #164]	; (800368c <HAL_RCC_OscConfig+0x4a8>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1f0      	bne.n	80035d2 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	69da      	ldr	r2, [r3, #28]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	431a      	orrs	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fe:	019b      	lsls	r3, r3, #6
 8003600:	431a      	orrs	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003606:	085b      	lsrs	r3, r3, #1
 8003608:	3b01      	subs	r3, #1
 800360a:	041b      	lsls	r3, r3, #16
 800360c:	431a      	orrs	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003612:	061b      	lsls	r3, r3, #24
 8003614:	431a      	orrs	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	071b      	lsls	r3, r3, #28
 800361c:	491b      	ldr	r1, [pc, #108]	; (800368c <HAL_RCC_OscConfig+0x4a8>)
 800361e:	4313      	orrs	r3, r2
 8003620:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003622:	4b1c      	ldr	r3, [pc, #112]	; (8003694 <HAL_RCC_OscConfig+0x4b0>)
 8003624:	2201      	movs	r2, #1
 8003626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003628:	f7fc ffd2 	bl	80005d0 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003630:	f7fc ffce 	bl	80005d0 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e020      	b.n	8003684 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003642:	4b12      	ldr	r3, [pc, #72]	; (800368c <HAL_RCC_OscConfig+0x4a8>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0f0      	beq.n	8003630 <HAL_RCC_OscConfig+0x44c>
 800364e:	e018      	b.n	8003682 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003650:	4b10      	ldr	r3, [pc, #64]	; (8003694 <HAL_RCC_OscConfig+0x4b0>)
 8003652:	2200      	movs	r2, #0
 8003654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003656:	f7fc ffbb 	bl	80005d0 <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800365c:	e008      	b.n	8003670 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800365e:	f7fc ffb7 	bl	80005d0 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e009      	b.n	8003684 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003670:	4b06      	ldr	r3, [pc, #24]	; (800368c <HAL_RCC_OscConfig+0x4a8>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1f0      	bne.n	800365e <HAL_RCC_OscConfig+0x47a>
 800367c:	e001      	b.n	8003682 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e000      	b.n	8003684 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3718      	adds	r7, #24
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40023800 	.word	0x40023800
 8003690:	40007000 	.word	0x40007000
 8003694:	42470060 	.word	0x42470060

08003698 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e01d      	b.n	80036e6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d106      	bne.n	80036c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f004 f96c 	bl	800799c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2202      	movs	r2, #2
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3304      	adds	r3, #4
 80036d4:	4619      	mov	r1, r3
 80036d6:	4610      	mov	r0, r2
 80036d8:	f000 f95e 	bl	8003998 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b085      	sub	sp, #20
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68da      	ldr	r2, [r3, #12]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f042 0201 	orr.w	r2, r2, #1
 8003704:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2b06      	cmp	r3, #6
 8003716:	d007      	beq.n	8003728 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0201 	orr.w	r2, r2, #1
 8003726:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3714      	adds	r7, #20
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b082      	sub	sp, #8
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b02      	cmp	r3, #2
 800374a:	d122      	bne.n	8003792 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b02      	cmp	r3, #2
 8003758:	d11b      	bne.n	8003792 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f06f 0202 	mvn.w	r2, #2
 8003762:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	f003 0303 	and.w	r3, r3, #3
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 f8ee 	bl	800395a <HAL_TIM_IC_CaptureCallback>
 800377e:	e005      	b.n	800378c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 f8e0 	bl	8003946 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f8f1 	bl	800396e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	2b04      	cmp	r3, #4
 800379e:	d122      	bne.n	80037e6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f003 0304 	and.w	r3, r3, #4
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	d11b      	bne.n	80037e6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f06f 0204 	mvn.w	r2, #4
 80037b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2202      	movs	r2, #2
 80037bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d003      	beq.n	80037d4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 f8c4 	bl	800395a <HAL_TIM_IC_CaptureCallback>
 80037d2:	e005      	b.n	80037e0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 f8b6 	bl	8003946 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f8c7 	bl	800396e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	f003 0308 	and.w	r3, r3, #8
 80037f0:	2b08      	cmp	r3, #8
 80037f2:	d122      	bne.n	800383a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	f003 0308 	and.w	r3, r3, #8
 80037fe:	2b08      	cmp	r3, #8
 8003800:	d11b      	bne.n	800383a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f06f 0208 	mvn.w	r2, #8
 800380a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2204      	movs	r2, #4
 8003810:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	f003 0303 	and.w	r3, r3, #3
 800381c:	2b00      	cmp	r3, #0
 800381e:	d003      	beq.n	8003828 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f89a 	bl	800395a <HAL_TIM_IC_CaptureCallback>
 8003826:	e005      	b.n	8003834 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 f88c 	bl	8003946 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f89d 	bl	800396e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	f003 0310 	and.w	r3, r3, #16
 8003844:	2b10      	cmp	r3, #16
 8003846:	d122      	bne.n	800388e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f003 0310 	and.w	r3, r3, #16
 8003852:	2b10      	cmp	r3, #16
 8003854:	d11b      	bne.n	800388e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f06f 0210 	mvn.w	r2, #16
 800385e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2208      	movs	r2, #8
 8003864:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	69db      	ldr	r3, [r3, #28]
 800386c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 f870 	bl	800395a <HAL_TIM_IC_CaptureCallback>
 800387a:	e005      	b.n	8003888 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 f862 	bl	8003946 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f873 	bl	800396e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b01      	cmp	r3, #1
 800389a:	d10e      	bne.n	80038ba <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d107      	bne.n	80038ba <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f06f 0201 	mvn.w	r2, #1
 80038b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f003 fd33 	bl	8007320 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c4:	2b80      	cmp	r3, #128	; 0x80
 80038c6:	d10e      	bne.n	80038e6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d2:	2b80      	cmp	r3, #128	; 0x80
 80038d4:	d107      	bne.n	80038e6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 f948 	bl	8003b76 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f0:	2b40      	cmp	r3, #64	; 0x40
 80038f2:	d10e      	bne.n	8003912 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fe:	2b40      	cmp	r3, #64	; 0x40
 8003900:	d107      	bne.n	8003912 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800390a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f838 	bl	8003982 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	f003 0320 	and.w	r3, r3, #32
 800391c:	2b20      	cmp	r3, #32
 800391e:	d10e      	bne.n	800393e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	f003 0320 	and.w	r3, r3, #32
 800392a:	2b20      	cmp	r3, #32
 800392c:	d107      	bne.n	800393e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f06f 0220 	mvn.w	r2, #32
 8003936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 f912 	bl	8003b62 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800393e:	bf00      	nop
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003946:	b480      	push	{r7}
 8003948:	b083      	sub	sp, #12
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr

0800395a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800395a:	b480      	push	{r7}
 800395c:	b083      	sub	sp, #12
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003976:	bf00      	nop
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr

08003982 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003982:	b480      	push	{r7}
 8003984:	b083      	sub	sp, #12
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800398a:	bf00      	nop
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
	...

08003998 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a40      	ldr	r2, [pc, #256]	; (8003aac <TIM_Base_SetConfig+0x114>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d013      	beq.n	80039d8 <TIM_Base_SetConfig+0x40>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b6:	d00f      	beq.n	80039d8 <TIM_Base_SetConfig+0x40>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a3d      	ldr	r2, [pc, #244]	; (8003ab0 <TIM_Base_SetConfig+0x118>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d00b      	beq.n	80039d8 <TIM_Base_SetConfig+0x40>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a3c      	ldr	r2, [pc, #240]	; (8003ab4 <TIM_Base_SetConfig+0x11c>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d007      	beq.n	80039d8 <TIM_Base_SetConfig+0x40>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a3b      	ldr	r2, [pc, #236]	; (8003ab8 <TIM_Base_SetConfig+0x120>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d003      	beq.n	80039d8 <TIM_Base_SetConfig+0x40>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a3a      	ldr	r2, [pc, #232]	; (8003abc <TIM_Base_SetConfig+0x124>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d108      	bne.n	80039ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a2f      	ldr	r2, [pc, #188]	; (8003aac <TIM_Base_SetConfig+0x114>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d02b      	beq.n	8003a4a <TIM_Base_SetConfig+0xb2>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039f8:	d027      	beq.n	8003a4a <TIM_Base_SetConfig+0xb2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a2c      	ldr	r2, [pc, #176]	; (8003ab0 <TIM_Base_SetConfig+0x118>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d023      	beq.n	8003a4a <TIM_Base_SetConfig+0xb2>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a2b      	ldr	r2, [pc, #172]	; (8003ab4 <TIM_Base_SetConfig+0x11c>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d01f      	beq.n	8003a4a <TIM_Base_SetConfig+0xb2>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a2a      	ldr	r2, [pc, #168]	; (8003ab8 <TIM_Base_SetConfig+0x120>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d01b      	beq.n	8003a4a <TIM_Base_SetConfig+0xb2>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a29      	ldr	r2, [pc, #164]	; (8003abc <TIM_Base_SetConfig+0x124>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d017      	beq.n	8003a4a <TIM_Base_SetConfig+0xb2>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a28      	ldr	r2, [pc, #160]	; (8003ac0 <TIM_Base_SetConfig+0x128>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d013      	beq.n	8003a4a <TIM_Base_SetConfig+0xb2>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a27      	ldr	r2, [pc, #156]	; (8003ac4 <TIM_Base_SetConfig+0x12c>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d00f      	beq.n	8003a4a <TIM_Base_SetConfig+0xb2>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a26      	ldr	r2, [pc, #152]	; (8003ac8 <TIM_Base_SetConfig+0x130>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d00b      	beq.n	8003a4a <TIM_Base_SetConfig+0xb2>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a25      	ldr	r2, [pc, #148]	; (8003acc <TIM_Base_SetConfig+0x134>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d007      	beq.n	8003a4a <TIM_Base_SetConfig+0xb2>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a24      	ldr	r2, [pc, #144]	; (8003ad0 <TIM_Base_SetConfig+0x138>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d003      	beq.n	8003a4a <TIM_Base_SetConfig+0xb2>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a23      	ldr	r2, [pc, #140]	; (8003ad4 <TIM_Base_SetConfig+0x13c>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d108      	bne.n	8003a5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a0a      	ldr	r2, [pc, #40]	; (8003aac <TIM_Base_SetConfig+0x114>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d003      	beq.n	8003a90 <TIM_Base_SetConfig+0xf8>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a0c      	ldr	r2, [pc, #48]	; (8003abc <TIM_Base_SetConfig+0x124>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d103      	bne.n	8003a98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	691a      	ldr	r2, [r3, #16]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	615a      	str	r2, [r3, #20]
}
 8003a9e:	bf00      	nop
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	40010000 	.word	0x40010000
 8003ab0:	40000400 	.word	0x40000400
 8003ab4:	40000800 	.word	0x40000800
 8003ab8:	40000c00 	.word	0x40000c00
 8003abc:	40010400 	.word	0x40010400
 8003ac0:	40014000 	.word	0x40014000
 8003ac4:	40014400 	.word	0x40014400
 8003ac8:	40014800 	.word	0x40014800
 8003acc:	40001800 	.word	0x40001800
 8003ad0:	40001c00 	.word	0x40001c00
 8003ad4:	40002000 	.word	0x40002000

08003ad8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d101      	bne.n	8003af0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003aec:	2302      	movs	r3, #2
 8003aee:	e032      	b.n	8003b56 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2202      	movs	r2, #2
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b28:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b083      	sub	sp, #12
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b083      	sub	sp, #12
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b7e:	bf00      	nop
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b082      	sub	sp, #8
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e03f      	b.n	8003c1c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d106      	bne.n	8003bb6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f004 f80b 	bl	8007bcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2224      	movs	r2, #36	; 0x24
 8003bba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68da      	ldr	r2, [r3, #12]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bcc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 fa50 	bl	8004074 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	691a      	ldr	r2, [r3, #16]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003be2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	695a      	ldr	r2, [r3, #20]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bf2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68da      	ldr	r2, [r3, #12]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c02:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2220      	movs	r2, #32
 8003c16:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b088      	sub	sp, #32
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	f003 030f 	and.w	r3, r3, #15
 8003c52:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10d      	bne.n	8003c76 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	f003 0320 	and.w	r3, r3, #32
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d008      	beq.n	8003c76 <HAL_UART_IRQHandler+0x52>
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	f003 0320 	and.w	r3, r3, #32
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f97e 	bl	8003f70 <UART_Receive_IT>
      return;
 8003c74:	e0cc      	b.n	8003e10 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 80ab 	beq.w	8003dd4 <HAL_UART_IRQHandler+0x1b0>
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d105      	bne.n	8003c94 <HAL_UART_IRQHandler+0x70>
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f000 80a0 	beq.w	8003dd4 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00a      	beq.n	8003cb4 <HAL_UART_IRQHandler+0x90>
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d005      	beq.n	8003cb4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cac:	f043 0201 	orr.w	r2, r3, #1
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	f003 0304 	and.w	r3, r3, #4
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00a      	beq.n	8003cd4 <HAL_UART_IRQHandler+0xb0>
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d005      	beq.n	8003cd4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ccc:	f043 0202 	orr.w	r2, r3, #2
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00a      	beq.n	8003cf4 <HAL_UART_IRQHandler+0xd0>
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d005      	beq.n	8003cf4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cec:	f043 0204 	orr.w	r2, r3, #4
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	f003 0308 	and.w	r3, r3, #8
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00a      	beq.n	8003d14 <HAL_UART_IRQHandler+0xf0>
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d005      	beq.n	8003d14 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d0c:	f043 0208 	orr.w	r2, r3, #8
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d078      	beq.n	8003e0e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	f003 0320 	and.w	r3, r3, #32
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d007      	beq.n	8003d36 <HAL_UART_IRQHandler+0x112>
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	f003 0320 	and.w	r3, r3, #32
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d002      	beq.n	8003d36 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 f91d 	bl	8003f70 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d40:	2b40      	cmp	r3, #64	; 0x40
 8003d42:	bf0c      	ite	eq
 8003d44:	2301      	moveq	r3, #1
 8003d46:	2300      	movne	r3, #0
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d50:	f003 0308 	and.w	r3, r3, #8
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d102      	bne.n	8003d5e <HAL_UART_IRQHandler+0x13a>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d031      	beq.n	8003dc2 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f866 	bl	8003e30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d6e:	2b40      	cmp	r3, #64	; 0x40
 8003d70:	d123      	bne.n	8003dba <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	695a      	ldr	r2, [r3, #20]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d80:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d013      	beq.n	8003db2 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d8e:	4a22      	ldr	r2, [pc, #136]	; (8003e18 <HAL_UART_IRQHandler+0x1f4>)
 8003d90:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fd f887 	bl	8000eaa <HAL_DMA_Abort_IT>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d016      	beq.n	8003dd0 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003dac:	4610      	mov	r0, r2
 8003dae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db0:	e00e      	b.n	8003dd0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f832 	bl	8003e1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db8:	e00a      	b.n	8003dd0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f82e 	bl	8003e1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc0:	e006      	b.n	8003dd0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f82a 	bl	8003e1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003dce:	e01e      	b.n	8003e0e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd0:	bf00      	nop
    return;
 8003dd2:	e01c      	b.n	8003e0e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d008      	beq.n	8003df0 <HAL_UART_IRQHandler+0x1cc>
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d003      	beq.n	8003df0 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 f853 	bl	8003e94 <UART_Transmit_IT>
    return;
 8003dee:	e00f      	b.n	8003e10 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00a      	beq.n	8003e10 <HAL_UART_IRQHandler+0x1ec>
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d005      	beq.n	8003e10 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 f89b 	bl	8003f40 <UART_EndTransmit_IT>
    return;
 8003e0a:	bf00      	nop
 8003e0c:	e000      	b.n	8003e10 <HAL_UART_IRQHandler+0x1ec>
    return;
 8003e0e:	bf00      	nop
  }
}
 8003e10:	3720      	adds	r7, #32
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	08003e6d 	.word	0x08003e6d

08003e1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68da      	ldr	r2, [r3, #12]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e46:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	695a      	ldr	r2, [r3, #20]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 0201 	bic.w	r2, r2, #1
 8003e56:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	f7ff ffc8 	bl	8003e1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e8c:	bf00      	nop
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b21      	cmp	r3, #33	; 0x21
 8003ea6:	d144      	bne.n	8003f32 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eb0:	d11a      	bne.n	8003ee8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	881b      	ldrh	r3, [r3, #0]
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ec6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d105      	bne.n	8003edc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	1c9a      	adds	r2, r3, #2
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	621a      	str	r2, [r3, #32]
 8003eda:	e00e      	b.n	8003efa <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a1b      	ldr	r3, [r3, #32]
 8003ee0:	1c5a      	adds	r2, r3, #1
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	621a      	str	r2, [r3, #32]
 8003ee6:	e008      	b.n	8003efa <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	1c59      	adds	r1, r3, #1
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6211      	str	r1, [r2, #32]
 8003ef2:	781a      	ldrb	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	3b01      	subs	r3, #1
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	4619      	mov	r1, r3
 8003f08:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10f      	bne.n	8003f2e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68da      	ldr	r2, [r3, #12]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f1c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68da      	ldr	r2, [r3, #12]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f2c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	e000      	b.n	8003f34 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003f32:	2302      	movs	r3, #2
  }
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68da      	ldr	r2, [r3, #12]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f56:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f003 fa01 	bl	8007368 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3708      	adds	r7, #8
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b22      	cmp	r3, #34	; 0x22
 8003f82:	d171      	bne.n	8004068 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f8c:	d123      	bne.n	8003fd6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f92:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10e      	bne.n	8003fba <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb2:	1c9a      	adds	r2, r3, #2
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	629a      	str	r2, [r3, #40]	; 0x28
 8003fb8:	e029      	b.n	800400e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fce:	1c5a      	adds	r2, r3, #1
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	629a      	str	r2, [r3, #40]	; 0x28
 8003fd4:	e01b      	b.n	800400e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10a      	bne.n	8003ff4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	6858      	ldr	r0, [r3, #4]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe8:	1c59      	adds	r1, r3, #1
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6291      	str	r1, [r2, #40]	; 0x28
 8003fee:	b2c2      	uxtb	r2, r0
 8003ff0:	701a      	strb	r2, [r3, #0]
 8003ff2:	e00c      	b.n	800400e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004000:	1c58      	adds	r0, r3, #1
 8004002:	6879      	ldr	r1, [r7, #4]
 8004004:	6288      	str	r0, [r1, #40]	; 0x28
 8004006:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800400a:	b2d2      	uxtb	r2, r2
 800400c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004012:	b29b      	uxth	r3, r3
 8004014:	3b01      	subs	r3, #1
 8004016:	b29b      	uxth	r3, r3
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	4619      	mov	r1, r3
 800401c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800401e:	2b00      	cmp	r3, #0
 8004020:	d120      	bne.n	8004064 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68da      	ldr	r2, [r3, #12]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 0220 	bic.w	r2, r2, #32
 8004030:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68da      	ldr	r2, [r3, #12]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004040:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	695a      	ldr	r2, [r3, #20]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 0201 	bic.w	r2, r2, #1
 8004050:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2220      	movs	r2, #32
 8004056:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f003 f9de 	bl	800741c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004060:	2300      	movs	r3, #0
 8004062:	e002      	b.n	800406a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004064:	2300      	movs	r3, #0
 8004066:	e000      	b.n	800406a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004068:	2302      	movs	r3, #2
  }
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
	...

08004074 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004074:	b5b0      	push	{r4, r5, r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68da      	ldr	r2, [r3, #12]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	689a      	ldr	r2, [r3, #8]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	431a      	orrs	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80040b4:	f023 030c 	bic.w	r3, r3, #12
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	6812      	ldr	r2, [r2, #0]
 80040bc:	68f9      	ldr	r1, [r7, #12]
 80040be:	430b      	orrs	r3, r1
 80040c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	699a      	ldr	r2, [r3, #24]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	69db      	ldr	r3, [r3, #28]
 80040dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040e0:	f040 80e4 	bne.w	80042ac <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4aab      	ldr	r2, [pc, #684]	; (8004398 <UART_SetConfig+0x324>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d004      	beq.n	80040f8 <UART_SetConfig+0x84>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4aaa      	ldr	r2, [pc, #680]	; (800439c <UART_SetConfig+0x328>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d16c      	bne.n	80041d2 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80040f8:	f7fe fb98 	bl	800282c <HAL_RCC_GetPCLK2Freq>
 80040fc:	4602      	mov	r2, r0
 80040fe:	4613      	mov	r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	4413      	add	r3, r2
 8004104:	009a      	lsls	r2, r3, #2
 8004106:	441a      	add	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004112:	4aa3      	ldr	r2, [pc, #652]	; (80043a0 <UART_SetConfig+0x32c>)
 8004114:	fba2 2303 	umull	r2, r3, r2, r3
 8004118:	095b      	lsrs	r3, r3, #5
 800411a:	011c      	lsls	r4, r3, #4
 800411c:	f7fe fb86 	bl	800282c <HAL_RCC_GetPCLK2Freq>
 8004120:	4602      	mov	r2, r0
 8004122:	4613      	mov	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4413      	add	r3, r2
 8004128:	009a      	lsls	r2, r3, #2
 800412a:	441a      	add	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	fbb2 f5f3 	udiv	r5, r2, r3
 8004136:	f7fe fb79 	bl	800282c <HAL_RCC_GetPCLK2Freq>
 800413a:	4602      	mov	r2, r0
 800413c:	4613      	mov	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	4413      	add	r3, r2
 8004142:	009a      	lsls	r2, r3, #2
 8004144:	441a      	add	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004150:	4a93      	ldr	r2, [pc, #588]	; (80043a0 <UART_SetConfig+0x32c>)
 8004152:	fba2 2303 	umull	r2, r3, r2, r3
 8004156:	095b      	lsrs	r3, r3, #5
 8004158:	2264      	movs	r2, #100	; 0x64
 800415a:	fb02 f303 	mul.w	r3, r2, r3
 800415e:	1aeb      	subs	r3, r5, r3
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	3332      	adds	r3, #50	; 0x32
 8004164:	4a8e      	ldr	r2, [pc, #568]	; (80043a0 <UART_SetConfig+0x32c>)
 8004166:	fba2 2303 	umull	r2, r3, r2, r3
 800416a:	095b      	lsrs	r3, r3, #5
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004172:	441c      	add	r4, r3
 8004174:	f7fe fb5a 	bl	800282c <HAL_RCC_GetPCLK2Freq>
 8004178:	4602      	mov	r2, r0
 800417a:	4613      	mov	r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	4413      	add	r3, r2
 8004180:	009a      	lsls	r2, r3, #2
 8004182:	441a      	add	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	fbb2 f5f3 	udiv	r5, r2, r3
 800418e:	f7fe fb4d 	bl	800282c <HAL_RCC_GetPCLK2Freq>
 8004192:	4602      	mov	r2, r0
 8004194:	4613      	mov	r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	4413      	add	r3, r2
 800419a:	009a      	lsls	r2, r3, #2
 800419c:	441a      	add	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a8:	4a7d      	ldr	r2, [pc, #500]	; (80043a0 <UART_SetConfig+0x32c>)
 80041aa:	fba2 2303 	umull	r2, r3, r2, r3
 80041ae:	095b      	lsrs	r3, r3, #5
 80041b0:	2264      	movs	r2, #100	; 0x64
 80041b2:	fb02 f303 	mul.w	r3, r2, r3
 80041b6:	1aeb      	subs	r3, r5, r3
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	3332      	adds	r3, #50	; 0x32
 80041bc:	4a78      	ldr	r2, [pc, #480]	; (80043a0 <UART_SetConfig+0x32c>)
 80041be:	fba2 2303 	umull	r2, r3, r2, r3
 80041c2:	095b      	lsrs	r3, r3, #5
 80041c4:	f003 0207 	and.w	r2, r3, #7
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4422      	add	r2, r4
 80041ce:	609a      	str	r2, [r3, #8]
 80041d0:	e154      	b.n	800447c <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80041d2:	f7fe fb17 	bl	8002804 <HAL_RCC_GetPCLK1Freq>
 80041d6:	4602      	mov	r2, r0
 80041d8:	4613      	mov	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4413      	add	r3, r2
 80041de:	009a      	lsls	r2, r3, #2
 80041e0:	441a      	add	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	005b      	lsls	r3, r3, #1
 80041e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ec:	4a6c      	ldr	r2, [pc, #432]	; (80043a0 <UART_SetConfig+0x32c>)
 80041ee:	fba2 2303 	umull	r2, r3, r2, r3
 80041f2:	095b      	lsrs	r3, r3, #5
 80041f4:	011c      	lsls	r4, r3, #4
 80041f6:	f7fe fb05 	bl	8002804 <HAL_RCC_GetPCLK1Freq>
 80041fa:	4602      	mov	r2, r0
 80041fc:	4613      	mov	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	009a      	lsls	r2, r3, #2
 8004204:	441a      	add	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	005b      	lsls	r3, r3, #1
 800420c:	fbb2 f5f3 	udiv	r5, r2, r3
 8004210:	f7fe faf8 	bl	8002804 <HAL_RCC_GetPCLK1Freq>
 8004214:	4602      	mov	r2, r0
 8004216:	4613      	mov	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4413      	add	r3, r2
 800421c:	009a      	lsls	r2, r3, #2
 800421e:	441a      	add	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	fbb2 f3f3 	udiv	r3, r2, r3
 800422a:	4a5d      	ldr	r2, [pc, #372]	; (80043a0 <UART_SetConfig+0x32c>)
 800422c:	fba2 2303 	umull	r2, r3, r2, r3
 8004230:	095b      	lsrs	r3, r3, #5
 8004232:	2264      	movs	r2, #100	; 0x64
 8004234:	fb02 f303 	mul.w	r3, r2, r3
 8004238:	1aeb      	subs	r3, r5, r3
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	3332      	adds	r3, #50	; 0x32
 800423e:	4a58      	ldr	r2, [pc, #352]	; (80043a0 <UART_SetConfig+0x32c>)
 8004240:	fba2 2303 	umull	r2, r3, r2, r3
 8004244:	095b      	lsrs	r3, r3, #5
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800424c:	441c      	add	r4, r3
 800424e:	f7fe fad9 	bl	8002804 <HAL_RCC_GetPCLK1Freq>
 8004252:	4602      	mov	r2, r0
 8004254:	4613      	mov	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4413      	add	r3, r2
 800425a:	009a      	lsls	r2, r3, #2
 800425c:	441a      	add	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	fbb2 f5f3 	udiv	r5, r2, r3
 8004268:	f7fe facc 	bl	8002804 <HAL_RCC_GetPCLK1Freq>
 800426c:	4602      	mov	r2, r0
 800426e:	4613      	mov	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4413      	add	r3, r2
 8004274:	009a      	lsls	r2, r3, #2
 8004276:	441a      	add	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	005b      	lsls	r3, r3, #1
 800427e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004282:	4a47      	ldr	r2, [pc, #284]	; (80043a0 <UART_SetConfig+0x32c>)
 8004284:	fba2 2303 	umull	r2, r3, r2, r3
 8004288:	095b      	lsrs	r3, r3, #5
 800428a:	2264      	movs	r2, #100	; 0x64
 800428c:	fb02 f303 	mul.w	r3, r2, r3
 8004290:	1aeb      	subs	r3, r5, r3
 8004292:	00db      	lsls	r3, r3, #3
 8004294:	3332      	adds	r3, #50	; 0x32
 8004296:	4a42      	ldr	r2, [pc, #264]	; (80043a0 <UART_SetConfig+0x32c>)
 8004298:	fba2 2303 	umull	r2, r3, r2, r3
 800429c:	095b      	lsrs	r3, r3, #5
 800429e:	f003 0207 	and.w	r2, r3, #7
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4422      	add	r2, r4
 80042a8:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80042aa:	e0e7      	b.n	800447c <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a39      	ldr	r2, [pc, #228]	; (8004398 <UART_SetConfig+0x324>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d004      	beq.n	80042c0 <UART_SetConfig+0x24c>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a38      	ldr	r2, [pc, #224]	; (800439c <UART_SetConfig+0x328>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d171      	bne.n	80043a4 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80042c0:	f7fe fab4 	bl	800282c <HAL_RCC_GetPCLK2Freq>
 80042c4:	4602      	mov	r2, r0
 80042c6:	4613      	mov	r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	4413      	add	r3, r2
 80042cc:	009a      	lsls	r2, r3, #2
 80042ce:	441a      	add	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042da:	4a31      	ldr	r2, [pc, #196]	; (80043a0 <UART_SetConfig+0x32c>)
 80042dc:	fba2 2303 	umull	r2, r3, r2, r3
 80042e0:	095b      	lsrs	r3, r3, #5
 80042e2:	011c      	lsls	r4, r3, #4
 80042e4:	f7fe faa2 	bl	800282c <HAL_RCC_GetPCLK2Freq>
 80042e8:	4602      	mov	r2, r0
 80042ea:	4613      	mov	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4413      	add	r3, r2
 80042f0:	009a      	lsls	r2, r3, #2
 80042f2:	441a      	add	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	fbb2 f5f3 	udiv	r5, r2, r3
 80042fe:	f7fe fa95 	bl	800282c <HAL_RCC_GetPCLK2Freq>
 8004302:	4602      	mov	r2, r0
 8004304:	4613      	mov	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4413      	add	r3, r2
 800430a:	009a      	lsls	r2, r3, #2
 800430c:	441a      	add	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	fbb2 f3f3 	udiv	r3, r2, r3
 8004318:	4a21      	ldr	r2, [pc, #132]	; (80043a0 <UART_SetConfig+0x32c>)
 800431a:	fba2 2303 	umull	r2, r3, r2, r3
 800431e:	095b      	lsrs	r3, r3, #5
 8004320:	2264      	movs	r2, #100	; 0x64
 8004322:	fb02 f303 	mul.w	r3, r2, r3
 8004326:	1aeb      	subs	r3, r5, r3
 8004328:	011b      	lsls	r3, r3, #4
 800432a:	3332      	adds	r3, #50	; 0x32
 800432c:	4a1c      	ldr	r2, [pc, #112]	; (80043a0 <UART_SetConfig+0x32c>)
 800432e:	fba2 2303 	umull	r2, r3, r2, r3
 8004332:	095b      	lsrs	r3, r3, #5
 8004334:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004338:	441c      	add	r4, r3
 800433a:	f7fe fa77 	bl	800282c <HAL_RCC_GetPCLK2Freq>
 800433e:	4602      	mov	r2, r0
 8004340:	4613      	mov	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	4413      	add	r3, r2
 8004346:	009a      	lsls	r2, r3, #2
 8004348:	441a      	add	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	fbb2 f5f3 	udiv	r5, r2, r3
 8004354:	f7fe fa6a 	bl	800282c <HAL_RCC_GetPCLK2Freq>
 8004358:	4602      	mov	r2, r0
 800435a:	4613      	mov	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	4413      	add	r3, r2
 8004360:	009a      	lsls	r2, r3, #2
 8004362:	441a      	add	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	fbb2 f3f3 	udiv	r3, r2, r3
 800436e:	4a0c      	ldr	r2, [pc, #48]	; (80043a0 <UART_SetConfig+0x32c>)
 8004370:	fba2 2303 	umull	r2, r3, r2, r3
 8004374:	095b      	lsrs	r3, r3, #5
 8004376:	2264      	movs	r2, #100	; 0x64
 8004378:	fb02 f303 	mul.w	r3, r2, r3
 800437c:	1aeb      	subs	r3, r5, r3
 800437e:	011b      	lsls	r3, r3, #4
 8004380:	3332      	adds	r3, #50	; 0x32
 8004382:	4a07      	ldr	r2, [pc, #28]	; (80043a0 <UART_SetConfig+0x32c>)
 8004384:	fba2 2303 	umull	r2, r3, r2, r3
 8004388:	095b      	lsrs	r3, r3, #5
 800438a:	f003 020f 	and.w	r2, r3, #15
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4422      	add	r2, r4
 8004394:	609a      	str	r2, [r3, #8]
 8004396:	e071      	b.n	800447c <UART_SetConfig+0x408>
 8004398:	40011000 	.word	0x40011000
 800439c:	40011400 	.word	0x40011400
 80043a0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80043a4:	f7fe fa2e 	bl	8002804 <HAL_RCC_GetPCLK1Freq>
 80043a8:	4602      	mov	r2, r0
 80043aa:	4613      	mov	r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4413      	add	r3, r2
 80043b0:	009a      	lsls	r2, r3, #2
 80043b2:	441a      	add	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80043be:	4a31      	ldr	r2, [pc, #196]	; (8004484 <UART_SetConfig+0x410>)
 80043c0:	fba2 2303 	umull	r2, r3, r2, r3
 80043c4:	095b      	lsrs	r3, r3, #5
 80043c6:	011c      	lsls	r4, r3, #4
 80043c8:	f7fe fa1c 	bl	8002804 <HAL_RCC_GetPCLK1Freq>
 80043cc:	4602      	mov	r2, r0
 80043ce:	4613      	mov	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	009a      	lsls	r2, r3, #2
 80043d6:	441a      	add	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	fbb2 f5f3 	udiv	r5, r2, r3
 80043e2:	f7fe fa0f 	bl	8002804 <HAL_RCC_GetPCLK1Freq>
 80043e6:	4602      	mov	r2, r0
 80043e8:	4613      	mov	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	4413      	add	r3, r2
 80043ee:	009a      	lsls	r2, r3, #2
 80043f0:	441a      	add	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fc:	4a21      	ldr	r2, [pc, #132]	; (8004484 <UART_SetConfig+0x410>)
 80043fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004402:	095b      	lsrs	r3, r3, #5
 8004404:	2264      	movs	r2, #100	; 0x64
 8004406:	fb02 f303 	mul.w	r3, r2, r3
 800440a:	1aeb      	subs	r3, r5, r3
 800440c:	011b      	lsls	r3, r3, #4
 800440e:	3332      	adds	r3, #50	; 0x32
 8004410:	4a1c      	ldr	r2, [pc, #112]	; (8004484 <UART_SetConfig+0x410>)
 8004412:	fba2 2303 	umull	r2, r3, r2, r3
 8004416:	095b      	lsrs	r3, r3, #5
 8004418:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800441c:	441c      	add	r4, r3
 800441e:	f7fe f9f1 	bl	8002804 <HAL_RCC_GetPCLK1Freq>
 8004422:	4602      	mov	r2, r0
 8004424:	4613      	mov	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	4413      	add	r3, r2
 800442a:	009a      	lsls	r2, r3, #2
 800442c:	441a      	add	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	fbb2 f5f3 	udiv	r5, r2, r3
 8004438:	f7fe f9e4 	bl	8002804 <HAL_RCC_GetPCLK1Freq>
 800443c:	4602      	mov	r2, r0
 800443e:	4613      	mov	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4413      	add	r3, r2
 8004444:	009a      	lsls	r2, r3, #2
 8004446:	441a      	add	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004452:	4a0c      	ldr	r2, [pc, #48]	; (8004484 <UART_SetConfig+0x410>)
 8004454:	fba2 2303 	umull	r2, r3, r2, r3
 8004458:	095b      	lsrs	r3, r3, #5
 800445a:	2264      	movs	r2, #100	; 0x64
 800445c:	fb02 f303 	mul.w	r3, r2, r3
 8004460:	1aeb      	subs	r3, r5, r3
 8004462:	011b      	lsls	r3, r3, #4
 8004464:	3332      	adds	r3, #50	; 0x32
 8004466:	4a07      	ldr	r2, [pc, #28]	; (8004484 <UART_SetConfig+0x410>)
 8004468:	fba2 2303 	umull	r2, r3, r2, r3
 800446c:	095b      	lsrs	r3, r3, #5
 800446e:	f003 020f 	and.w	r2, r3, #15
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4422      	add	r2, r4
 8004478:	609a      	str	r2, [r3, #8]
}
 800447a:	e7ff      	b.n	800447c <UART_SetConfig+0x408>
 800447c:	bf00      	nop
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bdb0      	pop	{r4, r5, r7, pc}
 8004484:	51eb851f 	.word	0x51eb851f

08004488 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004488:	b084      	sub	sp, #16
 800448a:	b580      	push	{r7, lr}
 800448c:	b084      	sub	sp, #16
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
 8004492:	f107 001c 	add.w	r0, r7, #28
 8004496:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800449a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449c:	2b01      	cmp	r3, #1
 800449e:	d122      	bne.n	80044e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80044b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80044c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d105      	bne.n	80044da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f001 fa76 	bl	80059cc <USB_CoreReset>
 80044e0:	4603      	mov	r3, r0
 80044e2:	73fb      	strb	r3, [r7, #15]
 80044e4:	e01a      	b.n	800451c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f001 fa6a 	bl	80059cc <USB_CoreReset>
 80044f8:	4603      	mov	r3, r0
 80044fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80044fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d106      	bne.n	8004510 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004506:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	639a      	str	r2, [r3, #56]	; 0x38
 800450e:	e005      	b.n	800451c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004514:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800451c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451e:	2b01      	cmp	r3, #1
 8004520:	d10b      	bne.n	800453a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f043 0206 	orr.w	r2, r3, #6
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f043 0220 	orr.w	r2, r3, #32
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800453a:	7bfb      	ldrb	r3, [r7, #15]
}
 800453c:	4618      	mov	r0, r3
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004546:	b004      	add	sp, #16
 8004548:	4770      	bx	lr
	...

0800454c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800454c:	b480      	push	{r7}
 800454e:	b087      	sub	sp, #28
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	4613      	mov	r3, r2
 8004558:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800455a:	79fb      	ldrb	r3, [r7, #7]
 800455c:	2b02      	cmp	r3, #2
 800455e:	d165      	bne.n	800462c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	4a41      	ldr	r2, [pc, #260]	; (8004668 <USB_SetTurnaroundTime+0x11c>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d906      	bls.n	8004576 <USB_SetTurnaroundTime+0x2a>
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	4a40      	ldr	r2, [pc, #256]	; (800466c <USB_SetTurnaroundTime+0x120>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d802      	bhi.n	8004576 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004570:	230f      	movs	r3, #15
 8004572:	617b      	str	r3, [r7, #20]
 8004574:	e062      	b.n	800463c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	4a3c      	ldr	r2, [pc, #240]	; (800466c <USB_SetTurnaroundTime+0x120>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d906      	bls.n	800458c <USB_SetTurnaroundTime+0x40>
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	4a3b      	ldr	r2, [pc, #236]	; (8004670 <USB_SetTurnaroundTime+0x124>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d802      	bhi.n	800458c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004586:	230e      	movs	r3, #14
 8004588:	617b      	str	r3, [r7, #20]
 800458a:	e057      	b.n	800463c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	4a38      	ldr	r2, [pc, #224]	; (8004670 <USB_SetTurnaroundTime+0x124>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d906      	bls.n	80045a2 <USB_SetTurnaroundTime+0x56>
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	4a37      	ldr	r2, [pc, #220]	; (8004674 <USB_SetTurnaroundTime+0x128>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d802      	bhi.n	80045a2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800459c:	230d      	movs	r3, #13
 800459e:	617b      	str	r3, [r7, #20]
 80045a0:	e04c      	b.n	800463c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	4a33      	ldr	r2, [pc, #204]	; (8004674 <USB_SetTurnaroundTime+0x128>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d906      	bls.n	80045b8 <USB_SetTurnaroundTime+0x6c>
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	4a32      	ldr	r2, [pc, #200]	; (8004678 <USB_SetTurnaroundTime+0x12c>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d802      	bhi.n	80045b8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80045b2:	230c      	movs	r3, #12
 80045b4:	617b      	str	r3, [r7, #20]
 80045b6:	e041      	b.n	800463c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	4a2f      	ldr	r2, [pc, #188]	; (8004678 <USB_SetTurnaroundTime+0x12c>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d906      	bls.n	80045ce <USB_SetTurnaroundTime+0x82>
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	4a2e      	ldr	r2, [pc, #184]	; (800467c <USB_SetTurnaroundTime+0x130>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d802      	bhi.n	80045ce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80045c8:	230b      	movs	r3, #11
 80045ca:	617b      	str	r3, [r7, #20]
 80045cc:	e036      	b.n	800463c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	4a2a      	ldr	r2, [pc, #168]	; (800467c <USB_SetTurnaroundTime+0x130>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d906      	bls.n	80045e4 <USB_SetTurnaroundTime+0x98>
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	4a29      	ldr	r2, [pc, #164]	; (8004680 <USB_SetTurnaroundTime+0x134>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d802      	bhi.n	80045e4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80045de:	230a      	movs	r3, #10
 80045e0:	617b      	str	r3, [r7, #20]
 80045e2:	e02b      	b.n	800463c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	4a26      	ldr	r2, [pc, #152]	; (8004680 <USB_SetTurnaroundTime+0x134>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d906      	bls.n	80045fa <USB_SetTurnaroundTime+0xae>
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	4a25      	ldr	r2, [pc, #148]	; (8004684 <USB_SetTurnaroundTime+0x138>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d802      	bhi.n	80045fa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80045f4:	2309      	movs	r3, #9
 80045f6:	617b      	str	r3, [r7, #20]
 80045f8:	e020      	b.n	800463c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	4a21      	ldr	r2, [pc, #132]	; (8004684 <USB_SetTurnaroundTime+0x138>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d906      	bls.n	8004610 <USB_SetTurnaroundTime+0xc4>
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	4a20      	ldr	r2, [pc, #128]	; (8004688 <USB_SetTurnaroundTime+0x13c>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d802      	bhi.n	8004610 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800460a:	2308      	movs	r3, #8
 800460c:	617b      	str	r3, [r7, #20]
 800460e:	e015      	b.n	800463c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	4a1d      	ldr	r2, [pc, #116]	; (8004688 <USB_SetTurnaroundTime+0x13c>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d906      	bls.n	8004626 <USB_SetTurnaroundTime+0xda>
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	4a1c      	ldr	r2, [pc, #112]	; (800468c <USB_SetTurnaroundTime+0x140>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d802      	bhi.n	8004626 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004620:	2307      	movs	r3, #7
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	e00a      	b.n	800463c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004626:	2306      	movs	r3, #6
 8004628:	617b      	str	r3, [r7, #20]
 800462a:	e007      	b.n	800463c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800462c:	79fb      	ldrb	r3, [r7, #7]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d102      	bne.n	8004638 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004632:	2309      	movs	r3, #9
 8004634:	617b      	str	r3, [r7, #20]
 8004636:	e001      	b.n	800463c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004638:	2309      	movs	r3, #9
 800463a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	68da      	ldr	r2, [r3, #12]
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	029b      	lsls	r3, r3, #10
 8004650:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004654:	431a      	orrs	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	371c      	adds	r7, #28
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr
 8004668:	00d8acbf 	.word	0x00d8acbf
 800466c:	00e4e1bf 	.word	0x00e4e1bf
 8004670:	00f423ff 	.word	0x00f423ff
 8004674:	0106737f 	.word	0x0106737f
 8004678:	011a499f 	.word	0x011a499f
 800467c:	01312cff 	.word	0x01312cff
 8004680:	014ca43f 	.word	0x014ca43f
 8004684:	016e35ff 	.word	0x016e35ff
 8004688:	01a6ab1f 	.word	0x01a6ab1f
 800468c:	01e847ff 	.word	0x01e847ff

08004690 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f043 0201 	orr.w	r2, r3, #1
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b083      	sub	sp, #12
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f023 0201 	bic.w	r2, r3, #1
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	460b      	mov	r3, r1
 80046de:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80046ec:	78fb      	ldrb	r3, [r7, #3]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d106      	bne.n	8004700 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	60da      	str	r2, [r3, #12]
 80046fe:	e00b      	b.n	8004718 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004700:	78fb      	ldrb	r3, [r7, #3]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d106      	bne.n	8004714 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	60da      	str	r2, [r3, #12]
 8004712:	e001      	b.n	8004718 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e003      	b.n	8004720 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004718:	2032      	movs	r0, #50	; 0x32
 800471a:	f7fb ff65 	bl	80005e8 <HAL_Delay>

  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	3708      	adds	r7, #8
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004728:	b084      	sub	sp, #16
 800472a:	b580      	push	{r7, lr}
 800472c:	b086      	sub	sp, #24
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
 8004732:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004736:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800473a:	2300      	movs	r3, #0
 800473c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004742:	2300      	movs	r3, #0
 8004744:	613b      	str	r3, [r7, #16]
 8004746:	e009      	b.n	800475c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	3340      	adds	r3, #64	; 0x40
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	4413      	add	r3, r2
 8004752:	2200      	movs	r2, #0
 8004754:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	3301      	adds	r3, #1
 800475a:	613b      	str	r3, [r7, #16]
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	2b0e      	cmp	r3, #14
 8004760:	d9f2      	bls.n	8004748 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004764:	2b00      	cmp	r3, #0
 8004766:	d112      	bne.n	800478e <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	601a      	str	r2, [r3, #0]
 800478c:	e005      	b.n	800479a <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004792:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80047a0:	461a      	mov	r2, r3
 80047a2:	2300      	movs	r3, #0
 80047a4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ac:	4619      	mov	r1, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b4:	461a      	mov	r2, r3
 80047b6:	680b      	ldr	r3, [r1, #0]
 80047b8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d10c      	bne.n	80047da <USB_DevInit+0xb2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80047c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d104      	bne.n	80047d0 <USB_DevInit+0xa8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80047c6:	2100      	movs	r1, #0
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 f961 	bl	8004a90 <USB_SetDevSpeed>
 80047ce:	e008      	b.n	80047e2 <USB_DevInit+0xba>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80047d0:	2101      	movs	r1, #1
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f95c 	bl	8004a90 <USB_SetDevSpeed>
 80047d8:	e003      	b.n	80047e2 <USB_DevInit+0xba>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80047da:	2103      	movs	r1, #3
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 f957 	bl	8004a90 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80047e2:	2110      	movs	r1, #16
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 f90b 	bl	8004a00 <USB_FlushTxFifo>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <USB_DevInit+0xcc>
  {
    ret = HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 f929 	bl	8004a4c <USB_FlushRxFifo>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d001      	beq.n	8004804 <USB_DevInit+0xdc>
  {
    ret = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800480a:	461a      	mov	r2, r3
 800480c:	2300      	movs	r3, #0
 800480e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004816:	461a      	mov	r2, r3
 8004818:	2300      	movs	r3, #0
 800481a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004822:	461a      	mov	r2, r3
 8004824:	2300      	movs	r3, #0
 8004826:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004828:	2300      	movs	r3, #0
 800482a:	613b      	str	r3, [r7, #16]
 800482c:	e043      	b.n	80048b6 <USB_DevInit+0x18e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	015a      	lsls	r2, r3, #5
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	4413      	add	r3, r2
 8004836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004840:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004844:	d118      	bne.n	8004878 <USB_DevInit+0x150>
    {
      if (i == 0U)
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d10a      	bne.n	8004862 <USB_DevInit+0x13a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	015a      	lsls	r2, r3, #5
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4413      	add	r3, r2
 8004854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004858:	461a      	mov	r2, r3
 800485a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800485e:	6013      	str	r3, [r2, #0]
 8004860:	e013      	b.n	800488a <USB_DevInit+0x162>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	015a      	lsls	r2, r3, #5
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	4413      	add	r3, r2
 800486a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800486e:	461a      	mov	r2, r3
 8004870:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004874:	6013      	str	r3, [r2, #0]
 8004876:	e008      	b.n	800488a <USB_DevInit+0x162>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	015a      	lsls	r2, r3, #5
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4413      	add	r3, r2
 8004880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004884:	461a      	mov	r2, r3
 8004886:	2300      	movs	r3, #0
 8004888:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	015a      	lsls	r2, r3, #5
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	4413      	add	r3, r2
 8004892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004896:	461a      	mov	r2, r3
 8004898:	2300      	movs	r3, #0
 800489a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	015a      	lsls	r2, r3, #5
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4413      	add	r3, r2
 80048a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a8:	461a      	mov	r2, r3
 80048aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	3301      	adds	r3, #1
 80048b4:	613b      	str	r3, [r7, #16]
 80048b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d3b7      	bcc.n	800482e <USB_DevInit+0x106>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048be:	2300      	movs	r3, #0
 80048c0:	613b      	str	r3, [r7, #16]
 80048c2:	e043      	b.n	800494c <USB_DevInit+0x224>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048da:	d118      	bne.n	800490e <USB_DevInit+0x1e6>
    {
      if (i == 0U)
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10a      	bne.n	80048f8 <USB_DevInit+0x1d0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	015a      	lsls	r2, r3, #5
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	4413      	add	r3, r2
 80048ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ee:	461a      	mov	r2, r3
 80048f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80048f4:	6013      	str	r3, [r2, #0]
 80048f6:	e013      	b.n	8004920 <USB_DevInit+0x1f8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	015a      	lsls	r2, r3, #5
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004904:	461a      	mov	r2, r3
 8004906:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800490a:	6013      	str	r3, [r2, #0]
 800490c:	e008      	b.n	8004920 <USB_DevInit+0x1f8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	015a      	lsls	r2, r3, #5
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	4413      	add	r3, r2
 8004916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800491a:	461a      	mov	r2, r3
 800491c:	2300      	movs	r3, #0
 800491e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4413      	add	r3, r2
 8004928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800492c:	461a      	mov	r2, r3
 800492e:	2300      	movs	r3, #0
 8004930:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	015a      	lsls	r2, r3, #5
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	4413      	add	r3, r2
 800493a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800493e:	461a      	mov	r2, r3
 8004940:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004944:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	3301      	adds	r3, #1
 800494a:	613b      	str	r3, [r7, #16]
 800494c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	429a      	cmp	r2, r3
 8004952:	d3b7      	bcc.n	80048c4 <USB_DevInit+0x19c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004962:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004966:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8004968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496a:	2b01      	cmp	r3, #1
 800496c:	d111      	bne.n	8004992 <USB_DevInit+0x26a>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004974:	461a      	mov	r2, r3
 8004976:	4b20      	ldr	r3, [pc, #128]	; (80049f8 <USB_DevInit+0x2d0>)
 8004978:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800498c:	f043 0303 	orr.w	r3, r3, #3
 8004990:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800499e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80049a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d105      	bne.n	80049b2 <USB_DevInit+0x28a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	f043 0210 	orr.w	r2, r3, #16
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	699a      	ldr	r2, [r3, #24]
 80049b6:	4b11      	ldr	r3, [pc, #68]	; (80049fc <USB_DevInit+0x2d4>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80049be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d005      	beq.n	80049d0 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	f043 0208 	orr.w	r2, r3, #8
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80049d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d107      	bne.n	80049e6 <USB_DevInit+0x2be>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049de:	f043 0304 	orr.w	r3, r3, #4
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80049e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3718      	adds	r7, #24
 80049ec:	46bd      	mov	sp, r7
 80049ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049f2:	b004      	add	sp, #16
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	00800100 	.word	0x00800100
 80049fc:	803c3800 	.word	0x803c3800

08004a00 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	019b      	lsls	r3, r3, #6
 8004a12:	f043 0220 	orr.w	r2, r3, #32
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	60fb      	str	r3, [r7, #12]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4a09      	ldr	r2, [pc, #36]	; (8004a48 <USB_FlushTxFifo+0x48>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d901      	bls.n	8004a2c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e006      	b.n	8004a3a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	f003 0320 	and.w	r3, r3, #32
 8004a34:	2b20      	cmp	r3, #32
 8004a36:	d0f0      	beq.n	8004a1a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	00030d40 	.word	0x00030d40

08004a4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004a54:	2300      	movs	r3, #0
 8004a56:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2210      	movs	r2, #16
 8004a5c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	3301      	adds	r3, #1
 8004a62:	60fb      	str	r3, [r7, #12]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	4a09      	ldr	r2, [pc, #36]	; (8004a8c <USB_FlushRxFifo+0x40>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d901      	bls.n	8004a70 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e006      	b.n	8004a7e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	f003 0310 	and.w	r3, r3, #16
 8004a78:	2b10      	cmp	r3, #16
 8004a7a:	d0f0      	beq.n	8004a5e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3714      	adds	r7, #20
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	00030d40 	.word	0x00030d40

08004a90 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	460b      	mov	r3, r1
 8004a9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	78fb      	ldrb	r3, [r7, #3]
 8004aaa:	68f9      	ldr	r1, [r7, #12]
 8004aac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3714      	adds	r7, #20
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr

08004ac2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b087      	sub	sp, #28
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f003 0306 	and.w	r3, r3, #6
 8004ada:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d102      	bne.n	8004ae8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	75fb      	strb	r3, [r7, #23]
 8004ae6:	e00a      	b.n	8004afe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d002      	beq.n	8004af4 <USB_GetDevSpeed+0x32>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2b06      	cmp	r3, #6
 8004af2:	d102      	bne.n	8004afa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004af4:	2302      	movs	r3, #2
 8004af6:	75fb      	strb	r3, [r7, #23]
 8004af8:	e001      	b.n	8004afe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004afa:	230f      	movs	r3, #15
 8004afc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004afe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	371c      	adds	r7, #28
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	785b      	ldrb	r3, [r3, #1]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d13a      	bne.n	8004b9e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b2e:	69da      	ldr	r2, [r3, #28]
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	f003 030f 	and.w	r3, r3, #15
 8004b38:	2101      	movs	r1, #1
 8004b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	68f9      	ldr	r1, [r7, #12]
 8004b42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b46:	4313      	orrs	r3, r2
 8004b48:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	015a      	lsls	r2, r3, #5
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	4413      	add	r3, r2
 8004b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d155      	bne.n	8004c0c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	015a      	lsls	r2, r3, #5
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	78db      	ldrb	r3, [r3, #3]
 8004b7a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b7c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	059b      	lsls	r3, r3, #22
 8004b82:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b84:	4313      	orrs	r3, r2
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	0151      	lsls	r1, r2, #5
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	440a      	add	r2, r1
 8004b8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b9a:	6013      	str	r3, [r2, #0]
 8004b9c:	e036      	b.n	8004c0c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ba4:	69da      	ldr	r2, [r3, #28]
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	f003 030f 	and.w	r3, r3, #15
 8004bae:	2101      	movs	r1, #1
 8004bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb4:	041b      	lsls	r3, r3, #16
 8004bb6:	68f9      	ldr	r1, [r7, #12]
 8004bb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	015a      	lsls	r2, r3, #5
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d11a      	bne.n	8004c0c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	015a      	lsls	r2, r3, #5
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	78db      	ldrb	r3, [r3, #3]
 8004bf0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004bf2:	430b      	orrs	r3, r1
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	0151      	lsls	r1, r2, #5
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	440a      	add	r2, r1
 8004bfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c0a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
	...

08004c1c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	785b      	ldrb	r3, [r3, #1]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d135      	bne.n	8004ca4 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	f003 030f 	and.w	r3, r3, #15
 8004c48:	2101      	movs	r1, #1
 8004c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	43db      	mvns	r3, r3
 8004c52:	68f9      	ldr	r1, [r7, #12]
 8004c54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c58:	4013      	ands	r3, r2
 8004c5a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c62:	69da      	ldr	r2, [r3, #28]
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	f003 030f 	and.w	r3, r3, #15
 8004c6c:	2101      	movs	r1, #1
 8004c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	43db      	mvns	r3, r3
 8004c76:	68f9      	ldr	r1, [r7, #12]
 8004c78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	015a      	lsls	r2, r3, #5
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4413      	add	r3, r2
 8004c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	0159      	lsls	r1, r3, #5
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	440b      	add	r3, r1
 8004c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	4b1f      	ldr	r3, [pc, #124]	; (8004d1c <USB_DeactivateEndpoint+0x100>)
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	600b      	str	r3, [r1, #0]
 8004ca2:	e034      	b.n	8004d0e <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004caa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	f003 030f 	and.w	r3, r3, #15
 8004cb4:	2101      	movs	r1, #1
 8004cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cba:	041b      	lsls	r3, r3, #16
 8004cbc:	43db      	mvns	r3, r3
 8004cbe:	68f9      	ldr	r1, [r7, #12]
 8004cc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cce:	69da      	ldr	r2, [r3, #28]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	f003 030f 	and.w	r3, r3, #15
 8004cd8:	2101      	movs	r1, #1
 8004cda:	fa01 f303 	lsl.w	r3, r1, r3
 8004cde:	041b      	lsls	r3, r3, #16
 8004ce0:	43db      	mvns	r3, r3
 8004ce2:	68f9      	ldr	r1, [r7, #12]
 8004ce4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ce8:	4013      	ands	r3, r2
 8004cea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	015a      	lsls	r2, r3, #5
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	0159      	lsls	r1, r3, #5
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	440b      	add	r3, r1
 8004d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d06:	4619      	mov	r1, r3
 8004d08:	4b05      	ldr	r3, [pc, #20]	; (8004d20 <USB_DeactivateEndpoint+0x104>)
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3714      	adds	r7, #20
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	ec337800 	.word	0xec337800
 8004d20:	eff37800 	.word	0xeff37800

08004d24 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b08a      	sub	sp, #40	; 0x28
 8004d28:	af02      	add	r7, sp, #8
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	785b      	ldrb	r3, [r3, #1]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	f040 815c 	bne.w	8004ffe <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d132      	bne.n	8004db4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	015a      	lsls	r2, r3, #5
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	4413      	add	r3, r2
 8004d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	69ba      	ldr	r2, [r7, #24]
 8004d5e:	0151      	lsls	r1, r2, #5
 8004d60:	69fa      	ldr	r2, [r7, #28]
 8004d62:	440a      	add	r2, r1
 8004d64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d68:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d6c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	0151      	lsls	r1, r2, #5
 8004d84:	69fa      	ldr	r2, [r7, #28]
 8004d86:	440a      	add	r2, r1
 8004d88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	015a      	lsls	r2, r3, #5
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	4413      	add	r3, r2
 8004d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	0151      	lsls	r1, r2, #5
 8004da4:	69fa      	ldr	r2, [r7, #28]
 8004da6:	440a      	add	r2, r1
 8004da8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dac:	0cdb      	lsrs	r3, r3, #19
 8004dae:	04db      	lsls	r3, r3, #19
 8004db0:	6113      	str	r3, [r2, #16]
 8004db2:	e074      	b.n	8004e9e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	69ba      	ldr	r2, [r7, #24]
 8004dc4:	0151      	lsls	r1, r2, #5
 8004dc6:	69fa      	ldr	r2, [r7, #28]
 8004dc8:	440a      	add	r2, r1
 8004dca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dce:	0cdb      	lsrs	r3, r3, #19
 8004dd0:	04db      	lsls	r3, r3, #19
 8004dd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	015a      	lsls	r2, r3, #5
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	4413      	add	r3, r2
 8004ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	69ba      	ldr	r2, [r7, #24]
 8004de4:	0151      	lsls	r1, r2, #5
 8004de6:	69fa      	ldr	r2, [r7, #28]
 8004de8:	440a      	add	r2, r1
 8004dea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004df2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004df6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e04:	691a      	ldr	r2, [r3, #16]
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	6959      	ldr	r1, [r3, #20]
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	440b      	add	r3, r1
 8004e10:	1e59      	subs	r1, r3, #1
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e1a:	04d9      	lsls	r1, r3, #19
 8004e1c:	4b9d      	ldr	r3, [pc, #628]	; (8005094 <USB_EPStartXfer+0x370>)
 8004e1e:	400b      	ands	r3, r1
 8004e20:	69b9      	ldr	r1, [r7, #24]
 8004e22:	0148      	lsls	r0, r1, #5
 8004e24:	69f9      	ldr	r1, [r7, #28]
 8004e26:	4401      	add	r1, r0
 8004e28:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	015a      	lsls	r2, r3, #5
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e3c:	691a      	ldr	r2, [r3, #16]
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e46:	69b9      	ldr	r1, [r7, #24]
 8004e48:	0148      	lsls	r0, r1, #5
 8004e4a:	69f9      	ldr	r1, [r7, #28]
 8004e4c:	4401      	add	r1, r0
 8004e4e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e52:	4313      	orrs	r3, r2
 8004e54:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	78db      	ldrb	r3, [r3, #3]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d11f      	bne.n	8004e9e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	0151      	lsls	r1, r2, #5
 8004e70:	69fa      	ldr	r2, [r7, #28]
 8004e72:	440a      	add	r2, r1
 8004e74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e78:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004e7c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	015a      	lsls	r2, r3, #5
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	4413      	add	r3, r2
 8004e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	0151      	lsls	r1, r2, #5
 8004e90:	69fa      	ldr	r2, [r7, #28]
 8004e92:	440a      	add	r2, r1
 8004e94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e9c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004e9e:	79fb      	ldrb	r3, [r7, #7]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d14b      	bne.n	8004f3c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d009      	beq.n	8004ec0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	015a      	lsls	r2, r3, #5
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb8:	461a      	mov	r2, r3
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	78db      	ldrb	r3, [r3, #3]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d128      	bne.n	8004f1a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d110      	bne.n	8004efa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	015a      	lsls	r2, r3, #5
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	0151      	lsls	r1, r2, #5
 8004eea:	69fa      	ldr	r2, [r7, #28]
 8004eec:	440a      	add	r2, r1
 8004eee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ef2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ef6:	6013      	str	r3, [r2, #0]
 8004ef8:	e00f      	b.n	8004f1a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	015a      	lsls	r2, r3, #5
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	4413      	add	r3, r2
 8004f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	69ba      	ldr	r2, [r7, #24]
 8004f0a:	0151      	lsls	r1, r2, #5
 8004f0c:	69fa      	ldr	r2, [r7, #28]
 8004f0e:	440a      	add	r2, r1
 8004f10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f18:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	015a      	lsls	r2, r3, #5
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	4413      	add	r3, r2
 8004f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	69ba      	ldr	r2, [r7, #24]
 8004f2a:	0151      	lsls	r1, r2, #5
 8004f2c:	69fa      	ldr	r2, [r7, #28]
 8004f2e:	440a      	add	r2, r1
 8004f30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f34:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f38:	6013      	str	r3, [r2, #0]
 8004f3a:	e12f      	b.n	800519c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	015a      	lsls	r2, r3, #5
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	4413      	add	r3, r2
 8004f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	69ba      	ldr	r2, [r7, #24]
 8004f4c:	0151      	lsls	r1, r2, #5
 8004f4e:	69fa      	ldr	r2, [r7, #28]
 8004f50:	440a      	add	r2, r1
 8004f52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f5a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	78db      	ldrb	r3, [r3, #3]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d015      	beq.n	8004f90 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f000 8117 	beq.w	800519c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	f003 030f 	and.w	r3, r3, #15
 8004f7e:	2101      	movs	r1, #1
 8004f80:	fa01 f303 	lsl.w	r3, r1, r3
 8004f84:	69f9      	ldr	r1, [r7, #28]
 8004f86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	634b      	str	r3, [r1, #52]	; 0x34
 8004f8e:	e105      	b.n	800519c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d110      	bne.n	8004fc2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	015a      	lsls	r2, r3, #5
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	69ba      	ldr	r2, [r7, #24]
 8004fb0:	0151      	lsls	r1, r2, #5
 8004fb2:	69fa      	ldr	r2, [r7, #28]
 8004fb4:	440a      	add	r2, r1
 8004fb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fbe:	6013      	str	r3, [r2, #0]
 8004fc0:	e00f      	b.n	8004fe2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	015a      	lsls	r2, r3, #5
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	4413      	add	r3, r2
 8004fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	69ba      	ldr	r2, [r7, #24]
 8004fd2:	0151      	lsls	r1, r2, #5
 8004fd4:	69fa      	ldr	r2, [r7, #28]
 8004fd6:	440a      	add	r2, r1
 8004fd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fe0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	68d9      	ldr	r1, [r3, #12]
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	781a      	ldrb	r2, [r3, #0]
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	b298      	uxth	r0, r3
 8004ff0:	79fb      	ldrb	r3, [r7, #7]
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f000 fa2b 	bl	8005452 <USB_WritePacket>
 8004ffc:	e0ce      	b.n	800519c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	015a      	lsls	r2, r3, #5
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	4413      	add	r3, r2
 8005006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	69ba      	ldr	r2, [r7, #24]
 800500e:	0151      	lsls	r1, r2, #5
 8005010:	69fa      	ldr	r2, [r7, #28]
 8005012:	440a      	add	r2, r1
 8005014:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005018:	0cdb      	lsrs	r3, r3, #19
 800501a:	04db      	lsls	r3, r3, #19
 800501c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	015a      	lsls	r2, r3, #5
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	4413      	add	r3, r2
 8005026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	69ba      	ldr	r2, [r7, #24]
 800502e:	0151      	lsls	r1, r2, #5
 8005030:	69fa      	ldr	r2, [r7, #28]
 8005032:	440a      	add	r2, r1
 8005034:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005038:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800503c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005040:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d126      	bne.n	8005098 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	015a      	lsls	r2, r3, #5
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	4413      	add	r3, r2
 8005052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005056:	691a      	ldr	r2, [r3, #16]
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005060:	69b9      	ldr	r1, [r7, #24]
 8005062:	0148      	lsls	r0, r1, #5
 8005064:	69f9      	ldr	r1, [r7, #28]
 8005066:	4401      	add	r1, r0
 8005068:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800506c:	4313      	orrs	r3, r2
 800506e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	015a      	lsls	r2, r3, #5
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	4413      	add	r3, r2
 8005078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	69ba      	ldr	r2, [r7, #24]
 8005080:	0151      	lsls	r1, r2, #5
 8005082:	69fa      	ldr	r2, [r7, #28]
 8005084:	440a      	add	r2, r1
 8005086:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800508a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800508e:	6113      	str	r3, [r2, #16]
 8005090:	e036      	b.n	8005100 <USB_EPStartXfer+0x3dc>
 8005092:	bf00      	nop
 8005094:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	695a      	ldr	r2, [r3, #20]
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	4413      	add	r3, r2
 80050a2:	1e5a      	subs	r2, r3, #1
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ac:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	015a      	lsls	r2, r3, #5
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	4413      	add	r3, r2
 80050b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ba:	691a      	ldr	r2, [r3, #16]
 80050bc:	8afb      	ldrh	r3, [r7, #22]
 80050be:	04d9      	lsls	r1, r3, #19
 80050c0:	4b39      	ldr	r3, [pc, #228]	; (80051a8 <USB_EPStartXfer+0x484>)
 80050c2:	400b      	ands	r3, r1
 80050c4:	69b9      	ldr	r1, [r7, #24]
 80050c6:	0148      	lsls	r0, r1, #5
 80050c8:	69f9      	ldr	r1, [r7, #28]
 80050ca:	4401      	add	r1, r0
 80050cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80050d0:	4313      	orrs	r3, r2
 80050d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	015a      	lsls	r2, r3, #5
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	4413      	add	r3, r2
 80050dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e0:	691a      	ldr	r2, [r3, #16]
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	8af9      	ldrh	r1, [r7, #22]
 80050e8:	fb01 f303 	mul.w	r3, r1, r3
 80050ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050f0:	69b9      	ldr	r1, [r7, #24]
 80050f2:	0148      	lsls	r0, r1, #5
 80050f4:	69f9      	ldr	r1, [r7, #28]
 80050f6:	4401      	add	r1, r0
 80050f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80050fc:	4313      	orrs	r3, r2
 80050fe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005100:	79fb      	ldrb	r3, [r7, #7]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d10d      	bne.n	8005122 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d009      	beq.n	8005122 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	68d9      	ldr	r1, [r3, #12]
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	015a      	lsls	r2, r3, #5
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	4413      	add	r3, r2
 800511a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800511e:	460a      	mov	r2, r1
 8005120:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	78db      	ldrb	r3, [r3, #3]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d128      	bne.n	800517c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005136:	2b00      	cmp	r3, #0
 8005138:	d110      	bne.n	800515c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	015a      	lsls	r2, r3, #5
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	4413      	add	r3, r2
 8005142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	0151      	lsls	r1, r2, #5
 800514c:	69fa      	ldr	r2, [r7, #28]
 800514e:	440a      	add	r2, r1
 8005150:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005154:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005158:	6013      	str	r3, [r2, #0]
 800515a:	e00f      	b.n	800517c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	4413      	add	r3, r2
 8005164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	0151      	lsls	r1, r2, #5
 800516e:	69fa      	ldr	r2, [r7, #28]
 8005170:	440a      	add	r2, r1
 8005172:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005176:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800517a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	015a      	lsls	r2, r3, #5
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	4413      	add	r3, r2
 8005184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	69ba      	ldr	r2, [r7, #24]
 800518c:	0151      	lsls	r1, r2, #5
 800518e:	69fa      	ldr	r2, [r7, #28]
 8005190:	440a      	add	r2, r1
 8005192:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005196:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800519a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3720      	adds	r7, #32
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	1ff80000 	.word	0x1ff80000

080051ac <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b087      	sub	sp, #28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	4613      	mov	r3, r2
 80051b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	785b      	ldrb	r3, [r3, #1]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	f040 80cd 	bne.w	8005368 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d132      	bne.n	800523c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	015a      	lsls	r2, r3, #5
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	0151      	lsls	r1, r2, #5
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	440a      	add	r2, r1
 80051ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	4413      	add	r3, r2
 8005202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	0151      	lsls	r1, r2, #5
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	440a      	add	r2, r1
 8005210:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005214:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005218:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	015a      	lsls	r2, r3, #5
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	4413      	add	r3, r2
 8005222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	0151      	lsls	r1, r2, #5
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	440a      	add	r2, r1
 8005230:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005234:	0cdb      	lsrs	r3, r3, #19
 8005236:	04db      	lsls	r3, r3, #19
 8005238:	6113      	str	r3, [r2, #16]
 800523a:	e04e      	b.n	80052da <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	015a      	lsls	r2, r3, #5
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	4413      	add	r3, r2
 8005244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	0151      	lsls	r1, r2, #5
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	440a      	add	r2, r1
 8005252:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005256:	0cdb      	lsrs	r3, r3, #19
 8005258:	04db      	lsls	r3, r3, #19
 800525a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	4413      	add	r3, r2
 8005264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	0151      	lsls	r1, r2, #5
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	440a      	add	r2, r1
 8005272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005276:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800527a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800527e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	695a      	ldr	r2, [r3, #20]
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	429a      	cmp	r2, r3
 800528a:	d903      	bls.n	8005294 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	689a      	ldr	r2, [r3, #8]
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	015a      	lsls	r2, r3, #5
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	4413      	add	r3, r2
 800529c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	0151      	lsls	r1, r2, #5
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	440a      	add	r2, r1
 80052aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	015a      	lsls	r2, r3, #5
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	4413      	add	r3, r2
 80052bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c0:	691a      	ldr	r2, [r3, #16]
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052ca:	6939      	ldr	r1, [r7, #16]
 80052cc:	0148      	lsls	r0, r1, #5
 80052ce:	6979      	ldr	r1, [r7, #20]
 80052d0:	4401      	add	r1, r0
 80052d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80052d6:	4313      	orrs	r3, r2
 80052d8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80052da:	79fb      	ldrb	r3, [r7, #7]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d11e      	bne.n	800531e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d009      	beq.n	80052fc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	015a      	lsls	r2, r3, #5
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	4413      	add	r3, r2
 80052f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f4:	461a      	mov	r2, r3
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	015a      	lsls	r2, r3, #5
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	4413      	add	r3, r2
 8005304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	0151      	lsls	r1, r2, #5
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	440a      	add	r2, r1
 8005312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005316:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800531a:	6013      	str	r3, [r2, #0]
 800531c:	e092      	b.n	8005444 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	015a      	lsls	r2, r3, #5
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	4413      	add	r3, r2
 8005326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	0151      	lsls	r1, r2, #5
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	440a      	add	r2, r1
 8005334:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005338:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800533c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d07e      	beq.n	8005444 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800534c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	f003 030f 	and.w	r3, r3, #15
 8005356:	2101      	movs	r1, #1
 8005358:	fa01 f303 	lsl.w	r3, r1, r3
 800535c:	6979      	ldr	r1, [r7, #20]
 800535e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005362:	4313      	orrs	r3, r2
 8005364:	634b      	str	r3, [r1, #52]	; 0x34
 8005366:	e06d      	b.n	8005444 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	015a      	lsls	r2, r3, #5
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	4413      	add	r3, r2
 8005370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	0151      	lsls	r1, r2, #5
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	440a      	add	r2, r1
 800537e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005382:	0cdb      	lsrs	r3, r3, #19
 8005384:	04db      	lsls	r3, r3, #19
 8005386:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	015a      	lsls	r2, r3, #5
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	4413      	add	r3, r2
 8005390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	0151      	lsls	r1, r2, #5
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	440a      	add	r2, r1
 800539e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053aa:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	695b      	ldr	r3, [r3, #20]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d003      	beq.n	80053bc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	689a      	ldr	r2, [r3, #8]
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	0151      	lsls	r1, r2, #5
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	440a      	add	r2, r1
 80053d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	015a      	lsls	r2, r3, #5
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e8:	691a      	ldr	r2, [r3, #16]
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053f2:	6939      	ldr	r1, [r7, #16]
 80053f4:	0148      	lsls	r0, r1, #5
 80053f6:	6979      	ldr	r1, [r7, #20]
 80053f8:	4401      	add	r1, r0
 80053fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053fe:	4313      	orrs	r3, r2
 8005400:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005402:	79fb      	ldrb	r3, [r7, #7]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d10d      	bne.n	8005424 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d009      	beq.n	8005424 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	68d9      	ldr	r1, [r3, #12]
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	015a      	lsls	r2, r3, #5
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	4413      	add	r3, r2
 800541c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005420:	460a      	mov	r2, r1
 8005422:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	4413      	add	r3, r2
 800542c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	0151      	lsls	r1, r2, #5
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	440a      	add	r2, r1
 800543a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800543e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005442:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	371c      	adds	r7, #28
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005452:	b480      	push	{r7}
 8005454:	b089      	sub	sp, #36	; 0x24
 8005456:	af00      	add	r7, sp, #0
 8005458:	60f8      	str	r0, [r7, #12]
 800545a:	60b9      	str	r1, [r7, #8]
 800545c:	4611      	mov	r1, r2
 800545e:	461a      	mov	r2, r3
 8005460:	460b      	mov	r3, r1
 8005462:	71fb      	strb	r3, [r7, #7]
 8005464:	4613      	mov	r3, r2
 8005466:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005470:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005474:	2b00      	cmp	r3, #0
 8005476:	d11a      	bne.n	80054ae <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005478:	88bb      	ldrh	r3, [r7, #4]
 800547a:	3303      	adds	r3, #3
 800547c:	089b      	lsrs	r3, r3, #2
 800547e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005480:	2300      	movs	r3, #0
 8005482:	61bb      	str	r3, [r7, #24]
 8005484:	e00f      	b.n	80054a6 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005486:	79fb      	ldrb	r3, [r7, #7]
 8005488:	031a      	lsls	r2, r3, #12
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	4413      	add	r3, r2
 800548e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005492:	461a      	mov	r2, r3
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6013      	str	r3, [r2, #0]
      pSrc++;
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	3304      	adds	r3, #4
 800549e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	3301      	adds	r3, #1
 80054a4:	61bb      	str	r3, [r7, #24]
 80054a6:	69ba      	ldr	r2, [r7, #24]
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d3eb      	bcc.n	8005486 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3724      	adds	r7, #36	; 0x24
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80054bc:	b480      	push	{r7}
 80054be:	b089      	sub	sp, #36	; 0x24
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	4613      	mov	r3, r2
 80054c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80054d2:	88fb      	ldrh	r3, [r7, #6]
 80054d4:	3303      	adds	r3, #3
 80054d6:	089b      	lsrs	r3, r3, #2
 80054d8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80054da:	2300      	movs	r3, #0
 80054dc:	61bb      	str	r3, [r7, #24]
 80054de:	e00b      	b.n	80054f8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	3304      	adds	r3, #4
 80054f0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	3301      	adds	r3, #1
 80054f6:	61bb      	str	r3, [r7, #24]
 80054f8:	69ba      	ldr	r2, [r7, #24]
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d3ef      	bcc.n	80054e0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005500:	69fb      	ldr	r3, [r7, #28]
}
 8005502:	4618      	mov	r0, r3
 8005504:	3724      	adds	r7, #36	; 0x24
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr

0800550e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800550e:	b480      	push	{r7}
 8005510:	b085      	sub	sp, #20
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
 8005516:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	785b      	ldrb	r3, [r3, #1]
 8005526:	2b01      	cmp	r3, #1
 8005528:	d12c      	bne.n	8005584 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	015a      	lsls	r2, r3, #5
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	4413      	add	r3, r2
 8005532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	db12      	blt.n	8005562 <USB_EPSetStall+0x54>
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00f      	beq.n	8005562 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	015a      	lsls	r2, r3, #5
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	4413      	add	r3, r2
 800554a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68ba      	ldr	r2, [r7, #8]
 8005552:	0151      	lsls	r1, r2, #5
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	440a      	add	r2, r1
 8005558:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800555c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005560:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	015a      	lsls	r2, r3, #5
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	4413      	add	r3, r2
 800556a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	0151      	lsls	r1, r2, #5
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	440a      	add	r2, r1
 8005578:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800557c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005580:	6013      	str	r3, [r2, #0]
 8005582:	e02b      	b.n	80055dc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	015a      	lsls	r2, r3, #5
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	4413      	add	r3, r2
 800558c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	db12      	blt.n	80055bc <USB_EPSetStall+0xae>
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d00f      	beq.n	80055bc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	0151      	lsls	r1, r2, #5
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	440a      	add	r2, r1
 80055b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055ba:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	015a      	lsls	r2, r3, #5
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	4413      	add	r3, r2
 80055c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	0151      	lsls	r1, r2, #5
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	440a      	add	r2, r1
 80055d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3714      	adds	r7, #20
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055ea:	b480      	push	{r7}
 80055ec:	b085      	sub	sp, #20
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
 80055f2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	785b      	ldrb	r3, [r3, #1]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d128      	bne.n	8005658 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	015a      	lsls	r2, r3, #5
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	4413      	add	r3, r2
 800560e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	0151      	lsls	r1, r2, #5
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	440a      	add	r2, r1
 800561c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005620:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005624:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	78db      	ldrb	r3, [r3, #3]
 800562a:	2b03      	cmp	r3, #3
 800562c:	d003      	beq.n	8005636 <USB_EPClearStall+0x4c>
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	78db      	ldrb	r3, [r3, #3]
 8005632:	2b02      	cmp	r3, #2
 8005634:	d138      	bne.n	80056a8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	015a      	lsls	r2, r3, #5
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	4413      	add	r3, r2
 800563e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68ba      	ldr	r2, [r7, #8]
 8005646:	0151      	lsls	r1, r2, #5
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	440a      	add	r2, r1
 800564c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005654:	6013      	str	r3, [r2, #0]
 8005656:	e027      	b.n	80056a8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	015a      	lsls	r2, r3, #5
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	4413      	add	r3, r2
 8005660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	0151      	lsls	r1, r2, #5
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	440a      	add	r2, r1
 800566e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005672:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005676:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	78db      	ldrb	r3, [r3, #3]
 800567c:	2b03      	cmp	r3, #3
 800567e:	d003      	beq.n	8005688 <USB_EPClearStall+0x9e>
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	78db      	ldrb	r3, [r3, #3]
 8005684:	2b02      	cmp	r3, #2
 8005686:	d10f      	bne.n	80056a8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	015a      	lsls	r2, r3, #5
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	4413      	add	r3, r2
 8005690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	0151      	lsls	r1, r2, #5
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	440a      	add	r2, r1
 800569e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056a6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3714      	adds	r7, #20
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b085      	sub	sp, #20
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
 80056be:	460b      	mov	r3, r1
 80056c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056d4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80056d8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	78fb      	ldrb	r3, [r7, #3]
 80056e4:	011b      	lsls	r3, r3, #4
 80056e6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80056ea:	68f9      	ldr	r1, [r7, #12]
 80056ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056f0:	4313      	orrs	r3, r2
 80056f2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b084      	sub	sp, #16
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800571c:	f023 0302 	bic.w	r3, r3, #2
 8005720:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005722:	2003      	movs	r0, #3
 8005724:	f7fa ff60 	bl	80005e8 <HAL_Delay>

  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b084      	sub	sp, #16
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800574c:	f043 0302 	orr.w	r3, r3, #2
 8005750:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005752:	2003      	movs	r0, #3
 8005754:	f7fa ff48 	bl	80005e8 <HAL_Delay>

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005762:	b480      	push	{r7}
 8005764:	b085      	sub	sp, #20
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	4013      	ands	r3, r2
 8005778:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800577a:	68fb      	ldr	r3, [r7, #12]
}
 800577c:	4618      	mov	r0, r3
 800577e:	3714      	adds	r7, #20
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057a4:	69db      	ldr	r3, [r3, #28]
 80057a6:	68ba      	ldr	r2, [r7, #8]
 80057a8:	4013      	ands	r3, r2
 80057aa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	0c1b      	lsrs	r3, r3, #16
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3714      	adds	r7, #20
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d8:	69db      	ldr	r3, [r3, #28]
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	4013      	ands	r3, r2
 80057de:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	b29b      	uxth	r3, r3
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3714      	adds	r7, #20
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	460b      	mov	r3, r1
 80057fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005800:	78fb      	ldrb	r3, [r7, #3]
 8005802:	015a      	lsls	r2, r3, #5
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	4413      	add	r3, r2
 8005808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005816:	695b      	ldr	r3, [r3, #20]
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	4013      	ands	r3, r2
 800581c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800581e:	68bb      	ldr	r3, [r7, #8]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3714      	adds	r7, #20
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800582c:	b480      	push	{r7}
 800582e:	b087      	sub	sp, #28
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	460b      	mov	r3, r1
 8005836:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800584c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800584e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005850:	78fb      	ldrb	r3, [r7, #3]
 8005852:	f003 030f 	and.w	r3, r3, #15
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	fa22 f303 	lsr.w	r3, r2, r3
 800585c:	01db      	lsls	r3, r3, #7
 800585e:	b2db      	uxtb	r3, r3
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	4313      	orrs	r3, r2
 8005864:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005866:	78fb      	ldrb	r3, [r7, #3]
 8005868:	015a      	lsls	r2, r3, #5
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	4413      	add	r3, r2
 800586e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	4013      	ands	r3, r2
 8005878:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800587a:	68bb      	ldr	r3, [r7, #8]
}
 800587c:	4618      	mov	r0, r3
 800587e:	371c      	adds	r7, #28
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	695b      	ldr	r3, [r3, #20]
 8005894:	f003 0301 	and.w	r3, r3, #1
}
 8005898:	4618      	mov	r0, r3
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058be:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80058c2:	f023 0307 	bic.w	r3, r3, #7
 80058c6:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	f003 0306 	and.w	r3, r3, #6
 80058d4:	2b04      	cmp	r3, #4
 80058d6:	d109      	bne.n	80058ec <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058e6:	f043 0303 	orr.w	r3, r3, #3
 80058ea:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058fe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3714      	adds	r7, #20
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
	...

08005910 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005910:	b480      	push	{r7}
 8005912:	b087      	sub	sp, #28
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	460b      	mov	r3, r1
 800591a:	607a      	str	r2, [r7, #4]
 800591c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	333c      	adds	r3, #60	; 0x3c
 8005926:	3304      	adds	r3, #4
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	4a26      	ldr	r2, [pc, #152]	; (80059c8 <USB_EP0_OutStart+0xb8>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d90a      	bls.n	800594a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005940:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005944:	d101      	bne.n	800594a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005946:	2300      	movs	r3, #0
 8005948:	e037      	b.n	80059ba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005950:	461a      	mov	r2, r3
 8005952:	2300      	movs	r3, #0
 8005954:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005964:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005968:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005978:	f043 0318 	orr.w	r3, r3, #24
 800597c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800598c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005990:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005992:	7afb      	ldrb	r3, [r7, #11]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d10f      	bne.n	80059b8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800599e:	461a      	mov	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059b2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80059b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	371c      	adds	r7, #28
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	4f54300a 	.word	0x4f54300a

080059cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80059d4:	2300      	movs	r3, #0
 80059d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	3301      	adds	r3, #1
 80059dc:	60fb      	str	r3, [r7, #12]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	4a13      	ldr	r2, [pc, #76]	; (8005a30 <USB_CoreReset+0x64>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d901      	bls.n	80059ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e01b      	b.n	8005a22 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	daf2      	bge.n	80059d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80059f2:	2300      	movs	r3, #0
 80059f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	f043 0201 	orr.w	r2, r3, #1
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	3301      	adds	r3, #1
 8005a06:	60fb      	str	r3, [r7, #12]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	4a09      	ldr	r2, [pc, #36]	; (8005a30 <USB_CoreReset+0x64>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d901      	bls.n	8005a14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e006      	b.n	8005a22 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d0f0      	beq.n	8005a02 <USB_CoreReset+0x36>

  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3714      	adds	r7, #20
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	00030d40 	.word	0x00030d40

08005a34 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005a40:	2300      	movs	r3, #0
 8005a42:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	7c1b      	ldrb	r3, [r3, #16]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d115      	bne.n	8005a78 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005a4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a50:	2202      	movs	r2, #2
 8005a52:	2181      	movs	r1, #129	; 0x81
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f002 fc6e 	bl	8008336 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005a60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a64:	2202      	movs	r2, #2
 8005a66:	2101      	movs	r1, #1
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f002 fc64 	bl	8008336 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8005a76:	e012      	b.n	8005a9e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005a78:	2340      	movs	r3, #64	; 0x40
 8005a7a:	2202      	movs	r2, #2
 8005a7c:	2181      	movs	r1, #129	; 0x81
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f002 fc59 	bl	8008336 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005a8a:	2340      	movs	r3, #64	; 0x40
 8005a8c:	2202      	movs	r2, #2
 8005a8e:	2101      	movs	r1, #1
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f002 fc50 	bl	8008336 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005a9e:	2308      	movs	r3, #8
 8005aa0:	2203      	movs	r2, #3
 8005aa2:	2182      	movs	r1, #130	; 0x82
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f002 fc46 	bl	8008336 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8005ab0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005ab4:	f002 ff54 	bl	8008960 <malloc>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	461a      	mov	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d102      	bne.n	8005ad2 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8005acc:	2301      	movs	r3, #1
 8005ace:	73fb      	strb	r3, [r7, #15]
 8005ad0:	e026      	b.n	8005b20 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005ad8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	7c1b      	ldrb	r3, [r3, #16]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d109      	bne.n	8005b10 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b06:	2101      	movs	r1, #1
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f002 fd05 	bl	8008518 <USBD_LL_PrepareReceive>
 8005b0e:	e007      	b.n	8005b20 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b16:	2340      	movs	r3, #64	; 0x40
 8005b18:	2101      	movs	r1, #1
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f002 fcfc 	bl	8008518 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b084      	sub	sp, #16
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
 8005b32:	460b      	mov	r3, r1
 8005b34:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005b36:	2300      	movs	r3, #0
 8005b38:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005b3a:	2181      	movs	r1, #129	; 0x81
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f002 fc20 	bl	8008382 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005b48:	2101      	movs	r1, #1
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f002 fc19 	bl	8008382 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005b58:	2182      	movs	r1, #130	; 0x82
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f002 fc11 	bl	8008382 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00e      	beq.n	8005b8e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005b80:	4618      	mov	r0, r3
 8005b82:	f002 fef5 	bl	8008970 <free>
    pdev->pClassData = NULL;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8005b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005ba8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005baa:	2300      	movs	r3, #0
 8005bac:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d039      	beq.n	8005c36 <USBD_CDC_Setup+0x9e>
 8005bc2:	2b20      	cmp	r3, #32
 8005bc4:	d17c      	bne.n	8005cc0 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	88db      	ldrh	r3, [r3, #6]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d029      	beq.n	8005c22 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	b25b      	sxtb	r3, r3
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	da11      	bge.n	8005bfc <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	683a      	ldr	r2, [r7, #0]
 8005be2:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8005be4:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005be6:	683a      	ldr	r2, [r7, #0]
 8005be8:	88d2      	ldrh	r2, [r2, #6]
 8005bea:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005bec:	6939      	ldr	r1, [r7, #16]
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	88db      	ldrh	r3, [r3, #6]
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f001 f9b7 	bl	8006f68 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8005bfa:	e068      	b.n	8005cce <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	785a      	ldrb	r2, [r3, #1]
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	88db      	ldrh	r3, [r3, #6]
 8005c0a:	b2da      	uxtb	r2, r3
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005c12:	6939      	ldr	r1, [r7, #16]
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	88db      	ldrh	r3, [r3, #6]
 8005c18:	461a      	mov	r2, r3
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f001 f9d2 	bl	8006fc4 <USBD_CtlPrepareRx>
    break;
 8005c20:	e055      	b.n	8005cce <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	683a      	ldr	r2, [r7, #0]
 8005c2c:	7850      	ldrb	r0, [r2, #1]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	6839      	ldr	r1, [r7, #0]
 8005c32:	4798      	blx	r3
    break;
 8005c34:	e04b      	b.n	8005cce <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	785b      	ldrb	r3, [r3, #1]
 8005c3a:	2b0a      	cmp	r3, #10
 8005c3c:	d017      	beq.n	8005c6e <USBD_CDC_Setup+0xd6>
 8005c3e:	2b0b      	cmp	r3, #11
 8005c40:	d029      	beq.n	8005c96 <USBD_CDC_Setup+0xfe>
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d133      	bne.n	8005cae <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005c4c:	2b03      	cmp	r3, #3
 8005c4e:	d107      	bne.n	8005c60 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8005c50:	f107 030c 	add.w	r3, r7, #12
 8005c54:	2202      	movs	r2, #2
 8005c56:	4619      	mov	r1, r3
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f001 f985 	bl	8006f68 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8005c5e:	e02e      	b.n	8005cbe <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8005c60:	6839      	ldr	r1, [r7, #0]
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f001 f915 	bl	8006e92 <USBD_CtlError>
			  ret = USBD_FAIL;
 8005c68:	2302      	movs	r3, #2
 8005c6a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c6c:	e027      	b.n	8005cbe <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005c74:	2b03      	cmp	r3, #3
 8005c76:	d107      	bne.n	8005c88 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8005c78:	f107 030f 	add.w	r3, r7, #15
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	4619      	mov	r1, r3
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f001 f971 	bl	8006f68 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8005c86:	e01a      	b.n	8005cbe <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8005c88:	6839      	ldr	r1, [r7, #0]
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f001 f901 	bl	8006e92 <USBD_CtlError>
			  ret = USBD_FAIL;
 8005c90:	2302      	movs	r3, #2
 8005c92:	75fb      	strb	r3, [r7, #23]
      break;
 8005c94:	e013      	b.n	8005cbe <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005c9c:	2b03      	cmp	r3, #3
 8005c9e:	d00d      	beq.n	8005cbc <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8005ca0:	6839      	ldr	r1, [r7, #0]
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f001 f8f5 	bl	8006e92 <USBD_CtlError>
			  ret = USBD_FAIL;
 8005ca8:	2302      	movs	r3, #2
 8005caa:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005cac:	e006      	b.n	8005cbc <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 8005cae:	6839      	ldr	r1, [r7, #0]
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f001 f8ee 	bl	8006e92 <USBD_CtlError>
      ret = USBD_FAIL;
 8005cb6:	2302      	movs	r3, #2
 8005cb8:	75fb      	strb	r3, [r7, #23]
      break;
 8005cba:	e000      	b.n	8005cbe <USBD_CDC_Setup+0x126>
      break;
 8005cbc:	bf00      	nop
    }
    break;
 8005cbe:	e006      	b.n	8005cce <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8005cc0:	6839      	ldr	r1, [r7, #0]
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f001 f8e5 	bl	8006e92 <USBD_CtlError>
    ret = USBD_FAIL;
 8005cc8:	2302      	movs	r3, #2
 8005cca:	75fb      	strb	r3, [r7, #23]
    break;
 8005ccc:	bf00      	nop
  }

  return ret;
 8005cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3718      	adds	r7, #24
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005cea:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005cf2:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d03a      	beq.n	8005d74 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005cfe:	78fa      	ldrb	r2, [r7, #3]
 8005d00:	6879      	ldr	r1, [r7, #4]
 8005d02:	4613      	mov	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4413      	add	r3, r2
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	440b      	add	r3, r1
 8005d0c:	331c      	adds	r3, #28
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d029      	beq.n	8005d68 <USBD_CDC_DataIn+0x90>
 8005d14:	78fa      	ldrb	r2, [r7, #3]
 8005d16:	6879      	ldr	r1, [r7, #4]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	4413      	add	r3, r2
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	440b      	add	r3, r1
 8005d22:	331c      	adds	r3, #28
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	78f9      	ldrb	r1, [r7, #3]
 8005d28:	68b8      	ldr	r0, [r7, #8]
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	00db      	lsls	r3, r3, #3
 8005d2e:	1a5b      	subs	r3, r3, r1
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	4403      	add	r3, r0
 8005d34:	3344      	adds	r3, #68	; 0x44
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	fbb2 f1f3 	udiv	r1, r2, r3
 8005d3c:	fb03 f301 	mul.w	r3, r3, r1
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d110      	bne.n	8005d68 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005d46:	78fa      	ldrb	r2, [r7, #3]
 8005d48:	6879      	ldr	r1, [r7, #4]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	4413      	add	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	440b      	add	r3, r1
 8005d54:	331c      	adds	r3, #28
 8005d56:	2200      	movs	r2, #0
 8005d58:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8005d5a:	78f9      	ldrb	r1, [r7, #3]
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	2200      	movs	r2, #0
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f002 fbb6 	bl	80084d2 <USBD_LL_Transmit>
 8005d66:	e003      	b.n	8005d70 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005d70:	2300      	movs	r3, #0
 8005d72:	e000      	b.n	8005d76 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005d74:	2302      	movs	r3, #2
  }
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b084      	sub	sp, #16
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
 8005d86:	460b      	mov	r3, r1
 8005d88:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005d90:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8005d92:	78fb      	ldrb	r3, [r7, #3]
 8005d94:	4619      	mov	r1, r3
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f002 fbe1 	bl	800855e <USBD_LL_GetRxDataSize>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00d      	beq.n	8005dca <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005dc2:	4611      	mov	r1, r2
 8005dc4:	4798      	blx	r3

    return USBD_OK;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	e000      	b.n	8005dcc <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005dca:	2302      	movs	r3, #2
  }
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005de2:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d015      	beq.n	8005e1a <USBD_CDC_EP0_RxReady+0x46>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005df4:	2bff      	cmp	r3, #255	; 0xff
 8005df6:	d010      	beq.n	8005e1a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005e06:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005e0e:	b292      	uxth	r2, r2
 8005e10:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	22ff      	movs	r2, #255	; 0xff
 8005e16:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3710      	adds	r7, #16
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2243      	movs	r2, #67	; 0x43
 8005e30:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005e32:	4b03      	ldr	r3, [pc, #12]	; (8005e40 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	20000090 	.word	0x20000090

08005e44 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2243      	movs	r2, #67	; 0x43
 8005e50:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005e52:	4b03      	ldr	r3, [pc, #12]	; (8005e60 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr
 8005e60:	2000004c 	.word	0x2000004c

08005e64 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2243      	movs	r2, #67	; 0x43
 8005e70:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005e72:	4b03      	ldr	r3, [pc, #12]	; (8005e80 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr
 8005e80:	200000d4 	.word	0x200000d4

08005e84 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	220a      	movs	r2, #10
 8005e90:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005e92:	4b03      	ldr	r3, [pc, #12]	; (8005ea0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr
 8005ea0:	20000008 	.word	0x20000008

08005ea4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005eae:	2302      	movs	r3, #2
 8005eb0:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d005      	beq.n	8005ec4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	683a      	ldr	r2, [r7, #0]
 8005ebc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3714      	adds	r7, #20
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr

08005ed2 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	b087      	sub	sp, #28
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	60f8      	str	r0, [r7, #12]
 8005eda:	60b9      	str	r1, [r7, #8]
 8005edc:	4613      	mov	r3, r2
 8005ede:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005ee6:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005ef0:	88fa      	ldrh	r2, [r7, #6]
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	371c      	adds	r7, #28
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr

08005f06 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8005f06:	b480      	push	{r7}
 8005f08:	b085      	sub	sp, #20
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
 8005f0e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005f16:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	683a      	ldr	r2, [r7, #0]
 8005f1c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3714      	adds	r7, #20
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b084      	sub	sp, #16
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005f3c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d017      	beq.n	8005f78 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	7c1b      	ldrb	r3, [r3, #16]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d109      	bne.n	8005f64 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f5a:	2101      	movs	r1, #1
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f002 fadb 	bl	8008518 <USBD_LL_PrepareReceive>
 8005f62:	e007      	b.n	8005f74 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f6a:	2340      	movs	r3, #64	; 0x40
 8005f6c:	2101      	movs	r1, #1
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f002 fad2 	bl	8008518 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005f74:	2300      	movs	r3, #0
 8005f76:	e000      	b.n	8005f7a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005f78:	2302      	movs	r3, #2
  }
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b084      	sub	sp, #16
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	60f8      	str	r0, [r7, #12]
 8005f8a:	60b9      	str	r1, [r7, #8]
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d101      	bne.n	8005f9a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005f96:	2302      	movs	r3, #2
 8005f98:	e01a      	b.n	8005fd0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d003      	beq.n	8005fac <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d003      	beq.n	8005fba <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	68ba      	ldr	r2, [r7, #8]
 8005fb6:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	79fa      	ldrb	r2, [r7, #7]
 8005fc6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f002 f94d 	bl	8008268 <USBD_LL_Init>

  return USBD_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3710      	adds	r7, #16
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d006      	beq.n	8005ffa <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	683a      	ldr	r2, [r7, #0]
 8005ff0:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	73fb      	strb	r3, [r7, #15]
 8005ff8:	e001      	b.n	8005ffe <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005ffa:	2302      	movs	r3, #2
 8005ffc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006000:	4618      	mov	r0, r3
 8006002:	3714      	adds	r7, #20
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f002 f973 	bl	8008300 <USBD_LL_Start>

  return USBD_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3708      	adds	r7, #8
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	370c      	adds	r7, #12
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr

0800603a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b084      	sub	sp, #16
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
 8006042:	460b      	mov	r3, r1
 8006044:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8006046:	2302      	movs	r3, #2
 8006048:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00c      	beq.n	800606e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	78fa      	ldrb	r2, [r7, #3]
 800605e:	4611      	mov	r1, r2
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	4798      	blx	r3
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800606a:	2300      	movs	r3, #0
 800606c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800606e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006070:	4618      	mov	r0, r3
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	460b      	mov	r3, r1
 8006082:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	78fa      	ldrb	r2, [r7, #3]
 800608e:	4611      	mov	r1, r2
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	4798      	blx	r3
  return USBD_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3708      	adds	r7, #8
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b082      	sub	sp, #8
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
 80060a6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80060ae:	6839      	ldr	r1, [r7, #0]
 80060b0:	4618      	mov	r0, r3
 80060b2:	f000 feb1 	bl	8006e18 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 80060c4:	461a      	mov	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80060d2:	f003 031f 	and.w	r3, r3, #31
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d00c      	beq.n	80060f4 <USBD_LL_SetupStage+0x56>
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d302      	bcc.n	80060e4 <USBD_LL_SetupStage+0x46>
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d010      	beq.n	8006104 <USBD_LL_SetupStage+0x66>
 80060e2:	e017      	b.n	8006114 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80060ea:	4619      	mov	r1, r3
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 fa05 	bl	80064fc <USBD_StdDevReq>
    break;
 80060f2:	e01a      	b.n	800612a <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80060fa:	4619      	mov	r1, r3
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 fa67 	bl	80065d0 <USBD_StdItfReq>
    break;
 8006102:	e012      	b.n	800612a <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800610a:	4619      	mov	r1, r3
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 faa5 	bl	800665c <USBD_StdEPReq>
    break;
 8006112:	e00a      	b.n	800612a <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800611a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800611e:	b2db      	uxtb	r3, r3
 8006120:	4619      	mov	r1, r3
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f002 f94c 	bl	80083c0 <USBD_LL_StallEP>
    break;
 8006128:	bf00      	nop
  }

  return USBD_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	3708      	adds	r7, #8
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b086      	sub	sp, #24
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	460b      	mov	r3, r1
 800613e:	607a      	str	r2, [r7, #4]
 8006140:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8006142:	7afb      	ldrb	r3, [r7, #11]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d14b      	bne.n	80061e0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800614e:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006156:	2b03      	cmp	r3, #3
 8006158:	d134      	bne.n	80061c4 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	68da      	ldr	r2, [r3, #12]
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	429a      	cmp	r2, r3
 8006164:	d919      	bls.n	800619a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	68da      	ldr	r2, [r3, #12]
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	1ad2      	subs	r2, r2, r3
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	68da      	ldr	r2, [r3, #12]
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800617c:	429a      	cmp	r2, r3
 800617e:	d203      	bcs.n	8006188 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8006184:	b29b      	uxth	r3, r3
 8006186:	e002      	b.n	800618e <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800618c:	b29b      	uxth	r3, r3
 800618e:	461a      	mov	r2, r3
 8006190:	6879      	ldr	r1, [r7, #4]
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f000 ff34 	bl	8007000 <USBD_CtlContinueRx>
 8006198:	e038      	b.n	800620c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00a      	beq.n	80061bc <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80061ac:	2b03      	cmp	r3, #3
 80061ae:	d105      	bne.n	80061bc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f000 ff31 	bl	8007024 <USBD_CtlSendStatus>
 80061c2:	e023      	b.n	800620c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80061ca:	2b05      	cmp	r3, #5
 80061cc:	d11e      	bne.n	800620c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80061d6:	2100      	movs	r1, #0
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f002 f8f1 	bl	80083c0 <USBD_LL_StallEP>
 80061de:	e015      	b.n	800620c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00d      	beq.n	8006208 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 80061f2:	2b03      	cmp	r3, #3
 80061f4:	d108      	bne.n	8006208 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	7afa      	ldrb	r2, [r7, #11]
 8006200:	4611      	mov	r1, r2
 8006202:	68f8      	ldr	r0, [r7, #12]
 8006204:	4798      	blx	r3
 8006206:	e001      	b.n	800620c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006208:	2302      	movs	r3, #2
 800620a:	e000      	b.n	800620e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3718      	adds	r7, #24
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8006216:	b580      	push	{r7, lr}
 8006218:	b086      	sub	sp, #24
 800621a:	af00      	add	r7, sp, #0
 800621c:	60f8      	str	r0, [r7, #12]
 800621e:	460b      	mov	r3, r1
 8006220:	607a      	str	r2, [r7, #4]
 8006222:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8006224:	7afb      	ldrb	r3, [r7, #11]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d17f      	bne.n	800632a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	3314      	adds	r3, #20
 800622e:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006236:	2b02      	cmp	r3, #2
 8006238:	d15c      	bne.n	80062f4 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	68da      	ldr	r2, [r3, #12]
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	429a      	cmp	r2, r3
 8006244:	d915      	bls.n	8006272 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	68da      	ldr	r2, [r3, #12]
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	1ad2      	subs	r2, r2, r3
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	b29b      	uxth	r3, r3
 800625a:	461a      	mov	r2, r3
 800625c:	6879      	ldr	r1, [r7, #4]
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f000 fe9e 	bl	8006fa0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006264:	2300      	movs	r3, #0
 8006266:	2200      	movs	r2, #0
 8006268:	2100      	movs	r1, #0
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f002 f954 	bl	8008518 <USBD_LL_PrepareReceive>
 8006270:	e04e      	b.n	8006310 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	697a      	ldr	r2, [r7, #20]
 8006278:	6912      	ldr	r2, [r2, #16]
 800627a:	fbb3 f1f2 	udiv	r1, r3, r2
 800627e:	fb02 f201 	mul.w	r2, r2, r1
 8006282:	1a9b      	subs	r3, r3, r2
 8006284:	2b00      	cmp	r3, #0
 8006286:	d11c      	bne.n	80062c2 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	689a      	ldr	r2, [r3, #8]
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006290:	429a      	cmp	r2, r3
 8006292:	d316      	bcc.n	80062c2 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	689a      	ldr	r2, [r3, #8]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800629e:	429a      	cmp	r2, r3
 80062a0:	d20f      	bcs.n	80062c2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80062a2:	2200      	movs	r2, #0
 80062a4:	2100      	movs	r1, #0
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f000 fe7a 	bl	8006fa0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80062b4:	2300      	movs	r3, #0
 80062b6:	2200      	movs	r2, #0
 80062b8:	2100      	movs	r1, #0
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f002 f92c 	bl	8008518 <USBD_LL_PrepareReceive>
 80062c0:	e026      	b.n	8006310 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00a      	beq.n	80062e4 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80062d4:	2b03      	cmp	r3, #3
 80062d6:	d105      	bne.n	80062e4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80062e4:	2180      	movs	r1, #128	; 0x80
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	f002 f86a 	bl	80083c0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f000 feac 	bl	800704a <USBD_CtlReceiveStatus>
 80062f2:	e00d      	b.n	8006310 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80062fa:	2b04      	cmp	r3, #4
 80062fc:	d004      	beq.n	8006308 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006304:	2b00      	cmp	r3, #0
 8006306:	d103      	bne.n	8006310 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006308:	2180      	movs	r1, #128	; 0x80
 800630a:	68f8      	ldr	r0, [r7, #12]
 800630c:	f002 f858 	bl	80083c0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8006316:	2b01      	cmp	r3, #1
 8006318:	d11d      	bne.n	8006356 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800631a:	68f8      	ldr	r0, [r7, #12]
 800631c:	f7ff fe82 	bl	8006024 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8006328:	e015      	b.n	8006356 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00d      	beq.n	8006352 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800633c:	2b03      	cmp	r3, #3
 800633e:	d108      	bne.n	8006352 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006346:	695b      	ldr	r3, [r3, #20]
 8006348:	7afa      	ldrb	r2, [r7, #11]
 800634a:	4611      	mov	r1, r2
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	4798      	blx	r3
 8006350:	e001      	b.n	8006356 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006352:	2302      	movs	r3, #2
 8006354:	e000      	b.n	8006358 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	3718      	adds	r7, #24
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006368:	2340      	movs	r3, #64	; 0x40
 800636a:	2200      	movs	r2, #0
 800636c:	2100      	movs	r1, #0
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f001 ffe1 	bl	8008336 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2240      	movs	r2, #64	; 0x40
 8006380:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006384:	2340      	movs	r3, #64	; 0x40
 8006386:	2200      	movs	r2, #0
 8006388:	2180      	movs	r1, #128	; 0x80
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f001 ffd3 	bl	8008336 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2240      	movs	r2, #64	; 0x40
 800639a:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d009      	beq.n	80063d8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	6852      	ldr	r2, [r2, #4]
 80063d0:	b2d2      	uxtb	r2, r2
 80063d2:	4611      	mov	r1, r2
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	4798      	blx	r3
  }

  return USBD_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3708      	adds	r7, #8
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b083      	sub	sp, #12
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
 80063ea:	460b      	mov	r3, r1
 80063ec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	78fa      	ldrb	r2, [r7, #3]
 80063f2:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	370c      	adds	r7, #12
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr

08006402 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8006402:	b480      	push	{r7}
 8006404:	b083      	sub	sp, #12
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2204      	movs	r2, #4
 800641a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	370c      	adds	r7, #12
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr

0800644e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800644e:	b580      	push	{r7, lr}
 8006450:	b082      	sub	sp, #8
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800645c:	2b03      	cmp	r3, #3
 800645e:	d10b      	bne.n	8006478 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006466:	69db      	ldr	r3, [r3, #28]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d005      	beq.n	8006478 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006472:	69db      	ldr	r3, [r3, #28]
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3708      	adds	r7, #8
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8006482:	b480      	push	{r7}
 8006484:	b083      	sub	sp, #12
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
 800648a:	460b      	mov	r3, r1
 800648c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	460b      	mov	r3, r1
 80064a6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	370c      	adds	r7, #12
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr

080064b6 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 80064b6:	b480      	push	{r7}
 80064b8:	b083      	sub	sp, #12
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	6852      	ldr	r2, [r2, #4]
 80064e8:	b2d2      	uxtb	r2, r2
 80064ea:	4611      	mov	r1, r2
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	4798      	blx	r3

  return USBD_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3708      	adds	r7, #8
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
	...

080064fc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006506:	2300      	movs	r3, #0
 8006508:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006512:	2b20      	cmp	r3, #32
 8006514:	d004      	beq.n	8006520 <USBD_StdDevReq+0x24>
 8006516:	2b40      	cmp	r3, #64	; 0x40
 8006518:	d002      	beq.n	8006520 <USBD_StdDevReq+0x24>
 800651a:	2b00      	cmp	r3, #0
 800651c:	d008      	beq.n	8006530 <USBD_StdDevReq+0x34>
 800651e:	e04c      	b.n	80065ba <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	6839      	ldr	r1, [r7, #0]
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	4798      	blx	r3
    break;
 800652e:	e049      	b.n	80065c4 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	785b      	ldrb	r3, [r3, #1]
 8006534:	2b09      	cmp	r3, #9
 8006536:	d83a      	bhi.n	80065ae <USBD_StdDevReq+0xb2>
 8006538:	a201      	add	r2, pc, #4	; (adr r2, 8006540 <USBD_StdDevReq+0x44>)
 800653a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800653e:	bf00      	nop
 8006540:	08006591 	.word	0x08006591
 8006544:	080065a5 	.word	0x080065a5
 8006548:	080065af 	.word	0x080065af
 800654c:	0800659b 	.word	0x0800659b
 8006550:	080065af 	.word	0x080065af
 8006554:	08006573 	.word	0x08006573
 8006558:	08006569 	.word	0x08006569
 800655c:	080065af 	.word	0x080065af
 8006560:	08006587 	.word	0x08006587
 8006564:	0800657d 	.word	0x0800657d
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8006568:	6839      	ldr	r1, [r7, #0]
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f9d2 	bl	8006914 <USBD_GetDescriptor>
      break;
 8006570:	e022      	b.n	80065b8 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8006572:	6839      	ldr	r1, [r7, #0]
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 fae3 	bl	8006b40 <USBD_SetAddress>
      break;
 800657a:	e01d      	b.n	80065b8 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800657c:	6839      	ldr	r1, [r7, #0]
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 fb20 	bl	8006bc4 <USBD_SetConfig>
      break;
 8006584:	e018      	b.n	80065b8 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8006586:	6839      	ldr	r1, [r7, #0]
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 fba9 	bl	8006ce0 <USBD_GetConfig>
      break;
 800658e:	e013      	b.n	80065b8 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8006590:	6839      	ldr	r1, [r7, #0]
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 fbd8 	bl	8006d48 <USBD_GetStatus>
      break;
 8006598:	e00e      	b.n	80065b8 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800659a:	6839      	ldr	r1, [r7, #0]
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 fc06 	bl	8006dae <USBD_SetFeature>
      break;
 80065a2:	e009      	b.n	80065b8 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 80065a4:	6839      	ldr	r1, [r7, #0]
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 fc15 	bl	8006dd6 <USBD_ClrFeature>
      break;
 80065ac:	e004      	b.n	80065b8 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 80065ae:	6839      	ldr	r1, [r7, #0]
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 fc6e 	bl	8006e92 <USBD_CtlError>
      break;
 80065b6:	bf00      	nop
    }
    break;
 80065b8:	e004      	b.n	80065c4 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 80065ba:	6839      	ldr	r1, [r7, #0]
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 fc68 	bl	8006e92 <USBD_CtlError>
    break;
 80065c2:	bf00      	nop
  }

  return ret;
 80065c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop

080065d0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065da:	2300      	movs	r3, #0
 80065dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065e6:	2b20      	cmp	r3, #32
 80065e8:	d003      	beq.n	80065f2 <USBD_StdItfReq+0x22>
 80065ea:	2b40      	cmp	r3, #64	; 0x40
 80065ec:	d001      	beq.n	80065f2 <USBD_StdItfReq+0x22>
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d12a      	bne.n	8006648 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80065f8:	3b01      	subs	r3, #1
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d81d      	bhi.n	800663a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	889b      	ldrh	r3, [r3, #4]
 8006602:	b2db      	uxtb	r3, r3
 8006604:	2b01      	cmp	r3, #1
 8006606:	d813      	bhi.n	8006630 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	6839      	ldr	r1, [r7, #0]
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	4798      	blx	r3
 8006616:	4603      	mov	r3, r0
 8006618:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	88db      	ldrh	r3, [r3, #6]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d110      	bne.n	8006644 <USBD_StdItfReq+0x74>
 8006622:	7bfb      	ldrb	r3, [r7, #15]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d10d      	bne.n	8006644 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 fcfb 	bl	8007024 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800662e:	e009      	b.n	8006644 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006630:	6839      	ldr	r1, [r7, #0]
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 fc2d 	bl	8006e92 <USBD_CtlError>
      break;
 8006638:	e004      	b.n	8006644 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800663a:	6839      	ldr	r1, [r7, #0]
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 fc28 	bl	8006e92 <USBD_CtlError>
      break;
 8006642:	e000      	b.n	8006646 <USBD_StdItfReq+0x76>
      break;
 8006644:	bf00      	nop
    }
    break;
 8006646:	e004      	b.n	8006652 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006648:	6839      	ldr	r1, [r7, #0]
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 fc21 	bl	8006e92 <USBD_CtlError>
    break;
 8006650:	bf00      	nop
  }

  return USBD_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	3710      	adds	r7, #16
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006666:	2300      	movs	r3, #0
 8006668:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	889b      	ldrh	r3, [r3, #4]
 800666e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006678:	2b20      	cmp	r3, #32
 800667a:	d004      	beq.n	8006686 <USBD_StdEPReq+0x2a>
 800667c:	2b40      	cmp	r3, #64	; 0x40
 800667e:	d002      	beq.n	8006686 <USBD_StdEPReq+0x2a>
 8006680:	2b00      	cmp	r3, #0
 8006682:	d008      	beq.n	8006696 <USBD_StdEPReq+0x3a>
 8006684:	e13b      	b.n	80068fe <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	6839      	ldr	r1, [r7, #0]
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	4798      	blx	r3
    break;
 8006694:	e138      	b.n	8006908 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800669e:	2b20      	cmp	r3, #32
 80066a0:	d10a      	bne.n	80066b8 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	6839      	ldr	r1, [r7, #0]
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	4798      	blx	r3
 80066b0:	4603      	mov	r3, r0
 80066b2:	73fb      	strb	r3, [r7, #15]

      return ret;
 80066b4:	7bfb      	ldrb	r3, [r7, #15]
 80066b6:	e128      	b.n	800690a <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	785b      	ldrb	r3, [r3, #1]
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d03e      	beq.n	800673e <USBD_StdEPReq+0xe2>
 80066c0:	2b03      	cmp	r3, #3
 80066c2:	d002      	beq.n	80066ca <USBD_StdEPReq+0x6e>
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d070      	beq.n	80067aa <USBD_StdEPReq+0x14e>
 80066c8:	e113      	b.n	80068f2 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d002      	beq.n	80066da <USBD_StdEPReq+0x7e>
 80066d4:	2b03      	cmp	r3, #3
 80066d6:	d015      	beq.n	8006704 <USBD_StdEPReq+0xa8>
 80066d8:	e02b      	b.n	8006732 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066da:	7bbb      	ldrb	r3, [r7, #14]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00c      	beq.n	80066fa <USBD_StdEPReq+0x9e>
 80066e0:	7bbb      	ldrb	r3, [r7, #14]
 80066e2:	2b80      	cmp	r3, #128	; 0x80
 80066e4:	d009      	beq.n	80066fa <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80066e6:	7bbb      	ldrb	r3, [r7, #14]
 80066e8:	4619      	mov	r1, r3
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f001 fe68 	bl	80083c0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80066f0:	2180      	movs	r1, #128	; 0x80
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f001 fe64 	bl	80083c0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80066f8:	e020      	b.n	800673c <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 80066fa:	6839      	ldr	r1, [r7, #0]
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 fbc8 	bl	8006e92 <USBD_CtlError>
        break;
 8006702:	e01b      	b.n	800673c <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	885b      	ldrh	r3, [r3, #2]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d10e      	bne.n	800672a <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800670c:	7bbb      	ldrb	r3, [r7, #14]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00b      	beq.n	800672a <USBD_StdEPReq+0xce>
 8006712:	7bbb      	ldrb	r3, [r7, #14]
 8006714:	2b80      	cmp	r3, #128	; 0x80
 8006716:	d008      	beq.n	800672a <USBD_StdEPReq+0xce>
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	88db      	ldrh	r3, [r3, #6]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d104      	bne.n	800672a <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8006720:	7bbb      	ldrb	r3, [r7, #14]
 8006722:	4619      	mov	r1, r3
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f001 fe4b 	bl	80083c0 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 fc7a 	bl	8007024 <USBD_CtlSendStatus>

        break;
 8006730:	e004      	b.n	800673c <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8006732:	6839      	ldr	r1, [r7, #0]
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 fbac 	bl	8006e92 <USBD_CtlError>
        break;
 800673a:	bf00      	nop
      }
      break;
 800673c:	e0de      	b.n	80068fc <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006744:	2b02      	cmp	r3, #2
 8006746:	d002      	beq.n	800674e <USBD_StdEPReq+0xf2>
 8006748:	2b03      	cmp	r3, #3
 800674a:	d015      	beq.n	8006778 <USBD_StdEPReq+0x11c>
 800674c:	e026      	b.n	800679c <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800674e:	7bbb      	ldrb	r3, [r7, #14]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00c      	beq.n	800676e <USBD_StdEPReq+0x112>
 8006754:	7bbb      	ldrb	r3, [r7, #14]
 8006756:	2b80      	cmp	r3, #128	; 0x80
 8006758:	d009      	beq.n	800676e <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800675a:	7bbb      	ldrb	r3, [r7, #14]
 800675c:	4619      	mov	r1, r3
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f001 fe2e 	bl	80083c0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8006764:	2180      	movs	r1, #128	; 0x80
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f001 fe2a 	bl	80083c0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800676c:	e01c      	b.n	80067a8 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800676e:	6839      	ldr	r1, [r7, #0]
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 fb8e 	bl	8006e92 <USBD_CtlError>
        break;
 8006776:	e017      	b.n	80067a8 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	885b      	ldrh	r3, [r3, #2]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d112      	bne.n	80067a6 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006780:	7bbb      	ldrb	r3, [r7, #14]
 8006782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006786:	2b00      	cmp	r3, #0
 8006788:	d004      	beq.n	8006794 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800678a:	7bbb      	ldrb	r3, [r7, #14]
 800678c:	4619      	mov	r1, r3
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f001 fe35 	bl	80083fe <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 fc45 	bl	8007024 <USBD_CtlSendStatus>
        }
        break;
 800679a:	e004      	b.n	80067a6 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800679c:	6839      	ldr	r1, [r7, #0]
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 fb77 	bl	8006e92 <USBD_CtlError>
        break;
 80067a4:	e000      	b.n	80067a8 <USBD_StdEPReq+0x14c>
        break;
 80067a6:	bf00      	nop
      }
      break;
 80067a8:	e0a8      	b.n	80068fc <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d002      	beq.n	80067ba <USBD_StdEPReq+0x15e>
 80067b4:	2b03      	cmp	r3, #3
 80067b6:	d031      	beq.n	800681c <USBD_StdEPReq+0x1c0>
 80067b8:	e095      	b.n	80068e6 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067ba:	7bbb      	ldrb	r3, [r7, #14]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d007      	beq.n	80067d0 <USBD_StdEPReq+0x174>
 80067c0:	7bbb      	ldrb	r3, [r7, #14]
 80067c2:	2b80      	cmp	r3, #128	; 0x80
 80067c4:	d004      	beq.n	80067d0 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 80067c6:	6839      	ldr	r1, [r7, #0]
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 fb62 	bl	8006e92 <USBD_CtlError>
          break;
 80067ce:	e08f      	b.n	80068f0 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80067d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	da0b      	bge.n	80067f0 <USBD_StdEPReq+0x194>
 80067d8:	7bbb      	ldrb	r3, [r7, #14]
 80067da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067de:	4613      	mov	r3, r2
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	4413      	add	r3, r2
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	3310      	adds	r3, #16
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	4413      	add	r3, r2
 80067ec:	3304      	adds	r3, #4
 80067ee:	e00a      	b.n	8006806 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 80067f0:	7bbb      	ldrb	r3, [r7, #14]
 80067f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80067f6:	4613      	mov	r3, r2
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	4413      	add	r3, r2
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	4413      	add	r3, r2
 8006806:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	2200      	movs	r2, #0
 800680c:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	2202      	movs	r2, #2
 8006812:	4619      	mov	r1, r3
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 fba7 	bl	8006f68 <USBD_CtlSendData>
          break;
 800681a:	e069      	b.n	80068f0 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800681c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006820:	2b00      	cmp	r3, #0
 8006822:	da11      	bge.n	8006848 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006824:	7bbb      	ldrb	r3, [r7, #14]
 8006826:	f003 020f 	and.w	r2, r3, #15
 800682a:	6879      	ldr	r1, [r7, #4]
 800682c:	4613      	mov	r3, r2
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	4413      	add	r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	440b      	add	r3, r1
 8006836:	3318      	adds	r3, #24
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d117      	bne.n	800686e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800683e:	6839      	ldr	r1, [r7, #0]
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 fb26 	bl	8006e92 <USBD_CtlError>
            break;
 8006846:	e053      	b.n	80068f0 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006848:	7bbb      	ldrb	r3, [r7, #14]
 800684a:	f003 020f 	and.w	r2, r3, #15
 800684e:	6879      	ldr	r1, [r7, #4]
 8006850:	4613      	mov	r3, r2
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	4413      	add	r3, r2
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	440b      	add	r3, r1
 800685a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d104      	bne.n	800686e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8006864:	6839      	ldr	r1, [r7, #0]
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 fb13 	bl	8006e92 <USBD_CtlError>
            break;
 800686c:	e040      	b.n	80068f0 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800686e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006872:	2b00      	cmp	r3, #0
 8006874:	da0b      	bge.n	800688e <USBD_StdEPReq+0x232>
 8006876:	7bbb      	ldrb	r3, [r7, #14]
 8006878:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800687c:	4613      	mov	r3, r2
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	4413      	add	r3, r2
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	3310      	adds	r3, #16
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	4413      	add	r3, r2
 800688a:	3304      	adds	r3, #4
 800688c:	e00a      	b.n	80068a4 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800688e:	7bbb      	ldrb	r3, [r7, #14]
 8006890:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006894:	4613      	mov	r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	4413      	add	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	4413      	add	r3, r2
 80068a4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80068a6:	7bbb      	ldrb	r3, [r7, #14]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d002      	beq.n	80068b2 <USBD_StdEPReq+0x256>
 80068ac:	7bbb      	ldrb	r3, [r7, #14]
 80068ae:	2b80      	cmp	r3, #128	; 0x80
 80068b0:	d103      	bne.n	80068ba <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	2200      	movs	r2, #0
 80068b6:	601a      	str	r2, [r3, #0]
 80068b8:	e00e      	b.n	80068d8 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80068ba:	7bbb      	ldrb	r3, [r7, #14]
 80068bc:	4619      	mov	r1, r3
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f001 fdbc 	bl	800843c <USBD_LL_IsStallEP>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d003      	beq.n	80068d2 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	2201      	movs	r2, #1
 80068ce:	601a      	str	r2, [r3, #0]
 80068d0:	e002      	b.n	80068d8 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	2200      	movs	r2, #0
 80068d6:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	2202      	movs	r2, #2
 80068dc:	4619      	mov	r1, r3
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 fb42 	bl	8006f68 <USBD_CtlSendData>
          break;
 80068e4:	e004      	b.n	80068f0 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 80068e6:	6839      	ldr	r1, [r7, #0]
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 fad2 	bl	8006e92 <USBD_CtlError>
        break;
 80068ee:	bf00      	nop
      }
      break;
 80068f0:	e004      	b.n	80068fc <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 80068f2:	6839      	ldr	r1, [r7, #0]
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 facc 	bl	8006e92 <USBD_CtlError>
      break;
 80068fa:	bf00      	nop
    }
    break;
 80068fc:	e004      	b.n	8006908 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 80068fe:	6839      	ldr	r1, [r7, #0]
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 fac6 	bl	8006e92 <USBD_CtlError>
    break;
 8006906:	bf00      	nop
  }

  return ret;
 8006908:	7bfb      	ldrb	r3, [r7, #15]
}
 800690a:	4618      	mov	r0, r3
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
	...

08006914 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	885b      	ldrh	r3, [r3, #2]
 8006922:	0a1b      	lsrs	r3, r3, #8
 8006924:	b29b      	uxth	r3, r3
 8006926:	3b01      	subs	r3, #1
 8006928:	2b0e      	cmp	r3, #14
 800692a:	f200 80e5 	bhi.w	8006af8 <USBD_GetDescriptor+0x1e4>
 800692e:	a201      	add	r2, pc, #4	; (adr r2, 8006934 <USBD_GetDescriptor+0x20>)
 8006930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006934:	08006989 	.word	0x08006989
 8006938:	080069a1 	.word	0x080069a1
 800693c:	080069e1 	.word	0x080069e1
 8006940:	08006af9 	.word	0x08006af9
 8006944:	08006af9 	.word	0x08006af9
 8006948:	08006aa5 	.word	0x08006aa5
 800694c:	08006acb 	.word	0x08006acb
 8006950:	08006af9 	.word	0x08006af9
 8006954:	08006af9 	.word	0x08006af9
 8006958:	08006af9 	.word	0x08006af9
 800695c:	08006af9 	.word	0x08006af9
 8006960:	08006af9 	.word	0x08006af9
 8006964:	08006af9 	.word	0x08006af9
 8006968:	08006af9 	.word	0x08006af9
 800696c:	08006971 	.word	0x08006971
  {
#if (USBD_LPM_ENABLED == 1U)
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006976:	69db      	ldr	r3, [r3, #28]
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	7c12      	ldrb	r2, [r2, #16]
 800697c:	f107 010a 	add.w	r1, r7, #10
 8006980:	4610      	mov	r0, r2
 8006982:	4798      	blx	r3
 8006984:	60f8      	str	r0, [r7, #12]
    break;
 8006986:	e0bc      	b.n	8006b02 <USBD_GetDescriptor+0x1ee>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	7c12      	ldrb	r2, [r2, #16]
 8006994:	f107 010a 	add.w	r1, r7, #10
 8006998:	4610      	mov	r0, r2
 800699a:	4798      	blx	r3
 800699c:	60f8      	str	r0, [r7, #12]
    break;
 800699e:	e0b0      	b.n	8006b02 <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	7c1b      	ldrb	r3, [r3, #16]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d10d      	bne.n	80069c4 <USBD_GetDescriptor+0xb0>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80069ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b0:	f107 020a 	add.w	r2, r7, #10
 80069b4:	4610      	mov	r0, r2
 80069b6:	4798      	blx	r3
 80069b8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	3301      	adds	r3, #1
 80069be:	2202      	movs	r2, #2
 80069c0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80069c2:	e09e      	b.n	8006b02 <USBD_GetDescriptor+0x1ee>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80069ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069cc:	f107 020a 	add.w	r2, r7, #10
 80069d0:	4610      	mov	r0, r2
 80069d2:	4798      	blx	r3
 80069d4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	3301      	adds	r3, #1
 80069da:	2202      	movs	r2, #2
 80069dc:	701a      	strb	r2, [r3, #0]
    break;
 80069de:	e090      	b.n	8006b02 <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	885b      	ldrh	r3, [r3, #2]
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	2b05      	cmp	r3, #5
 80069e8:	d856      	bhi.n	8006a98 <USBD_GetDescriptor+0x184>
 80069ea:	a201      	add	r2, pc, #4	; (adr r2, 80069f0 <USBD_GetDescriptor+0xdc>)
 80069ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f0:	08006a09 	.word	0x08006a09
 80069f4:	08006a21 	.word	0x08006a21
 80069f8:	08006a39 	.word	0x08006a39
 80069fc:	08006a51 	.word	0x08006a51
 8006a00:	08006a69 	.word	0x08006a69
 8006a04:	08006a81 	.word	0x08006a81
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	7c12      	ldrb	r2, [r2, #16]
 8006a14:	f107 010a 	add.w	r1, r7, #10
 8006a18:	4610      	mov	r0, r2
 8006a1a:	4798      	blx	r3
 8006a1c:	60f8      	str	r0, [r7, #12]
      break;
 8006a1e:	e040      	b.n	8006aa2 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	7c12      	ldrb	r2, [r2, #16]
 8006a2c:	f107 010a 	add.w	r1, r7, #10
 8006a30:	4610      	mov	r0, r2
 8006a32:	4798      	blx	r3
 8006a34:	60f8      	str	r0, [r7, #12]
      break;
 8006a36:	e034      	b.n	8006aa2 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	7c12      	ldrb	r2, [r2, #16]
 8006a44:	f107 010a 	add.w	r1, r7, #10
 8006a48:	4610      	mov	r0, r2
 8006a4a:	4798      	blx	r3
 8006a4c:	60f8      	str	r0, [r7, #12]
      break;
 8006a4e:	e028      	b.n	8006aa2 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006a56:	691b      	ldr	r3, [r3, #16]
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	7c12      	ldrb	r2, [r2, #16]
 8006a5c:	f107 010a 	add.w	r1, r7, #10
 8006a60:	4610      	mov	r0, r2
 8006a62:	4798      	blx	r3
 8006a64:	60f8      	str	r0, [r7, #12]
      break;
 8006a66:	e01c      	b.n	8006aa2 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006a6e:	695b      	ldr	r3, [r3, #20]
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	7c12      	ldrb	r2, [r2, #16]
 8006a74:	f107 010a 	add.w	r1, r7, #10
 8006a78:	4610      	mov	r0, r2
 8006a7a:	4798      	blx	r3
 8006a7c:	60f8      	str	r0, [r7, #12]
      break;
 8006a7e:	e010      	b.n	8006aa2 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	7c12      	ldrb	r2, [r2, #16]
 8006a8c:	f107 010a 	add.w	r1, r7, #10
 8006a90:	4610      	mov	r0, r2
 8006a92:	4798      	blx	r3
 8006a94:	60f8      	str	r0, [r7, #12]
      break;
 8006a96:	e004      	b.n	8006aa2 <USBD_GetDescriptor+0x18e>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8006a98:	6839      	ldr	r1, [r7, #0]
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f9f9 	bl	8006e92 <USBD_CtlError>
      return;
 8006aa0:	e04b      	b.n	8006b3a <USBD_GetDescriptor+0x226>
#endif
    }
    break;
 8006aa2:	e02e      	b.n	8006b02 <USBD_GetDescriptor+0x1ee>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	7c1b      	ldrb	r3, [r3, #16]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d109      	bne.n	8006ac0 <USBD_GetDescriptor+0x1ac>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ab4:	f107 020a 	add.w	r2, r7, #10
 8006ab8:	4610      	mov	r0, r2
 8006aba:	4798      	blx	r3
 8006abc:	60f8      	str	r0, [r7, #12]
      break;
 8006abe:	e020      	b.n	8006b02 <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8006ac0:	6839      	ldr	r1, [r7, #0]
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 f9e5 	bl	8006e92 <USBD_CtlError>
      return;
 8006ac8:	e037      	b.n	8006b3a <USBD_GetDescriptor+0x226>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	7c1b      	ldrb	r3, [r3, #16]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d10d      	bne.n	8006aee <USBD_GetDescriptor+0x1da>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ada:	f107 020a 	add.w	r2, r7, #10
 8006ade:	4610      	mov	r0, r2
 8006ae0:	4798      	blx	r3
 8006ae2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	2207      	movs	r2, #7
 8006aea:	701a      	strb	r2, [r3, #0]
      break;
 8006aec:	e009      	b.n	8006b02 <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8006aee:	6839      	ldr	r1, [r7, #0]
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 f9ce 	bl	8006e92 <USBD_CtlError>
      return;
 8006af6:	e020      	b.n	8006b3a <USBD_GetDescriptor+0x226>
    }

  default:
     USBD_CtlError(pdev , req);
 8006af8:	6839      	ldr	r1, [r7, #0]
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f9c9 	bl	8006e92 <USBD_CtlError>
    return;
 8006b00:	e01b      	b.n	8006b3a <USBD_GetDescriptor+0x226>
  }

  if((len != 0U) && (req->wLength != 0U))
 8006b02:	897b      	ldrh	r3, [r7, #10]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d011      	beq.n	8006b2c <USBD_GetDescriptor+0x218>
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	88db      	ldrh	r3, [r3, #6]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00d      	beq.n	8006b2c <USBD_GetDescriptor+0x218>
  {

    len = MIN(len, req->wLength);
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	88da      	ldrh	r2, [r3, #6]
 8006b14:	897b      	ldrh	r3, [r7, #10]
 8006b16:	4293      	cmp	r3, r2
 8006b18:	bf28      	it	cs
 8006b1a:	4613      	movcs	r3, r2
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8006b20:	897b      	ldrh	r3, [r7, #10]
 8006b22:	461a      	mov	r2, r3
 8006b24:	68f9      	ldr	r1, [r7, #12]
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 fa1e 	bl	8006f68 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	88db      	ldrh	r3, [r3, #6]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d102      	bne.n	8006b3a <USBD_GetDescriptor+0x226>
  {
   USBD_CtlSendStatus(pdev);
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 fa75 	bl	8007024 <USBD_CtlSendStatus>
  }
}
 8006b3a:	3710      	adds	r7, #16
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	889b      	ldrh	r3, [r3, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d130      	bne.n	8006bb4 <USBD_SetAddress+0x74>
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	88db      	ldrh	r3, [r3, #6]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d12c      	bne.n	8006bb4 <USBD_SetAddress+0x74>
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	885b      	ldrh	r3, [r3, #2]
 8006b5e:	2b7f      	cmp	r3, #127	; 0x7f
 8006b60:	d828      	bhi.n	8006bb4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	885b      	ldrh	r3, [r3, #2]
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b6c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006b74:	2b03      	cmp	r3, #3
 8006b76:	d104      	bne.n	8006b82 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8006b78:	6839      	ldr	r1, [r7, #0]
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 f989 	bl	8006e92 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b80:	e01c      	b.n	8006bbc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	7bfa      	ldrb	r2, [r7, #15]
 8006b86:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006b8a:	7bfb      	ldrb	r3, [r7, #15]
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f001 fc80 	bl	8008494 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 fa45 	bl	8007024 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006b9a:	7bfb      	ldrb	r3, [r7, #15]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d004      	beq.n	8006baa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2202      	movs	r2, #2
 8006ba4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ba8:	e008      	b.n	8006bbc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2201      	movs	r2, #1
 8006bae:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bb2:	e003      	b.n	8006bbc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006bb4:	6839      	ldr	r1, [r7, #0]
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 f96b 	bl	8006e92 <USBD_CtlError>
  }
}
 8006bbc:	bf00      	nop
 8006bbe:	3710      	adds	r7, #16
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	885b      	ldrh	r3, [r3, #2]
 8006bd2:	b2da      	uxtb	r2, r3
 8006bd4:	4b41      	ldr	r3, [pc, #260]	; (8006cdc <USBD_SetConfig+0x118>)
 8006bd6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006bd8:	4b40      	ldr	r3, [pc, #256]	; (8006cdc <USBD_SetConfig+0x118>)
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d904      	bls.n	8006bea <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006be0:	6839      	ldr	r1, [r7, #0]
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 f955 	bl	8006e92 <USBD_CtlError>
 8006be8:	e075      	b.n	8006cd6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d002      	beq.n	8006bfa <USBD_SetConfig+0x36>
 8006bf4:	2b03      	cmp	r3, #3
 8006bf6:	d023      	beq.n	8006c40 <USBD_SetConfig+0x7c>
 8006bf8:	e062      	b.n	8006cc0 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8006bfa:	4b38      	ldr	r3, [pc, #224]	; (8006cdc <USBD_SetConfig+0x118>)
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d01a      	beq.n	8006c38 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8006c02:	4b36      	ldr	r3, [pc, #216]	; (8006cdc <USBD_SetConfig+0x118>)
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	461a      	mov	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2203      	movs	r2, #3
 8006c10:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006c14:	4b31      	ldr	r3, [pc, #196]	; (8006cdc <USBD_SetConfig+0x118>)
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	4619      	mov	r1, r3
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f7ff fa0d 	bl	800603a <USBD_SetClassConfig>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b02      	cmp	r3, #2
 8006c24:	d104      	bne.n	8006c30 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8006c26:	6839      	ldr	r1, [r7, #0]
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 f932 	bl	8006e92 <USBD_CtlError>
          return;
 8006c2e:	e052      	b.n	8006cd6 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 f9f7 	bl	8007024 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8006c36:	e04e      	b.n	8006cd6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 f9f3 	bl	8007024 <USBD_CtlSendStatus>
      break;
 8006c3e:	e04a      	b.n	8006cd6 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006c40:	4b26      	ldr	r3, [pc, #152]	; (8006cdc <USBD_SetConfig+0x118>)
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d112      	bne.n	8006c6e <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8006c50:	4b22      	ldr	r3, [pc, #136]	; (8006cdc <USBD_SetConfig+0x118>)
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	461a      	mov	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8006c5a:	4b20      	ldr	r3, [pc, #128]	; (8006cdc <USBD_SetConfig+0x118>)
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	4619      	mov	r1, r3
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f7ff fa09 	bl	8006078 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f9dc 	bl	8007024 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8006c6c:	e033      	b.n	8006cd6 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8006c6e:	4b1b      	ldr	r3, [pc, #108]	; (8006cdc <USBD_SetConfig+0x118>)
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	461a      	mov	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d01d      	beq.n	8006cb8 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	4619      	mov	r1, r3
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f7ff f9f7 	bl	8006078 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006c8a:	4b14      	ldr	r3, [pc, #80]	; (8006cdc <USBD_SetConfig+0x118>)
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006c94:	4b11      	ldr	r3, [pc, #68]	; (8006cdc <USBD_SetConfig+0x118>)
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	4619      	mov	r1, r3
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f7ff f9cd 	bl	800603a <USBD_SetClassConfig>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b02      	cmp	r3, #2
 8006ca4:	d104      	bne.n	8006cb0 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8006ca6:	6839      	ldr	r1, [r7, #0]
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 f8f2 	bl	8006e92 <USBD_CtlError>
          return;
 8006cae:	e012      	b.n	8006cd6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 f9b7 	bl	8007024 <USBD_CtlSendStatus>
      break;
 8006cb6:	e00e      	b.n	8006cd6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 f9b3 	bl	8007024 <USBD_CtlSendStatus>
      break;
 8006cbe:	e00a      	b.n	8006cd6 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8006cc0:	6839      	ldr	r1, [r7, #0]
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 f8e5 	bl	8006e92 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8006cc8:	4b04      	ldr	r3, [pc, #16]	; (8006cdc <USBD_SetConfig+0x118>)
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	4619      	mov	r1, r3
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f7ff f9d2 	bl	8006078 <USBD_ClrClassConfig>
      break;
 8006cd4:	bf00      	nop
    }
  }
}
 8006cd6:	3708      	adds	r7, #8
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	2000020c 	.word	0x2000020c

08006ce0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	88db      	ldrh	r3, [r3, #6]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d004      	beq.n	8006cfc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8006cf2:	6839      	ldr	r1, [r7, #0]
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 f8cc 	bl	8006e92 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8006cfa:	e021      	b.n	8006d40 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	db17      	blt.n	8006d36 <USBD_GetConfig+0x56>
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	dd02      	ble.n	8006d10 <USBD_GetConfig+0x30>
 8006d0a:	2b03      	cmp	r3, #3
 8006d0c:	d00b      	beq.n	8006d26 <USBD_GetConfig+0x46>
 8006d0e:	e012      	b.n	8006d36 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	3308      	adds	r3, #8
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 f922 	bl	8006f68 <USBD_CtlSendData>
      break;
 8006d24:	e00c      	b.n	8006d40 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	3304      	adds	r3, #4
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 f91a 	bl	8006f68 <USBD_CtlSendData>
      break;
 8006d34:	e004      	b.n	8006d40 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8006d36:	6839      	ldr	r1, [r7, #0]
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 f8aa 	bl	8006e92 <USBD_CtlError>
      break;
 8006d3e:	bf00      	nop
}
 8006d40:	bf00      	nop
 8006d42:	3708      	adds	r7, #8
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	2b02      	cmp	r3, #2
 8006d5c:	d81e      	bhi.n	8006d9c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	88db      	ldrh	r3, [r3, #6]
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d004      	beq.n	8006d70 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006d66:	6839      	ldr	r1, [r7, #0]
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 f892 	bl	8006e92 <USBD_CtlError>
      break;
 8006d6e:	e01a      	b.n	8006da6 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d005      	beq.n	8006d8c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	f043 0202 	orr.w	r2, r3, #2
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	330c      	adds	r3, #12
 8006d90:	2202      	movs	r2, #2
 8006d92:	4619      	mov	r1, r3
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 f8e7 	bl	8006f68 <USBD_CtlSendData>
    break;
 8006d9a:	e004      	b.n	8006da6 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8006d9c:	6839      	ldr	r1, [r7, #0]
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 f877 	bl	8006e92 <USBD_CtlError>
    break;
 8006da4:	bf00      	nop
  }
}
 8006da6:	bf00      	nop
 8006da8:	3708      	adds	r7, #8
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b082      	sub	sp, #8
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
 8006db6:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	885b      	ldrh	r3, [r3, #2]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d106      	bne.n	8006dce <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 f92b 	bl	8007024 <USBD_CtlSendStatus>
  }

}
 8006dce:	bf00      	nop
 8006dd0:	3708      	adds	r7, #8
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b082      	sub	sp, #8
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
 8006dde:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006de6:	3b01      	subs	r3, #1
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	d80b      	bhi.n	8006e04 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	885b      	ldrh	r3, [r3, #2]
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d10c      	bne.n	8006e0e <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 f911 	bl	8007024 <USBD_CtlSendStatus>
    }
    break;
 8006e02:	e004      	b.n	8006e0e <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8006e04:	6839      	ldr	r1, [r7, #0]
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 f843 	bl	8006e92 <USBD_CtlError>
    break;
 8006e0c:	e000      	b.n	8006e10 <USBD_ClrFeature+0x3a>
    break;
 8006e0e:	bf00      	nop
  }
}
 8006e10:	bf00      	nop
 8006e12:	3708      	adds	r7, #8
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	781a      	ldrb	r2, [r3, #0]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	785a      	ldrb	r2, [r3, #1]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	3302      	adds	r3, #2
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	b29a      	uxth	r2, r3
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	3303      	adds	r3, #3
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	021b      	lsls	r3, r3, #8
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	4413      	add	r3, r2
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	3304      	adds	r3, #4
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	3305      	adds	r3, #5
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	021b      	lsls	r3, r3, #8
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	4413      	add	r3, r2
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	3306      	adds	r3, #6
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	3307      	adds	r3, #7
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	021b      	lsls	r3, r3, #8
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	4413      	add	r3, r2
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	80da      	strh	r2, [r3, #6]

}
 8006e86:	bf00      	nop
 8006e88:	370c      	adds	r7, #12
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr

08006e92 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b082      	sub	sp, #8
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
 8006e9a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8006e9c:	2180      	movs	r1, #128	; 0x80
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f001 fa8e 	bl	80083c0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8006ea4:	2100      	movs	r1, #0
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f001 fa8a 	bl	80083c0 <USBD_LL_StallEP>
}
 8006eac:	bf00      	nop
 8006eae:	3708      	adds	r7, #8
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b086      	sub	sp, #24
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d032      	beq.n	8006f30 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006eca:	68f8      	ldr	r0, [r7, #12]
 8006ecc:	f000 f834 	bl	8006f38 <USBD_GetLen>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	005b      	lsls	r3, r3, #1
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006ede:	7dfb      	ldrb	r3, [r7, #23]
 8006ee0:	1c5a      	adds	r2, r3, #1
 8006ee2:	75fa      	strb	r2, [r7, #23]
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	4413      	add	r3, r2
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	7812      	ldrb	r2, [r2, #0]
 8006eee:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006ef0:	7dfb      	ldrb	r3, [r7, #23]
 8006ef2:	1c5a      	adds	r2, r3, #1
 8006ef4:	75fa      	strb	r2, [r7, #23]
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	4413      	add	r3, r2
 8006efc:	2203      	movs	r2, #3
 8006efe:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006f00:	e012      	b.n	8006f28 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	1c5a      	adds	r2, r3, #1
 8006f06:	60fa      	str	r2, [r7, #12]
 8006f08:	7dfa      	ldrb	r2, [r7, #23]
 8006f0a:	1c51      	adds	r1, r2, #1
 8006f0c:	75f9      	strb	r1, [r7, #23]
 8006f0e:	4611      	mov	r1, r2
 8006f10:	68ba      	ldr	r2, [r7, #8]
 8006f12:	440a      	add	r2, r1
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006f18:	7dfb      	ldrb	r3, [r7, #23]
 8006f1a:	1c5a      	adds	r2, r3, #1
 8006f1c:	75fa      	strb	r2, [r7, #23]
 8006f1e:	461a      	mov	r2, r3
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	4413      	add	r3, r2
 8006f24:	2200      	movs	r2, #0
 8006f26:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1e8      	bne.n	8006f02 <USBD_GetString+0x4e>
    }
  }
}
 8006f30:	bf00      	nop
 8006f32:	3718      	adds	r7, #24
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8006f40:	2300      	movs	r3, #0
 8006f42:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8006f44:	e005      	b.n	8006f52 <USBD_GetLen+0x1a>
    {
        len++;
 8006f46:	7bfb      	ldrb	r3, [r7, #15]
 8006f48:	3301      	adds	r3, #1
 8006f4a:	73fb      	strb	r3, [r7, #15]
        buf++;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1f5      	bne.n	8006f46 <USBD_GetLen+0xe>
    }

    return len;
 8006f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3714      	adds	r7, #20
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	4613      	mov	r3, r2
 8006f74:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2202      	movs	r2, #2
 8006f7a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8006f7e:	88fa      	ldrh	r2, [r7, #6]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006f84:	88fa      	ldrh	r2, [r7, #6]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8006f8a:	88fb      	ldrh	r3, [r7, #6]
 8006f8c:	68ba      	ldr	r2, [r7, #8]
 8006f8e:	2100      	movs	r1, #0
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	f001 fa9e 	bl	80084d2 <USBD_LL_Transmit>

  return USBD_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3710      	adds	r7, #16
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	4613      	mov	r3, r2
 8006fac:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8006fae:	88fb      	ldrh	r3, [r7, #6]
 8006fb0:	68ba      	ldr	r2, [r7, #8]
 8006fb2:	2100      	movs	r1, #0
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	f001 fa8c 	bl	80084d2 <USBD_LL_Transmit>

  return USBD_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	4613      	mov	r3, r2
 8006fd0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2203      	movs	r2, #3
 8006fd6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8006fda:	88fa      	ldrh	r2, [r7, #6]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8006fe2:	88fa      	ldrh	r2, [r7, #6]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8006fea:	88fb      	ldrh	r3, [r7, #6]
 8006fec:	68ba      	ldr	r2, [r7, #8]
 8006fee:	2100      	movs	r1, #0
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f001 fa91 	bl	8008518 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3710      	adds	r7, #16
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	4613      	mov	r3, r2
 800700c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800700e:	88fb      	ldrh	r3, [r7, #6]
 8007010:	68ba      	ldr	r2, [r7, #8]
 8007012:	2100      	movs	r1, #0
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f001 fa7f 	bl	8008518 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3710      	adds	r7, #16
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2204      	movs	r2, #4
 8007030:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007034:	2300      	movs	r3, #0
 8007036:	2200      	movs	r2, #0
 8007038:	2100      	movs	r1, #0
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f001 fa49 	bl	80084d2 <USBD_LL_Transmit>

  return USBD_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3708      	adds	r7, #8
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b082      	sub	sp, #8
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2205      	movs	r2, #5
 8007056:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800705a:	2300      	movs	r3, #0
 800705c:	2200      	movs	r2, #0
 800705e:	2100      	movs	r1, #0
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f001 fa59 	bl	8008518 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	3708      	adds	r7, #8
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8007074:	4b16      	ldr	r3, [pc, #88]	; (80070d0 <MX_CAN1_Init+0x60>)
 8007076:	4a17      	ldr	r2, [pc, #92]	; (80070d4 <MX_CAN1_Init+0x64>)
 8007078:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800707a:	4b15      	ldr	r3, [pc, #84]	; (80070d0 <MX_CAN1_Init+0x60>)
 800707c:	2210      	movs	r2, #16
 800707e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8007080:	4b13      	ldr	r3, [pc, #76]	; (80070d0 <MX_CAN1_Init+0x60>)
 8007082:	2200      	movs	r2, #0
 8007084:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007086:	4b12      	ldr	r3, [pc, #72]	; (80070d0 <MX_CAN1_Init+0x60>)
 8007088:	2200      	movs	r2, #0
 800708a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800708c:	4b10      	ldr	r3, [pc, #64]	; (80070d0 <MX_CAN1_Init+0x60>)
 800708e:	2200      	movs	r2, #0
 8007090:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8007092:	4b0f      	ldr	r3, [pc, #60]	; (80070d0 <MX_CAN1_Init+0x60>)
 8007094:	2200      	movs	r2, #0
 8007096:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8007098:	4b0d      	ldr	r3, [pc, #52]	; (80070d0 <MX_CAN1_Init+0x60>)
 800709a:	2200      	movs	r2, #0
 800709c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800709e:	4b0c      	ldr	r3, [pc, #48]	; (80070d0 <MX_CAN1_Init+0x60>)
 80070a0:	2200      	movs	r2, #0
 80070a2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80070a4:	4b0a      	ldr	r3, [pc, #40]	; (80070d0 <MX_CAN1_Init+0x60>)
 80070a6:	2200      	movs	r2, #0
 80070a8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80070aa:	4b09      	ldr	r3, [pc, #36]	; (80070d0 <MX_CAN1_Init+0x60>)
 80070ac:	2200      	movs	r2, #0
 80070ae:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80070b0:	4b07      	ldr	r3, [pc, #28]	; (80070d0 <MX_CAN1_Init+0x60>)
 80070b2:	2200      	movs	r2, #0
 80070b4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80070b6:	4b06      	ldr	r3, [pc, #24]	; (80070d0 <MX_CAN1_Init+0x60>)
 80070b8:	2200      	movs	r2, #0
 80070ba:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80070bc:	4804      	ldr	r0, [pc, #16]	; (80070d0 <MX_CAN1_Init+0x60>)
 80070be:	f7f9 fab5 	bl	800062c <HAL_CAN_Init>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d001      	beq.n	80070cc <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80070c8:	f000 fab6 	bl	8007638 <Error_Handler>
  }

}
 80070cc:	bf00      	nop
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	20000220 	.word	0x20000220
 80070d4:	40006400 	.word	0x40006400

080070d8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b08a      	sub	sp, #40	; 0x28
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070e0:	f107 0314 	add.w	r3, r7, #20
 80070e4:	2200      	movs	r2, #0
 80070e6:	601a      	str	r2, [r3, #0]
 80070e8:	605a      	str	r2, [r3, #4]
 80070ea:	609a      	str	r2, [r3, #8]
 80070ec:	60da      	str	r2, [r3, #12]
 80070ee:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a29      	ldr	r2, [pc, #164]	; (800719c <HAL_CAN_MspInit+0xc4>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d14c      	bne.n	8007194 <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80070fa:	2300      	movs	r3, #0
 80070fc:	613b      	str	r3, [r7, #16]
 80070fe:	4b28      	ldr	r3, [pc, #160]	; (80071a0 <HAL_CAN_MspInit+0xc8>)
 8007100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007102:	4a27      	ldr	r2, [pc, #156]	; (80071a0 <HAL_CAN_MspInit+0xc8>)
 8007104:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007108:	6413      	str	r3, [r2, #64]	; 0x40
 800710a:	4b25      	ldr	r3, [pc, #148]	; (80071a0 <HAL_CAN_MspInit+0xc8>)
 800710c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007112:	613b      	str	r3, [r7, #16]
 8007114:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007116:	2300      	movs	r3, #0
 8007118:	60fb      	str	r3, [r7, #12]
 800711a:	4b21      	ldr	r3, [pc, #132]	; (80071a0 <HAL_CAN_MspInit+0xc8>)
 800711c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800711e:	4a20      	ldr	r2, [pc, #128]	; (80071a0 <HAL_CAN_MspInit+0xc8>)
 8007120:	f043 0302 	orr.w	r3, r3, #2
 8007124:	6313      	str	r3, [r2, #48]	; 0x30
 8007126:	4b1e      	ldr	r3, [pc, #120]	; (80071a0 <HAL_CAN_MspInit+0xc8>)
 8007128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800712a:	f003 0302 	and.w	r3, r3, #2
 800712e:	60fb      	str	r3, [r7, #12]
 8007130:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8007132:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007136:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007138:	2302      	movs	r3, #2
 800713a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800713c:	2300      	movs	r3, #0
 800713e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007140:	2303      	movs	r3, #3
 8007142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8007144:	2309      	movs	r3, #9
 8007146:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007148:	f107 0314 	add.w	r3, r7, #20
 800714c:	4619      	mov	r1, r3
 800714e:	4815      	ldr	r0, [pc, #84]	; (80071a4 <HAL_CAN_MspInit+0xcc>)
 8007150:	f7f9 fece 	bl	8000ef0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8007154:	2200      	movs	r2, #0
 8007156:	2100      	movs	r1, #0
 8007158:	2013      	movs	r0, #19
 800715a:	f7f9 fe70 	bl	8000e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800715e:	2013      	movs	r0, #19
 8007160:	f7f9 fe89 	bl	8000e76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8007164:	2200      	movs	r2, #0
 8007166:	2100      	movs	r1, #0
 8007168:	2014      	movs	r0, #20
 800716a:	f7f9 fe68 	bl	8000e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800716e:	2014      	movs	r0, #20
 8007170:	f7f9 fe81 	bl	8000e76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8007174:	2200      	movs	r2, #0
 8007176:	2100      	movs	r1, #0
 8007178:	2015      	movs	r0, #21
 800717a:	f7f9 fe60 	bl	8000e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800717e:	2015      	movs	r0, #21
 8007180:	f7f9 fe79 	bl	8000e76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8007184:	2200      	movs	r2, #0
 8007186:	2100      	movs	r1, #0
 8007188:	2016      	movs	r0, #22
 800718a:	f7f9 fe58 	bl	8000e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800718e:	2016      	movs	r0, #22
 8007190:	f7f9 fe71 	bl	8000e76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8007194:	bf00      	nop
 8007196:	3728      	adds	r7, #40	; 0x28
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}
 800719c:	40006400 	.word	0x40006400
 80071a0:	40023800 	.word	0x40023800
 80071a4:	40020400 	.word	0x40020400

080071a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b08a      	sub	sp, #40	; 0x28
 80071ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071ae:	f107 0314 	add.w	r3, r7, #20
 80071b2:	2200      	movs	r2, #0
 80071b4:	601a      	str	r2, [r3, #0]
 80071b6:	605a      	str	r2, [r3, #4]
 80071b8:	609a      	str	r2, [r3, #8]
 80071ba:	60da      	str	r2, [r3, #12]
 80071bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80071be:	2300      	movs	r3, #0
 80071c0:	613b      	str	r3, [r7, #16]
 80071c2:	4b52      	ldr	r3, [pc, #328]	; (800730c <MX_GPIO_Init+0x164>)
 80071c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c6:	4a51      	ldr	r2, [pc, #324]	; (800730c <MX_GPIO_Init+0x164>)
 80071c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071cc:	6313      	str	r3, [r2, #48]	; 0x30
 80071ce:	4b4f      	ldr	r3, [pc, #316]	; (800730c <MX_GPIO_Init+0x164>)
 80071d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071d6:	613b      	str	r3, [r7, #16]
 80071d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80071da:	2300      	movs	r3, #0
 80071dc:	60fb      	str	r3, [r7, #12]
 80071de:	4b4b      	ldr	r3, [pc, #300]	; (800730c <MX_GPIO_Init+0x164>)
 80071e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e2:	4a4a      	ldr	r2, [pc, #296]	; (800730c <MX_GPIO_Init+0x164>)
 80071e4:	f043 0304 	orr.w	r3, r3, #4
 80071e8:	6313      	str	r3, [r2, #48]	; 0x30
 80071ea:	4b48      	ldr	r3, [pc, #288]	; (800730c <MX_GPIO_Init+0x164>)
 80071ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ee:	f003 0304 	and.w	r3, r3, #4
 80071f2:	60fb      	str	r3, [r7, #12]
 80071f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80071f6:	2300      	movs	r3, #0
 80071f8:	60bb      	str	r3, [r7, #8]
 80071fa:	4b44      	ldr	r3, [pc, #272]	; (800730c <MX_GPIO_Init+0x164>)
 80071fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071fe:	4a43      	ldr	r2, [pc, #268]	; (800730c <MX_GPIO_Init+0x164>)
 8007200:	f043 0301 	orr.w	r3, r3, #1
 8007204:	6313      	str	r3, [r2, #48]	; 0x30
 8007206:	4b41      	ldr	r3, [pc, #260]	; (800730c <MX_GPIO_Init+0x164>)
 8007208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800720a:	f003 0301 	and.w	r3, r3, #1
 800720e:	60bb      	str	r3, [r7, #8]
 8007210:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007212:	2300      	movs	r3, #0
 8007214:	607b      	str	r3, [r7, #4]
 8007216:	4b3d      	ldr	r3, [pc, #244]	; (800730c <MX_GPIO_Init+0x164>)
 8007218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800721a:	4a3c      	ldr	r2, [pc, #240]	; (800730c <MX_GPIO_Init+0x164>)
 800721c:	f043 0302 	orr.w	r3, r3, #2
 8007220:	6313      	str	r3, [r2, #48]	; 0x30
 8007222:	4b3a      	ldr	r3, [pc, #232]	; (800730c <MX_GPIO_Init+0x164>)
 8007224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007226:	f003 0302 	and.w	r3, r3, #2
 800722a:	607b      	str	r3, [r7, #4]
 800722c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800722e:	2300      	movs	r3, #0
 8007230:	603b      	str	r3, [r7, #0]
 8007232:	4b36      	ldr	r3, [pc, #216]	; (800730c <MX_GPIO_Init+0x164>)
 8007234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007236:	4a35      	ldr	r2, [pc, #212]	; (800730c <MX_GPIO_Init+0x164>)
 8007238:	f043 0308 	orr.w	r3, r3, #8
 800723c:	6313      	str	r3, [r2, #48]	; 0x30
 800723e:	4b33      	ldr	r3, [pc, #204]	; (800730c <MX_GPIO_Init+0x164>)
 8007240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007242:	f003 0308 	and.w	r3, r3, #8
 8007246:	603b      	str	r3, [r7, #0]
 8007248:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800724a:	2200      	movs	r2, #0
 800724c:	21f0      	movs	r1, #240	; 0xf0
 800724e:	4830      	ldr	r0, [pc, #192]	; (8007310 <MX_GPIO_Init+0x168>)
 8007250:	f7f9 ffe0 	bl	8001214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|nrst_c1_Pin|nrst_c2_Pin 
 8007254:	2200      	movs	r2, #0
 8007256:	f241 3130 	movw	r1, #4912	; 0x1330
 800725a:	482e      	ldr	r0, [pc, #184]	; (8007314 <MX_GPIO_Init+0x16c>)
 800725c:	f7f9 ffda 	bl	8001214 <HAL_GPIO_WritePin>
                          |power_c1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|max485_dir_Pin|max485_dir_alt_Pin 
 8007260:	2200      	movs	r2, #0
 8007262:	f240 411f 	movw	r1, #1055	; 0x41f
 8007266:	482c      	ldr	r0, [pc, #176]	; (8007318 <MX_GPIO_Init+0x170>)
 8007268:	f7f9 ffd4 	bl	8001214 <HAL_GPIO_WritePin>
                          |boot_c1_Pin|boot_c2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(power_c2_GPIO_Port, power_c2_Pin, GPIO_PIN_RESET);
 800726c:	2200      	movs	r2, #0
 800726e:	2104      	movs	r1, #4
 8007270:	482a      	ldr	r0, [pc, #168]	; (800731c <MX_GPIO_Init+0x174>)
 8007272:	f7f9 ffcf 	bl	8001214 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8007276:	230f      	movs	r3, #15
 8007278:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800727a:	2300      	movs	r3, #0
 800727c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800727e:	2300      	movs	r3, #0
 8007280:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007282:	f107 0314 	add.w	r3, r7, #20
 8007286:	4619      	mov	r1, r3
 8007288:	4822      	ldr	r0, [pc, #136]	; (8007314 <MX_GPIO_Init+0x16c>)
 800728a:	f7f9 fe31 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800728e:	23f0      	movs	r3, #240	; 0xf0
 8007290:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007292:	2301      	movs	r3, #1
 8007294:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007296:	2300      	movs	r3, #0
 8007298:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800729a:	2300      	movs	r3, #0
 800729c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800729e:	f107 0314 	add.w	r3, r7, #20
 80072a2:	4619      	mov	r1, r3
 80072a4:	481a      	ldr	r0, [pc, #104]	; (8007310 <MX_GPIO_Init+0x168>)
 80072a6:	f7f9 fe23 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PCPin PCPin 
                           PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|nrst_c1_Pin|nrst_c2_Pin 
 80072aa:	f241 3330 	movw	r3, #4912	; 0x1330
 80072ae:	617b      	str	r3, [r7, #20]
                          |power_c1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80072b0:	2301      	movs	r3, #1
 80072b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072b4:	2300      	movs	r3, #0
 80072b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072b8:	2300      	movs	r3, #0
 80072ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80072bc:	f107 0314 	add.w	r3, r7, #20
 80072c0:	4619      	mov	r1, r3
 80072c2:	4814      	ldr	r0, [pc, #80]	; (8007314 <MX_GPIO_Init+0x16c>)
 80072c4:	f7f9 fe14 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PBPin PBPin 
                           PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|max485_dir_Pin|max485_dir_alt_Pin 
 80072c8:	f240 431f 	movw	r3, #1055	; 0x41f
 80072cc:	617b      	str	r3, [r7, #20]
                          |boot_c1_Pin|boot_c2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80072ce:	2301      	movs	r3, #1
 80072d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072d2:	2300      	movs	r3, #0
 80072d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072d6:	2300      	movs	r3, #0
 80072d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072da:	f107 0314 	add.w	r3, r7, #20
 80072de:	4619      	mov	r1, r3
 80072e0:	480d      	ldr	r0, [pc, #52]	; (8007318 <MX_GPIO_Init+0x170>)
 80072e2:	f7f9 fe05 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = power_c2_Pin;
 80072e6:	2304      	movs	r3, #4
 80072e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80072ea:	2301      	movs	r3, #1
 80072ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072ee:	2300      	movs	r3, #0
 80072f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072f2:	2300      	movs	r3, #0
 80072f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(power_c2_GPIO_Port, &GPIO_InitStruct);
 80072f6:	f107 0314 	add.w	r3, r7, #20
 80072fa:	4619      	mov	r1, r3
 80072fc:	4807      	ldr	r0, [pc, #28]	; (800731c <MX_GPIO_Init+0x174>)
 80072fe:	f7f9 fdf7 	bl	8000ef0 <HAL_GPIO_Init>

}
 8007302:	bf00      	nop
 8007304:	3728      	adds	r7, #40	; 0x28
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	40023800 	.word	0x40023800
 8007310:	40020000 	.word	0x40020000
 8007314:	40020800 	.word	0x40020800
 8007318:	40020400 	.word	0x40020400
 800731c:	40020c00 	.word	0x40020c00

08007320 <HAL_TIM_PeriodElapsedCallback>:
#include "data_struct.h"

COUNTERS g_counters;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a0a      	ldr	r2, [pc, #40]	; (8007358 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d104      	bne.n	800733c <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1);
 8007332:	2103      	movs	r1, #3
 8007334:	4809      	ldr	r0, [pc, #36]	; (800735c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8007336:	f7f9 ff86 	bl	8001246 <HAL_GPIO_TogglePin>
	}
	else if(htim->Instance == TIM7)
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5);
	}
}
 800733a:	e008      	b.n	800734e <HAL_TIM_PeriodElapsedCallback+0x2e>
	else if(htim->Instance == TIM7)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a07      	ldr	r2, [pc, #28]	; (8007360 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d103      	bne.n	800734e <HAL_TIM_PeriodElapsedCallback+0x2e>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5);
 8007346:	2130      	movs	r1, #48	; 0x30
 8007348:	4806      	ldr	r0, [pc, #24]	; (8007364 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800734a:	f7f9 ff7c 	bl	8001246 <HAL_GPIO_TogglePin>
}
 800734e:	bf00      	nop
 8007350:	3708      	adds	r7, #8
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	40001000 	.word	0x40001000
 800735c:	40020400 	.word	0x40020400
 8007360:	40001400 	.word	0x40001400
 8007364:	40020800 	.word	0x40020800

08007368 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a22      	ldr	r2, [pc, #136]	; (8007400 <HAL_UART_TxCpltCallback+0x98>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d105      	bne.n	8007386 <HAL_UART_TxCpltCallback+0x1e>
	{
		g_counters.usart1TxCounter++;
 800737a:	4b22      	ldr	r3, [pc, #136]	; (8007404 <HAL_UART_TxCpltCallback+0x9c>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	3301      	adds	r3, #1
 8007380:	4a20      	ldr	r2, [pc, #128]	; (8007404 <HAL_UART_TxCpltCallback+0x9c>)
 8007382:	6013      	str	r3, [r2, #0]
	}
	else if(huart->Instance == USART6)
	{
		g_counters.usart6TxCounter++;
	}
}
 8007384:	e035      	b.n	80073f2 <HAL_UART_TxCpltCallback+0x8a>
	else if(huart->Instance == USART2)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a1f      	ldr	r2, [pc, #124]	; (8007408 <HAL_UART_TxCpltCallback+0xa0>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d105      	bne.n	800739c <HAL_UART_TxCpltCallback+0x34>
		g_counters.usart2TxCounter++;
 8007390:	4b1c      	ldr	r3, [pc, #112]	; (8007404 <HAL_UART_TxCpltCallback+0x9c>)
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	3301      	adds	r3, #1
 8007396:	4a1b      	ldr	r2, [pc, #108]	; (8007404 <HAL_UART_TxCpltCallback+0x9c>)
 8007398:	6093      	str	r3, [r2, #8]
}
 800739a:	e02a      	b.n	80073f2 <HAL_UART_TxCpltCallback+0x8a>
	else if(huart->Instance == USART3)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a1a      	ldr	r2, [pc, #104]	; (800740c <HAL_UART_TxCpltCallback+0xa4>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d105      	bne.n	80073b2 <HAL_UART_TxCpltCallback+0x4a>
		g_counters.usart3TxCounter++;
 80073a6:	4b17      	ldr	r3, [pc, #92]	; (8007404 <HAL_UART_TxCpltCallback+0x9c>)
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	3301      	adds	r3, #1
 80073ac:	4a15      	ldr	r2, [pc, #84]	; (8007404 <HAL_UART_TxCpltCallback+0x9c>)
 80073ae:	6113      	str	r3, [r2, #16]
}
 80073b0:	e01f      	b.n	80073f2 <HAL_UART_TxCpltCallback+0x8a>
	else if(huart->Instance == UART4)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a16      	ldr	r2, [pc, #88]	; (8007410 <HAL_UART_TxCpltCallback+0xa8>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d105      	bne.n	80073c8 <HAL_UART_TxCpltCallback+0x60>
		g_counters.usart4TxCounter++;
 80073bc:	4b11      	ldr	r3, [pc, #68]	; (8007404 <HAL_UART_TxCpltCallback+0x9c>)
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	3301      	adds	r3, #1
 80073c2:	4a10      	ldr	r2, [pc, #64]	; (8007404 <HAL_UART_TxCpltCallback+0x9c>)
 80073c4:	6193      	str	r3, [r2, #24]
}
 80073c6:	e014      	b.n	80073f2 <HAL_UART_TxCpltCallback+0x8a>
	else if(huart->Instance == UART5)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a11      	ldr	r2, [pc, #68]	; (8007414 <HAL_UART_TxCpltCallback+0xac>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d105      	bne.n	80073de <HAL_UART_TxCpltCallback+0x76>
		g_counters.usart5TxCounter++;
 80073d2:	4b0c      	ldr	r3, [pc, #48]	; (8007404 <HAL_UART_TxCpltCallback+0x9c>)
 80073d4:	6a1b      	ldr	r3, [r3, #32]
 80073d6:	3301      	adds	r3, #1
 80073d8:	4a0a      	ldr	r2, [pc, #40]	; (8007404 <HAL_UART_TxCpltCallback+0x9c>)
 80073da:	6213      	str	r3, [r2, #32]
}
 80073dc:	e009      	b.n	80073f2 <HAL_UART_TxCpltCallback+0x8a>
	else if(huart->Instance == USART6)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a0d      	ldr	r2, [pc, #52]	; (8007418 <HAL_UART_TxCpltCallback+0xb0>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d104      	bne.n	80073f2 <HAL_UART_TxCpltCallback+0x8a>
		g_counters.usart6TxCounter++;
 80073e8:	4b06      	ldr	r3, [pc, #24]	; (8007404 <HAL_UART_TxCpltCallback+0x9c>)
 80073ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ec:	3301      	adds	r3, #1
 80073ee:	4a05      	ldr	r2, [pc, #20]	; (8007404 <HAL_UART_TxCpltCallback+0x9c>)
 80073f0:	6293      	str	r3, [r2, #40]	; 0x28
}
 80073f2:	bf00      	nop
 80073f4:	370c      	adds	r7, #12
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	40011000 	.word	0x40011000
 8007404:	20000248 	.word	0x20000248
 8007408:	40004400 	.word	0x40004400
 800740c:	40004800 	.word	0x40004800
 8007410:	40004c00 	.word	0x40004c00
 8007414:	40005000 	.word	0x40005000
 8007418:	40011400 	.word	0x40011400

0800741c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a22      	ldr	r2, [pc, #136]	; (80074b4 <HAL_UART_RxCpltCallback+0x98>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d105      	bne.n	800743a <HAL_UART_RxCpltCallback+0x1e>
	{
		g_counters.usart1RxCounter++;
 800742e:	4b22      	ldr	r3, [pc, #136]	; (80074b8 <HAL_UART_RxCpltCallback+0x9c>)
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	3301      	adds	r3, #1
 8007434:	4a20      	ldr	r2, [pc, #128]	; (80074b8 <HAL_UART_RxCpltCallback+0x9c>)
 8007436:	6053      	str	r3, [r2, #4]
	}
	else if(huart->Instance == USART6)
	{
		g_counters.usart6RxCounter++;
	}
}
 8007438:	e035      	b.n	80074a6 <HAL_UART_RxCpltCallback+0x8a>
	else if(huart->Instance == USART2)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a1f      	ldr	r2, [pc, #124]	; (80074bc <HAL_UART_RxCpltCallback+0xa0>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d105      	bne.n	8007450 <HAL_UART_RxCpltCallback+0x34>
		g_counters.usart2RxCounter++;
 8007444:	4b1c      	ldr	r3, [pc, #112]	; (80074b8 <HAL_UART_RxCpltCallback+0x9c>)
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	3301      	adds	r3, #1
 800744a:	4a1b      	ldr	r2, [pc, #108]	; (80074b8 <HAL_UART_RxCpltCallback+0x9c>)
 800744c:	60d3      	str	r3, [r2, #12]
}
 800744e:	e02a      	b.n	80074a6 <HAL_UART_RxCpltCallback+0x8a>
	else if(huart->Instance == USART3)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a1a      	ldr	r2, [pc, #104]	; (80074c0 <HAL_UART_RxCpltCallback+0xa4>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d105      	bne.n	8007466 <HAL_UART_RxCpltCallback+0x4a>
		g_counters.usart3RxCounter++;
 800745a:	4b17      	ldr	r3, [pc, #92]	; (80074b8 <HAL_UART_RxCpltCallback+0x9c>)
 800745c:	695b      	ldr	r3, [r3, #20]
 800745e:	3301      	adds	r3, #1
 8007460:	4a15      	ldr	r2, [pc, #84]	; (80074b8 <HAL_UART_RxCpltCallback+0x9c>)
 8007462:	6153      	str	r3, [r2, #20]
}
 8007464:	e01f      	b.n	80074a6 <HAL_UART_RxCpltCallback+0x8a>
	else if(huart->Instance == UART4)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a16      	ldr	r2, [pc, #88]	; (80074c4 <HAL_UART_RxCpltCallback+0xa8>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d105      	bne.n	800747c <HAL_UART_RxCpltCallback+0x60>
		g_counters.usart4RxCounter++;
 8007470:	4b11      	ldr	r3, [pc, #68]	; (80074b8 <HAL_UART_RxCpltCallback+0x9c>)
 8007472:	69db      	ldr	r3, [r3, #28]
 8007474:	3301      	adds	r3, #1
 8007476:	4a10      	ldr	r2, [pc, #64]	; (80074b8 <HAL_UART_RxCpltCallback+0x9c>)
 8007478:	61d3      	str	r3, [r2, #28]
}
 800747a:	e014      	b.n	80074a6 <HAL_UART_RxCpltCallback+0x8a>
	else if(huart->Instance == UART5)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a11      	ldr	r2, [pc, #68]	; (80074c8 <HAL_UART_RxCpltCallback+0xac>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d105      	bne.n	8007492 <HAL_UART_RxCpltCallback+0x76>
		g_counters.usart5RxCounter++;
 8007486:	4b0c      	ldr	r3, [pc, #48]	; (80074b8 <HAL_UART_RxCpltCallback+0x9c>)
 8007488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748a:	3301      	adds	r3, #1
 800748c:	4a0a      	ldr	r2, [pc, #40]	; (80074b8 <HAL_UART_RxCpltCallback+0x9c>)
 800748e:	6253      	str	r3, [r2, #36]	; 0x24
}
 8007490:	e009      	b.n	80074a6 <HAL_UART_RxCpltCallback+0x8a>
	else if(huart->Instance == USART6)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a0d      	ldr	r2, [pc, #52]	; (80074cc <HAL_UART_RxCpltCallback+0xb0>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d104      	bne.n	80074a6 <HAL_UART_RxCpltCallback+0x8a>
		g_counters.usart6RxCounter++;
 800749c:	4b06      	ldr	r3, [pc, #24]	; (80074b8 <HAL_UART_RxCpltCallback+0x9c>)
 800749e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a0:	3301      	adds	r3, #1
 80074a2:	4a05      	ldr	r2, [pc, #20]	; (80074b8 <HAL_UART_RxCpltCallback+0x9c>)
 80074a4:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80074a6:	bf00      	nop
 80074a8:	370c      	adds	r7, #12
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop
 80074b4:	40011000 	.word	0x40011000
 80074b8:	20000248 	.word	0x20000248
 80074bc:	40004400 	.word	0x40004400
 80074c0:	40004800 	.word	0x40004800
 80074c4:	40004c00 	.word	0x40004c00
 80074c8:	40005000 	.word	0x40005000
 80074cc:	40011400 	.word	0x40011400

080074d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80074d4:	f7f9 f816 	bl	8000504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80074d8:	f000 f824 	bl	8007524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80074dc:	f7ff fe64 	bl	80071a8 <MX_GPIO_Init>
  MX_CAN1_Init();
 80074e0:	f7ff fdc6 	bl	8007070 <MX_CAN1_Init>
  MX_UART4_Init();
 80074e4:	f000 faa0 	bl	8007a28 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80074e8:	f000 fac8 	bl	8007a7c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80074ec:	f000 faf0 	bl	8007ad0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80074f0:	f000 fb18 	bl	8007b24 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80074f4:	f000 fb40 	bl	8007b78 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 80074f8:	f000 f9e4 	bl	80078c4 <MX_TIM6_Init>
  MX_TIM7_Init();
 80074fc:	f000 fa18 	bl	8007930 <MX_TIM7_Init>
  MX_USB_DEVICE_Init();
 8007500:	f000 fca8 	bl	8007e54 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim6);
 8007504:	4805      	ldr	r0, [pc, #20]	; (800751c <main+0x4c>)
 8007506:	f7fc f8f2 	bl	80036ee <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 800750a:	4805      	ldr	r0, [pc, #20]	; (8007520 <main+0x50>)
 800750c:	f7fc f8ef 	bl	80036ee <HAL_TIM_Base_Start_IT>
//
//	    uint8_t sendData = "HELLO WORLD\r\n";
//
//	    CDC_Transmit_FS(sendData, sizeof(sendData));

	    HAL_Delay(500);
 8007510:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007514:	f7f9 f868 	bl	80005e8 <HAL_Delay>
 8007518:	e7fa      	b.n	8007510 <main+0x40>
 800751a:	bf00      	nop
 800751c:	20000290 	.word	0x20000290
 8007520:	200002d0 	.word	0x200002d0

08007524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b0ac      	sub	sp, #176	; 0xb0
 8007528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800752a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800752e:	2234      	movs	r2, #52	; 0x34
 8007530:	2100      	movs	r1, #0
 8007532:	4618      	mov	r0, r3
 8007534:	f001 fa24 	bl	8008980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007538:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800753c:	2200      	movs	r2, #0
 800753e:	601a      	str	r2, [r3, #0]
 8007540:	605a      	str	r2, [r3, #4]
 8007542:	609a      	str	r2, [r3, #8]
 8007544:	60da      	str	r2, [r3, #12]
 8007546:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007548:	f107 030c 	add.w	r3, r7, #12
 800754c:	225c      	movs	r2, #92	; 0x5c
 800754e:	2100      	movs	r1, #0
 8007550:	4618      	mov	r0, r3
 8007552:	f001 fa15 	bl	8008980 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007556:	2300      	movs	r3, #0
 8007558:	60bb      	str	r3, [r7, #8]
 800755a:	4b35      	ldr	r3, [pc, #212]	; (8007630 <SystemClock_Config+0x10c>)
 800755c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755e:	4a34      	ldr	r2, [pc, #208]	; (8007630 <SystemClock_Config+0x10c>)
 8007560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007564:	6413      	str	r3, [r2, #64]	; 0x40
 8007566:	4b32      	ldr	r3, [pc, #200]	; (8007630 <SystemClock_Config+0x10c>)
 8007568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800756e:	60bb      	str	r3, [r7, #8]
 8007570:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007572:	2300      	movs	r3, #0
 8007574:	607b      	str	r3, [r7, #4]
 8007576:	4b2f      	ldr	r3, [pc, #188]	; (8007634 <SystemClock_Config+0x110>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a2e      	ldr	r2, [pc, #184]	; (8007634 <SystemClock_Config+0x110>)
 800757c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007580:	6013      	str	r3, [r2, #0]
 8007582:	4b2c      	ldr	r3, [pc, #176]	; (8007634 <SystemClock_Config+0x110>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800758a:	607b      	str	r3, [r7, #4]
 800758c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800758e:	2301      	movs	r3, #1
 8007590:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007592:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007596:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800759a:	2302      	movs	r3, #2
 800759c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80075a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80075a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 8;
 80075a8:	2308      	movs	r3, #8
 80075aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80075ae:	23a8      	movs	r3, #168	; 0xa8
 80075b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80075b4:	2302      	movs	r3, #2
 80075b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80075ba:	2307      	movs	r3, #7
 80075bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80075c0:	2302      	movs	r3, #2
 80075c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80075c6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80075ca:	4618      	mov	r0, r3
 80075cc:	f7fb fe0a 	bl	80031e4 <HAL_RCC_OscConfig>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d001      	beq.n	80075da <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80075d6:	f000 f82f 	bl	8007638 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80075da:	230f      	movs	r3, #15
 80075dc:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80075de:	2302      	movs	r3, #2
 80075e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80075e2:	2300      	movs	r3, #0
 80075e4:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80075e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80075ea:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80075ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80075f0:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80075f2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80075f6:	2105      	movs	r1, #5
 80075f8:	4618      	mov	r0, r3
 80075fa:	f7fb f815 	bl	8002628 <HAL_RCC_ClockConfig>
 80075fe:	4603      	mov	r3, r0
 8007600:	2b00      	cmp	r3, #0
 8007602:	d001      	beq.n	8007608 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8007604:	f000 f818 	bl	8007638 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8007608:	f44f 7380 	mov.w	r3, #256	; 0x100
 800760c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800760e:	2300      	movs	r3, #0
 8007610:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007612:	f107 030c 	add.w	r3, r7, #12
 8007616:	4618      	mov	r0, r3
 8007618:	f7fb f91c 	bl	8002854 <HAL_RCCEx_PeriphCLKConfig>
 800761c:	4603      	mov	r3, r0
 800761e:	2b00      	cmp	r3, #0
 8007620:	d001      	beq.n	8007626 <SystemClock_Config+0x102>
  {
    Error_Handler();
 8007622:	f000 f809 	bl	8007638 <Error_Handler>
  }
}
 8007626:	bf00      	nop
 8007628:	37b0      	adds	r7, #176	; 0xb0
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	40023800 	.word	0x40023800
 8007634:	40007000 	.word	0x40007000

08007638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007638:	b480      	push	{r7}
 800763a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800763c:	bf00      	nop
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr
	...

08007648 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800764e:	2300      	movs	r3, #0
 8007650:	607b      	str	r3, [r7, #4]
 8007652:	4b13      	ldr	r3, [pc, #76]	; (80076a0 <HAL_MspInit+0x58>)
 8007654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007656:	4a12      	ldr	r2, [pc, #72]	; (80076a0 <HAL_MspInit+0x58>)
 8007658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800765c:	6453      	str	r3, [r2, #68]	; 0x44
 800765e:	4b10      	ldr	r3, [pc, #64]	; (80076a0 <HAL_MspInit+0x58>)
 8007660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007666:	607b      	str	r3, [r7, #4]
 8007668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800766a:	2300      	movs	r3, #0
 800766c:	603b      	str	r3, [r7, #0]
 800766e:	4b0c      	ldr	r3, [pc, #48]	; (80076a0 <HAL_MspInit+0x58>)
 8007670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007672:	4a0b      	ldr	r2, [pc, #44]	; (80076a0 <HAL_MspInit+0x58>)
 8007674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007678:	6413      	str	r3, [r2, #64]	; 0x40
 800767a:	4b09      	ldr	r3, [pc, #36]	; (80076a0 <HAL_MspInit+0x58>)
 800767c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007682:	603b      	str	r3, [r7, #0]
 8007684:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8007686:	2200      	movs	r2, #0
 8007688:	2100      	movs	r1, #0
 800768a:	2005      	movs	r0, #5
 800768c:	f7f9 fbd7 	bl	8000e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8007690:	2005      	movs	r0, #5
 8007692:	f7f9 fbf0 	bl	8000e76 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007696:	bf00      	nop
 8007698:	3708      	adds	r7, #8
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	40023800 	.word	0x40023800

080076a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80076a4:	b480      	push	{r7}
 80076a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80076a8:	bf00      	nop
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr

080076b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80076b2:	b480      	push	{r7}
 80076b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80076b6:	e7fe      	b.n	80076b6 <HardFault_Handler+0x4>

080076b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80076b8:	b480      	push	{r7}
 80076ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80076bc:	e7fe      	b.n	80076bc <MemManage_Handler+0x4>

080076be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80076be:	b480      	push	{r7}
 80076c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80076c2:	e7fe      	b.n	80076c2 <BusFault_Handler+0x4>

080076c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80076c4:	b480      	push	{r7}
 80076c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80076c8:	e7fe      	b.n	80076c8 <UsageFault_Handler+0x4>

080076ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80076ca:	b480      	push	{r7}
 80076cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80076ce:	bf00      	nop
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80076d8:	b480      	push	{r7}
 80076da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80076dc:	bf00      	nop
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr

080076e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80076e6:	b480      	push	{r7}
 80076e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80076ea:	bf00      	nop
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80076f8:	f7f8 ff56 	bl	80005a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80076fc:	bf00      	nop
 80076fe:	bd80      	pop	{r7, pc}

08007700 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8007700:	b480      	push	{r7}
 8007702:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8007704:	bf00      	nop
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr
	...

08007710 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007714:	4802      	ldr	r0, [pc, #8]	; (8007720 <CAN1_TX_IRQHandler+0x10>)
 8007716:	f7f9 f884 	bl	8000822 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800771a:	bf00      	nop
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	20000220 	.word	0x20000220

08007724 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007728:	4802      	ldr	r0, [pc, #8]	; (8007734 <CAN1_RX0_IRQHandler+0x10>)
 800772a:	f7f9 f87a 	bl	8000822 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800772e:	bf00      	nop
 8007730:	bd80      	pop	{r7, pc}
 8007732:	bf00      	nop
 8007734:	20000220 	.word	0x20000220

08007738 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800773c:	4802      	ldr	r0, [pc, #8]	; (8007748 <CAN1_RX1_IRQHandler+0x10>)
 800773e:	f7f9 f870 	bl	8000822 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8007742:	bf00      	nop
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	20000220 	.word	0x20000220

0800774c <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007750:	4802      	ldr	r0, [pc, #8]	; (800775c <CAN1_SCE_IRQHandler+0x10>)
 8007752:	f7f9 f866 	bl	8000822 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8007756:	bf00      	nop
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	20000220 	.word	0x20000220

08007760 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007764:	4802      	ldr	r0, [pc, #8]	; (8007770 <USART1_IRQHandler+0x10>)
 8007766:	f7fc fa5d 	bl	8003c24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800776a:	bf00      	nop
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	20000350 	.word	0x20000350

08007774 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007778:	4802      	ldr	r0, [pc, #8]	; (8007784 <USART2_IRQHandler+0x10>)
 800777a:	f7fc fa53 	bl	8003c24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800777e:	bf00      	nop
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	20000410 	.word	0x20000410

08007788 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800778c:	4802      	ldr	r0, [pc, #8]	; (8007798 <USART3_IRQHandler+0x10>)
 800778e:	f7fc fa49 	bl	8003c24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8007792:	bf00      	nop
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	20000310 	.word	0x20000310

0800779c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80077a0:	4802      	ldr	r0, [pc, #8]	; (80077ac <UART4_IRQHandler+0x10>)
 80077a2:	f7fc fa3f 	bl	8003c24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80077a6:	bf00      	nop
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	200003d0 	.word	0x200003d0

080077b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80077b4:	4802      	ldr	r0, [pc, #8]	; (80077c0 <TIM6_DAC_IRQHandler+0x10>)
 80077b6:	f7fb ffbe 	bl	8003736 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80077ba:	bf00      	nop
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	20000290 	.word	0x20000290

080077c4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80077c8:	4802      	ldr	r0, [pc, #8]	; (80077d4 <TIM7_IRQHandler+0x10>)
 80077ca:	f7fb ffb4 	bl	8003736 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80077ce:	bf00      	nop
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	200002d0 	.word	0x200002d0

080077d8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80077dc:	4802      	ldr	r0, [pc, #8]	; (80077e8 <OTG_FS_IRQHandler+0x10>)
 80077de:	f7f9 fea4 	bl	800152a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80077e2:	bf00      	nop
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	200016ec 	.word	0x200016ec

080077ec <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80077f0:	4802      	ldr	r0, [pc, #8]	; (80077fc <USART6_IRQHandler+0x10>)
 80077f2:	f7fc fa17 	bl	8003c24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80077f6:	bf00      	nop
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	20000390 	.word	0x20000390

08007800 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007808:	4b11      	ldr	r3, [pc, #68]	; (8007850 <_sbrk+0x50>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d102      	bne.n	8007816 <_sbrk+0x16>
		heap_end = &end;
 8007810:	4b0f      	ldr	r3, [pc, #60]	; (8007850 <_sbrk+0x50>)
 8007812:	4a10      	ldr	r2, [pc, #64]	; (8007854 <_sbrk+0x54>)
 8007814:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007816:	4b0e      	ldr	r3, [pc, #56]	; (8007850 <_sbrk+0x50>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800781c:	4b0c      	ldr	r3, [pc, #48]	; (8007850 <_sbrk+0x50>)
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	4413      	add	r3, r2
 8007824:	466a      	mov	r2, sp
 8007826:	4293      	cmp	r3, r2
 8007828:	d907      	bls.n	800783a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800782a:	f001 f86f 	bl	800890c <__errno>
 800782e:	4602      	mov	r2, r0
 8007830:	230c      	movs	r3, #12
 8007832:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007834:	f04f 33ff 	mov.w	r3, #4294967295
 8007838:	e006      	b.n	8007848 <_sbrk+0x48>
	}

	heap_end += incr;
 800783a:	4b05      	ldr	r3, [pc, #20]	; (8007850 <_sbrk+0x50>)
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4413      	add	r3, r2
 8007842:	4a03      	ldr	r2, [pc, #12]	; (8007850 <_sbrk+0x50>)
 8007844:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007846:	68fb      	ldr	r3, [r7, #12]
}
 8007848:	4618      	mov	r0, r3
 800784a:	3710      	adds	r7, #16
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}
 8007850:	20000210 	.word	0x20000210
 8007854:	20001cf8 	.word	0x20001cf8

08007858 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007858:	b480      	push	{r7}
 800785a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800785c:	4b16      	ldr	r3, [pc, #88]	; (80078b8 <SystemInit+0x60>)
 800785e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007862:	4a15      	ldr	r2, [pc, #84]	; (80078b8 <SystemInit+0x60>)
 8007864:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007868:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800786c:	4b13      	ldr	r3, [pc, #76]	; (80078bc <SystemInit+0x64>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a12      	ldr	r2, [pc, #72]	; (80078bc <SystemInit+0x64>)
 8007872:	f043 0301 	orr.w	r3, r3, #1
 8007876:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007878:	4b10      	ldr	r3, [pc, #64]	; (80078bc <SystemInit+0x64>)
 800787a:	2200      	movs	r2, #0
 800787c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800787e:	4b0f      	ldr	r3, [pc, #60]	; (80078bc <SystemInit+0x64>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a0e      	ldr	r2, [pc, #56]	; (80078bc <SystemInit+0x64>)
 8007884:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8007888:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800788c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800788e:	4b0b      	ldr	r3, [pc, #44]	; (80078bc <SystemInit+0x64>)
 8007890:	4a0b      	ldr	r2, [pc, #44]	; (80078c0 <SystemInit+0x68>)
 8007892:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007894:	4b09      	ldr	r3, [pc, #36]	; (80078bc <SystemInit+0x64>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a08      	ldr	r2, [pc, #32]	; (80078bc <SystemInit+0x64>)
 800789a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800789e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80078a0:	4b06      	ldr	r3, [pc, #24]	; (80078bc <SystemInit+0x64>)
 80078a2:	2200      	movs	r2, #0
 80078a4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80078a6:	4b04      	ldr	r3, [pc, #16]	; (80078b8 <SystemInit+0x60>)
 80078a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80078ac:	609a      	str	r2, [r3, #8]
#endif
}
 80078ae:	bf00      	nop
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr
 80078b8:	e000ed00 	.word	0xe000ed00
 80078bc:	40023800 	.word	0x40023800
 80078c0:	24003010 	.word	0x24003010

080078c4 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80078ca:	463b      	mov	r3, r7
 80078cc:	2200      	movs	r2, #0
 80078ce:	601a      	str	r2, [r3, #0]
 80078d0:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 80078d2:	4b15      	ldr	r3, [pc, #84]	; (8007928 <MX_TIM6_Init+0x64>)
 80078d4:	4a15      	ldr	r2, [pc, #84]	; (800792c <MX_TIM6_Init+0x68>)
 80078d6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8399;
 80078d8:	4b13      	ldr	r3, [pc, #76]	; (8007928 <MX_TIM6_Init+0x64>)
 80078da:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80078de:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80078e0:	4b11      	ldr	r3, [pc, #68]	; (8007928 <MX_TIM6_Init+0x64>)
 80078e2:	2200      	movs	r2, #0
 80078e4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 80078e6:	4b10      	ldr	r3, [pc, #64]	; (8007928 <MX_TIM6_Init+0x64>)
 80078e8:	2209      	movs	r2, #9
 80078ea:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80078ec:	4b0e      	ldr	r3, [pc, #56]	; (8007928 <MX_TIM6_Init+0x64>)
 80078ee:	2200      	movs	r2, #0
 80078f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80078f2:	480d      	ldr	r0, [pc, #52]	; (8007928 <MX_TIM6_Init+0x64>)
 80078f4:	f7fb fed0 	bl	8003698 <HAL_TIM_Base_Init>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d001      	beq.n	8007902 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80078fe:	f7ff fe9b 	bl	8007638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007902:	2300      	movs	r3, #0
 8007904:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007906:	2300      	movs	r3, #0
 8007908:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800790a:	463b      	mov	r3, r7
 800790c:	4619      	mov	r1, r3
 800790e:	4806      	ldr	r0, [pc, #24]	; (8007928 <MX_TIM6_Init+0x64>)
 8007910:	f7fc f8e2 	bl	8003ad8 <HAL_TIMEx_MasterConfigSynchronization>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d001      	beq.n	800791e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800791a:	f7ff fe8d 	bl	8007638 <Error_Handler>
  }

}
 800791e:	bf00      	nop
 8007920:	3708      	adds	r7, #8
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	20000290 	.word	0x20000290
 800792c:	40001000 	.word	0x40001000

08007930 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007936:	463b      	mov	r3, r7
 8007938:	2200      	movs	r2, #0
 800793a:	601a      	str	r2, [r3, #0]
 800793c:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 800793e:	4b15      	ldr	r3, [pc, #84]	; (8007994 <MX_TIM7_Init+0x64>)
 8007940:	4a15      	ldr	r2, [pc, #84]	; (8007998 <MX_TIM7_Init+0x68>)
 8007942:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8399;
 8007944:	4b13      	ldr	r3, [pc, #76]	; (8007994 <MX_TIM7_Init+0x64>)
 8007946:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800794a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800794c:	4b11      	ldr	r3, [pc, #68]	; (8007994 <MX_TIM7_Init+0x64>)
 800794e:	2200      	movs	r2, #0
 8007950:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8007952:	4b10      	ldr	r3, [pc, #64]	; (8007994 <MX_TIM7_Init+0x64>)
 8007954:	2209      	movs	r2, #9
 8007956:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007958:	4b0e      	ldr	r3, [pc, #56]	; (8007994 <MX_TIM7_Init+0x64>)
 800795a:	2200      	movs	r2, #0
 800795c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800795e:	480d      	ldr	r0, [pc, #52]	; (8007994 <MX_TIM7_Init+0x64>)
 8007960:	f7fb fe9a 	bl	8003698 <HAL_TIM_Base_Init>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d001      	beq.n	800796e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800796a:	f7ff fe65 	bl	8007638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800796e:	2300      	movs	r3, #0
 8007970:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007972:	2300      	movs	r3, #0
 8007974:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8007976:	463b      	mov	r3, r7
 8007978:	4619      	mov	r1, r3
 800797a:	4806      	ldr	r0, [pc, #24]	; (8007994 <MX_TIM7_Init+0x64>)
 800797c:	f7fc f8ac 	bl	8003ad8 <HAL_TIMEx_MasterConfigSynchronization>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d001      	beq.n	800798a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8007986:	f7ff fe57 	bl	8007638 <Error_Handler>
  }

}
 800798a:	bf00      	nop
 800798c:	3708      	adds	r7, #8
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	200002d0 	.word	0x200002d0
 8007998:	40001400 	.word	0x40001400

0800799c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a1c      	ldr	r2, [pc, #112]	; (8007a1c <HAL_TIM_Base_MspInit+0x80>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d116      	bne.n	80079dc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80079ae:	2300      	movs	r3, #0
 80079b0:	60fb      	str	r3, [r7, #12]
 80079b2:	4b1b      	ldr	r3, [pc, #108]	; (8007a20 <HAL_TIM_Base_MspInit+0x84>)
 80079b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b6:	4a1a      	ldr	r2, [pc, #104]	; (8007a20 <HAL_TIM_Base_MspInit+0x84>)
 80079b8:	f043 0310 	orr.w	r3, r3, #16
 80079bc:	6413      	str	r3, [r2, #64]	; 0x40
 80079be:	4b18      	ldr	r3, [pc, #96]	; (8007a20 <HAL_TIM_Base_MspInit+0x84>)
 80079c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c2:	f003 0310 	and.w	r3, r3, #16
 80079c6:	60fb      	str	r3, [r7, #12]
 80079c8:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80079ca:	2200      	movs	r2, #0
 80079cc:	2100      	movs	r1, #0
 80079ce:	2036      	movs	r0, #54	; 0x36
 80079d0:	f7f9 fa35 	bl	8000e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80079d4:	2036      	movs	r0, #54	; 0x36
 80079d6:	f7f9 fa4e 	bl	8000e76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80079da:	e01a      	b.n	8007a12 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM7)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a10      	ldr	r2, [pc, #64]	; (8007a24 <HAL_TIM_Base_MspInit+0x88>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d115      	bne.n	8007a12 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80079e6:	2300      	movs	r3, #0
 80079e8:	60bb      	str	r3, [r7, #8]
 80079ea:	4b0d      	ldr	r3, [pc, #52]	; (8007a20 <HAL_TIM_Base_MspInit+0x84>)
 80079ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ee:	4a0c      	ldr	r2, [pc, #48]	; (8007a20 <HAL_TIM_Base_MspInit+0x84>)
 80079f0:	f043 0320 	orr.w	r3, r3, #32
 80079f4:	6413      	str	r3, [r2, #64]	; 0x40
 80079f6:	4b0a      	ldr	r3, [pc, #40]	; (8007a20 <HAL_TIM_Base_MspInit+0x84>)
 80079f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fa:	f003 0320 	and.w	r3, r3, #32
 80079fe:	60bb      	str	r3, [r7, #8]
 8007a00:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8007a02:	2200      	movs	r2, #0
 8007a04:	2100      	movs	r1, #0
 8007a06:	2037      	movs	r0, #55	; 0x37
 8007a08:	f7f9 fa19 	bl	8000e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8007a0c:	2037      	movs	r0, #55	; 0x37
 8007a0e:	f7f9 fa32 	bl	8000e76 <HAL_NVIC_EnableIRQ>
}
 8007a12:	bf00      	nop
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	40001000 	.word	0x40001000
 8007a20:	40023800 	.word	0x40023800
 8007a24:	40001400 	.word	0x40001400

08007a28 <MX_UART4_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8007a2c:	4b11      	ldr	r3, [pc, #68]	; (8007a74 <MX_UART4_Init+0x4c>)
 8007a2e:	4a12      	ldr	r2, [pc, #72]	; (8007a78 <MX_UART4_Init+0x50>)
 8007a30:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8007a32:	4b10      	ldr	r3, [pc, #64]	; (8007a74 <MX_UART4_Init+0x4c>)
 8007a34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007a38:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8007a3a:	4b0e      	ldr	r3, [pc, #56]	; (8007a74 <MX_UART4_Init+0x4c>)
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8007a40:	4b0c      	ldr	r3, [pc, #48]	; (8007a74 <MX_UART4_Init+0x4c>)
 8007a42:	2200      	movs	r2, #0
 8007a44:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8007a46:	4b0b      	ldr	r3, [pc, #44]	; (8007a74 <MX_UART4_Init+0x4c>)
 8007a48:	2200      	movs	r2, #0
 8007a4a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8007a4c:	4b09      	ldr	r3, [pc, #36]	; (8007a74 <MX_UART4_Init+0x4c>)
 8007a4e:	220c      	movs	r2, #12
 8007a50:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007a52:	4b08      	ldr	r3, [pc, #32]	; (8007a74 <MX_UART4_Init+0x4c>)
 8007a54:	2200      	movs	r2, #0
 8007a56:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8007a58:	4b06      	ldr	r3, [pc, #24]	; (8007a74 <MX_UART4_Init+0x4c>)
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8007a5e:	4805      	ldr	r0, [pc, #20]	; (8007a74 <MX_UART4_Init+0x4c>)
 8007a60:	f7fc f893 	bl	8003b8a <HAL_UART_Init>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d001      	beq.n	8007a6e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8007a6a:	f7ff fde5 	bl	8007638 <Error_Handler>
  }

}
 8007a6e:	bf00      	nop
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	200003d0 	.word	0x200003d0
 8007a78:	40004c00 	.word	0x40004c00

08007a7c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8007a80:	4b10      	ldr	r3, [pc, #64]	; (8007ac4 <MX_USART1_UART_Init+0x48>)
 8007a82:	4a11      	ldr	r2, [pc, #68]	; (8007ac8 <MX_USART1_UART_Init+0x4c>)
 8007a84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 8007a86:	4b0f      	ldr	r3, [pc, #60]	; (8007ac4 <MX_USART1_UART_Init+0x48>)
 8007a88:	4a10      	ldr	r2, [pc, #64]	; (8007acc <MX_USART1_UART_Init+0x50>)
 8007a8a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007a8c:	4b0d      	ldr	r3, [pc, #52]	; (8007ac4 <MX_USART1_UART_Init+0x48>)
 8007a8e:	2200      	movs	r2, #0
 8007a90:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007a92:	4b0c      	ldr	r3, [pc, #48]	; (8007ac4 <MX_USART1_UART_Init+0x48>)
 8007a94:	2200      	movs	r2, #0
 8007a96:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007a98:	4b0a      	ldr	r3, [pc, #40]	; (8007ac4 <MX_USART1_UART_Init+0x48>)
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007a9e:	4b09      	ldr	r3, [pc, #36]	; (8007ac4 <MX_USART1_UART_Init+0x48>)
 8007aa0:	220c      	movs	r2, #12
 8007aa2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007aa4:	4b07      	ldr	r3, [pc, #28]	; (8007ac4 <MX_USART1_UART_Init+0x48>)
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007aaa:	4b06      	ldr	r3, [pc, #24]	; (8007ac4 <MX_USART1_UART_Init+0x48>)
 8007aac:	2200      	movs	r2, #0
 8007aae:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007ab0:	4804      	ldr	r0, [pc, #16]	; (8007ac4 <MX_USART1_UART_Init+0x48>)
 8007ab2:	f7fc f86a 	bl	8003b8a <HAL_UART_Init>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d001      	beq.n	8007ac0 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8007abc:	f7ff fdbc 	bl	8007638 <Error_Handler>
  }

}
 8007ac0:	bf00      	nop
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	20000350 	.word	0x20000350
 8007ac8:	40011000 	.word	0x40011000
 8007acc:	000f4240 	.word	0x000f4240

08007ad0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8007ad4:	4b11      	ldr	r3, [pc, #68]	; (8007b1c <MX_USART2_UART_Init+0x4c>)
 8007ad6:	4a12      	ldr	r2, [pc, #72]	; (8007b20 <MX_USART2_UART_Init+0x50>)
 8007ad8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8007ada:	4b10      	ldr	r3, [pc, #64]	; (8007b1c <MX_USART2_UART_Init+0x4c>)
 8007adc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007ae0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007ae2:	4b0e      	ldr	r3, [pc, #56]	; (8007b1c <MX_USART2_UART_Init+0x4c>)
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007ae8:	4b0c      	ldr	r3, [pc, #48]	; (8007b1c <MX_USART2_UART_Init+0x4c>)
 8007aea:	2200      	movs	r2, #0
 8007aec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007aee:	4b0b      	ldr	r3, [pc, #44]	; (8007b1c <MX_USART2_UART_Init+0x4c>)
 8007af0:	2200      	movs	r2, #0
 8007af2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007af4:	4b09      	ldr	r3, [pc, #36]	; (8007b1c <MX_USART2_UART_Init+0x4c>)
 8007af6:	220c      	movs	r2, #12
 8007af8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007afa:	4b08      	ldr	r3, [pc, #32]	; (8007b1c <MX_USART2_UART_Init+0x4c>)
 8007afc:	2200      	movs	r2, #0
 8007afe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007b00:	4b06      	ldr	r3, [pc, #24]	; (8007b1c <MX_USART2_UART_Init+0x4c>)
 8007b02:	2200      	movs	r2, #0
 8007b04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007b06:	4805      	ldr	r0, [pc, #20]	; (8007b1c <MX_USART2_UART_Init+0x4c>)
 8007b08:	f7fc f83f 	bl	8003b8a <HAL_UART_Init>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d001      	beq.n	8007b16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8007b12:	f7ff fd91 	bl	8007638 <Error_Handler>
  }

}
 8007b16:	bf00      	nop
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	20000410 	.word	0x20000410
 8007b20:	40004400 	.word	0x40004400

08007b24 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8007b28:	4b10      	ldr	r3, [pc, #64]	; (8007b6c <MX_USART3_UART_Init+0x48>)
 8007b2a:	4a11      	ldr	r2, [pc, #68]	; (8007b70 <MX_USART3_UART_Init+0x4c>)
 8007b2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 8007b2e:	4b0f      	ldr	r3, [pc, #60]	; (8007b6c <MX_USART3_UART_Init+0x48>)
 8007b30:	4a10      	ldr	r2, [pc, #64]	; (8007b74 <MX_USART3_UART_Init+0x50>)
 8007b32:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8007b34:	4b0d      	ldr	r3, [pc, #52]	; (8007b6c <MX_USART3_UART_Init+0x48>)
 8007b36:	2200      	movs	r2, #0
 8007b38:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007b3a:	4b0c      	ldr	r3, [pc, #48]	; (8007b6c <MX_USART3_UART_Init+0x48>)
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8007b40:	4b0a      	ldr	r3, [pc, #40]	; (8007b6c <MX_USART3_UART_Init+0x48>)
 8007b42:	2200      	movs	r2, #0
 8007b44:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007b46:	4b09      	ldr	r3, [pc, #36]	; (8007b6c <MX_USART3_UART_Init+0x48>)
 8007b48:	220c      	movs	r2, #12
 8007b4a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007b4c:	4b07      	ldr	r3, [pc, #28]	; (8007b6c <MX_USART3_UART_Init+0x48>)
 8007b4e:	2200      	movs	r2, #0
 8007b50:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007b52:	4b06      	ldr	r3, [pc, #24]	; (8007b6c <MX_USART3_UART_Init+0x48>)
 8007b54:	2200      	movs	r2, #0
 8007b56:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8007b58:	4804      	ldr	r0, [pc, #16]	; (8007b6c <MX_USART3_UART_Init+0x48>)
 8007b5a:	f7fc f816 	bl	8003b8a <HAL_UART_Init>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d001      	beq.n	8007b68 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8007b64:	f7ff fd68 	bl	8007638 <Error_Handler>
  }

}
 8007b68:	bf00      	nop
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	20000310 	.word	0x20000310
 8007b70:	40004800 	.word	0x40004800
 8007b74:	000f4240 	.word	0x000f4240

08007b78 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8007b7c:	4b11      	ldr	r3, [pc, #68]	; (8007bc4 <MX_USART6_UART_Init+0x4c>)
 8007b7e:	4a12      	ldr	r2, [pc, #72]	; (8007bc8 <MX_USART6_UART_Init+0x50>)
 8007b80:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8007b82:	4b10      	ldr	r3, [pc, #64]	; (8007bc4 <MX_USART6_UART_Init+0x4c>)
 8007b84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007b88:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8007b8a:	4b0e      	ldr	r3, [pc, #56]	; (8007bc4 <MX_USART6_UART_Init+0x4c>)
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8007b90:	4b0c      	ldr	r3, [pc, #48]	; (8007bc4 <MX_USART6_UART_Init+0x4c>)
 8007b92:	2200      	movs	r2, #0
 8007b94:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8007b96:	4b0b      	ldr	r3, [pc, #44]	; (8007bc4 <MX_USART6_UART_Init+0x4c>)
 8007b98:	2200      	movs	r2, #0
 8007b9a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8007b9c:	4b09      	ldr	r3, [pc, #36]	; (8007bc4 <MX_USART6_UART_Init+0x4c>)
 8007b9e:	220c      	movs	r2, #12
 8007ba0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007ba2:	4b08      	ldr	r3, [pc, #32]	; (8007bc4 <MX_USART6_UART_Init+0x4c>)
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8007ba8:	4b06      	ldr	r3, [pc, #24]	; (8007bc4 <MX_USART6_UART_Init+0x4c>)
 8007baa:	2200      	movs	r2, #0
 8007bac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8007bae:	4805      	ldr	r0, [pc, #20]	; (8007bc4 <MX_USART6_UART_Init+0x4c>)
 8007bb0:	f7fb ffeb 	bl	8003b8a <HAL_UART_Init>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d001      	beq.n	8007bbe <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8007bba:	f7ff fd3d 	bl	8007638 <Error_Handler>
  }

}
 8007bbe:	bf00      	nop
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	20000390 	.word	0x20000390
 8007bc8:	40011400 	.word	0x40011400

08007bcc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b092      	sub	sp, #72	; 0x48
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bd4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007bd8:	2200      	movs	r2, #0
 8007bda:	601a      	str	r2, [r3, #0]
 8007bdc:	605a      	str	r2, [r3, #4]
 8007bde:	609a      	str	r2, [r3, #8]
 8007be0:	60da      	str	r2, [r3, #12]
 8007be2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a91      	ldr	r2, [pc, #580]	; (8007e30 <HAL_UART_MspInit+0x264>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d134      	bne.n	8007c58 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8007bee:	2300      	movs	r3, #0
 8007bf0:	633b      	str	r3, [r7, #48]	; 0x30
 8007bf2:	4b90      	ldr	r3, [pc, #576]	; (8007e34 <HAL_UART_MspInit+0x268>)
 8007bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf6:	4a8f      	ldr	r2, [pc, #572]	; (8007e34 <HAL_UART_MspInit+0x268>)
 8007bf8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8007bfe:	4b8d      	ldr	r3, [pc, #564]	; (8007e34 <HAL_UART_MspInit+0x268>)
 8007c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c06:	633b      	str	r3, [r7, #48]	; 0x30
 8007c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c0e:	4b89      	ldr	r3, [pc, #548]	; (8007e34 <HAL_UART_MspInit+0x268>)
 8007c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c12:	4a88      	ldr	r2, [pc, #544]	; (8007e34 <HAL_UART_MspInit+0x268>)
 8007c14:	f043 0301 	orr.w	r3, r3, #1
 8007c18:	6313      	str	r3, [r2, #48]	; 0x30
 8007c1a:	4b86      	ldr	r3, [pc, #536]	; (8007e34 <HAL_UART_MspInit+0x268>)
 8007c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c1e:	f003 0301 	and.w	r3, r3, #1
 8007c22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007c26:	2303      	movs	r3, #3
 8007c28:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c2a:	2302      	movs	r3, #2
 8007c2c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c32:	2303      	movs	r3, #3
 8007c34:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8007c36:	2308      	movs	r3, #8
 8007c38:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c3a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007c3e:	4619      	mov	r1, r3
 8007c40:	487d      	ldr	r0, [pc, #500]	; (8007e38 <HAL_UART_MspInit+0x26c>)
 8007c42:	f7f9 f955 	bl	8000ef0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8007c46:	2200      	movs	r2, #0
 8007c48:	2100      	movs	r1, #0
 8007c4a:	2034      	movs	r0, #52	; 0x34
 8007c4c:	f7f9 f8f7 	bl	8000e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8007c50:	2034      	movs	r0, #52	; 0x34
 8007c52:	f7f9 f910 	bl	8000e76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8007c56:	e0e7      	b.n	8007e28 <HAL_UART_MspInit+0x25c>
  else if(uartHandle->Instance==USART1)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a77      	ldr	r2, [pc, #476]	; (8007e3c <HAL_UART_MspInit+0x270>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d134      	bne.n	8007ccc <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART1_CLK_ENABLE();
 8007c62:	2300      	movs	r3, #0
 8007c64:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c66:	4b73      	ldr	r3, [pc, #460]	; (8007e34 <HAL_UART_MspInit+0x268>)
 8007c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c6a:	4a72      	ldr	r2, [pc, #456]	; (8007e34 <HAL_UART_MspInit+0x268>)
 8007c6c:	f043 0310 	orr.w	r3, r3, #16
 8007c70:	6453      	str	r3, [r2, #68]	; 0x44
 8007c72:	4b70      	ldr	r3, [pc, #448]	; (8007e34 <HAL_UART_MspInit+0x268>)
 8007c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c76:	f003 0310 	and.w	r3, r3, #16
 8007c7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c7e:	2300      	movs	r3, #0
 8007c80:	627b      	str	r3, [r7, #36]	; 0x24
 8007c82:	4b6c      	ldr	r3, [pc, #432]	; (8007e34 <HAL_UART_MspInit+0x268>)
 8007c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c86:	4a6b      	ldr	r2, [pc, #428]	; (8007e34 <HAL_UART_MspInit+0x268>)
 8007c88:	f043 0302 	orr.w	r3, r3, #2
 8007c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8007c8e:	4b69      	ldr	r3, [pc, #420]	; (8007e34 <HAL_UART_MspInit+0x268>)
 8007c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c92:	f003 0302 	and.w	r3, r3, #2
 8007c96:	627b      	str	r3, [r7, #36]	; 0x24
 8007c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007c9a:	23c0      	movs	r3, #192	; 0xc0
 8007c9c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c9e:	2302      	movs	r3, #2
 8007ca0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007caa:	2307      	movs	r3, #7
 8007cac:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007cae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	4862      	ldr	r0, [pc, #392]	; (8007e40 <HAL_UART_MspInit+0x274>)
 8007cb6:	f7f9 f91b 	bl	8000ef0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007cba:	2200      	movs	r2, #0
 8007cbc:	2100      	movs	r1, #0
 8007cbe:	2025      	movs	r0, #37	; 0x25
 8007cc0:	f7f9 f8bd 	bl	8000e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007cc4:	2025      	movs	r0, #37	; 0x25
 8007cc6:	f7f9 f8d6 	bl	8000e76 <HAL_NVIC_EnableIRQ>
}
 8007cca:	e0ad      	b.n	8007e28 <HAL_UART_MspInit+0x25c>
  else if(uartHandle->Instance==USART2)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a5c      	ldr	r2, [pc, #368]	; (8007e44 <HAL_UART_MspInit+0x278>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d134      	bne.n	8007d40 <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	623b      	str	r3, [r7, #32]
 8007cda:	4b56      	ldr	r3, [pc, #344]	; (8007e34 <HAL_UART_MspInit+0x268>)
 8007cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cde:	4a55      	ldr	r2, [pc, #340]	; (8007e34 <HAL_UART_MspInit+0x268>)
 8007ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8007ce6:	4b53      	ldr	r3, [pc, #332]	; (8007e34 <HAL_UART_MspInit+0x268>)
 8007ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cee:	623b      	str	r3, [r7, #32]
 8007cf0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	61fb      	str	r3, [r7, #28]
 8007cf6:	4b4f      	ldr	r3, [pc, #316]	; (8007e34 <HAL_UART_MspInit+0x268>)
 8007cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cfa:	4a4e      	ldr	r2, [pc, #312]	; (8007e34 <HAL_UART_MspInit+0x268>)
 8007cfc:	f043 0301 	orr.w	r3, r3, #1
 8007d00:	6313      	str	r3, [r2, #48]	; 0x30
 8007d02:	4b4c      	ldr	r3, [pc, #304]	; (8007e34 <HAL_UART_MspInit+0x268>)
 8007d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d06:	f003 0301 	and.w	r3, r3, #1
 8007d0a:	61fb      	str	r3, [r7, #28]
 8007d0c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007d0e:	230c      	movs	r3, #12
 8007d10:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d12:	2302      	movs	r3, #2
 8007d14:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007d16:	2301      	movs	r3, #1
 8007d18:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d1a:	2303      	movs	r3, #3
 8007d1c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007d1e:	2307      	movs	r3, #7
 8007d20:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d22:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007d26:	4619      	mov	r1, r3
 8007d28:	4843      	ldr	r0, [pc, #268]	; (8007e38 <HAL_UART_MspInit+0x26c>)
 8007d2a:	f7f9 f8e1 	bl	8000ef0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8007d2e:	2200      	movs	r2, #0
 8007d30:	2100      	movs	r1, #0
 8007d32:	2026      	movs	r0, #38	; 0x26
 8007d34:	f7f9 f883 	bl	8000e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007d38:	2026      	movs	r0, #38	; 0x26
 8007d3a:	f7f9 f89c 	bl	8000e76 <HAL_NVIC_EnableIRQ>
}
 8007d3e:	e073      	b.n	8007e28 <HAL_UART_MspInit+0x25c>
  else if(uartHandle->Instance==USART3)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a40      	ldr	r2, [pc, #256]	; (8007e48 <HAL_UART_MspInit+0x27c>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d135      	bne.n	8007db6 <HAL_UART_MspInit+0x1ea>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	61bb      	str	r3, [r7, #24]
 8007d4e:	4b39      	ldr	r3, [pc, #228]	; (8007e34 <HAL_UART_MspInit+0x268>)
 8007d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d52:	4a38      	ldr	r2, [pc, #224]	; (8007e34 <HAL_UART_MspInit+0x268>)
 8007d54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d58:	6413      	str	r3, [r2, #64]	; 0x40
 8007d5a:	4b36      	ldr	r3, [pc, #216]	; (8007e34 <HAL_UART_MspInit+0x268>)
 8007d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d62:	61bb      	str	r3, [r7, #24]
 8007d64:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d66:	2300      	movs	r3, #0
 8007d68:	617b      	str	r3, [r7, #20]
 8007d6a:	4b32      	ldr	r3, [pc, #200]	; (8007e34 <HAL_UART_MspInit+0x268>)
 8007d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d6e:	4a31      	ldr	r2, [pc, #196]	; (8007e34 <HAL_UART_MspInit+0x268>)
 8007d70:	f043 0304 	orr.w	r3, r3, #4
 8007d74:	6313      	str	r3, [r2, #48]	; 0x30
 8007d76:	4b2f      	ldr	r3, [pc, #188]	; (8007e34 <HAL_UART_MspInit+0x268>)
 8007d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d7a:	f003 0304 	and.w	r3, r3, #4
 8007d7e:	617b      	str	r3, [r7, #20]
 8007d80:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007d82:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007d86:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d88:	2302      	movs	r3, #2
 8007d8a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d90:	2303      	movs	r3, #3
 8007d92:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007d94:	2307      	movs	r3, #7
 8007d96:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007d98:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	482b      	ldr	r0, [pc, #172]	; (8007e4c <HAL_UART_MspInit+0x280>)
 8007da0:	f7f9 f8a6 	bl	8000ef0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8007da4:	2200      	movs	r2, #0
 8007da6:	2100      	movs	r1, #0
 8007da8:	2027      	movs	r0, #39	; 0x27
 8007daa:	f7f9 f848 	bl	8000e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8007dae:	2027      	movs	r0, #39	; 0x27
 8007db0:	f7f9 f861 	bl	8000e76 <HAL_NVIC_EnableIRQ>
}
 8007db4:	e038      	b.n	8007e28 <HAL_UART_MspInit+0x25c>
  else if(uartHandle->Instance==USART6)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a25      	ldr	r2, [pc, #148]	; (8007e50 <HAL_UART_MspInit+0x284>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d133      	bne.n	8007e28 <HAL_UART_MspInit+0x25c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	613b      	str	r3, [r7, #16]
 8007dc4:	4b1b      	ldr	r3, [pc, #108]	; (8007e34 <HAL_UART_MspInit+0x268>)
 8007dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dc8:	4a1a      	ldr	r2, [pc, #104]	; (8007e34 <HAL_UART_MspInit+0x268>)
 8007dca:	f043 0320 	orr.w	r3, r3, #32
 8007dce:	6453      	str	r3, [r2, #68]	; 0x44
 8007dd0:	4b18      	ldr	r3, [pc, #96]	; (8007e34 <HAL_UART_MspInit+0x268>)
 8007dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dd4:	f003 0320 	and.w	r3, r3, #32
 8007dd8:	613b      	str	r3, [r7, #16]
 8007dda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007ddc:	2300      	movs	r3, #0
 8007dde:	60fb      	str	r3, [r7, #12]
 8007de0:	4b14      	ldr	r3, [pc, #80]	; (8007e34 <HAL_UART_MspInit+0x268>)
 8007de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007de4:	4a13      	ldr	r2, [pc, #76]	; (8007e34 <HAL_UART_MspInit+0x268>)
 8007de6:	f043 0304 	orr.w	r3, r3, #4
 8007dea:	6313      	str	r3, [r2, #48]	; 0x30
 8007dec:	4b11      	ldr	r3, [pc, #68]	; (8007e34 <HAL_UART_MspInit+0x268>)
 8007dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007df0:	f003 0304 	and.w	r3, r3, #4
 8007df4:	60fb      	str	r3, [r7, #12]
 8007df6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007df8:	23c0      	movs	r3, #192	; 0xc0
 8007dfa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dfc:	2302      	movs	r3, #2
 8007dfe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007e00:	2301      	movs	r3, #1
 8007e02:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e04:	2303      	movs	r3, #3
 8007e06:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8007e08:	2308      	movs	r3, #8
 8007e0a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007e0c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007e10:	4619      	mov	r1, r3
 8007e12:	480e      	ldr	r0, [pc, #56]	; (8007e4c <HAL_UART_MspInit+0x280>)
 8007e14:	f7f9 f86c 	bl	8000ef0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8007e18:	2200      	movs	r2, #0
 8007e1a:	2100      	movs	r1, #0
 8007e1c:	2047      	movs	r0, #71	; 0x47
 8007e1e:	f7f9 f80e 	bl	8000e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8007e22:	2047      	movs	r0, #71	; 0x47
 8007e24:	f7f9 f827 	bl	8000e76 <HAL_NVIC_EnableIRQ>
}
 8007e28:	bf00      	nop
 8007e2a:	3748      	adds	r7, #72	; 0x48
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	40004c00 	.word	0x40004c00
 8007e34:	40023800 	.word	0x40023800
 8007e38:	40020000 	.word	0x40020000
 8007e3c:	40011000 	.word	0x40011000
 8007e40:	40020400 	.word	0x40020400
 8007e44:	40004400 	.word	0x40004400
 8007e48:	40004800 	.word	0x40004800
 8007e4c:	40020800 	.word	0x40020800
 8007e50:	40011400 	.word	0x40011400

08007e54 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007e58:	2200      	movs	r2, #0
 8007e5a:	4912      	ldr	r1, [pc, #72]	; (8007ea4 <MX_USB_DEVICE_Init+0x50>)
 8007e5c:	4812      	ldr	r0, [pc, #72]	; (8007ea8 <MX_USB_DEVICE_Init+0x54>)
 8007e5e:	f7fe f890 	bl	8005f82 <USBD_Init>
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d001      	beq.n	8007e6c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007e68:	f7ff fbe6 	bl	8007638 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007e6c:	490f      	ldr	r1, [pc, #60]	; (8007eac <MX_USB_DEVICE_Init+0x58>)
 8007e6e:	480e      	ldr	r0, [pc, #56]	; (8007ea8 <MX_USB_DEVICE_Init+0x54>)
 8007e70:	f7fe f8b2 	bl	8005fd8 <USBD_RegisterClass>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d001      	beq.n	8007e7e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007e7a:	f7ff fbdd 	bl	8007638 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007e7e:	490c      	ldr	r1, [pc, #48]	; (8007eb0 <MX_USB_DEVICE_Init+0x5c>)
 8007e80:	4809      	ldr	r0, [pc, #36]	; (8007ea8 <MX_USB_DEVICE_Init+0x54>)
 8007e82:	f7fe f80f 	bl	8005ea4 <USBD_CDC_RegisterInterface>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d001      	beq.n	8007e90 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007e8c:	f7ff fbd4 	bl	8007638 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007e90:	4805      	ldr	r0, [pc, #20]	; (8007ea8 <MX_USB_DEVICE_Init+0x54>)
 8007e92:	f7fe f8bb 	bl	800600c <USBD_Start>
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d001      	beq.n	8007ea0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007e9c:	f7ff fbcc 	bl	8007638 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007ea0:	bf00      	nop
 8007ea2:	bd80      	pop	{r7, pc}
 8007ea4:	2000012c 	.word	0x2000012c
 8007ea8:	20000450 	.word	0x20000450
 8007eac:	20000014 	.word	0x20000014
 8007eb0:	2000011c 	.word	0x2000011c

08007eb4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007eb8:	2200      	movs	r2, #0
 8007eba:	4905      	ldr	r1, [pc, #20]	; (8007ed0 <CDC_Init_FS+0x1c>)
 8007ebc:	4805      	ldr	r0, [pc, #20]	; (8007ed4 <CDC_Init_FS+0x20>)
 8007ebe:	f7fe f808 	bl	8005ed2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007ec2:	4905      	ldr	r1, [pc, #20]	; (8007ed8 <CDC_Init_FS+0x24>)
 8007ec4:	4803      	ldr	r0, [pc, #12]	; (8007ed4 <CDC_Init_FS+0x20>)
 8007ec6:	f7fe f81e 	bl	8005f06 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007eca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	20000eec 	.word	0x20000eec
 8007ed4:	20000450 	.word	0x20000450
 8007ed8:	200006ec 	.word	0x200006ec

08007edc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007edc:	b480      	push	{r7}
 8007ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007ee0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	6039      	str	r1, [r7, #0]
 8007ef6:	71fb      	strb	r3, [r7, #7]
 8007ef8:	4613      	mov	r3, r2
 8007efa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007efc:	79fb      	ldrb	r3, [r7, #7]
 8007efe:	2b23      	cmp	r3, #35	; 0x23
 8007f00:	d84a      	bhi.n	8007f98 <CDC_Control_FS+0xac>
 8007f02:	a201      	add	r2, pc, #4	; (adr r2, 8007f08 <CDC_Control_FS+0x1c>)
 8007f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f08:	08007f99 	.word	0x08007f99
 8007f0c:	08007f99 	.word	0x08007f99
 8007f10:	08007f99 	.word	0x08007f99
 8007f14:	08007f99 	.word	0x08007f99
 8007f18:	08007f99 	.word	0x08007f99
 8007f1c:	08007f99 	.word	0x08007f99
 8007f20:	08007f99 	.word	0x08007f99
 8007f24:	08007f99 	.word	0x08007f99
 8007f28:	08007f99 	.word	0x08007f99
 8007f2c:	08007f99 	.word	0x08007f99
 8007f30:	08007f99 	.word	0x08007f99
 8007f34:	08007f99 	.word	0x08007f99
 8007f38:	08007f99 	.word	0x08007f99
 8007f3c:	08007f99 	.word	0x08007f99
 8007f40:	08007f99 	.word	0x08007f99
 8007f44:	08007f99 	.word	0x08007f99
 8007f48:	08007f99 	.word	0x08007f99
 8007f4c:	08007f99 	.word	0x08007f99
 8007f50:	08007f99 	.word	0x08007f99
 8007f54:	08007f99 	.word	0x08007f99
 8007f58:	08007f99 	.word	0x08007f99
 8007f5c:	08007f99 	.word	0x08007f99
 8007f60:	08007f99 	.word	0x08007f99
 8007f64:	08007f99 	.word	0x08007f99
 8007f68:	08007f99 	.word	0x08007f99
 8007f6c:	08007f99 	.word	0x08007f99
 8007f70:	08007f99 	.word	0x08007f99
 8007f74:	08007f99 	.word	0x08007f99
 8007f78:	08007f99 	.word	0x08007f99
 8007f7c:	08007f99 	.word	0x08007f99
 8007f80:	08007f99 	.word	0x08007f99
 8007f84:	08007f99 	.word	0x08007f99
 8007f88:	08007f99 	.word	0x08007f99
 8007f8c:	08007f99 	.word	0x08007f99
 8007f90:	08007f99 	.word	0x08007f99
 8007f94:	08007f99 	.word	0x08007f99
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007f98:	bf00      	nop
  }

  return (USBD_OK);
 8007f9a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b082      	sub	sp, #8
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007fb2:	6879      	ldr	r1, [r7, #4]
 8007fb4:	4808      	ldr	r0, [pc, #32]	; (8007fd8 <CDC_Receive_FS+0x30>)
 8007fb6:	f7fd ffa6 	bl	8005f06 <USBD_CDC_SetRxBuffer>
  Buf[*Len] = 0;
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	701a      	strb	r2, [r3, #0]
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007fc6:	4804      	ldr	r0, [pc, #16]	; (8007fd8 <CDC_Receive_FS+0x30>)
 8007fc8:	f7fd ffb1 	bl	8005f2e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007fcc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3708      	adds	r7, #8
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	20000450 	.word	0x20000450

08007fdc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b08a      	sub	sp, #40	; 0x28
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007fe4:	f107 0314 	add.w	r3, r7, #20
 8007fe8:	2200      	movs	r2, #0
 8007fea:	601a      	str	r2, [r3, #0]
 8007fec:	605a      	str	r2, [r3, #4]
 8007fee:	609a      	str	r2, [r3, #8]
 8007ff0:	60da      	str	r2, [r3, #12]
 8007ff2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ffc:	d13a      	bne.n	8008074 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ffe:	2300      	movs	r3, #0
 8008000:	613b      	str	r3, [r7, #16]
 8008002:	4b1e      	ldr	r3, [pc, #120]	; (800807c <HAL_PCD_MspInit+0xa0>)
 8008004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008006:	4a1d      	ldr	r2, [pc, #116]	; (800807c <HAL_PCD_MspInit+0xa0>)
 8008008:	f043 0301 	orr.w	r3, r3, #1
 800800c:	6313      	str	r3, [r2, #48]	; 0x30
 800800e:	4b1b      	ldr	r3, [pc, #108]	; (800807c <HAL_PCD_MspInit+0xa0>)
 8008010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008012:	f003 0301 	and.w	r3, r3, #1
 8008016:	613b      	str	r3, [r7, #16]
 8008018:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800801a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800801e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008020:	2302      	movs	r3, #2
 8008022:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008024:	2300      	movs	r3, #0
 8008026:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008028:	2303      	movs	r3, #3
 800802a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800802c:	230a      	movs	r3, #10
 800802e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008030:	f107 0314 	add.w	r3, r7, #20
 8008034:	4619      	mov	r1, r3
 8008036:	4812      	ldr	r0, [pc, #72]	; (8008080 <HAL_PCD_MspInit+0xa4>)
 8008038:	f7f8 ff5a 	bl	8000ef0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800803c:	4b0f      	ldr	r3, [pc, #60]	; (800807c <HAL_PCD_MspInit+0xa0>)
 800803e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008040:	4a0e      	ldr	r2, [pc, #56]	; (800807c <HAL_PCD_MspInit+0xa0>)
 8008042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008046:	6353      	str	r3, [r2, #52]	; 0x34
 8008048:	2300      	movs	r3, #0
 800804a:	60fb      	str	r3, [r7, #12]
 800804c:	4b0b      	ldr	r3, [pc, #44]	; (800807c <HAL_PCD_MspInit+0xa0>)
 800804e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008050:	4a0a      	ldr	r2, [pc, #40]	; (800807c <HAL_PCD_MspInit+0xa0>)
 8008052:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008056:	6453      	str	r3, [r2, #68]	; 0x44
 8008058:	4b08      	ldr	r3, [pc, #32]	; (800807c <HAL_PCD_MspInit+0xa0>)
 800805a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800805c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008060:	60fb      	str	r3, [r7, #12]
 8008062:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008064:	2200      	movs	r2, #0
 8008066:	2100      	movs	r1, #0
 8008068:	2043      	movs	r0, #67	; 0x43
 800806a:	f7f8 fee8 	bl	8000e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800806e:	2043      	movs	r0, #67	; 0x43
 8008070:	f7f8 ff01 	bl	8000e76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008074:	bf00      	nop
 8008076:	3728      	adds	r7, #40	; 0x28
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}
 800807c:	40023800 	.word	0x40023800
 8008080:	40020000 	.word	0x40020000

08008084 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008098:	4619      	mov	r1, r3
 800809a:	4610      	mov	r0, r2
 800809c:	f7fd ffff 	bl	800609e <USBD_LL_SetupStage>
}
 80080a0:	bf00      	nop
 80080a2:	3708      	adds	r7, #8
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	460b      	mov	r3, r1
 80080b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80080ba:	78fa      	ldrb	r2, [r7, #3]
 80080bc:	6879      	ldr	r1, [r7, #4]
 80080be:	4613      	mov	r3, r2
 80080c0:	00db      	lsls	r3, r3, #3
 80080c2:	1a9b      	subs	r3, r3, r2
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	440b      	add	r3, r1
 80080c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	78fb      	ldrb	r3, [r7, #3]
 80080d0:	4619      	mov	r1, r3
 80080d2:	f7fe f82f 	bl	8006134 <USBD_LL_DataOutStage>
}
 80080d6:	bf00      	nop
 80080d8:	3708      	adds	r7, #8
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b082      	sub	sp, #8
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
 80080e6:	460b      	mov	r3, r1
 80080e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80080f0:	78fa      	ldrb	r2, [r7, #3]
 80080f2:	6879      	ldr	r1, [r7, #4]
 80080f4:	4613      	mov	r3, r2
 80080f6:	00db      	lsls	r3, r3, #3
 80080f8:	1a9b      	subs	r3, r3, r2
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	440b      	add	r3, r1
 80080fe:	3348      	adds	r3, #72	; 0x48
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	78fb      	ldrb	r3, [r7, #3]
 8008104:	4619      	mov	r1, r3
 8008106:	f7fe f886 	bl	8006216 <USBD_LL_DataInStage>
}
 800810a:	bf00      	nop
 800810c:	3708      	adds	r7, #8
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}

08008112 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008112:	b580      	push	{r7, lr}
 8008114:	b082      	sub	sp, #8
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008120:	4618      	mov	r0, r3
 8008122:	f7fe f994 	bl	800644e <USBD_LL_SOF>
}
 8008126:	bf00      	nop
 8008128:	3708      	adds	r7, #8
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}

0800812e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800812e:	b580      	push	{r7, lr}
 8008130:	b084      	sub	sp, #16
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008136:	2301      	movs	r3, #1
 8008138:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	68db      	ldr	r3, [r3, #12]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d102      	bne.n	8008148 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008142:	2300      	movs	r3, #0
 8008144:	73fb      	strb	r3, [r7, #15]
 8008146:	e008      	b.n	800815a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	2b02      	cmp	r3, #2
 800814e:	d102      	bne.n	8008156 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008150:	2301      	movs	r3, #1
 8008152:	73fb      	strb	r3, [r7, #15]
 8008154:	e001      	b.n	800815a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008156:	f7ff fa6f 	bl	8007638 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008160:	7bfa      	ldrb	r2, [r7, #15]
 8008162:	4611      	mov	r1, r2
 8008164:	4618      	mov	r0, r3
 8008166:	f7fe f93c 	bl	80063e2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008170:	4618      	mov	r0, r3
 8008172:	f7fe f8f5 	bl	8006360 <USBD_LL_Reset>
}
 8008176:	bf00      	nop
 8008178:	3710      	adds	r7, #16
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
	...

08008180 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800818e:	4618      	mov	r0, r3
 8008190:	f7fe f937 	bl	8006402 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	6812      	ldr	r2, [r2, #0]
 80081a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80081a6:	f043 0301 	orr.w	r3, r3, #1
 80081aa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a1b      	ldr	r3, [r3, #32]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d005      	beq.n	80081c0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80081b4:	4b04      	ldr	r3, [pc, #16]	; (80081c8 <HAL_PCD_SuspendCallback+0x48>)
 80081b6:	691b      	ldr	r3, [r3, #16]
 80081b8:	4a03      	ldr	r2, [pc, #12]	; (80081c8 <HAL_PCD_SuspendCallback+0x48>)
 80081ba:	f043 0306 	orr.w	r3, r3, #6
 80081be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80081c0:	bf00      	nop
 80081c2:	3708      	adds	r7, #8
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	e000ed00 	.word	0xe000ed00

080081cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80081da:	4618      	mov	r0, r3
 80081dc:	f7fe f926 	bl	800642c <USBD_LL_Resume>
}
 80081e0:	bf00      	nop
 80081e2:	3708      	adds	r7, #8
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b082      	sub	sp, #8
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	460b      	mov	r3, r1
 80081f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80081fa:	78fa      	ldrb	r2, [r7, #3]
 80081fc:	4611      	mov	r1, r2
 80081fe:	4618      	mov	r0, r3
 8008200:	f7fe f94c 	bl	800649c <USBD_LL_IsoOUTIncomplete>
}
 8008204:	bf00      	nop
 8008206:	3708      	adds	r7, #8
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	460b      	mov	r3, r1
 8008216:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800821e:	78fa      	ldrb	r2, [r7, #3]
 8008220:	4611      	mov	r1, r2
 8008222:	4618      	mov	r0, r3
 8008224:	f7fe f92d 	bl	8006482 <USBD_LL_IsoINIncomplete>
}
 8008228:	bf00      	nop
 800822a:	3708      	adds	r7, #8
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800823e:	4618      	mov	r0, r3
 8008240:	f7fe f939 	bl	80064b6 <USBD_LL_DevConnected>
}
 8008244:	bf00      	nop
 8008246:	3708      	adds	r7, #8
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800825a:	4618      	mov	r0, r3
 800825c:	f7fe f936 	bl	80064cc <USBD_LL_DevDisconnected>
}
 8008260:	bf00      	nop
 8008262:	3708      	adds	r7, #8
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d13c      	bne.n	80082f2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008278:	4a20      	ldr	r2, [pc, #128]	; (80082fc <USBD_LL_Init+0x94>)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4a1e      	ldr	r2, [pc, #120]	; (80082fc <USBD_LL_Init+0x94>)
 8008284:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008288:	4b1c      	ldr	r3, [pc, #112]	; (80082fc <USBD_LL_Init+0x94>)
 800828a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800828e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008290:	4b1a      	ldr	r3, [pc, #104]	; (80082fc <USBD_LL_Init+0x94>)
 8008292:	2206      	movs	r2, #6
 8008294:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008296:	4b19      	ldr	r3, [pc, #100]	; (80082fc <USBD_LL_Init+0x94>)
 8008298:	2202      	movs	r2, #2
 800829a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800829c:	4b17      	ldr	r3, [pc, #92]	; (80082fc <USBD_LL_Init+0x94>)
 800829e:	2200      	movs	r2, #0
 80082a0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80082a2:	4b16      	ldr	r3, [pc, #88]	; (80082fc <USBD_LL_Init+0x94>)
 80082a4:	2202      	movs	r2, #2
 80082a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80082a8:	4b14      	ldr	r3, [pc, #80]	; (80082fc <USBD_LL_Init+0x94>)
 80082aa:	2200      	movs	r2, #0
 80082ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80082ae:	4b13      	ldr	r3, [pc, #76]	; (80082fc <USBD_LL_Init+0x94>)
 80082b0:	2200      	movs	r2, #0
 80082b2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80082b4:	4b11      	ldr	r3, [pc, #68]	; (80082fc <USBD_LL_Init+0x94>)
 80082b6:	2200      	movs	r2, #0
 80082b8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80082ba:	4b10      	ldr	r3, [pc, #64]	; (80082fc <USBD_LL_Init+0x94>)
 80082bc:	2200      	movs	r2, #0
 80082be:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80082c0:	4b0e      	ldr	r3, [pc, #56]	; (80082fc <USBD_LL_Init+0x94>)
 80082c2:	2200      	movs	r2, #0
 80082c4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80082c6:	480d      	ldr	r0, [pc, #52]	; (80082fc <USBD_LL_Init+0x94>)
 80082c8:	f7f8 ffd8 	bl	800127c <HAL_PCD_Init>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d001      	beq.n	80082d6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80082d2:	f7ff f9b1 	bl	8007638 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80082d6:	2180      	movs	r1, #128	; 0x80
 80082d8:	4808      	ldr	r0, [pc, #32]	; (80082fc <USBD_LL_Init+0x94>)
 80082da:	f7fa f970 	bl	80025be <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80082de:	2240      	movs	r2, #64	; 0x40
 80082e0:	2100      	movs	r1, #0
 80082e2:	4806      	ldr	r0, [pc, #24]	; (80082fc <USBD_LL_Init+0x94>)
 80082e4:	f7fa f924 	bl	8002530 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80082e8:	2280      	movs	r2, #128	; 0x80
 80082ea:	2101      	movs	r1, #1
 80082ec:	4803      	ldr	r0, [pc, #12]	; (80082fc <USBD_LL_Init+0x94>)
 80082ee:	f7fa f91f 	bl	8002530 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80082f2:	2300      	movs	r3, #0
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3708      	adds	r7, #8
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	200016ec 	.word	0x200016ec

08008300 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008308:	2300      	movs	r3, #0
 800830a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800830c:	2300      	movs	r3, #0
 800830e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008316:	4618      	mov	r0, r3
 8008318:	f7f9 f8d4 	bl	80014c4 <HAL_PCD_Start>
 800831c:	4603      	mov	r3, r0
 800831e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8008320:	7bfb      	ldrb	r3, [r7, #15]
 8008322:	4618      	mov	r0, r3
 8008324:	f000 f97c 	bl	8008620 <USBD_Get_USB_Status>
 8008328:	4603      	mov	r3, r0
 800832a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800832c:	7bbb      	ldrb	r3, [r7, #14]
}
 800832e:	4618      	mov	r0, r3
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}

08008336 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008336:	b580      	push	{r7, lr}
 8008338:	b084      	sub	sp, #16
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
 800833e:	4608      	mov	r0, r1
 8008340:	4611      	mov	r1, r2
 8008342:	461a      	mov	r2, r3
 8008344:	4603      	mov	r3, r0
 8008346:	70fb      	strb	r3, [r7, #3]
 8008348:	460b      	mov	r3, r1
 800834a:	70bb      	strb	r3, [r7, #2]
 800834c:	4613      	mov	r3, r2
 800834e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008350:	2300      	movs	r3, #0
 8008352:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008354:	2300      	movs	r3, #0
 8008356:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800835e:	78bb      	ldrb	r3, [r7, #2]
 8008360:	883a      	ldrh	r2, [r7, #0]
 8008362:	78f9      	ldrb	r1, [r7, #3]
 8008364:	f7f9 fcd6 	bl	8001d14 <HAL_PCD_EP_Open>
 8008368:	4603      	mov	r3, r0
 800836a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800836c:	7bfb      	ldrb	r3, [r7, #15]
 800836e:	4618      	mov	r0, r3
 8008370:	f000 f956 	bl	8008620 <USBD_Get_USB_Status>
 8008374:	4603      	mov	r3, r0
 8008376:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008378:	7bbb      	ldrb	r3, [r7, #14]
}
 800837a:	4618      	mov	r0, r3
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}

08008382 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008382:	b580      	push	{r7, lr}
 8008384:	b084      	sub	sp, #16
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
 800838a:	460b      	mov	r3, r1
 800838c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800838e:	2300      	movs	r3, #0
 8008390:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008392:	2300      	movs	r3, #0
 8008394:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800839c:	78fa      	ldrb	r2, [r7, #3]
 800839e:	4611      	mov	r1, r2
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7f9 fd1f 	bl	8001de4 <HAL_PCD_EP_Close>
 80083a6:	4603      	mov	r3, r0
 80083a8:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 80083aa:	7bfb      	ldrb	r3, [r7, #15]
 80083ac:	4618      	mov	r0, r3
 80083ae:	f000 f937 	bl	8008620 <USBD_Get_USB_Status>
 80083b2:	4603      	mov	r3, r0
 80083b4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80083b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3710      	adds	r7, #16
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	460b      	mov	r3, r1
 80083ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083cc:	2300      	movs	r3, #0
 80083ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083d0:	2300      	movs	r3, #0
 80083d2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80083da:	78fa      	ldrb	r2, [r7, #3]
 80083dc:	4611      	mov	r1, r2
 80083de:	4618      	mov	r0, r3
 80083e0:	f7f9 fdf7 	bl	8001fd2 <HAL_PCD_EP_SetStall>
 80083e4:	4603      	mov	r3, r0
 80083e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083e8:	7bfb      	ldrb	r3, [r7, #15]
 80083ea:	4618      	mov	r0, r3
 80083ec:	f000 f918 	bl	8008620 <USBD_Get_USB_Status>
 80083f0:	4603      	mov	r3, r0
 80083f2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80083f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}

080083fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083fe:	b580      	push	{r7, lr}
 8008400:	b084      	sub	sp, #16
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
 8008406:	460b      	mov	r3, r1
 8008408:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800840a:	2300      	movs	r3, #0
 800840c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800840e:	2300      	movs	r3, #0
 8008410:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008418:	78fa      	ldrb	r2, [r7, #3]
 800841a:	4611      	mov	r1, r2
 800841c:	4618      	mov	r0, r3
 800841e:	f7f9 fe3c 	bl	800209a <HAL_PCD_EP_ClrStall>
 8008422:	4603      	mov	r3, r0
 8008424:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8008426:	7bfb      	ldrb	r3, [r7, #15]
 8008428:	4618      	mov	r0, r3
 800842a:	f000 f8f9 	bl	8008620 <USBD_Get_USB_Status>
 800842e:	4603      	mov	r3, r0
 8008430:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8008432:	7bbb      	ldrb	r3, [r7, #14]
}
 8008434:	4618      	mov	r0, r3
 8008436:	3710      	adds	r7, #16
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800843c:	b480      	push	{r7}
 800843e:	b085      	sub	sp, #20
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	460b      	mov	r3, r1
 8008446:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800844e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8008450:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008454:	2b00      	cmp	r3, #0
 8008456:	da0b      	bge.n	8008470 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8008458:	78fb      	ldrb	r3, [r7, #3]
 800845a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800845e:	68f9      	ldr	r1, [r7, #12]
 8008460:	4613      	mov	r3, r2
 8008462:	00db      	lsls	r3, r3, #3
 8008464:	1a9b      	subs	r3, r3, r2
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	440b      	add	r3, r1
 800846a:	333e      	adds	r3, #62	; 0x3e
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	e00b      	b.n	8008488 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8008470:	78fb      	ldrb	r3, [r7, #3]
 8008472:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008476:	68f9      	ldr	r1, [r7, #12]
 8008478:	4613      	mov	r3, r2
 800847a:	00db      	lsls	r3, r3, #3
 800847c:	1a9b      	subs	r3, r3, r2
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	440b      	add	r3, r1
 8008482:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008486:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008488:	4618      	mov	r0, r3
 800848a:	3714      	adds	r7, #20
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr

08008494 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	460b      	mov	r3, r1
 800849e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084a0:	2300      	movs	r3, #0
 80084a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084a4:	2300      	movs	r3, #0
 80084a6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80084ae:	78fa      	ldrb	r2, [r7, #3]
 80084b0:	4611      	mov	r1, r2
 80084b2:	4618      	mov	r0, r3
 80084b4:	f7f9 fc09 	bl	8001cca <HAL_PCD_SetAddress>
 80084b8:	4603      	mov	r3, r0
 80084ba:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 80084bc:	7bfb      	ldrb	r3, [r7, #15]
 80084be:	4618      	mov	r0, r3
 80084c0:	f000 f8ae 	bl	8008620 <USBD_Get_USB_Status>
 80084c4:	4603      	mov	r3, r0
 80084c6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80084c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3710      	adds	r7, #16
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}

080084d2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80084d2:	b580      	push	{r7, lr}
 80084d4:	b086      	sub	sp, #24
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	60f8      	str	r0, [r7, #12]
 80084da:	607a      	str	r2, [r7, #4]
 80084dc:	461a      	mov	r2, r3
 80084de:	460b      	mov	r3, r1
 80084e0:	72fb      	strb	r3, [r7, #11]
 80084e2:	4613      	mov	r3, r2
 80084e4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084e6:	2300      	movs	r3, #0
 80084e8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084ea:	2300      	movs	r3, #0
 80084ec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80084f4:	893b      	ldrh	r3, [r7, #8]
 80084f6:	7af9      	ldrb	r1, [r7, #11]
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	f7f9 fd20 	bl	8001f3e <HAL_PCD_EP_Transmit>
 80084fe:	4603      	mov	r3, r0
 8008500:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8008502:	7dfb      	ldrb	r3, [r7, #23]
 8008504:	4618      	mov	r0, r3
 8008506:	f000 f88b 	bl	8008620 <USBD_Get_USB_Status>
 800850a:	4603      	mov	r3, r0
 800850c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800850e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008510:	4618      	mov	r0, r3
 8008512:	3718      	adds	r7, #24
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b086      	sub	sp, #24
 800851c:	af00      	add	r7, sp, #0
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	607a      	str	r2, [r7, #4]
 8008522:	461a      	mov	r2, r3
 8008524:	460b      	mov	r3, r1
 8008526:	72fb      	strb	r3, [r7, #11]
 8008528:	4613      	mov	r3, r2
 800852a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800852c:	2300      	movs	r3, #0
 800852e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008530:	2300      	movs	r3, #0
 8008532:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800853a:	893b      	ldrh	r3, [r7, #8]
 800853c:	7af9      	ldrb	r1, [r7, #11]
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	f7f9 fc9a 	bl	8001e78 <HAL_PCD_EP_Receive>
 8008544:	4603      	mov	r3, r0
 8008546:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8008548:	7dfb      	ldrb	r3, [r7, #23]
 800854a:	4618      	mov	r0, r3
 800854c:	f000 f868 	bl	8008620 <USBD_Get_USB_Status>
 8008550:	4603      	mov	r3, r0
 8008552:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8008554:	7dbb      	ldrb	r3, [r7, #22]
}
 8008556:	4618      	mov	r0, r3
 8008558:	3718      	adds	r7, #24
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}

0800855e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800855e:	b580      	push	{r7, lr}
 8008560:	b082      	sub	sp, #8
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
 8008566:	460b      	mov	r3, r1
 8008568:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008570:	78fa      	ldrb	r2, [r7, #3]
 8008572:	4611      	mov	r1, r2
 8008574:	4618      	mov	r0, r3
 8008576:	f7f9 fcca 	bl	8001f0e <HAL_PCD_EP_GetRxCount>
 800857a:	4603      	mov	r3, r0
}
 800857c:	4618      	mov	r0, r3
 800857e:	3708      	adds	r7, #8
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b082      	sub	sp, #8
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	460b      	mov	r3, r1
 800858e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008590:	78fb      	ldrb	r3, [r7, #3]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d002      	beq.n	800859c <HAL_PCDEx_LPM_Callback+0x18>
 8008596:	2b01      	cmp	r3, #1
 8008598:	d01f      	beq.n	80085da <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 800859a:	e03b      	b.n	8008614 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6a1b      	ldr	r3, [r3, #32]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d007      	beq.n	80085b4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 80085a4:	f7fe ffbe 	bl	8007524 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80085a8:	4b1c      	ldr	r3, [pc, #112]	; (800861c <HAL_PCDEx_LPM_Callback+0x98>)
 80085aa:	691b      	ldr	r3, [r3, #16]
 80085ac:	4a1b      	ldr	r2, [pc, #108]	; (800861c <HAL_PCDEx_LPM_Callback+0x98>)
 80085ae:	f023 0306 	bic.w	r3, r3, #6
 80085b2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	6812      	ldr	r2, [r2, #0]
 80085c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80085c6:	f023 0301 	bic.w	r3, r3, #1
 80085ca:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7fd ff2a 	bl	800642c <USBD_LL_Resume>
    break;
 80085d8:	e01c      	b.n	8008614 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	6812      	ldr	r2, [r2, #0]
 80085e8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80085ec:	f043 0301 	orr.w	r3, r3, #1
 80085f0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80085f8:	4618      	mov	r0, r3
 80085fa:	f7fd ff02 	bl	8006402 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6a1b      	ldr	r3, [r3, #32]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d005      	beq.n	8008612 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008606:	4b05      	ldr	r3, [pc, #20]	; (800861c <HAL_PCDEx_LPM_Callback+0x98>)
 8008608:	691b      	ldr	r3, [r3, #16]
 800860a:	4a04      	ldr	r2, [pc, #16]	; (800861c <HAL_PCDEx_LPM_Callback+0x98>)
 800860c:	f043 0306 	orr.w	r3, r3, #6
 8008610:	6113      	str	r3, [r2, #16]
    break;   
 8008612:	bf00      	nop
}
 8008614:	bf00      	nop
 8008616:	3708      	adds	r7, #8
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}
 800861c:	e000ed00 	.word	0xe000ed00

08008620 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008620:	b480      	push	{r7}
 8008622:	b085      	sub	sp, #20
 8008624:	af00      	add	r7, sp, #0
 8008626:	4603      	mov	r3, r0
 8008628:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800862a:	2300      	movs	r3, #0
 800862c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800862e:	79fb      	ldrb	r3, [r7, #7]
 8008630:	2b03      	cmp	r3, #3
 8008632:	d817      	bhi.n	8008664 <USBD_Get_USB_Status+0x44>
 8008634:	a201      	add	r2, pc, #4	; (adr r2, 800863c <USBD_Get_USB_Status+0x1c>)
 8008636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800863a:	bf00      	nop
 800863c:	0800864d 	.word	0x0800864d
 8008640:	08008653 	.word	0x08008653
 8008644:	08008659 	.word	0x08008659
 8008648:	0800865f 	.word	0x0800865f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800864c:	2300      	movs	r3, #0
 800864e:	73fb      	strb	r3, [r7, #15]
    break;
 8008650:	e00b      	b.n	800866a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008652:	2302      	movs	r3, #2
 8008654:	73fb      	strb	r3, [r7, #15]
    break;
 8008656:	e008      	b.n	800866a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008658:	2301      	movs	r3, #1
 800865a:	73fb      	strb	r3, [r7, #15]
    break;
 800865c:	e005      	b.n	800866a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800865e:	2302      	movs	r3, #2
 8008660:	73fb      	strb	r3, [r7, #15]
    break;
 8008662:	e002      	b.n	800866a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008664:	2302      	movs	r3, #2
 8008666:	73fb      	strb	r3, [r7, #15]
    break;
 8008668:	bf00      	nop
  }
  return usb_status;
 800866a:	7bfb      	ldrb	r3, [r7, #15]
}
 800866c:	4618      	mov	r0, r3
 800866e:	3714      	adds	r7, #20
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	4603      	mov	r3, r0
 8008680:	6039      	str	r1, [r7, #0]
 8008682:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	2212      	movs	r2, #18
 8008688:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800868a:	4b03      	ldr	r3, [pc, #12]	; (8008698 <USBD_FS_DeviceDescriptor+0x20>)
}
 800868c:	4618      	mov	r0, r3
 800868e:	370c      	adds	r7, #12
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr
 8008698:	2000014c 	.word	0x2000014c

0800869c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	4603      	mov	r3, r0
 80086a4:	6039      	str	r1, [r7, #0]
 80086a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	2204      	movs	r2, #4
 80086ac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80086ae:	4b03      	ldr	r3, [pc, #12]	; (80086bc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr
 80086bc:	2000016c 	.word	0x2000016c

080086c0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	4603      	mov	r3, r0
 80086c8:	6039      	str	r1, [r7, #0]
 80086ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80086cc:	79fb      	ldrb	r3, [r7, #7]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d105      	bne.n	80086de <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80086d2:	683a      	ldr	r2, [r7, #0]
 80086d4:	4907      	ldr	r1, [pc, #28]	; (80086f4 <USBD_FS_ProductStrDescriptor+0x34>)
 80086d6:	4808      	ldr	r0, [pc, #32]	; (80086f8 <USBD_FS_ProductStrDescriptor+0x38>)
 80086d8:	f7fe fbec 	bl	8006eb4 <USBD_GetString>
 80086dc:	e004      	b.n	80086e8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80086de:	683a      	ldr	r2, [r7, #0]
 80086e0:	4904      	ldr	r1, [pc, #16]	; (80086f4 <USBD_FS_ProductStrDescriptor+0x34>)
 80086e2:	4805      	ldr	r0, [pc, #20]	; (80086f8 <USBD_FS_ProductStrDescriptor+0x38>)
 80086e4:	f7fe fbe6 	bl	8006eb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80086e8:	4b02      	ldr	r3, [pc, #8]	; (80086f4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3708      	adds	r7, #8
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	20001af4 	.word	0x20001af4
 80086f8:	08008b1c 	.word	0x08008b1c

080086fc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
 8008702:	4603      	mov	r3, r0
 8008704:	6039      	str	r1, [r7, #0]
 8008706:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008708:	683a      	ldr	r2, [r7, #0]
 800870a:	4904      	ldr	r1, [pc, #16]	; (800871c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800870c:	4804      	ldr	r0, [pc, #16]	; (8008720 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800870e:	f7fe fbd1 	bl	8006eb4 <USBD_GetString>
  return USBD_StrDesc;
 8008712:	4b02      	ldr	r3, [pc, #8]	; (800871c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008714:	4618      	mov	r0, r3
 8008716:	3708      	adds	r7, #8
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}
 800871c:	20001af4 	.word	0x20001af4
 8008720:	08008b34 	.word	0x08008b34

08008724 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	4603      	mov	r3, r0
 800872c:	6039      	str	r1, [r7, #0]
 800872e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	221a      	movs	r2, #26
 8008734:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008736:	f000 f855 	bl	80087e4 <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 800873a:	4b02      	ldr	r3, [pc, #8]	; (8008744 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800873c:	4618      	mov	r0, r3
 800873e:	3708      	adds	r7, #8
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}
 8008744:	20000170 	.word	0x20000170

08008748 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b082      	sub	sp, #8
 800874c:	af00      	add	r7, sp, #0
 800874e:	4603      	mov	r3, r0
 8008750:	6039      	str	r1, [r7, #0]
 8008752:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008754:	79fb      	ldrb	r3, [r7, #7]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d105      	bne.n	8008766 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800875a:	683a      	ldr	r2, [r7, #0]
 800875c:	4907      	ldr	r1, [pc, #28]	; (800877c <USBD_FS_ConfigStrDescriptor+0x34>)
 800875e:	4808      	ldr	r0, [pc, #32]	; (8008780 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008760:	f7fe fba8 	bl	8006eb4 <USBD_GetString>
 8008764:	e004      	b.n	8008770 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008766:	683a      	ldr	r2, [r7, #0]
 8008768:	4904      	ldr	r1, [pc, #16]	; (800877c <USBD_FS_ConfigStrDescriptor+0x34>)
 800876a:	4805      	ldr	r0, [pc, #20]	; (8008780 <USBD_FS_ConfigStrDescriptor+0x38>)
 800876c:	f7fe fba2 	bl	8006eb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008770:	4b02      	ldr	r3, [pc, #8]	; (800877c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008772:	4618      	mov	r0, r3
 8008774:	3708      	adds	r7, #8
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	20001af4 	.word	0x20001af4
 8008780:	08008b48 	.word	0x08008b48

08008784 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	4603      	mov	r3, r0
 800878c:	6039      	str	r1, [r7, #0]
 800878e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008790:	79fb      	ldrb	r3, [r7, #7]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d105      	bne.n	80087a2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008796:	683a      	ldr	r2, [r7, #0]
 8008798:	4907      	ldr	r1, [pc, #28]	; (80087b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800879a:	4808      	ldr	r0, [pc, #32]	; (80087bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800879c:	f7fe fb8a 	bl	8006eb4 <USBD_GetString>
 80087a0:	e004      	b.n	80087ac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80087a2:	683a      	ldr	r2, [r7, #0]
 80087a4:	4904      	ldr	r1, [pc, #16]	; (80087b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80087a6:	4805      	ldr	r0, [pc, #20]	; (80087bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80087a8:	f7fe fb84 	bl	8006eb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80087ac:	4b02      	ldr	r3, [pc, #8]	; (80087b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3708      	adds	r7, #8
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop
 80087b8:	20001af4 	.word	0x20001af4
 80087bc:	08008b54 	.word	0x08008b54

080087c0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b083      	sub	sp, #12
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	4603      	mov	r3, r0
 80087c8:	6039      	str	r1, [r7, #0]
 80087ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	220c      	movs	r2, #12
 80087d0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80087d2:	4b03      	ldr	r3, [pc, #12]	; (80087e0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr
 80087e0:	20000160 	.word	0x20000160

080087e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80087ea:	4b0f      	ldr	r3, [pc, #60]	; (8008828 <Get_SerialNum+0x44>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80087f0:	4b0e      	ldr	r3, [pc, #56]	; (800882c <Get_SerialNum+0x48>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80087f6:	4b0e      	ldr	r3, [pc, #56]	; (8008830 <Get_SerialNum+0x4c>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80087fc:	68fa      	ldr	r2, [r7, #12]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	4413      	add	r3, r2
 8008802:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d009      	beq.n	800881e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800880a:	2208      	movs	r2, #8
 800880c:	4909      	ldr	r1, [pc, #36]	; (8008834 <Get_SerialNum+0x50>)
 800880e:	68f8      	ldr	r0, [r7, #12]
 8008810:	f000 f814 	bl	800883c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008814:	2204      	movs	r2, #4
 8008816:	4908      	ldr	r1, [pc, #32]	; (8008838 <Get_SerialNum+0x54>)
 8008818:	68b8      	ldr	r0, [r7, #8]
 800881a:	f000 f80f 	bl	800883c <IntToUnicode>
  }
}
 800881e:	bf00      	nop
 8008820:	3710      	adds	r7, #16
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	1fff7a10 	.word	0x1fff7a10
 800882c:	1fff7a14 	.word	0x1fff7a14
 8008830:	1fff7a18 	.word	0x1fff7a18
 8008834:	20000172 	.word	0x20000172
 8008838:	20000182 	.word	0x20000182

0800883c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800883c:	b480      	push	{r7}
 800883e:	b087      	sub	sp, #28
 8008840:	af00      	add	r7, sp, #0
 8008842:	60f8      	str	r0, [r7, #12]
 8008844:	60b9      	str	r1, [r7, #8]
 8008846:	4613      	mov	r3, r2
 8008848:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800884a:	2300      	movs	r3, #0
 800884c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800884e:	2300      	movs	r3, #0
 8008850:	75fb      	strb	r3, [r7, #23]
 8008852:	e027      	b.n	80088a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	0f1b      	lsrs	r3, r3, #28
 8008858:	2b09      	cmp	r3, #9
 800885a:	d80b      	bhi.n	8008874 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	0f1b      	lsrs	r3, r3, #28
 8008860:	b2da      	uxtb	r2, r3
 8008862:	7dfb      	ldrb	r3, [r7, #23]
 8008864:	005b      	lsls	r3, r3, #1
 8008866:	4619      	mov	r1, r3
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	440b      	add	r3, r1
 800886c:	3230      	adds	r2, #48	; 0x30
 800886e:	b2d2      	uxtb	r2, r2
 8008870:	701a      	strb	r2, [r3, #0]
 8008872:	e00a      	b.n	800888a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	0f1b      	lsrs	r3, r3, #28
 8008878:	b2da      	uxtb	r2, r3
 800887a:	7dfb      	ldrb	r3, [r7, #23]
 800887c:	005b      	lsls	r3, r3, #1
 800887e:	4619      	mov	r1, r3
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	440b      	add	r3, r1
 8008884:	3237      	adds	r2, #55	; 0x37
 8008886:	b2d2      	uxtb	r2, r2
 8008888:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	011b      	lsls	r3, r3, #4
 800888e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008890:	7dfb      	ldrb	r3, [r7, #23]
 8008892:	005b      	lsls	r3, r3, #1
 8008894:	3301      	adds	r3, #1
 8008896:	68ba      	ldr	r2, [r7, #8]
 8008898:	4413      	add	r3, r2
 800889a:	2200      	movs	r2, #0
 800889c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800889e:	7dfb      	ldrb	r3, [r7, #23]
 80088a0:	3301      	adds	r3, #1
 80088a2:	75fb      	strb	r3, [r7, #23]
 80088a4:	7dfa      	ldrb	r2, [r7, #23]
 80088a6:	79fb      	ldrb	r3, [r7, #7]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d3d3      	bcc.n	8008854 <IntToUnicode+0x18>
  }
}
 80088ac:	bf00      	nop
 80088ae:	371c      	adds	r7, #28
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80088b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80088f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80088bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80088be:	e003      	b.n	80088c8 <LoopCopyDataInit>

080088c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80088c0:	4b0c      	ldr	r3, [pc, #48]	; (80088f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80088c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80088c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80088c6:	3104      	adds	r1, #4

080088c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80088c8:	480b      	ldr	r0, [pc, #44]	; (80088f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80088ca:	4b0c      	ldr	r3, [pc, #48]	; (80088fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80088cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80088ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80088d0:	d3f6      	bcc.n	80088c0 <CopyDataInit>
  ldr  r2, =_sbss
 80088d2:	4a0b      	ldr	r2, [pc, #44]	; (8008900 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80088d4:	e002      	b.n	80088dc <LoopFillZerobss>

080088d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80088d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80088d8:	f842 3b04 	str.w	r3, [r2], #4

080088dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80088dc:	4b09      	ldr	r3, [pc, #36]	; (8008904 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80088de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80088e0:	d3f9      	bcc.n	80088d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80088e2:	f7fe ffb9 	bl	8007858 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80088e6:	f000 f817 	bl	8008918 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80088ea:	f7fe fdf1 	bl	80074d0 <main>
  bx  lr    
 80088ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80088f0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80088f4:	08008b8c 	.word	0x08008b8c
  ldr  r0, =_sdata
 80088f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80088fc:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 8008900:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 8008904:	20001cf8 	.word	0x20001cf8

08008908 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008908:	e7fe      	b.n	8008908 <ADC_IRQHandler>
	...

0800890c <__errno>:
 800890c:	4b01      	ldr	r3, [pc, #4]	; (8008914 <__errno+0x8>)
 800890e:	6818      	ldr	r0, [r3, #0]
 8008910:	4770      	bx	lr
 8008912:	bf00      	nop
 8008914:	2000018c 	.word	0x2000018c

08008918 <__libc_init_array>:
 8008918:	b570      	push	{r4, r5, r6, lr}
 800891a:	4e0d      	ldr	r6, [pc, #52]	; (8008950 <__libc_init_array+0x38>)
 800891c:	4c0d      	ldr	r4, [pc, #52]	; (8008954 <__libc_init_array+0x3c>)
 800891e:	1ba4      	subs	r4, r4, r6
 8008920:	10a4      	asrs	r4, r4, #2
 8008922:	2500      	movs	r5, #0
 8008924:	42a5      	cmp	r5, r4
 8008926:	d109      	bne.n	800893c <__libc_init_array+0x24>
 8008928:	4e0b      	ldr	r6, [pc, #44]	; (8008958 <__libc_init_array+0x40>)
 800892a:	4c0c      	ldr	r4, [pc, #48]	; (800895c <__libc_init_array+0x44>)
 800892c:	f000 f8ea 	bl	8008b04 <_init>
 8008930:	1ba4      	subs	r4, r4, r6
 8008932:	10a4      	asrs	r4, r4, #2
 8008934:	2500      	movs	r5, #0
 8008936:	42a5      	cmp	r5, r4
 8008938:	d105      	bne.n	8008946 <__libc_init_array+0x2e>
 800893a:	bd70      	pop	{r4, r5, r6, pc}
 800893c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008940:	4798      	blx	r3
 8008942:	3501      	adds	r5, #1
 8008944:	e7ee      	b.n	8008924 <__libc_init_array+0xc>
 8008946:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800894a:	4798      	blx	r3
 800894c:	3501      	adds	r5, #1
 800894e:	e7f2      	b.n	8008936 <__libc_init_array+0x1e>
 8008950:	08008b84 	.word	0x08008b84
 8008954:	08008b84 	.word	0x08008b84
 8008958:	08008b84 	.word	0x08008b84
 800895c:	08008b88 	.word	0x08008b88

08008960 <malloc>:
 8008960:	4b02      	ldr	r3, [pc, #8]	; (800896c <malloc+0xc>)
 8008962:	4601      	mov	r1, r0
 8008964:	6818      	ldr	r0, [r3, #0]
 8008966:	f000 b861 	b.w	8008a2c <_malloc_r>
 800896a:	bf00      	nop
 800896c:	2000018c 	.word	0x2000018c

08008970 <free>:
 8008970:	4b02      	ldr	r3, [pc, #8]	; (800897c <free+0xc>)
 8008972:	4601      	mov	r1, r0
 8008974:	6818      	ldr	r0, [r3, #0]
 8008976:	f000 b80b 	b.w	8008990 <_free_r>
 800897a:	bf00      	nop
 800897c:	2000018c 	.word	0x2000018c

08008980 <memset>:
 8008980:	4402      	add	r2, r0
 8008982:	4603      	mov	r3, r0
 8008984:	4293      	cmp	r3, r2
 8008986:	d100      	bne.n	800898a <memset+0xa>
 8008988:	4770      	bx	lr
 800898a:	f803 1b01 	strb.w	r1, [r3], #1
 800898e:	e7f9      	b.n	8008984 <memset+0x4>

08008990 <_free_r>:
 8008990:	b538      	push	{r3, r4, r5, lr}
 8008992:	4605      	mov	r5, r0
 8008994:	2900      	cmp	r1, #0
 8008996:	d045      	beq.n	8008a24 <_free_r+0x94>
 8008998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800899c:	1f0c      	subs	r4, r1, #4
 800899e:	2b00      	cmp	r3, #0
 80089a0:	bfb8      	it	lt
 80089a2:	18e4      	addlt	r4, r4, r3
 80089a4:	f000 f8ac 	bl	8008b00 <__malloc_lock>
 80089a8:	4a1f      	ldr	r2, [pc, #124]	; (8008a28 <_free_r+0x98>)
 80089aa:	6813      	ldr	r3, [r2, #0]
 80089ac:	4610      	mov	r0, r2
 80089ae:	b933      	cbnz	r3, 80089be <_free_r+0x2e>
 80089b0:	6063      	str	r3, [r4, #4]
 80089b2:	6014      	str	r4, [r2, #0]
 80089b4:	4628      	mov	r0, r5
 80089b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089ba:	f000 b8a2 	b.w	8008b02 <__malloc_unlock>
 80089be:	42a3      	cmp	r3, r4
 80089c0:	d90c      	bls.n	80089dc <_free_r+0x4c>
 80089c2:	6821      	ldr	r1, [r4, #0]
 80089c4:	1862      	adds	r2, r4, r1
 80089c6:	4293      	cmp	r3, r2
 80089c8:	bf04      	itt	eq
 80089ca:	681a      	ldreq	r2, [r3, #0]
 80089cc:	685b      	ldreq	r3, [r3, #4]
 80089ce:	6063      	str	r3, [r4, #4]
 80089d0:	bf04      	itt	eq
 80089d2:	1852      	addeq	r2, r2, r1
 80089d4:	6022      	streq	r2, [r4, #0]
 80089d6:	6004      	str	r4, [r0, #0]
 80089d8:	e7ec      	b.n	80089b4 <_free_r+0x24>
 80089da:	4613      	mov	r3, r2
 80089dc:	685a      	ldr	r2, [r3, #4]
 80089de:	b10a      	cbz	r2, 80089e4 <_free_r+0x54>
 80089e0:	42a2      	cmp	r2, r4
 80089e2:	d9fa      	bls.n	80089da <_free_r+0x4a>
 80089e4:	6819      	ldr	r1, [r3, #0]
 80089e6:	1858      	adds	r0, r3, r1
 80089e8:	42a0      	cmp	r0, r4
 80089ea:	d10b      	bne.n	8008a04 <_free_r+0x74>
 80089ec:	6820      	ldr	r0, [r4, #0]
 80089ee:	4401      	add	r1, r0
 80089f0:	1858      	adds	r0, r3, r1
 80089f2:	4282      	cmp	r2, r0
 80089f4:	6019      	str	r1, [r3, #0]
 80089f6:	d1dd      	bne.n	80089b4 <_free_r+0x24>
 80089f8:	6810      	ldr	r0, [r2, #0]
 80089fa:	6852      	ldr	r2, [r2, #4]
 80089fc:	605a      	str	r2, [r3, #4]
 80089fe:	4401      	add	r1, r0
 8008a00:	6019      	str	r1, [r3, #0]
 8008a02:	e7d7      	b.n	80089b4 <_free_r+0x24>
 8008a04:	d902      	bls.n	8008a0c <_free_r+0x7c>
 8008a06:	230c      	movs	r3, #12
 8008a08:	602b      	str	r3, [r5, #0]
 8008a0a:	e7d3      	b.n	80089b4 <_free_r+0x24>
 8008a0c:	6820      	ldr	r0, [r4, #0]
 8008a0e:	1821      	adds	r1, r4, r0
 8008a10:	428a      	cmp	r2, r1
 8008a12:	bf04      	itt	eq
 8008a14:	6811      	ldreq	r1, [r2, #0]
 8008a16:	6852      	ldreq	r2, [r2, #4]
 8008a18:	6062      	str	r2, [r4, #4]
 8008a1a:	bf04      	itt	eq
 8008a1c:	1809      	addeq	r1, r1, r0
 8008a1e:	6021      	streq	r1, [r4, #0]
 8008a20:	605c      	str	r4, [r3, #4]
 8008a22:	e7c7      	b.n	80089b4 <_free_r+0x24>
 8008a24:	bd38      	pop	{r3, r4, r5, pc}
 8008a26:	bf00      	nop
 8008a28:	20000214 	.word	0x20000214

08008a2c <_malloc_r>:
 8008a2c:	b570      	push	{r4, r5, r6, lr}
 8008a2e:	1ccd      	adds	r5, r1, #3
 8008a30:	f025 0503 	bic.w	r5, r5, #3
 8008a34:	3508      	adds	r5, #8
 8008a36:	2d0c      	cmp	r5, #12
 8008a38:	bf38      	it	cc
 8008a3a:	250c      	movcc	r5, #12
 8008a3c:	2d00      	cmp	r5, #0
 8008a3e:	4606      	mov	r6, r0
 8008a40:	db01      	blt.n	8008a46 <_malloc_r+0x1a>
 8008a42:	42a9      	cmp	r1, r5
 8008a44:	d903      	bls.n	8008a4e <_malloc_r+0x22>
 8008a46:	230c      	movs	r3, #12
 8008a48:	6033      	str	r3, [r6, #0]
 8008a4a:	2000      	movs	r0, #0
 8008a4c:	bd70      	pop	{r4, r5, r6, pc}
 8008a4e:	f000 f857 	bl	8008b00 <__malloc_lock>
 8008a52:	4a21      	ldr	r2, [pc, #132]	; (8008ad8 <_malloc_r+0xac>)
 8008a54:	6814      	ldr	r4, [r2, #0]
 8008a56:	4621      	mov	r1, r4
 8008a58:	b991      	cbnz	r1, 8008a80 <_malloc_r+0x54>
 8008a5a:	4c20      	ldr	r4, [pc, #128]	; (8008adc <_malloc_r+0xb0>)
 8008a5c:	6823      	ldr	r3, [r4, #0]
 8008a5e:	b91b      	cbnz	r3, 8008a68 <_malloc_r+0x3c>
 8008a60:	4630      	mov	r0, r6
 8008a62:	f000 f83d 	bl	8008ae0 <_sbrk_r>
 8008a66:	6020      	str	r0, [r4, #0]
 8008a68:	4629      	mov	r1, r5
 8008a6a:	4630      	mov	r0, r6
 8008a6c:	f000 f838 	bl	8008ae0 <_sbrk_r>
 8008a70:	1c43      	adds	r3, r0, #1
 8008a72:	d124      	bne.n	8008abe <_malloc_r+0x92>
 8008a74:	230c      	movs	r3, #12
 8008a76:	6033      	str	r3, [r6, #0]
 8008a78:	4630      	mov	r0, r6
 8008a7a:	f000 f842 	bl	8008b02 <__malloc_unlock>
 8008a7e:	e7e4      	b.n	8008a4a <_malloc_r+0x1e>
 8008a80:	680b      	ldr	r3, [r1, #0]
 8008a82:	1b5b      	subs	r3, r3, r5
 8008a84:	d418      	bmi.n	8008ab8 <_malloc_r+0x8c>
 8008a86:	2b0b      	cmp	r3, #11
 8008a88:	d90f      	bls.n	8008aaa <_malloc_r+0x7e>
 8008a8a:	600b      	str	r3, [r1, #0]
 8008a8c:	50cd      	str	r5, [r1, r3]
 8008a8e:	18cc      	adds	r4, r1, r3
 8008a90:	4630      	mov	r0, r6
 8008a92:	f000 f836 	bl	8008b02 <__malloc_unlock>
 8008a96:	f104 000b 	add.w	r0, r4, #11
 8008a9a:	1d23      	adds	r3, r4, #4
 8008a9c:	f020 0007 	bic.w	r0, r0, #7
 8008aa0:	1ac3      	subs	r3, r0, r3
 8008aa2:	d0d3      	beq.n	8008a4c <_malloc_r+0x20>
 8008aa4:	425a      	negs	r2, r3
 8008aa6:	50e2      	str	r2, [r4, r3]
 8008aa8:	e7d0      	b.n	8008a4c <_malloc_r+0x20>
 8008aaa:	428c      	cmp	r4, r1
 8008aac:	684b      	ldr	r3, [r1, #4]
 8008aae:	bf16      	itet	ne
 8008ab0:	6063      	strne	r3, [r4, #4]
 8008ab2:	6013      	streq	r3, [r2, #0]
 8008ab4:	460c      	movne	r4, r1
 8008ab6:	e7eb      	b.n	8008a90 <_malloc_r+0x64>
 8008ab8:	460c      	mov	r4, r1
 8008aba:	6849      	ldr	r1, [r1, #4]
 8008abc:	e7cc      	b.n	8008a58 <_malloc_r+0x2c>
 8008abe:	1cc4      	adds	r4, r0, #3
 8008ac0:	f024 0403 	bic.w	r4, r4, #3
 8008ac4:	42a0      	cmp	r0, r4
 8008ac6:	d005      	beq.n	8008ad4 <_malloc_r+0xa8>
 8008ac8:	1a21      	subs	r1, r4, r0
 8008aca:	4630      	mov	r0, r6
 8008acc:	f000 f808 	bl	8008ae0 <_sbrk_r>
 8008ad0:	3001      	adds	r0, #1
 8008ad2:	d0cf      	beq.n	8008a74 <_malloc_r+0x48>
 8008ad4:	6025      	str	r5, [r4, #0]
 8008ad6:	e7db      	b.n	8008a90 <_malloc_r+0x64>
 8008ad8:	20000214 	.word	0x20000214
 8008adc:	20000218 	.word	0x20000218

08008ae0 <_sbrk_r>:
 8008ae0:	b538      	push	{r3, r4, r5, lr}
 8008ae2:	4c06      	ldr	r4, [pc, #24]	; (8008afc <_sbrk_r+0x1c>)
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	4605      	mov	r5, r0
 8008ae8:	4608      	mov	r0, r1
 8008aea:	6023      	str	r3, [r4, #0]
 8008aec:	f7fe fe88 	bl	8007800 <_sbrk>
 8008af0:	1c43      	adds	r3, r0, #1
 8008af2:	d102      	bne.n	8008afa <_sbrk_r+0x1a>
 8008af4:	6823      	ldr	r3, [r4, #0]
 8008af6:	b103      	cbz	r3, 8008afa <_sbrk_r+0x1a>
 8008af8:	602b      	str	r3, [r5, #0]
 8008afa:	bd38      	pop	{r3, r4, r5, pc}
 8008afc:	20001cf4 	.word	0x20001cf4

08008b00 <__malloc_lock>:
 8008b00:	4770      	bx	lr

08008b02 <__malloc_unlock>:
 8008b02:	4770      	bx	lr

08008b04 <_init>:
 8008b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b06:	bf00      	nop
 8008b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b0a:	bc08      	pop	{r3}
 8008b0c:	469e      	mov	lr, r3
 8008b0e:	4770      	bx	lr

08008b10 <_fini>:
 8008b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b12:	bf00      	nop
 8008b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b16:	bc08      	pop	{r3}
 8008b18:	469e      	mov	lr, r3
 8008b1a:	4770      	bx	lr
