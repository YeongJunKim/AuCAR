
AuCAR_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003eb8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800407c  0800407c  0001407c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004094  08004094  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004094  08004094  00014094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800409c  0800409c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800409c  0800409c  0001409c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040a0  080040a0  000140a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080040a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  20000014  080040b8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  080040b8  000202e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d5d5  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020aa  00000000  00000000  0002d619  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d60  00000000  00000000  0002f6c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c38  00000000  00000000  00030428  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002179b  00000000  00000000  00031060  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b09f  00000000  00000000  000527fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cad4a  00000000  00000000  0005d89a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001285e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003684  00000000  00000000  00128660  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000014 	.word	0x20000014
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004064 	.word	0x08004064

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000018 	.word	0x20000018
 8000200:	08004064 	.word	0x08004064

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000508:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <HAL_Init+0x40>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a0d      	ldr	r2, [pc, #52]	; (8000544 <HAL_Init+0x40>)
 800050e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000512:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <HAL_Init+0x40>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <HAL_Init+0x40>)
 800051a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800051e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <HAL_Init+0x40>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a07      	ldr	r2, [pc, #28]	; (8000544 <HAL_Init+0x40>)
 8000526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800052a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 f92b 	bl	8000788 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 f808 	bl	8000548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000538:	f002 ff18 	bl	800336c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800053c:	2300      	movs	r3, #0
}
 800053e:	4618      	mov	r0, r3
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40023c00 	.word	0x40023c00

08000548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <HAL_InitTick+0x54>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <HAL_InitTick+0x58>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4619      	mov	r1, r3
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000562:	fbb2 f3f3 	udiv	r3, r2, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f943 	bl	80007f2 <HAL_SYSTICK_Config>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000572:	2301      	movs	r3, #1
 8000574:	e00e      	b.n	8000594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2b0f      	cmp	r3, #15
 800057a:	d80a      	bhi.n	8000592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800057c:	2200      	movs	r2, #0
 800057e:	6879      	ldr	r1, [r7, #4]
 8000580:	f04f 30ff 	mov.w	r0, #4294967295
 8000584:	f000 f90b 	bl	800079e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <HAL_InitTick+0x5c>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800058e:	2300      	movs	r3, #0
 8000590:	e000      	b.n	8000594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000592:	2301      	movs	r3, #1
}
 8000594:	4618      	mov	r0, r3
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000010 	.word	0x20000010
 80005a0:	20000004 	.word	0x20000004
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_IncTick+0x20>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_IncTick+0x24>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	4a04      	ldr	r2, [pc, #16]	; (80005cc <HAL_IncTick+0x24>)
 80005ba:	6013      	str	r3, [r2, #0]
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000004 	.word	0x20000004
 80005cc:	20000038 	.word	0x20000038

080005d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  return uwTick;
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <HAL_GetTick+0x14>)
 80005d6:	681b      	ldr	r3, [r3, #0]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000038 	.word	0x20000038

080005e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	f003 0307 	and.w	r3, r3, #7
 80005f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f8:	4b0c      	ldr	r3, [pc, #48]	; (800062c <__NVIC_SetPriorityGrouping+0x44>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005fe:	68ba      	ldr	r2, [r7, #8]
 8000600:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000604:	4013      	ands	r3, r2
 8000606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000610:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800061a:	4a04      	ldr	r2, [pc, #16]	; (800062c <__NVIC_SetPriorityGrouping+0x44>)
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	60d3      	str	r3, [r2, #12]
}
 8000620:	bf00      	nop
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000634:	4b04      	ldr	r3, [pc, #16]	; (8000648 <__NVIC_GetPriorityGrouping+0x18>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	0a1b      	lsrs	r3, r3, #8
 800063a:	f003 0307 	and.w	r3, r3, #7
}
 800063e:	4618      	mov	r0, r3
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	e000ed00 	.word	0xe000ed00

0800064c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065a:	2b00      	cmp	r3, #0
 800065c:	db0b      	blt.n	8000676 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	f003 021f 	and.w	r2, r3, #31
 8000664:	4907      	ldr	r1, [pc, #28]	; (8000684 <__NVIC_EnableIRQ+0x38>)
 8000666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066a:	095b      	lsrs	r3, r3, #5
 800066c:	2001      	movs	r0, #1
 800066e:	fa00 f202 	lsl.w	r2, r0, r2
 8000672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000676:	bf00      	nop
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	e000e100 	.word	0xe000e100

08000688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	6039      	str	r1, [r7, #0]
 8000692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000698:	2b00      	cmp	r3, #0
 800069a:	db0a      	blt.n	80006b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	b2da      	uxtb	r2, r3
 80006a0:	490c      	ldr	r1, [pc, #48]	; (80006d4 <__NVIC_SetPriority+0x4c>)
 80006a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a6:	0112      	lsls	r2, r2, #4
 80006a8:	b2d2      	uxtb	r2, r2
 80006aa:	440b      	add	r3, r1
 80006ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b0:	e00a      	b.n	80006c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	b2da      	uxtb	r2, r3
 80006b6:	4908      	ldr	r1, [pc, #32]	; (80006d8 <__NVIC_SetPriority+0x50>)
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	f003 030f 	and.w	r3, r3, #15
 80006be:	3b04      	subs	r3, #4
 80006c0:	0112      	lsls	r2, r2, #4
 80006c2:	b2d2      	uxtb	r2, r2
 80006c4:	440b      	add	r3, r1
 80006c6:	761a      	strb	r2, [r3, #24]
}
 80006c8:	bf00      	nop
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000e100 	.word	0xe000e100
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006dc:	b480      	push	{r7}
 80006de:	b089      	sub	sp, #36	; 0x24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	f003 0307 	and.w	r3, r3, #7
 80006ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f0:	69fb      	ldr	r3, [r7, #28]
 80006f2:	f1c3 0307 	rsb	r3, r3, #7
 80006f6:	2b04      	cmp	r3, #4
 80006f8:	bf28      	it	cs
 80006fa:	2304      	movcs	r3, #4
 80006fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	3304      	adds	r3, #4
 8000702:	2b06      	cmp	r3, #6
 8000704:	d902      	bls.n	800070c <NVIC_EncodePriority+0x30>
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3b03      	subs	r3, #3
 800070a:	e000      	b.n	800070e <NVIC_EncodePriority+0x32>
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000710:	f04f 32ff 	mov.w	r2, #4294967295
 8000714:	69bb      	ldr	r3, [r7, #24]
 8000716:	fa02 f303 	lsl.w	r3, r2, r3
 800071a:	43da      	mvns	r2, r3
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	401a      	ands	r2, r3
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000724:	f04f 31ff 	mov.w	r1, #4294967295
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	fa01 f303 	lsl.w	r3, r1, r3
 800072e:	43d9      	mvns	r1, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000734:	4313      	orrs	r3, r2
         );
}
 8000736:	4618      	mov	r0, r3
 8000738:	3724      	adds	r7, #36	; 0x24
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
	...

08000744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	3b01      	subs	r3, #1
 8000750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000754:	d301      	bcc.n	800075a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000756:	2301      	movs	r3, #1
 8000758:	e00f      	b.n	800077a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800075a:	4a0a      	ldr	r2, [pc, #40]	; (8000784 <SysTick_Config+0x40>)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	3b01      	subs	r3, #1
 8000760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000762:	210f      	movs	r1, #15
 8000764:	f04f 30ff 	mov.w	r0, #4294967295
 8000768:	f7ff ff8e 	bl	8000688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <SysTick_Config+0x40>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000772:	4b04      	ldr	r3, [pc, #16]	; (8000784 <SysTick_Config+0x40>)
 8000774:	2207      	movs	r2, #7
 8000776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000778:	2300      	movs	r3, #0
}
 800077a:	4618      	mov	r0, r3
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	e000e010 	.word	0xe000e010

08000788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f7ff ff29 	bl	80005e8 <__NVIC_SetPriorityGrouping>
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800079e:	b580      	push	{r7, lr}
 80007a0:	b086      	sub	sp, #24
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	4603      	mov	r3, r0
 80007a6:	60b9      	str	r1, [r7, #8]
 80007a8:	607a      	str	r2, [r7, #4]
 80007aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007b0:	f7ff ff3e 	bl	8000630 <__NVIC_GetPriorityGrouping>
 80007b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	68b9      	ldr	r1, [r7, #8]
 80007ba:	6978      	ldr	r0, [r7, #20]
 80007bc:	f7ff ff8e 	bl	80006dc <NVIC_EncodePriority>
 80007c0:	4602      	mov	r2, r0
 80007c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007c6:	4611      	mov	r1, r2
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ff5d 	bl	8000688 <__NVIC_SetPriority>
}
 80007ce:	bf00      	nop
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b082      	sub	sp, #8
 80007da:	af00      	add	r7, sp, #0
 80007dc:	4603      	mov	r3, r0
 80007de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff ff31 	bl	800064c <__NVIC_EnableIRQ>
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b082      	sub	sp, #8
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f7ff ffa2 	bl	8000744 <SysTick_Config>
 8000800:	4603      	mov	r3, r0
}
 8000802:	4618      	mov	r0, r3
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800080a:	b480      	push	{r7}
 800080c:	b083      	sub	sp, #12
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000818:	b2db      	uxtb	r3, r3
 800081a:	2b02      	cmp	r3, #2
 800081c:	d004      	beq.n	8000828 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2280      	movs	r2, #128	; 0x80
 8000822:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000824:	2301      	movs	r3, #1
 8000826:	e00c      	b.n	8000842 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2205      	movs	r2, #5
 800082c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f022 0201 	bic.w	r2, r2, #1
 800083e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000840:	2300      	movs	r3, #0
}
 8000842:	4618      	mov	r0, r3
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
	...

08000850 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000850:	b480      	push	{r7}
 8000852:	b089      	sub	sp, #36	; 0x24
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000862:	2300      	movs	r3, #0
 8000864:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
 800086a:	e165      	b.n	8000b38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800086c:	2201      	movs	r2, #1
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	fa02 f303 	lsl.w	r3, r2, r3
 8000874:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	697a      	ldr	r2, [r7, #20]
 800087c:	4013      	ands	r3, r2
 800087e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000880:	693a      	ldr	r2, [r7, #16]
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	429a      	cmp	r2, r3
 8000886:	f040 8154 	bne.w	8000b32 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	2b02      	cmp	r3, #2
 8000890:	d003      	beq.n	800089a <HAL_GPIO_Init+0x4a>
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	2b12      	cmp	r3, #18
 8000898:	d123      	bne.n	80008e2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800089a:	69fb      	ldr	r3, [r7, #28]
 800089c:	08da      	lsrs	r2, r3, #3
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	3208      	adds	r2, #8
 80008a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008a8:	69fb      	ldr	r3, [r7, #28]
 80008aa:	f003 0307 	and.w	r3, r3, #7
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	220f      	movs	r2, #15
 80008b2:	fa02 f303 	lsl.w	r3, r2, r3
 80008b6:	43db      	mvns	r3, r3
 80008b8:	69ba      	ldr	r2, [r7, #24]
 80008ba:	4013      	ands	r3, r2
 80008bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	691a      	ldr	r2, [r3, #16]
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	f003 0307 	and.w	r3, r3, #7
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	fa02 f303 	lsl.w	r3, r2, r3
 80008ce:	69ba      	ldr	r2, [r7, #24]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008d4:	69fb      	ldr	r3, [r7, #28]
 80008d6:	08da      	lsrs	r2, r3, #3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	3208      	adds	r2, #8
 80008dc:	69b9      	ldr	r1, [r7, #24]
 80008de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008e8:	69fb      	ldr	r3, [r7, #28]
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	2203      	movs	r2, #3
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	43db      	mvns	r3, r3
 80008f4:	69ba      	ldr	r2, [r7, #24]
 80008f6:	4013      	ands	r3, r2
 80008f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	f003 0203 	and.w	r2, r3, #3
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	fa02 f303 	lsl.w	r3, r2, r3
 800090a:	69ba      	ldr	r2, [r7, #24]
 800090c:	4313      	orrs	r3, r2
 800090e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	69ba      	ldr	r2, [r7, #24]
 8000914:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	2b01      	cmp	r3, #1
 800091c:	d00b      	beq.n	8000936 <HAL_GPIO_Init+0xe6>
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	2b02      	cmp	r3, #2
 8000924:	d007      	beq.n	8000936 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800092a:	2b11      	cmp	r3, #17
 800092c:	d003      	beq.n	8000936 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	2b12      	cmp	r3, #18
 8000934:	d130      	bne.n	8000998 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	689b      	ldr	r3, [r3, #8]
 800093a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800093c:	69fb      	ldr	r3, [r7, #28]
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	2203      	movs	r2, #3
 8000942:	fa02 f303 	lsl.w	r3, r2, r3
 8000946:	43db      	mvns	r3, r3
 8000948:	69ba      	ldr	r2, [r7, #24]
 800094a:	4013      	ands	r3, r2
 800094c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	68da      	ldr	r2, [r3, #12]
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	69ba      	ldr	r2, [r7, #24]
 800095c:	4313      	orrs	r3, r2
 800095e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	69ba      	ldr	r2, [r7, #24]
 8000964:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800096c:	2201      	movs	r2, #1
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	fa02 f303 	lsl.w	r3, r2, r3
 8000974:	43db      	mvns	r3, r3
 8000976:	69ba      	ldr	r2, [r7, #24]
 8000978:	4013      	ands	r3, r2
 800097a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	091b      	lsrs	r3, r3, #4
 8000982:	f003 0201 	and.w	r2, r3, #1
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	fa02 f303 	lsl.w	r3, r2, r3
 800098c:	69ba      	ldr	r2, [r7, #24]
 800098e:	4313      	orrs	r3, r2
 8000990:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	69ba      	ldr	r2, [r7, #24]
 8000996:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	2203      	movs	r2, #3
 80009a4:	fa02 f303 	lsl.w	r3, r2, r3
 80009a8:	43db      	mvns	r3, r3
 80009aa:	69ba      	ldr	r2, [r7, #24]
 80009ac:	4013      	ands	r3, r2
 80009ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	689a      	ldr	r2, [r3, #8]
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	fa02 f303 	lsl.w	r3, r2, r3
 80009bc:	69ba      	ldr	r2, [r7, #24]
 80009be:	4313      	orrs	r3, r2
 80009c0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	69ba      	ldr	r2, [r7, #24]
 80009c6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	f000 80ae 	beq.w	8000b32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	4b5c      	ldr	r3, [pc, #368]	; (8000b4c <HAL_GPIO_Init+0x2fc>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	4a5b      	ldr	r2, [pc, #364]	; (8000b4c <HAL_GPIO_Init+0x2fc>)
 80009e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e4:	6453      	str	r3, [r2, #68]	; 0x44
 80009e6:	4b59      	ldr	r3, [pc, #356]	; (8000b4c <HAL_GPIO_Init+0x2fc>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009f2:	4a57      	ldr	r2, [pc, #348]	; (8000b50 <HAL_GPIO_Init+0x300>)
 80009f4:	69fb      	ldr	r3, [r7, #28]
 80009f6:	089b      	lsrs	r3, r3, #2
 80009f8:	3302      	adds	r3, #2
 80009fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a00:	69fb      	ldr	r3, [r7, #28]
 8000a02:	f003 0303 	and.w	r3, r3, #3
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	220f      	movs	r2, #15
 8000a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0e:	43db      	mvns	r3, r3
 8000a10:	69ba      	ldr	r2, [r7, #24]
 8000a12:	4013      	ands	r3, r2
 8000a14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a4e      	ldr	r2, [pc, #312]	; (8000b54 <HAL_GPIO_Init+0x304>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d025      	beq.n	8000a6a <HAL_GPIO_Init+0x21a>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a4d      	ldr	r2, [pc, #308]	; (8000b58 <HAL_GPIO_Init+0x308>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d01f      	beq.n	8000a66 <HAL_GPIO_Init+0x216>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a4c      	ldr	r2, [pc, #304]	; (8000b5c <HAL_GPIO_Init+0x30c>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d019      	beq.n	8000a62 <HAL_GPIO_Init+0x212>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a4b      	ldr	r2, [pc, #300]	; (8000b60 <HAL_GPIO_Init+0x310>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d013      	beq.n	8000a5e <HAL_GPIO_Init+0x20e>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4a4a      	ldr	r2, [pc, #296]	; (8000b64 <HAL_GPIO_Init+0x314>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d00d      	beq.n	8000a5a <HAL_GPIO_Init+0x20a>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4a49      	ldr	r2, [pc, #292]	; (8000b68 <HAL_GPIO_Init+0x318>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d007      	beq.n	8000a56 <HAL_GPIO_Init+0x206>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4a48      	ldr	r2, [pc, #288]	; (8000b6c <HAL_GPIO_Init+0x31c>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d101      	bne.n	8000a52 <HAL_GPIO_Init+0x202>
 8000a4e:	2306      	movs	r3, #6
 8000a50:	e00c      	b.n	8000a6c <HAL_GPIO_Init+0x21c>
 8000a52:	2307      	movs	r3, #7
 8000a54:	e00a      	b.n	8000a6c <HAL_GPIO_Init+0x21c>
 8000a56:	2305      	movs	r3, #5
 8000a58:	e008      	b.n	8000a6c <HAL_GPIO_Init+0x21c>
 8000a5a:	2304      	movs	r3, #4
 8000a5c:	e006      	b.n	8000a6c <HAL_GPIO_Init+0x21c>
 8000a5e:	2303      	movs	r3, #3
 8000a60:	e004      	b.n	8000a6c <HAL_GPIO_Init+0x21c>
 8000a62:	2302      	movs	r3, #2
 8000a64:	e002      	b.n	8000a6c <HAL_GPIO_Init+0x21c>
 8000a66:	2301      	movs	r3, #1
 8000a68:	e000      	b.n	8000a6c <HAL_GPIO_Init+0x21c>
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	69fa      	ldr	r2, [r7, #28]
 8000a6e:	f002 0203 	and.w	r2, r2, #3
 8000a72:	0092      	lsls	r2, r2, #2
 8000a74:	4093      	lsls	r3, r2
 8000a76:	69ba      	ldr	r2, [r7, #24]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a7c:	4934      	ldr	r1, [pc, #208]	; (8000b50 <HAL_GPIO_Init+0x300>)
 8000a7e:	69fb      	ldr	r3, [r7, #28]
 8000a80:	089b      	lsrs	r3, r3, #2
 8000a82:	3302      	adds	r3, #2
 8000a84:	69ba      	ldr	r2, [r7, #24]
 8000a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a8a:	4b39      	ldr	r3, [pc, #228]	; (8000b70 <HAL_GPIO_Init+0x320>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	43db      	mvns	r3, r3
 8000a94:	69ba      	ldr	r2, [r7, #24]
 8000a96:	4013      	ands	r3, r2
 8000a98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d003      	beq.n	8000aae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000aa6:	69ba      	ldr	r2, [r7, #24]
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000aae:	4a30      	ldr	r2, [pc, #192]	; (8000b70 <HAL_GPIO_Init+0x320>)
 8000ab0:	69bb      	ldr	r3, [r7, #24]
 8000ab2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ab4:	4b2e      	ldr	r3, [pc, #184]	; (8000b70 <HAL_GPIO_Init+0x320>)
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	43db      	mvns	r3, r3
 8000abe:	69ba      	ldr	r2, [r7, #24]
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d003      	beq.n	8000ad8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000ad0:	69ba      	ldr	r2, [r7, #24]
 8000ad2:	693b      	ldr	r3, [r7, #16]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ad8:	4a25      	ldr	r2, [pc, #148]	; (8000b70 <HAL_GPIO_Init+0x320>)
 8000ada:	69bb      	ldr	r3, [r7, #24]
 8000adc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ade:	4b24      	ldr	r3, [pc, #144]	; (8000b70 <HAL_GPIO_Init+0x320>)
 8000ae0:	689b      	ldr	r3, [r3, #8]
 8000ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	43db      	mvns	r3, r3
 8000ae8:	69ba      	ldr	r2, [r7, #24]
 8000aea:	4013      	ands	r3, r2
 8000aec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d003      	beq.n	8000b02 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000afa:	69ba      	ldr	r2, [r7, #24]
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	4313      	orrs	r3, r2
 8000b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b02:	4a1b      	ldr	r2, [pc, #108]	; (8000b70 <HAL_GPIO_Init+0x320>)
 8000b04:	69bb      	ldr	r3, [r7, #24]
 8000b06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b08:	4b19      	ldr	r3, [pc, #100]	; (8000b70 <HAL_GPIO_Init+0x320>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	43db      	mvns	r3, r3
 8000b12:	69ba      	ldr	r2, [r7, #24]
 8000b14:	4013      	ands	r3, r2
 8000b16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d003      	beq.n	8000b2c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000b24:	69ba      	ldr	r2, [r7, #24]
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b2c:	4a10      	ldr	r2, [pc, #64]	; (8000b70 <HAL_GPIO_Init+0x320>)
 8000b2e:	69bb      	ldr	r3, [r7, #24]
 8000b30:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	3301      	adds	r3, #1
 8000b36:	61fb      	str	r3, [r7, #28]
 8000b38:	69fb      	ldr	r3, [r7, #28]
 8000b3a:	2b0f      	cmp	r3, #15
 8000b3c:	f67f ae96 	bls.w	800086c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b40:	bf00      	nop
 8000b42:	3724      	adds	r7, #36	; 0x24
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40013800 	.word	0x40013800
 8000b54:	40020000 	.word	0x40020000
 8000b58:	40020400 	.word	0x40020400
 8000b5c:	40020800 	.word	0x40020800
 8000b60:	40020c00 	.word	0x40020c00
 8000b64:	40021000 	.word	0x40021000
 8000b68:	40021400 	.word	0x40021400
 8000b6c:	40021800 	.word	0x40021800
 8000b70:	40013c00 	.word	0x40013c00

08000b74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	807b      	strh	r3, [r7, #2]
 8000b80:	4613      	mov	r3, r2
 8000b82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b84:	787b      	ldrb	r3, [r7, #1]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d003      	beq.n	8000b92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b8a:	887a      	ldrh	r2, [r7, #2]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b90:	e003      	b.n	8000b9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b92:	887b      	ldrh	r3, [r7, #2]
 8000b94:	041a      	lsls	r2, r3, #16
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	619a      	str	r2, [r3, #24]
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
 8000bae:	460b      	mov	r3, r1
 8000bb0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	695a      	ldr	r2, [r3, #20]
 8000bb6:	887b      	ldrh	r3, [r7, #2]
 8000bb8:	401a      	ands	r2, r3
 8000bba:	887b      	ldrh	r3, [r7, #2]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d104      	bne.n	8000bca <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000bc0:	887b      	ldrh	r3, [r7, #2]
 8000bc2:	041a      	lsls	r2, r3, #16
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000bc8:	e002      	b.n	8000bd0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000bca:	887a      	ldrh	r2, [r7, #2]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	619a      	str	r2, [r3, #24]
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8000be2:	2300      	movs	r3, #0
 8000be4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	603b      	str	r3, [r7, #0]
 8000bea:	4b20      	ldr	r3, [pc, #128]	; (8000c6c <HAL_PWREx_EnableOverDrive+0x90>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	4a1f      	ldr	r2, [pc, #124]	; (8000c6c <HAL_PWREx_EnableOverDrive+0x90>)
 8000bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf6:	4b1d      	ldr	r3, [pc, #116]	; (8000c6c <HAL_PWREx_EnableOverDrive+0x90>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000c02:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <HAL_PWREx_EnableOverDrive+0x94>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c08:	f7ff fce2 	bl	80005d0 <HAL_GetTick>
 8000c0c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000c0e:	e009      	b.n	8000c24 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000c10:	f7ff fcde 	bl	80005d0 <HAL_GetTick>
 8000c14:	4602      	mov	r2, r0
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c1e:	d901      	bls.n	8000c24 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8000c20:	2303      	movs	r3, #3
 8000c22:	e01f      	b.n	8000c64 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000c24:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <HAL_PWREx_EnableOverDrive+0x98>)
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c30:	d1ee      	bne.n	8000c10 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000c32:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c38:	f7ff fcca 	bl	80005d0 <HAL_GetTick>
 8000c3c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000c3e:	e009      	b.n	8000c54 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000c40:	f7ff fcc6 	bl	80005d0 <HAL_GetTick>
 8000c44:	4602      	mov	r2, r0
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c4e:	d901      	bls.n	8000c54 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8000c50:	2303      	movs	r3, #3
 8000c52:	e007      	b.n	8000c64 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000c54:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <HAL_PWREx_EnableOverDrive+0x98>)
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000c60:	d1ee      	bne.n	8000c40 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8000c62:	2300      	movs	r3, #0
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	420e0040 	.word	0x420e0040
 8000c74:	40007000 	.word	0x40007000
 8000c78:	420e0044 	.word	0x420e0044

08000c7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d101      	bne.n	8000c90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e0ca      	b.n	8000e26 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c90:	4b67      	ldr	r3, [pc, #412]	; (8000e30 <HAL_RCC_ClockConfig+0x1b4>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f003 030f 	and.w	r3, r3, #15
 8000c98:	683a      	ldr	r2, [r7, #0]
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	d90c      	bls.n	8000cb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c9e:	4b64      	ldr	r3, [pc, #400]	; (8000e30 <HAL_RCC_ClockConfig+0x1b4>)
 8000ca0:	683a      	ldr	r2, [r7, #0]
 8000ca2:	b2d2      	uxtb	r2, r2
 8000ca4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ca6:	4b62      	ldr	r3, [pc, #392]	; (8000e30 <HAL_RCC_ClockConfig+0x1b4>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f003 030f 	and.w	r3, r3, #15
 8000cae:	683a      	ldr	r2, [r7, #0]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d001      	beq.n	8000cb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e0b6      	b.n	8000e26 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f003 0302 	and.w	r3, r3, #2
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d020      	beq.n	8000d06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f003 0304 	and.w	r3, r3, #4
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d005      	beq.n	8000cdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000cd0:	4b58      	ldr	r3, [pc, #352]	; (8000e34 <HAL_RCC_ClockConfig+0x1b8>)
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	4a57      	ldr	r2, [pc, #348]	; (8000e34 <HAL_RCC_ClockConfig+0x1b8>)
 8000cd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000cda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f003 0308 	and.w	r3, r3, #8
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d005      	beq.n	8000cf4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000ce8:	4b52      	ldr	r3, [pc, #328]	; (8000e34 <HAL_RCC_ClockConfig+0x1b8>)
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	4a51      	ldr	r2, [pc, #324]	; (8000e34 <HAL_RCC_ClockConfig+0x1b8>)
 8000cee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000cf2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cf4:	4b4f      	ldr	r3, [pc, #316]	; (8000e34 <HAL_RCC_ClockConfig+0x1b8>)
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	494c      	ldr	r1, [pc, #304]	; (8000e34 <HAL_RCC_ClockConfig+0x1b8>)
 8000d02:	4313      	orrs	r3, r2
 8000d04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d044      	beq.n	8000d9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d107      	bne.n	8000d2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d1a:	4b46      	ldr	r3, [pc, #280]	; (8000e34 <HAL_RCC_ClockConfig+0x1b8>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d119      	bne.n	8000d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e07d      	b.n	8000e26 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d003      	beq.n	8000d3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d36:	2b03      	cmp	r3, #3
 8000d38:	d107      	bne.n	8000d4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d3a:	4b3e      	ldr	r3, [pc, #248]	; (8000e34 <HAL_RCC_ClockConfig+0x1b8>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d109      	bne.n	8000d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e06d      	b.n	8000e26 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d4a:	4b3a      	ldr	r3, [pc, #232]	; (8000e34 <HAL_RCC_ClockConfig+0x1b8>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d101      	bne.n	8000d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e065      	b.n	8000e26 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d5a:	4b36      	ldr	r3, [pc, #216]	; (8000e34 <HAL_RCC_ClockConfig+0x1b8>)
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	f023 0203 	bic.w	r2, r3, #3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	4933      	ldr	r1, [pc, #204]	; (8000e34 <HAL_RCC_ClockConfig+0x1b8>)
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000d6c:	f7ff fc30 	bl	80005d0 <HAL_GetTick>
 8000d70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d72:	e00a      	b.n	8000d8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d74:	f7ff fc2c 	bl	80005d0 <HAL_GetTick>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d901      	bls.n	8000d8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000d86:	2303      	movs	r3, #3
 8000d88:	e04d      	b.n	8000e26 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d8a:	4b2a      	ldr	r3, [pc, #168]	; (8000e34 <HAL_RCC_ClockConfig+0x1b8>)
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	f003 020c 	and.w	r2, r3, #12
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d1eb      	bne.n	8000d74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000d9c:	4b24      	ldr	r3, [pc, #144]	; (8000e30 <HAL_RCC_ClockConfig+0x1b4>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f003 030f 	and.w	r3, r3, #15
 8000da4:	683a      	ldr	r2, [r7, #0]
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d20c      	bcs.n	8000dc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000daa:	4b21      	ldr	r3, [pc, #132]	; (8000e30 <HAL_RCC_ClockConfig+0x1b4>)
 8000dac:	683a      	ldr	r2, [r7, #0]
 8000dae:	b2d2      	uxtb	r2, r2
 8000db0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000db2:	4b1f      	ldr	r3, [pc, #124]	; (8000e30 <HAL_RCC_ClockConfig+0x1b4>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f003 030f 	and.w	r3, r3, #15
 8000dba:	683a      	ldr	r2, [r7, #0]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d001      	beq.n	8000dc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	e030      	b.n	8000e26 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f003 0304 	and.w	r3, r3, #4
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d008      	beq.n	8000de2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000dd0:	4b18      	ldr	r3, [pc, #96]	; (8000e34 <HAL_RCC_ClockConfig+0x1b8>)
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	4915      	ldr	r1, [pc, #84]	; (8000e34 <HAL_RCC_ClockConfig+0x1b8>)
 8000dde:	4313      	orrs	r3, r2
 8000de0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f003 0308 	and.w	r3, r3, #8
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d009      	beq.n	8000e02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000dee:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <HAL_RCC_ClockConfig+0x1b8>)
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	691b      	ldr	r3, [r3, #16]
 8000dfa:	00db      	lsls	r3, r3, #3
 8000dfc:	490d      	ldr	r1, [pc, #52]	; (8000e34 <HAL_RCC_ClockConfig+0x1b8>)
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000e02:	f000 f851 	bl	8000ea8 <HAL_RCC_GetSysClockFreq>
 8000e06:	4601      	mov	r1, r0
 8000e08:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <HAL_RCC_ClockConfig+0x1b8>)
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	091b      	lsrs	r3, r3, #4
 8000e0e:	f003 030f 	and.w	r3, r3, #15
 8000e12:	4a09      	ldr	r2, [pc, #36]	; (8000e38 <HAL_RCC_ClockConfig+0x1bc>)
 8000e14:	5cd3      	ldrb	r3, [r2, r3]
 8000e16:	fa21 f303 	lsr.w	r3, r1, r3
 8000e1a:	4a08      	ldr	r2, [pc, #32]	; (8000e3c <HAL_RCC_ClockConfig+0x1c0>)
 8000e1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f7ff fb92 	bl	8000548 <HAL_InitTick>

  return HAL_OK;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40023c00 	.word	0x40023c00
 8000e34:	40023800 	.word	0x40023800
 8000e38:	0800407c 	.word	0x0800407c
 8000e3c:	20000010 	.word	0x20000010

08000e40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000e44:	4b03      	ldr	r3, [pc, #12]	; (8000e54 <HAL_RCC_GetHCLKFreq+0x14>)
 8000e46:	681b      	ldr	r3, [r3, #0]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	20000010 	.word	0x20000010

08000e58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000e5c:	f7ff fff0 	bl	8000e40 <HAL_RCC_GetHCLKFreq>
 8000e60:	4601      	mov	r1, r0
 8000e62:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	0a9b      	lsrs	r3, r3, #10
 8000e68:	f003 0307 	and.w	r3, r3, #7
 8000e6c:	4a03      	ldr	r2, [pc, #12]	; (8000e7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8000e6e:	5cd3      	ldrb	r3, [r2, r3]
 8000e70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	0800408c 	.word	0x0800408c

08000e80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000e84:	f7ff ffdc 	bl	8000e40 <HAL_RCC_GetHCLKFreq>
 8000e88:	4601      	mov	r1, r0
 8000e8a:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	0b5b      	lsrs	r3, r3, #13
 8000e90:	f003 0307 	and.w	r3, r3, #7
 8000e94:	4a03      	ldr	r2, [pc, #12]	; (8000ea4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000e96:	5cd3      	ldrb	r3, [r2, r3]
 8000e98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	0800408c 	.word	0x0800408c

08000ea8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eaa:	b087      	sub	sp, #28
 8000eac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ec2:	4bc6      	ldr	r3, [pc, #792]	; (80011dc <HAL_RCC_GetSysClockFreq+0x334>)
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	f003 030c 	and.w	r3, r3, #12
 8000eca:	2b0c      	cmp	r3, #12
 8000ecc:	f200 817e 	bhi.w	80011cc <HAL_RCC_GetSysClockFreq+0x324>
 8000ed0:	a201      	add	r2, pc, #4	; (adr r2, 8000ed8 <HAL_RCC_GetSysClockFreq+0x30>)
 8000ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed6:	bf00      	nop
 8000ed8:	08000f0d 	.word	0x08000f0d
 8000edc:	080011cd 	.word	0x080011cd
 8000ee0:	080011cd 	.word	0x080011cd
 8000ee4:	080011cd 	.word	0x080011cd
 8000ee8:	08000f13 	.word	0x08000f13
 8000eec:	080011cd 	.word	0x080011cd
 8000ef0:	080011cd 	.word	0x080011cd
 8000ef4:	080011cd 	.word	0x080011cd
 8000ef8:	08000f19 	.word	0x08000f19
 8000efc:	080011cd 	.word	0x080011cd
 8000f00:	080011cd 	.word	0x080011cd
 8000f04:	080011cd 	.word	0x080011cd
 8000f08:	08001075 	.word	0x08001075
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000f0c:	4bb4      	ldr	r3, [pc, #720]	; (80011e0 <HAL_RCC_GetSysClockFreq+0x338>)
 8000f0e:	613b      	str	r3, [r7, #16]
       break;
 8000f10:	e15f      	b.n	80011d2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000f12:	4bb3      	ldr	r3, [pc, #716]	; (80011e0 <HAL_RCC_GetSysClockFreq+0x338>)
 8000f14:	613b      	str	r3, [r7, #16]
      break;
 8000f16:	e15c      	b.n	80011d2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f18:	4bb0      	ldr	r3, [pc, #704]	; (80011dc <HAL_RCC_GetSysClockFreq+0x334>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f20:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f22:	4bae      	ldr	r3, [pc, #696]	; (80011dc <HAL_RCC_GetSysClockFreq+0x334>)
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d04a      	beq.n	8000fc4 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f2e:	4bab      	ldr	r3, [pc, #684]	; (80011dc <HAL_RCC_GetSysClockFreq+0x334>)
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	099b      	lsrs	r3, r3, #6
 8000f34:	f04f 0400 	mov.w	r4, #0
 8000f38:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000f3c:	f04f 0200 	mov.w	r2, #0
 8000f40:	ea03 0501 	and.w	r5, r3, r1
 8000f44:	ea04 0602 	and.w	r6, r4, r2
 8000f48:	4629      	mov	r1, r5
 8000f4a:	4632      	mov	r2, r6
 8000f4c:	f04f 0300 	mov.w	r3, #0
 8000f50:	f04f 0400 	mov.w	r4, #0
 8000f54:	0154      	lsls	r4, r2, #5
 8000f56:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000f5a:	014b      	lsls	r3, r1, #5
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4622      	mov	r2, r4
 8000f60:	1b49      	subs	r1, r1, r5
 8000f62:	eb62 0206 	sbc.w	r2, r2, r6
 8000f66:	f04f 0300 	mov.w	r3, #0
 8000f6a:	f04f 0400 	mov.w	r4, #0
 8000f6e:	0194      	lsls	r4, r2, #6
 8000f70:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8000f74:	018b      	lsls	r3, r1, #6
 8000f76:	1a5b      	subs	r3, r3, r1
 8000f78:	eb64 0402 	sbc.w	r4, r4, r2
 8000f7c:	f04f 0100 	mov.w	r1, #0
 8000f80:	f04f 0200 	mov.w	r2, #0
 8000f84:	00e2      	lsls	r2, r4, #3
 8000f86:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8000f8a:	00d9      	lsls	r1, r3, #3
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	4614      	mov	r4, r2
 8000f90:	195b      	adds	r3, r3, r5
 8000f92:	eb44 0406 	adc.w	r4, r4, r6
 8000f96:	f04f 0100 	mov.w	r1, #0
 8000f9a:	f04f 0200 	mov.w	r2, #0
 8000f9e:	02a2      	lsls	r2, r4, #10
 8000fa0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8000fa4:	0299      	lsls	r1, r3, #10
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	4614      	mov	r4, r2
 8000faa:	4618      	mov	r0, r3
 8000fac:	4621      	mov	r1, r4
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	f04f 0400 	mov.w	r4, #0
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4623      	mov	r3, r4
 8000fb8:	f7ff f924 	bl	8000204 <__aeabi_uldivmod>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	460c      	mov	r4, r1
 8000fc0:	617b      	str	r3, [r7, #20]
 8000fc2:	e049      	b.n	8001058 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fc4:	4b85      	ldr	r3, [pc, #532]	; (80011dc <HAL_RCC_GetSysClockFreq+0x334>)
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	099b      	lsrs	r3, r3, #6
 8000fca:	f04f 0400 	mov.w	r4, #0
 8000fce:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	ea03 0501 	and.w	r5, r3, r1
 8000fda:	ea04 0602 	and.w	r6, r4, r2
 8000fde:	4629      	mov	r1, r5
 8000fe0:	4632      	mov	r2, r6
 8000fe2:	f04f 0300 	mov.w	r3, #0
 8000fe6:	f04f 0400 	mov.w	r4, #0
 8000fea:	0154      	lsls	r4, r2, #5
 8000fec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000ff0:	014b      	lsls	r3, r1, #5
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4622      	mov	r2, r4
 8000ff6:	1b49      	subs	r1, r1, r5
 8000ff8:	eb62 0206 	sbc.w	r2, r2, r6
 8000ffc:	f04f 0300 	mov.w	r3, #0
 8001000:	f04f 0400 	mov.w	r4, #0
 8001004:	0194      	lsls	r4, r2, #6
 8001006:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800100a:	018b      	lsls	r3, r1, #6
 800100c:	1a5b      	subs	r3, r3, r1
 800100e:	eb64 0402 	sbc.w	r4, r4, r2
 8001012:	f04f 0100 	mov.w	r1, #0
 8001016:	f04f 0200 	mov.w	r2, #0
 800101a:	00e2      	lsls	r2, r4, #3
 800101c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001020:	00d9      	lsls	r1, r3, #3
 8001022:	460b      	mov	r3, r1
 8001024:	4614      	mov	r4, r2
 8001026:	195b      	adds	r3, r3, r5
 8001028:	eb44 0406 	adc.w	r4, r4, r6
 800102c:	f04f 0100 	mov.w	r1, #0
 8001030:	f04f 0200 	mov.w	r2, #0
 8001034:	02a2      	lsls	r2, r4, #10
 8001036:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800103a:	0299      	lsls	r1, r3, #10
 800103c:	460b      	mov	r3, r1
 800103e:	4614      	mov	r4, r2
 8001040:	4618      	mov	r0, r3
 8001042:	4621      	mov	r1, r4
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f04f 0400 	mov.w	r4, #0
 800104a:	461a      	mov	r2, r3
 800104c:	4623      	mov	r3, r4
 800104e:	f7ff f8d9 	bl	8000204 <__aeabi_uldivmod>
 8001052:	4603      	mov	r3, r0
 8001054:	460c      	mov	r4, r1
 8001056:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001058:	4b60      	ldr	r3, [pc, #384]	; (80011dc <HAL_RCC_GetSysClockFreq+0x334>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	0c1b      	lsrs	r3, r3, #16
 800105e:	f003 0303 	and.w	r3, r3, #3
 8001062:	3301      	adds	r3, #1
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001068:	697a      	ldr	r2, [r7, #20]
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001070:	613b      	str	r3, [r7, #16]
      break;
 8001072:	e0ae      	b.n	80011d2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001074:	4b59      	ldr	r3, [pc, #356]	; (80011dc <HAL_RCC_GetSysClockFreq+0x334>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800107c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800107e:	4b57      	ldr	r3, [pc, #348]	; (80011dc <HAL_RCC_GetSysClockFreq+0x334>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d04a      	beq.n	8001120 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800108a:	4b54      	ldr	r3, [pc, #336]	; (80011dc <HAL_RCC_GetSysClockFreq+0x334>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	099b      	lsrs	r3, r3, #6
 8001090:	f04f 0400 	mov.w	r4, #0
 8001094:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001098:	f04f 0200 	mov.w	r2, #0
 800109c:	ea03 0501 	and.w	r5, r3, r1
 80010a0:	ea04 0602 	and.w	r6, r4, r2
 80010a4:	4629      	mov	r1, r5
 80010a6:	4632      	mov	r2, r6
 80010a8:	f04f 0300 	mov.w	r3, #0
 80010ac:	f04f 0400 	mov.w	r4, #0
 80010b0:	0154      	lsls	r4, r2, #5
 80010b2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80010b6:	014b      	lsls	r3, r1, #5
 80010b8:	4619      	mov	r1, r3
 80010ba:	4622      	mov	r2, r4
 80010bc:	1b49      	subs	r1, r1, r5
 80010be:	eb62 0206 	sbc.w	r2, r2, r6
 80010c2:	f04f 0300 	mov.w	r3, #0
 80010c6:	f04f 0400 	mov.w	r4, #0
 80010ca:	0194      	lsls	r4, r2, #6
 80010cc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80010d0:	018b      	lsls	r3, r1, #6
 80010d2:	1a5b      	subs	r3, r3, r1
 80010d4:	eb64 0402 	sbc.w	r4, r4, r2
 80010d8:	f04f 0100 	mov.w	r1, #0
 80010dc:	f04f 0200 	mov.w	r2, #0
 80010e0:	00e2      	lsls	r2, r4, #3
 80010e2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80010e6:	00d9      	lsls	r1, r3, #3
 80010e8:	460b      	mov	r3, r1
 80010ea:	4614      	mov	r4, r2
 80010ec:	195b      	adds	r3, r3, r5
 80010ee:	eb44 0406 	adc.w	r4, r4, r6
 80010f2:	f04f 0100 	mov.w	r1, #0
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	02a2      	lsls	r2, r4, #10
 80010fc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001100:	0299      	lsls	r1, r3, #10
 8001102:	460b      	mov	r3, r1
 8001104:	4614      	mov	r4, r2
 8001106:	4618      	mov	r0, r3
 8001108:	4621      	mov	r1, r4
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	f04f 0400 	mov.w	r4, #0
 8001110:	461a      	mov	r2, r3
 8001112:	4623      	mov	r3, r4
 8001114:	f7ff f876 	bl	8000204 <__aeabi_uldivmod>
 8001118:	4603      	mov	r3, r0
 800111a:	460c      	mov	r4, r1
 800111c:	617b      	str	r3, [r7, #20]
 800111e:	e049      	b.n	80011b4 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001120:	4b2e      	ldr	r3, [pc, #184]	; (80011dc <HAL_RCC_GetSysClockFreq+0x334>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	099b      	lsrs	r3, r3, #6
 8001126:	f04f 0400 	mov.w	r4, #0
 800112a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800112e:	f04f 0200 	mov.w	r2, #0
 8001132:	ea03 0501 	and.w	r5, r3, r1
 8001136:	ea04 0602 	and.w	r6, r4, r2
 800113a:	4629      	mov	r1, r5
 800113c:	4632      	mov	r2, r6
 800113e:	f04f 0300 	mov.w	r3, #0
 8001142:	f04f 0400 	mov.w	r4, #0
 8001146:	0154      	lsls	r4, r2, #5
 8001148:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800114c:	014b      	lsls	r3, r1, #5
 800114e:	4619      	mov	r1, r3
 8001150:	4622      	mov	r2, r4
 8001152:	1b49      	subs	r1, r1, r5
 8001154:	eb62 0206 	sbc.w	r2, r2, r6
 8001158:	f04f 0300 	mov.w	r3, #0
 800115c:	f04f 0400 	mov.w	r4, #0
 8001160:	0194      	lsls	r4, r2, #6
 8001162:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001166:	018b      	lsls	r3, r1, #6
 8001168:	1a5b      	subs	r3, r3, r1
 800116a:	eb64 0402 	sbc.w	r4, r4, r2
 800116e:	f04f 0100 	mov.w	r1, #0
 8001172:	f04f 0200 	mov.w	r2, #0
 8001176:	00e2      	lsls	r2, r4, #3
 8001178:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800117c:	00d9      	lsls	r1, r3, #3
 800117e:	460b      	mov	r3, r1
 8001180:	4614      	mov	r4, r2
 8001182:	195b      	adds	r3, r3, r5
 8001184:	eb44 0406 	adc.w	r4, r4, r6
 8001188:	f04f 0100 	mov.w	r1, #0
 800118c:	f04f 0200 	mov.w	r2, #0
 8001190:	02a2      	lsls	r2, r4, #10
 8001192:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001196:	0299      	lsls	r1, r3, #10
 8001198:	460b      	mov	r3, r1
 800119a:	4614      	mov	r4, r2
 800119c:	4618      	mov	r0, r3
 800119e:	4621      	mov	r1, r4
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f04f 0400 	mov.w	r4, #0
 80011a6:	461a      	mov	r2, r3
 80011a8:	4623      	mov	r3, r4
 80011aa:	f7ff f82b 	bl	8000204 <__aeabi_uldivmod>
 80011ae:	4603      	mov	r3, r0
 80011b0:	460c      	mov	r4, r1
 80011b2:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80011b4:	4b09      	ldr	r3, [pc, #36]	; (80011dc <HAL_RCC_GetSysClockFreq+0x334>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	0f1b      	lsrs	r3, r3, #28
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80011c0:	697a      	ldr	r2, [r7, #20]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c8:	613b      	str	r3, [r7, #16]
      break;
 80011ca:	e002      	b.n	80011d2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80011cc:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <HAL_RCC_GetSysClockFreq+0x338>)
 80011ce:	613b      	str	r3, [r7, #16]
      break;
 80011d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80011d2:	693b      	ldr	r3, [r7, #16]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	371c      	adds	r7, #28
 80011d8:	46bd      	mov	sp, r7
 80011da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011dc:	40023800 	.word	0x40023800
 80011e0:	00f42400 	.word	0x00f42400

080011e4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011ec:	2300      	movs	r3, #0
 80011ee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	f000 8083 	beq.w	8001304 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80011fe:	4b95      	ldr	r3, [pc, #596]	; (8001454 <HAL_RCC_OscConfig+0x270>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 030c 	and.w	r3, r3, #12
 8001206:	2b04      	cmp	r3, #4
 8001208:	d019      	beq.n	800123e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800120a:	4b92      	ldr	r3, [pc, #584]	; (8001454 <HAL_RCC_OscConfig+0x270>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001212:	2b08      	cmp	r3, #8
 8001214:	d106      	bne.n	8001224 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001216:	4b8f      	ldr	r3, [pc, #572]	; (8001454 <HAL_RCC_OscConfig+0x270>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800121e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001222:	d00c      	beq.n	800123e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001224:	4b8b      	ldr	r3, [pc, #556]	; (8001454 <HAL_RCC_OscConfig+0x270>)
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800122c:	2b0c      	cmp	r3, #12
 800122e:	d112      	bne.n	8001256 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001230:	4b88      	ldr	r3, [pc, #544]	; (8001454 <HAL_RCC_OscConfig+0x270>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001238:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800123c:	d10b      	bne.n	8001256 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800123e:	4b85      	ldr	r3, [pc, #532]	; (8001454 <HAL_RCC_OscConfig+0x270>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d05b      	beq.n	8001302 <HAL_RCC_OscConfig+0x11e>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d157      	bne.n	8001302 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e216      	b.n	8001684 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800125e:	d106      	bne.n	800126e <HAL_RCC_OscConfig+0x8a>
 8001260:	4b7c      	ldr	r3, [pc, #496]	; (8001454 <HAL_RCC_OscConfig+0x270>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a7b      	ldr	r2, [pc, #492]	; (8001454 <HAL_RCC_OscConfig+0x270>)
 8001266:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800126a:	6013      	str	r3, [r2, #0]
 800126c:	e01d      	b.n	80012aa <HAL_RCC_OscConfig+0xc6>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001276:	d10c      	bne.n	8001292 <HAL_RCC_OscConfig+0xae>
 8001278:	4b76      	ldr	r3, [pc, #472]	; (8001454 <HAL_RCC_OscConfig+0x270>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a75      	ldr	r2, [pc, #468]	; (8001454 <HAL_RCC_OscConfig+0x270>)
 800127e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	4b73      	ldr	r3, [pc, #460]	; (8001454 <HAL_RCC_OscConfig+0x270>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a72      	ldr	r2, [pc, #456]	; (8001454 <HAL_RCC_OscConfig+0x270>)
 800128a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800128e:	6013      	str	r3, [r2, #0]
 8001290:	e00b      	b.n	80012aa <HAL_RCC_OscConfig+0xc6>
 8001292:	4b70      	ldr	r3, [pc, #448]	; (8001454 <HAL_RCC_OscConfig+0x270>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a6f      	ldr	r2, [pc, #444]	; (8001454 <HAL_RCC_OscConfig+0x270>)
 8001298:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	4b6d      	ldr	r3, [pc, #436]	; (8001454 <HAL_RCC_OscConfig+0x270>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a6c      	ldr	r2, [pc, #432]	; (8001454 <HAL_RCC_OscConfig+0x270>)
 80012a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012a8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d013      	beq.n	80012da <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b2:	f7ff f98d 	bl	80005d0 <HAL_GetTick>
 80012b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012b8:	e008      	b.n	80012cc <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012ba:	f7ff f989 	bl	80005d0 <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	2b64      	cmp	r3, #100	; 0x64
 80012c6:	d901      	bls.n	80012cc <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e1db      	b.n	8001684 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012cc:	4b61      	ldr	r3, [pc, #388]	; (8001454 <HAL_RCC_OscConfig+0x270>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d0f0      	beq.n	80012ba <HAL_RCC_OscConfig+0xd6>
 80012d8:	e014      	b.n	8001304 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012da:	f7ff f979 	bl	80005d0 <HAL_GetTick>
 80012de:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012e0:	e008      	b.n	80012f4 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012e2:	f7ff f975 	bl	80005d0 <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b64      	cmp	r3, #100	; 0x64
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e1c7      	b.n	8001684 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012f4:	4b57      	ldr	r3, [pc, #348]	; (8001454 <HAL_RCC_OscConfig+0x270>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1f0      	bne.n	80012e2 <HAL_RCC_OscConfig+0xfe>
 8001300:	e000      	b.n	8001304 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001302:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d06f      	beq.n	80013f0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001310:	4b50      	ldr	r3, [pc, #320]	; (8001454 <HAL_RCC_OscConfig+0x270>)
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	f003 030c 	and.w	r3, r3, #12
 8001318:	2b00      	cmp	r3, #0
 800131a:	d017      	beq.n	800134c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800131c:	4b4d      	ldr	r3, [pc, #308]	; (8001454 <HAL_RCC_OscConfig+0x270>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001324:	2b08      	cmp	r3, #8
 8001326:	d105      	bne.n	8001334 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001328:	4b4a      	ldr	r3, [pc, #296]	; (8001454 <HAL_RCC_OscConfig+0x270>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d00b      	beq.n	800134c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001334:	4b47      	ldr	r3, [pc, #284]	; (8001454 <HAL_RCC_OscConfig+0x270>)
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800133c:	2b0c      	cmp	r3, #12
 800133e:	d11c      	bne.n	800137a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001340:	4b44      	ldr	r3, [pc, #272]	; (8001454 <HAL_RCC_OscConfig+0x270>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d116      	bne.n	800137a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800134c:	4b41      	ldr	r3, [pc, #260]	; (8001454 <HAL_RCC_OscConfig+0x270>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 0302 	and.w	r3, r3, #2
 8001354:	2b00      	cmp	r3, #0
 8001356:	d005      	beq.n	8001364 <HAL_RCC_OscConfig+0x180>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d001      	beq.n	8001364 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e18f      	b.n	8001684 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001364:	4b3b      	ldr	r3, [pc, #236]	; (8001454 <HAL_RCC_OscConfig+0x270>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	691b      	ldr	r3, [r3, #16]
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	4938      	ldr	r1, [pc, #224]	; (8001454 <HAL_RCC_OscConfig+0x270>)
 8001374:	4313      	orrs	r3, r2
 8001376:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001378:	e03a      	b.n	80013f0 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d020      	beq.n	80013c4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001382:	4b35      	ldr	r3, [pc, #212]	; (8001458 <HAL_RCC_OscConfig+0x274>)
 8001384:	2201      	movs	r2, #1
 8001386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001388:	f7ff f922 	bl	80005d0 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001390:	f7ff f91e 	bl	80005d0 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e170      	b.n	8001684 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a2:	4b2c      	ldr	r3, [pc, #176]	; (8001454 <HAL_RCC_OscConfig+0x270>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0f0      	beq.n	8001390 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ae:	4b29      	ldr	r3, [pc, #164]	; (8001454 <HAL_RCC_OscConfig+0x270>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	691b      	ldr	r3, [r3, #16]
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	4925      	ldr	r1, [pc, #148]	; (8001454 <HAL_RCC_OscConfig+0x270>)
 80013be:	4313      	orrs	r3, r2
 80013c0:	600b      	str	r3, [r1, #0]
 80013c2:	e015      	b.n	80013f0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013c4:	4b24      	ldr	r3, [pc, #144]	; (8001458 <HAL_RCC_OscConfig+0x274>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ca:	f7ff f901 	bl	80005d0 <HAL_GetTick>
 80013ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013d0:	e008      	b.n	80013e4 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013d2:	f7ff f8fd 	bl	80005d0 <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e14f      	b.n	8001684 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013e4:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <HAL_RCC_OscConfig+0x270>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1f0      	bne.n	80013d2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0308 	and.w	r3, r3, #8
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d037      	beq.n	800146c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	695b      	ldr	r3, [r3, #20]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d016      	beq.n	8001432 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001404:	4b15      	ldr	r3, [pc, #84]	; (800145c <HAL_RCC_OscConfig+0x278>)
 8001406:	2201      	movs	r2, #1
 8001408:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800140a:	f7ff f8e1 	bl	80005d0 <HAL_GetTick>
 800140e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001410:	e008      	b.n	8001424 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001412:	f7ff f8dd 	bl	80005d0 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e12f      	b.n	8001684 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001424:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <HAL_RCC_OscConfig+0x270>)
 8001426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d0f0      	beq.n	8001412 <HAL_RCC_OscConfig+0x22e>
 8001430:	e01c      	b.n	800146c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001432:	4b0a      	ldr	r3, [pc, #40]	; (800145c <HAL_RCC_OscConfig+0x278>)
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001438:	f7ff f8ca 	bl	80005d0 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800143e:	e00f      	b.n	8001460 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001440:	f7ff f8c6 	bl	80005d0 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d908      	bls.n	8001460 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e118      	b.n	8001684 <HAL_RCC_OscConfig+0x4a0>
 8001452:	bf00      	nop
 8001454:	40023800 	.word	0x40023800
 8001458:	42470000 	.word	0x42470000
 800145c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001460:	4b8a      	ldr	r3, [pc, #552]	; (800168c <HAL_RCC_OscConfig+0x4a8>)
 8001462:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1e9      	bne.n	8001440 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0304 	and.w	r3, r3, #4
 8001474:	2b00      	cmp	r3, #0
 8001476:	f000 8097 	beq.w	80015a8 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800147a:	2300      	movs	r3, #0
 800147c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800147e:	4b83      	ldr	r3, [pc, #524]	; (800168c <HAL_RCC_OscConfig+0x4a8>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d10f      	bne.n	80014aa <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	4b7f      	ldr	r3, [pc, #508]	; (800168c <HAL_RCC_OscConfig+0x4a8>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	4a7e      	ldr	r2, [pc, #504]	; (800168c <HAL_RCC_OscConfig+0x4a8>)
 8001494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001498:	6413      	str	r3, [r2, #64]	; 0x40
 800149a:	4b7c      	ldr	r3, [pc, #496]	; (800168c <HAL_RCC_OscConfig+0x4a8>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80014a6:	2301      	movs	r3, #1
 80014a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014aa:	4b79      	ldr	r3, [pc, #484]	; (8001690 <HAL_RCC_OscConfig+0x4ac>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d118      	bne.n	80014e8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014b6:	4b76      	ldr	r3, [pc, #472]	; (8001690 <HAL_RCC_OscConfig+0x4ac>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a75      	ldr	r2, [pc, #468]	; (8001690 <HAL_RCC_OscConfig+0x4ac>)
 80014bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014c2:	f7ff f885 	bl	80005d0 <HAL_GetTick>
 80014c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c8:	e008      	b.n	80014dc <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ca:	f7ff f881 	bl	80005d0 <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e0d3      	b.n	8001684 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014dc:	4b6c      	ldr	r3, [pc, #432]	; (8001690 <HAL_RCC_OscConfig+0x4ac>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d0f0      	beq.n	80014ca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d106      	bne.n	80014fe <HAL_RCC_OscConfig+0x31a>
 80014f0:	4b66      	ldr	r3, [pc, #408]	; (800168c <HAL_RCC_OscConfig+0x4a8>)
 80014f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f4:	4a65      	ldr	r2, [pc, #404]	; (800168c <HAL_RCC_OscConfig+0x4a8>)
 80014f6:	f043 0301 	orr.w	r3, r3, #1
 80014fa:	6713      	str	r3, [r2, #112]	; 0x70
 80014fc:	e01c      	b.n	8001538 <HAL_RCC_OscConfig+0x354>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	2b05      	cmp	r3, #5
 8001504:	d10c      	bne.n	8001520 <HAL_RCC_OscConfig+0x33c>
 8001506:	4b61      	ldr	r3, [pc, #388]	; (800168c <HAL_RCC_OscConfig+0x4a8>)
 8001508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800150a:	4a60      	ldr	r2, [pc, #384]	; (800168c <HAL_RCC_OscConfig+0x4a8>)
 800150c:	f043 0304 	orr.w	r3, r3, #4
 8001510:	6713      	str	r3, [r2, #112]	; 0x70
 8001512:	4b5e      	ldr	r3, [pc, #376]	; (800168c <HAL_RCC_OscConfig+0x4a8>)
 8001514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001516:	4a5d      	ldr	r2, [pc, #372]	; (800168c <HAL_RCC_OscConfig+0x4a8>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	6713      	str	r3, [r2, #112]	; 0x70
 800151e:	e00b      	b.n	8001538 <HAL_RCC_OscConfig+0x354>
 8001520:	4b5a      	ldr	r3, [pc, #360]	; (800168c <HAL_RCC_OscConfig+0x4a8>)
 8001522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001524:	4a59      	ldr	r2, [pc, #356]	; (800168c <HAL_RCC_OscConfig+0x4a8>)
 8001526:	f023 0301 	bic.w	r3, r3, #1
 800152a:	6713      	str	r3, [r2, #112]	; 0x70
 800152c:	4b57      	ldr	r3, [pc, #348]	; (800168c <HAL_RCC_OscConfig+0x4a8>)
 800152e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001530:	4a56      	ldr	r2, [pc, #344]	; (800168c <HAL_RCC_OscConfig+0x4a8>)
 8001532:	f023 0304 	bic.w	r3, r3, #4
 8001536:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d015      	beq.n	800156c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001540:	f7ff f846 	bl	80005d0 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001546:	e00a      	b.n	800155e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001548:	f7ff f842 	bl	80005d0 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	f241 3288 	movw	r2, #5000	; 0x1388
 8001556:	4293      	cmp	r3, r2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e092      	b.n	8001684 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800155e:	4b4b      	ldr	r3, [pc, #300]	; (800168c <HAL_RCC_OscConfig+0x4a8>)
 8001560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d0ee      	beq.n	8001548 <HAL_RCC_OscConfig+0x364>
 800156a:	e014      	b.n	8001596 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800156c:	f7ff f830 	bl	80005d0 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001572:	e00a      	b.n	800158a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001574:	f7ff f82c 	bl	80005d0 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001582:	4293      	cmp	r3, r2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e07c      	b.n	8001684 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800158a:	4b40      	ldr	r3, [pc, #256]	; (800168c <HAL_RCC_OscConfig+0x4a8>)
 800158c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1ee      	bne.n	8001574 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001596:	7dfb      	ldrb	r3, [r7, #23]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d105      	bne.n	80015a8 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800159c:	4b3b      	ldr	r3, [pc, #236]	; (800168c <HAL_RCC_OscConfig+0x4a8>)
 800159e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a0:	4a3a      	ldr	r2, [pc, #232]	; (800168c <HAL_RCC_OscConfig+0x4a8>)
 80015a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d068      	beq.n	8001682 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015b0:	4b36      	ldr	r3, [pc, #216]	; (800168c <HAL_RCC_OscConfig+0x4a8>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f003 030c 	and.w	r3, r3, #12
 80015b8:	2b08      	cmp	r3, #8
 80015ba:	d060      	beq.n	800167e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d145      	bne.n	8001650 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c4:	4b33      	ldr	r3, [pc, #204]	; (8001694 <HAL_RCC_OscConfig+0x4b0>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ca:	f7ff f801 	bl	80005d0 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015d2:	f7fe fffd 	bl	80005d0 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e04f      	b.n	8001684 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e4:	4b29      	ldr	r3, [pc, #164]	; (800168c <HAL_RCC_OscConfig+0x4a8>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1f0      	bne.n	80015d2 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69da      	ldr	r2, [r3, #28]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a1b      	ldr	r3, [r3, #32]
 80015f8:	431a      	orrs	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fe:	019b      	lsls	r3, r3, #6
 8001600:	431a      	orrs	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001606:	085b      	lsrs	r3, r3, #1
 8001608:	3b01      	subs	r3, #1
 800160a:	041b      	lsls	r3, r3, #16
 800160c:	431a      	orrs	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001612:	061b      	lsls	r3, r3, #24
 8001614:	431a      	orrs	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	071b      	lsls	r3, r3, #28
 800161c:	491b      	ldr	r1, [pc, #108]	; (800168c <HAL_RCC_OscConfig+0x4a8>)
 800161e:	4313      	orrs	r3, r2
 8001620:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001622:	4b1c      	ldr	r3, [pc, #112]	; (8001694 <HAL_RCC_OscConfig+0x4b0>)
 8001624:	2201      	movs	r2, #1
 8001626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001628:	f7fe ffd2 	bl	80005d0 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001630:	f7fe ffce 	bl	80005d0 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e020      	b.n	8001684 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001642:	4b12      	ldr	r3, [pc, #72]	; (800168c <HAL_RCC_OscConfig+0x4a8>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0f0      	beq.n	8001630 <HAL_RCC_OscConfig+0x44c>
 800164e:	e018      	b.n	8001682 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001650:	4b10      	ldr	r3, [pc, #64]	; (8001694 <HAL_RCC_OscConfig+0x4b0>)
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001656:	f7fe ffbb 	bl	80005d0 <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800165c:	e008      	b.n	8001670 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800165e:	f7fe ffb7 	bl	80005d0 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e009      	b.n	8001684 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001670:	4b06      	ldr	r3, [pc, #24]	; (800168c <HAL_RCC_OscConfig+0x4a8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1f0      	bne.n	800165e <HAL_RCC_OscConfig+0x47a>
 800167c:	e001      	b.n	8001682 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e000      	b.n	8001684 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40023800 	.word	0x40023800
 8001690:	40007000 	.word	0x40007000
 8001694:	42470060 	.word	0x42470060

08001698 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e01d      	b.n	80016e6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d106      	bne.n	80016c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f002 fa90 	bl	8003be4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2202      	movs	r2, #2
 80016c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3304      	adds	r3, #4
 80016d4:	4619      	mov	r1, r3
 80016d6:	4610      	mov	r0, r2
 80016d8:	f000 fb1e 	bl	8001d18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2201      	movs	r2, #1
 80016e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b085      	sub	sp, #20
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	68da      	ldr	r2, [r3, #12]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f042 0201 	orr.w	r2, r2, #1
 8001704:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f003 0307 	and.w	r3, r3, #7
 8001710:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2b06      	cmp	r3, #6
 8001716:	d007      	beq.n	8001728 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f042 0201 	orr.w	r2, r2, #1
 8001726:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3714      	adds	r7, #20
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e01d      	b.n	8001784 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800174e:	b2db      	uxtb	r3, r3
 8001750:	2b00      	cmp	r3, #0
 8001752:	d106      	bne.n	8001762 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f002 f937 	bl	80039d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2202      	movs	r2, #2
 8001766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3304      	adds	r3, #4
 8001772:	4619      	mov	r1, r3
 8001774:	4610      	mov	r0, r2
 8001776:	f000 facf 	bl	8001d18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2201      	movs	r2, #1
 800177e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2201      	movs	r2, #1
 800179c:	6839      	ldr	r1, [r7, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 fd0a 	bl	80021b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a15      	ldr	r2, [pc, #84]	; (8001800 <HAL_TIM_PWM_Start+0x74>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d004      	beq.n	80017b8 <HAL_TIM_PWM_Start+0x2c>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a14      	ldr	r2, [pc, #80]	; (8001804 <HAL_TIM_PWM_Start+0x78>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d101      	bne.n	80017bc <HAL_TIM_PWM_Start+0x30>
 80017b8:	2301      	movs	r3, #1
 80017ba:	e000      	b.n	80017be <HAL_TIM_PWM_Start+0x32>
 80017bc:	2300      	movs	r3, #0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d007      	beq.n	80017d2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f003 0307 	and.w	r3, r3, #7
 80017dc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2b06      	cmp	r3, #6
 80017e2:	d007      	beq.n	80017f4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f042 0201 	orr.w	r2, r2, #1
 80017f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40010000 	.word	0x40010000
 8001804:	40010400 	.word	0x40010400

08001808 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d101      	bne.n	800181c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e083      	b.n	8001924 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	d106      	bne.n	8001836 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f002 f8ef 	bl	8003a14 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2202      	movs	r2, #2
 800183a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	6812      	ldr	r2, [r2, #0]
 8001848:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800184c:	f023 0307 	bic.w	r3, r3, #7
 8001850:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3304      	adds	r3, #4
 800185a:	4619      	mov	r1, r3
 800185c:	4610      	mov	r0, r2
 800185e:	f000 fa5b 	bl	8001d18 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6a1b      	ldr	r3, [r3, #32]
 8001878:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	4313      	orrs	r3, r2
 8001882:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800188a:	f023 0303 	bic.w	r3, r3, #3
 800188e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	689a      	ldr	r2, [r3, #8]
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	021b      	lsls	r3, r3, #8
 800189a:	4313      	orrs	r3, r2
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	4313      	orrs	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80018a8:	f023 030c 	bic.w	r3, r3, #12
 80018ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80018b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	68da      	ldr	r2, [r3, #12]
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	021b      	lsls	r3, r3, #8
 80018c4:	4313      	orrs	r3, r2
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	011a      	lsls	r2, r3, #4
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	031b      	lsls	r3, r3, #12
 80018d8:	4313      	orrs	r3, r2
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4313      	orrs	r3, r2
 80018de:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80018e6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80018ee:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685a      	ldr	r2, [r3, #4]
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	695b      	ldr	r3, [r3, #20]
 80018f8:	011b      	lsls	r3, r3, #4
 80018fa:	4313      	orrs	r3, r2
 80018fc:	68fa      	ldr	r2, [r7, #12]
 80018fe:	4313      	orrs	r3, r2
 8001900:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2201      	movs	r2, #1
 800191e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b02      	cmp	r3, #2
 8001940:	d122      	bne.n	8001988 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b02      	cmp	r3, #2
 800194e:	d11b      	bne.n	8001988 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f06f 0202 	mvn.w	r2, #2
 8001958:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2201      	movs	r2, #1
 800195e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	f003 0303 	and.w	r3, r3, #3
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 f9b4 	bl	8001cdc <HAL_TIM_IC_CaptureCallback>
 8001974:	e005      	b.n	8001982 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 f9a6 	bl	8001cc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 f9b7 	bl	8001cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	f003 0304 	and.w	r3, r3, #4
 8001992:	2b04      	cmp	r3, #4
 8001994:	d122      	bne.n	80019dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	2b04      	cmp	r3, #4
 80019a2:	d11b      	bne.n	80019dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f06f 0204 	mvn.w	r2, #4
 80019ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2202      	movs	r2, #2
 80019b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 f98a 	bl	8001cdc <HAL_TIM_IC_CaptureCallback>
 80019c8:	e005      	b.n	80019d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 f97c 	bl	8001cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 f98d 	bl	8001cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	f003 0308 	and.w	r3, r3, #8
 80019e6:	2b08      	cmp	r3, #8
 80019e8:	d122      	bne.n	8001a30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	f003 0308 	and.w	r3, r3, #8
 80019f4:	2b08      	cmp	r3, #8
 80019f6:	d11b      	bne.n	8001a30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f06f 0208 	mvn.w	r2, #8
 8001a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2204      	movs	r2, #4
 8001a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f000 f960 	bl	8001cdc <HAL_TIM_IC_CaptureCallback>
 8001a1c:	e005      	b.n	8001a2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f000 f952 	bl	8001cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f000 f963 	bl	8001cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	f003 0310 	and.w	r3, r3, #16
 8001a3a:	2b10      	cmp	r3, #16
 8001a3c:	d122      	bne.n	8001a84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	f003 0310 	and.w	r3, r3, #16
 8001a48:	2b10      	cmp	r3, #16
 8001a4a:	d11b      	bne.n	8001a84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f06f 0210 	mvn.w	r2, #16
 8001a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2208      	movs	r2, #8
 8001a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 f936 	bl	8001cdc <HAL_TIM_IC_CaptureCallback>
 8001a70:	e005      	b.n	8001a7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f928 	bl	8001cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 f939 	bl	8001cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d10e      	bne.n	8001ab0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d107      	bne.n	8001ab0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f06f 0201 	mvn.w	r2, #1
 8001aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f001 fb0e 	bl	80030cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aba:	2b80      	cmp	r3, #128	; 0x80
 8001abc:	d10e      	bne.n	8001adc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ac8:	2b80      	cmp	r3, #128	; 0x80
 8001aca:	d107      	bne.n	8001adc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 fc5e 	bl	8002398 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ae6:	2b40      	cmp	r3, #64	; 0x40
 8001ae8:	d10e      	bne.n	8001b08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001af4:	2b40      	cmp	r3, #64	; 0x40
 8001af6:	d107      	bne.n	8001b08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f8fe 	bl	8001d04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	f003 0320 	and.w	r3, r3, #32
 8001b12:	2b20      	cmp	r3, #32
 8001b14:	d10e      	bne.n	8001b34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	f003 0320 	and.w	r3, r3, #32
 8001b20:	2b20      	cmp	r3, #32
 8001b22:	d107      	bne.n	8001b34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f06f 0220 	mvn.w	r2, #32
 8001b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 fc28 	bl	8002384 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b34:	bf00      	nop
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d101      	bne.n	8001b56 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e0b4      	b.n	8001cc0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2202      	movs	r2, #2
 8001b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b0c      	cmp	r3, #12
 8001b6a:	f200 809f 	bhi.w	8001cac <HAL_TIM_PWM_ConfigChannel+0x170>
 8001b6e:	a201      	add	r2, pc, #4	; (adr r2, 8001b74 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b74:	08001ba9 	.word	0x08001ba9
 8001b78:	08001cad 	.word	0x08001cad
 8001b7c:	08001cad 	.word	0x08001cad
 8001b80:	08001cad 	.word	0x08001cad
 8001b84:	08001be9 	.word	0x08001be9
 8001b88:	08001cad 	.word	0x08001cad
 8001b8c:	08001cad 	.word	0x08001cad
 8001b90:	08001cad 	.word	0x08001cad
 8001b94:	08001c2b 	.word	0x08001c2b
 8001b98:	08001cad 	.word	0x08001cad
 8001b9c:	08001cad 	.word	0x08001cad
 8001ba0:	08001cad 	.word	0x08001cad
 8001ba4:	08001c6b 	.word	0x08001c6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68b9      	ldr	r1, [r7, #8]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f000 f952 	bl	8001e58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	699a      	ldr	r2, [r3, #24]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f042 0208 	orr.w	r2, r2, #8
 8001bc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	699a      	ldr	r2, [r3, #24]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 0204 	bic.w	r2, r2, #4
 8001bd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6999      	ldr	r1, [r3, #24]
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	691a      	ldr	r2, [r3, #16]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	619a      	str	r2, [r3, #24]
      break;
 8001be6:	e062      	b.n	8001cae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68b9      	ldr	r1, [r7, #8]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f000 f9a2 	bl	8001f38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	699a      	ldr	r2, [r3, #24]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	699a      	ldr	r2, [r3, #24]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6999      	ldr	r1, [r3, #24]
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	021a      	lsls	r2, r3, #8
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	430a      	orrs	r2, r1
 8001c26:	619a      	str	r2, [r3, #24]
      break;
 8001c28:	e041      	b.n	8001cae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68b9      	ldr	r1, [r7, #8]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f000 f9f7 	bl	8002024 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	69da      	ldr	r2, [r3, #28]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f042 0208 	orr.w	r2, r2, #8
 8001c44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	69da      	ldr	r2, [r3, #28]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 0204 	bic.w	r2, r2, #4
 8001c54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	69d9      	ldr	r1, [r3, #28]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	691a      	ldr	r2, [r3, #16]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	430a      	orrs	r2, r1
 8001c66:	61da      	str	r2, [r3, #28]
      break;
 8001c68:	e021      	b.n	8001cae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68b9      	ldr	r1, [r7, #8]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f000 fa4b 	bl	800210c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	69da      	ldr	r2, [r3, #28]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	69da      	ldr	r2, [r3, #28]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	69d9      	ldr	r1, [r3, #28]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	021a      	lsls	r2, r3, #8
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	61da      	str	r2, [r3, #28]
      break;
 8001caa:	e000      	b.n	8001cae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8001cac:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3710      	adds	r7, #16
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a40      	ldr	r2, [pc, #256]	; (8001e2c <TIM_Base_SetConfig+0x114>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d013      	beq.n	8001d58 <TIM_Base_SetConfig+0x40>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d36:	d00f      	beq.n	8001d58 <TIM_Base_SetConfig+0x40>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a3d      	ldr	r2, [pc, #244]	; (8001e30 <TIM_Base_SetConfig+0x118>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d00b      	beq.n	8001d58 <TIM_Base_SetConfig+0x40>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a3c      	ldr	r2, [pc, #240]	; (8001e34 <TIM_Base_SetConfig+0x11c>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d007      	beq.n	8001d58 <TIM_Base_SetConfig+0x40>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a3b      	ldr	r2, [pc, #236]	; (8001e38 <TIM_Base_SetConfig+0x120>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d003      	beq.n	8001d58 <TIM_Base_SetConfig+0x40>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a3a      	ldr	r2, [pc, #232]	; (8001e3c <TIM_Base_SetConfig+0x124>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d108      	bne.n	8001d6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a2f      	ldr	r2, [pc, #188]	; (8001e2c <TIM_Base_SetConfig+0x114>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d02b      	beq.n	8001dca <TIM_Base_SetConfig+0xb2>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d78:	d027      	beq.n	8001dca <TIM_Base_SetConfig+0xb2>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a2c      	ldr	r2, [pc, #176]	; (8001e30 <TIM_Base_SetConfig+0x118>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d023      	beq.n	8001dca <TIM_Base_SetConfig+0xb2>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a2b      	ldr	r2, [pc, #172]	; (8001e34 <TIM_Base_SetConfig+0x11c>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d01f      	beq.n	8001dca <TIM_Base_SetConfig+0xb2>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a2a      	ldr	r2, [pc, #168]	; (8001e38 <TIM_Base_SetConfig+0x120>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d01b      	beq.n	8001dca <TIM_Base_SetConfig+0xb2>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a29      	ldr	r2, [pc, #164]	; (8001e3c <TIM_Base_SetConfig+0x124>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d017      	beq.n	8001dca <TIM_Base_SetConfig+0xb2>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a28      	ldr	r2, [pc, #160]	; (8001e40 <TIM_Base_SetConfig+0x128>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d013      	beq.n	8001dca <TIM_Base_SetConfig+0xb2>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a27      	ldr	r2, [pc, #156]	; (8001e44 <TIM_Base_SetConfig+0x12c>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d00f      	beq.n	8001dca <TIM_Base_SetConfig+0xb2>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a26      	ldr	r2, [pc, #152]	; (8001e48 <TIM_Base_SetConfig+0x130>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d00b      	beq.n	8001dca <TIM_Base_SetConfig+0xb2>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a25      	ldr	r2, [pc, #148]	; (8001e4c <TIM_Base_SetConfig+0x134>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d007      	beq.n	8001dca <TIM_Base_SetConfig+0xb2>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a24      	ldr	r2, [pc, #144]	; (8001e50 <TIM_Base_SetConfig+0x138>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d003      	beq.n	8001dca <TIM_Base_SetConfig+0xb2>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a23      	ldr	r2, [pc, #140]	; (8001e54 <TIM_Base_SetConfig+0x13c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d108      	bne.n	8001ddc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a0a      	ldr	r2, [pc, #40]	; (8001e2c <TIM_Base_SetConfig+0x114>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d003      	beq.n	8001e10 <TIM_Base_SetConfig+0xf8>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a0c      	ldr	r2, [pc, #48]	; (8001e3c <TIM_Base_SetConfig+0x124>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d103      	bne.n	8001e18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	691a      	ldr	r2, [r3, #16]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	615a      	str	r2, [r3, #20]
}
 8001e1e:	bf00      	nop
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	40010000 	.word	0x40010000
 8001e30:	40000400 	.word	0x40000400
 8001e34:	40000800 	.word	0x40000800
 8001e38:	40000c00 	.word	0x40000c00
 8001e3c:	40010400 	.word	0x40010400
 8001e40:	40014000 	.word	0x40014000
 8001e44:	40014400 	.word	0x40014400
 8001e48:	40014800 	.word	0x40014800
 8001e4c:	40001800 	.word	0x40001800
 8001e50:	40001c00 	.word	0x40001c00
 8001e54:	40002000 	.word	0x40002000

08001e58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b087      	sub	sp, #28
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	f023 0201 	bic.w	r2, r3, #1
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f023 0303 	bic.w	r3, r3, #3
 8001e8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	f023 0302 	bic.w	r3, r3, #2
 8001ea0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a20      	ldr	r2, [pc, #128]	; (8001f30 <TIM_OC1_SetConfig+0xd8>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d003      	beq.n	8001ebc <TIM_OC1_SetConfig+0x64>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a1f      	ldr	r2, [pc, #124]	; (8001f34 <TIM_OC1_SetConfig+0xdc>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d10c      	bne.n	8001ed6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	f023 0308 	bic.w	r3, r3, #8
 8001ec2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	697a      	ldr	r2, [r7, #20]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	f023 0304 	bic.w	r3, r3, #4
 8001ed4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a15      	ldr	r2, [pc, #84]	; (8001f30 <TIM_OC1_SetConfig+0xd8>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d003      	beq.n	8001ee6 <TIM_OC1_SetConfig+0x8e>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a14      	ldr	r2, [pc, #80]	; (8001f34 <TIM_OC1_SetConfig+0xdc>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d111      	bne.n	8001f0a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001eec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001ef4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	697a      	ldr	r2, [r7, #20]
 8001f22:	621a      	str	r2, [r3, #32]
}
 8001f24:	bf00      	nop
 8001f26:	371c      	adds	r7, #28
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	40010000 	.word	0x40010000
 8001f34:	40010400 	.word	0x40010400

08001f38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b087      	sub	sp, #28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	f023 0210 	bic.w	r2, r3, #16
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	021b      	lsls	r3, r3, #8
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f023 0320 	bic.w	r3, r3, #32
 8001f82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	011b      	lsls	r3, r3, #4
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a22      	ldr	r2, [pc, #136]	; (800201c <TIM_OC2_SetConfig+0xe4>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d003      	beq.n	8001fa0 <TIM_OC2_SetConfig+0x68>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a21      	ldr	r2, [pc, #132]	; (8002020 <TIM_OC2_SetConfig+0xe8>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d10d      	bne.n	8001fbc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	011b      	lsls	r3, r3, #4
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a17      	ldr	r2, [pc, #92]	; (800201c <TIM_OC2_SetConfig+0xe4>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d003      	beq.n	8001fcc <TIM_OC2_SetConfig+0x94>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a16      	ldr	r2, [pc, #88]	; (8002020 <TIM_OC2_SetConfig+0xe8>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d113      	bne.n	8001ff4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001fd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001fda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	695b      	ldr	r3, [r3, #20]
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	621a      	str	r2, [r3, #32]
}
 800200e:	bf00      	nop
 8002010:	371c      	adds	r7, #28
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	40010000 	.word	0x40010000
 8002020:	40010400 	.word	0x40010400

08002024 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002024:	b480      	push	{r7}
 8002026:	b087      	sub	sp, #28
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f023 0303 	bic.w	r3, r3, #3
 800205a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	4313      	orrs	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800206c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	021b      	lsls	r3, r3, #8
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	4313      	orrs	r3, r2
 8002078:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a21      	ldr	r2, [pc, #132]	; (8002104 <TIM_OC3_SetConfig+0xe0>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d003      	beq.n	800208a <TIM_OC3_SetConfig+0x66>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a20      	ldr	r2, [pc, #128]	; (8002108 <TIM_OC3_SetConfig+0xe4>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d10d      	bne.n	80020a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002090:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	021b      	lsls	r3, r3, #8
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	4313      	orrs	r3, r2
 800209c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a16      	ldr	r2, [pc, #88]	; (8002104 <TIM_OC3_SetConfig+0xe0>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d003      	beq.n	80020b6 <TIM_OC3_SetConfig+0x92>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a15      	ldr	r2, [pc, #84]	; (8002108 <TIM_OC3_SetConfig+0xe4>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d113      	bne.n	80020de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80020c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	011b      	lsls	r3, r3, #4
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	011b      	lsls	r3, r3, #4
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	4313      	orrs	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	621a      	str	r2, [r3, #32]
}
 80020f8:	bf00      	nop
 80020fa:	371c      	adds	r7, #28
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	40010000 	.word	0x40010000
 8002108:	40010400 	.word	0x40010400

0800210c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800210c:	b480      	push	{r7}
 800210e:	b087      	sub	sp, #28
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800213a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002142:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	021b      	lsls	r3, r3, #8
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	4313      	orrs	r3, r2
 800214e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002156:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	031b      	lsls	r3, r3, #12
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4313      	orrs	r3, r2
 8002162:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a12      	ldr	r2, [pc, #72]	; (80021b0 <TIM_OC4_SetConfig+0xa4>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d003      	beq.n	8002174 <TIM_OC4_SetConfig+0x68>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a11      	ldr	r2, [pc, #68]	; (80021b4 <TIM_OC4_SetConfig+0xa8>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d109      	bne.n	8002188 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800217a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	019b      	lsls	r3, r3, #6
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	4313      	orrs	r3, r2
 8002186:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	621a      	str	r2, [r3, #32]
}
 80021a2:	bf00      	nop
 80021a4:	371c      	adds	r7, #28
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40010000 	.word	0x40010000
 80021b4:	40010400 	.word	0x40010400

080021b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b087      	sub	sp, #28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	f003 031f 	and.w	r3, r3, #31
 80021ca:	2201      	movs	r2, #1
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6a1a      	ldr	r2, [r3, #32]
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	43db      	mvns	r3, r3
 80021da:	401a      	ands	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6a1a      	ldr	r2, [r3, #32]
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	f003 031f 	and.w	r3, r3, #31
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	fa01 f303 	lsl.w	r3, r1, r3
 80021f0:	431a      	orrs	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	621a      	str	r2, [r3, #32]
}
 80021f6:	bf00      	nop
 80021f8:	371c      	adds	r7, #28
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b084      	sub	sp, #16
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2204      	movs	r2, #4
 8002212:	6839      	ldr	r1, [r7, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	f000 f8c9 	bl	80023ac <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002228:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2b06      	cmp	r3, #6
 800223a:	d007      	beq.n	800224c <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f042 0201 	orr.w	r2, r2, #1
 800224a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002256:	b480      	push	{r7}
 8002258:	b085      	sub	sp, #20
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
 800225e:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002266:	2b01      	cmp	r3, #1
 8002268:	d101      	bne.n	800226e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800226a:	2302      	movs	r3, #2
 800226c:	e032      	b.n	80022d4 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2202      	movs	r2, #2
 800227a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002294:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	4313      	orrs	r3, r2
 800229e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022a6:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	68ba      	ldr	r2, [r7, #8]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d101      	bne.n	80022fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80022f8:	2302      	movs	r3, #2
 80022fa:	e03d      	b.n	8002378 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	4313      	orrs	r3, r2
 8002310:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	4313      	orrs	r3, r2
 800231e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	4313      	orrs	r3, r2
 800232c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4313      	orrs	r3, r2
 800233a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	4313      	orrs	r3, r2
 8002348:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	4313      	orrs	r3, r2
 8002356:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	4313      	orrs	r3, r2
 8002364:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b087      	sub	sp, #28
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	f003 031f 	and.w	r3, r3, #31
 80023be:	2204      	movs	r2, #4
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6a1a      	ldr	r2, [r3, #32]
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	43db      	mvns	r3, r3
 80023ce:	401a      	ands	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6a1a      	ldr	r2, [r3, #32]
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	f003 031f 	and.w	r3, r3, #31
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	fa01 f303 	lsl.w	r3, r1, r3
 80023e4:	431a      	orrs	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	621a      	str	r2, [r3, #32]
}
 80023ea:	bf00      	nop
 80023ec:	371c      	adds	r7, #28
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e03f      	b.n	8002488 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d106      	bne.n	8002422 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f001 fcdf 	bl	8003de0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2224      	movs	r2, #36	; 0x24
 8002426:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68da      	ldr	r2, [r3, #12]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002438:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 fb88 	bl	8002b50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	691a      	ldr	r2, [r3, #16]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800244e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	695a      	ldr	r2, [r3, #20]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800245e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68da      	ldr	r2, [r3, #12]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800246e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2220      	movs	r2, #32
 800247a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2220      	movs	r2, #32
 8002482:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b088      	sub	sp, #32
 8002494:	af02      	add	r7, sp, #8
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	603b      	str	r3, [r7, #0]
 800249c:	4613      	mov	r3, r2
 800249e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b20      	cmp	r3, #32
 80024ae:	f040 8083 	bne.w	80025b8 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d002      	beq.n	80024be <HAL_UART_Transmit+0x2e>
 80024b8:	88fb      	ldrh	r3, [r7, #6]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e07b      	b.n	80025ba <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d101      	bne.n	80024d0 <HAL_UART_Transmit+0x40>
 80024cc:	2302      	movs	r3, #2
 80024ce:	e074      	b.n	80025ba <HAL_UART_Transmit+0x12a>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2221      	movs	r2, #33	; 0x21
 80024e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80024e6:	f7fe f873 	bl	80005d0 <HAL_GetTick>
 80024ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	88fa      	ldrh	r2, [r7, #6]
 80024f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	88fa      	ldrh	r2, [r7, #6]
 80024f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80024f8:	e042      	b.n	8002580 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024fe:	b29b      	uxth	r3, r3
 8002500:	3b01      	subs	r3, #1
 8002502:	b29a      	uxth	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002510:	d122      	bne.n	8002558 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	2200      	movs	r2, #0
 800251a:	2180      	movs	r1, #128	; 0x80
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f000 f9ab 	bl	8002878 <UART_WaitOnFlagUntilTimeout>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e046      	b.n	80025ba <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	461a      	mov	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800253e:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d103      	bne.n	8002550 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	3302      	adds	r3, #2
 800254c:	60bb      	str	r3, [r7, #8]
 800254e:	e017      	b.n	8002580 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	3301      	adds	r3, #1
 8002554:	60bb      	str	r3, [r7, #8]
 8002556:	e013      	b.n	8002580 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	2200      	movs	r2, #0
 8002560:	2180      	movs	r1, #128	; 0x80
 8002562:	68f8      	ldr	r0, [r7, #12]
 8002564:	f000 f988 	bl	8002878 <UART_WaitOnFlagUntilTimeout>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e023      	b.n	80025ba <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	1c5a      	adds	r2, r3, #1
 8002576:	60ba      	str	r2, [r7, #8]
 8002578:	781a      	ldrb	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002584:	b29b      	uxth	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1b7      	bne.n	80024fa <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	2200      	movs	r2, #0
 8002592:	2140      	movs	r1, #64	; 0x40
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f000 f96f 	bl	8002878 <UART_WaitOnFlagUntilTimeout>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e00a      	b.n	80025ba <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2220      	movs	r2, #32
 80025a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80025b4:	2300      	movs	r3, #0
 80025b6:	e000      	b.n	80025ba <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80025b8:	2302      	movs	r3, #2
  }
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b085      	sub	sp, #20
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	60f8      	str	r0, [r7, #12]
 80025ca:	60b9      	str	r1, [r7, #8]
 80025cc:	4613      	mov	r3, r2
 80025ce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b20      	cmp	r3, #32
 80025da:	d140      	bne.n	800265e <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d002      	beq.n	80025e8 <HAL_UART_Receive_IT+0x26>
 80025e2:	88fb      	ldrh	r3, [r7, #6]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e039      	b.n	8002660 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d101      	bne.n	80025fa <HAL_UART_Receive_IT+0x38>
 80025f6:	2302      	movs	r3, #2
 80025f8:	e032      	b.n	8002660 <HAL_UART_Receive_IT+0x9e>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	68ba      	ldr	r2, [r7, #8]
 8002606:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	88fa      	ldrh	r2, [r7, #6]
 800260c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	88fa      	ldrh	r2, [r7, #6]
 8002612:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2222      	movs	r2, #34	; 0x22
 800261e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68da      	ldr	r2, [r3, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002638:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	695a      	ldr	r2, [r3, #20]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f042 0201 	orr.w	r2, r2, #1
 8002648:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f042 0220 	orr.w	r2, r2, #32
 8002658:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800265a:	2300      	movs	r3, #0
 800265c:	e000      	b.n	8002660 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800265e:	2302      	movs	r3, #2
  }
}
 8002660:	4618      	mov	r0, r3
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b088      	sub	sp, #32
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800268c:	2300      	movs	r3, #0
 800268e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002690:	2300      	movs	r3, #0
 8002692:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10d      	bne.n	80026be <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	f003 0320 	and.w	r3, r3, #32
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d008      	beq.n	80026be <HAL_UART_IRQHandler+0x52>
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	f003 0320 	and.w	r3, r3, #32
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f9c8 	bl	8002a4c <UART_Receive_IT>
      return;
 80026bc:	e0cc      	b.n	8002858 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 80ab 	beq.w	800281c <HAL_UART_IRQHandler+0x1b0>
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d105      	bne.n	80026dc <HAL_UART_IRQHandler+0x70>
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 80a0 	beq.w	800281c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00a      	beq.n	80026fc <HAL_UART_IRQHandler+0x90>
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d005      	beq.n	80026fc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f4:	f043 0201 	orr.w	r2, r3, #1
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	f003 0304 	and.w	r3, r3, #4
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00a      	beq.n	800271c <HAL_UART_IRQHandler+0xb0>
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b00      	cmp	r3, #0
 800270e:	d005      	beq.n	800271c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002714:	f043 0202 	orr.w	r2, r3, #2
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00a      	beq.n	800273c <HAL_UART_IRQHandler+0xd0>
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002734:	f043 0204 	orr.w	r2, r3, #4
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	f003 0308 	and.w	r3, r3, #8
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00a      	beq.n	800275c <HAL_UART_IRQHandler+0xf0>
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b00      	cmp	r3, #0
 800274e:	d005      	beq.n	800275c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002754:	f043 0208 	orr.w	r2, r3, #8
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002760:	2b00      	cmp	r3, #0
 8002762:	d078      	beq.n	8002856 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	f003 0320 	and.w	r3, r3, #32
 800276a:	2b00      	cmp	r3, #0
 800276c:	d007      	beq.n	800277e <HAL_UART_IRQHandler+0x112>
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	f003 0320 	and.w	r3, r3, #32
 8002774:	2b00      	cmp	r3, #0
 8002776:	d002      	beq.n	800277e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 f967 	bl	8002a4c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002788:	2b40      	cmp	r3, #64	; 0x40
 800278a:	bf0c      	ite	eq
 800278c:	2301      	moveq	r3, #1
 800278e:	2300      	movne	r3, #0
 8002790:	b2db      	uxtb	r3, r3
 8002792:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002798:	f003 0308 	and.w	r3, r3, #8
 800279c:	2b00      	cmp	r3, #0
 800279e:	d102      	bne.n	80027a6 <HAL_UART_IRQHandler+0x13a>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d031      	beq.n	800280a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f8b0 	bl	800290c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027b6:	2b40      	cmp	r3, #64	; 0x40
 80027b8:	d123      	bne.n	8002802 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	695a      	ldr	r2, [r3, #20]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027c8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d013      	beq.n	80027fa <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d6:	4a22      	ldr	r2, [pc, #136]	; (8002860 <HAL_UART_IRQHandler+0x1f4>)
 80027d8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fe f813 	bl	800080a <HAL_DMA_Abort_IT>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d016      	beq.n	8002818 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80027f4:	4610      	mov	r0, r2
 80027f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027f8:	e00e      	b.n	8002818 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f832 	bl	8002864 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002800:	e00a      	b.n	8002818 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f82e 	bl	8002864 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002808:	e006      	b.n	8002818 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f82a 	bl	8002864 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002816:	e01e      	b.n	8002856 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002818:	bf00      	nop
    return;
 800281a:	e01c      	b.n	8002856 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002822:	2b00      	cmp	r3, #0
 8002824:	d008      	beq.n	8002838 <HAL_UART_IRQHandler+0x1cc>
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 f89d 	bl	8002970 <UART_Transmit_IT>
    return;
 8002836:	e00f      	b.n	8002858 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00a      	beq.n	8002858 <HAL_UART_IRQHandler+0x1ec>
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002848:	2b00      	cmp	r3, #0
 800284a:	d005      	beq.n	8002858 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 f8e5 	bl	8002a1c <UART_EndTransmit_IT>
    return;
 8002852:	bf00      	nop
 8002854:	e000      	b.n	8002858 <HAL_UART_IRQHandler+0x1ec>
    return;
 8002856:	bf00      	nop
  }
}
 8002858:	3720      	adds	r7, #32
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	08002949 	.word	0x08002949

08002864 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	603b      	str	r3, [r7, #0]
 8002884:	4613      	mov	r3, r2
 8002886:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002888:	e02c      	b.n	80028e4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002890:	d028      	beq.n	80028e4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d007      	beq.n	80028a8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002898:	f7fd fe9a 	bl	80005d0 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d21d      	bcs.n	80028e4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80028b6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	695a      	ldr	r2, [r3, #20]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f022 0201 	bic.w	r2, r2, #1
 80028c6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2220      	movs	r2, #32
 80028cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2220      	movs	r2, #32
 80028d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e00f      	b.n	8002904 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	4013      	ands	r3, r2
 80028ee:	68ba      	ldr	r2, [r7, #8]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	bf0c      	ite	eq
 80028f4:	2301      	moveq	r3, #1
 80028f6:	2300      	movne	r3, #0
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	461a      	mov	r2, r3
 80028fc:	79fb      	ldrb	r3, [r7, #7]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d0c3      	beq.n	800288a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68da      	ldr	r2, [r3, #12]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002922:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	695a      	ldr	r2, [r3, #20]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 0201 	bic.w	r2, r2, #1
 8002932:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2220      	movs	r2, #32
 8002938:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002954:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f7ff ff7e 	bl	8002864 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002968:	bf00      	nop
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b21      	cmp	r3, #33	; 0x21
 8002982:	d144      	bne.n	8002a0e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800298c:	d11a      	bne.n	80029c4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	881b      	ldrh	r3, [r3, #0]
 8002998:	461a      	mov	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029a2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d105      	bne.n	80029b8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	1c9a      	adds	r2, r3, #2
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	621a      	str	r2, [r3, #32]
 80029b6:	e00e      	b.n	80029d6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	1c5a      	adds	r2, r3, #1
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	621a      	str	r2, [r3, #32]
 80029c2:	e008      	b.n	80029d6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	1c59      	adds	r1, r3, #1
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6211      	str	r1, [r2, #32]
 80029ce:	781a      	ldrb	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029da:	b29b      	uxth	r3, r3
 80029dc:	3b01      	subs	r3, #1
 80029de:	b29b      	uxth	r3, r3
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	4619      	mov	r1, r3
 80029e4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10f      	bne.n	8002a0a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68da      	ldr	r2, [r3, #12]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029f8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68da      	ldr	r2, [r3, #12]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a08:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	e000      	b.n	8002a10 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002a0e:	2302      	movs	r3, #2
  }
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68da      	ldr	r2, [r3, #12]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a32:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2220      	movs	r2, #32
 8002a38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 fb67 	bl	8003110 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b22      	cmp	r3, #34	; 0x22
 8002a5e:	d171      	bne.n	8002b44 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a68:	d123      	bne.n	8002ab2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d10e      	bne.n	8002a96 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8e:	1c9a      	adds	r2, r3, #2
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	629a      	str	r2, [r3, #40]	; 0x28
 8002a94:	e029      	b.n	8002aea <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aaa:	1c5a      	adds	r2, r3, #1
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	629a      	str	r2, [r3, #40]	; 0x28
 8002ab0:	e01b      	b.n	8002aea <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10a      	bne.n	8002ad0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6858      	ldr	r0, [r3, #4]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac4:	1c59      	adds	r1, r3, #1
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6291      	str	r1, [r2, #40]	; 0x28
 8002aca:	b2c2      	uxtb	r2, r0
 8002acc:	701a      	strb	r2, [r3, #0]
 8002ace:	e00c      	b.n	8002aea <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002adc:	1c58      	adds	r0, r3, #1
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	6288      	str	r0, [r1, #40]	; 0x28
 8002ae2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ae6:	b2d2      	uxtb	r2, r2
 8002ae8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	3b01      	subs	r3, #1
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	4619      	mov	r1, r3
 8002af8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d120      	bne.n	8002b40 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68da      	ldr	r2, [r3, #12]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0220 	bic.w	r2, r2, #32
 8002b0c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68da      	ldr	r2, [r3, #12]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b1c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695a      	ldr	r2, [r3, #20]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 0201 	bic.w	r2, r2, #1
 8002b2c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2220      	movs	r2, #32
 8002b32:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 fb02 	bl	8003140 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	e002      	b.n	8002b46 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002b40:	2300      	movs	r3, #0
 8002b42:	e000      	b.n	8002b46 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002b44:	2302      	movs	r3, #2
  }
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
	...

08002b50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b50:	b5b0      	push	{r4, r5, r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	68da      	ldr	r2, [r3, #12]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	431a      	orrs	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002b90:	f023 030c 	bic.w	r3, r3, #12
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6812      	ldr	r2, [r2, #0]
 8002b98:	68f9      	ldr	r1, [r7, #12]
 8002b9a:	430b      	orrs	r3, r1
 8002b9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	699a      	ldr	r2, [r3, #24]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	69db      	ldr	r3, [r3, #28]
 8002bb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bbc:	f040 80e4 	bne.w	8002d88 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4aab      	ldr	r2, [pc, #684]	; (8002e74 <UART_SetConfig+0x324>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d004      	beq.n	8002bd4 <UART_SetConfig+0x84>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4aaa      	ldr	r2, [pc, #680]	; (8002e78 <UART_SetConfig+0x328>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d16c      	bne.n	8002cae <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002bd4:	f7fe f954 	bl	8000e80 <HAL_RCC_GetPCLK2Freq>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	4613      	mov	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	009a      	lsls	r2, r3, #2
 8002be2:	441a      	add	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bee:	4aa3      	ldr	r2, [pc, #652]	; (8002e7c <UART_SetConfig+0x32c>)
 8002bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf4:	095b      	lsrs	r3, r3, #5
 8002bf6:	011c      	lsls	r4, r3, #4
 8002bf8:	f7fe f942 	bl	8000e80 <HAL_RCC_GetPCLK2Freq>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	4613      	mov	r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4413      	add	r3, r2
 8002c04:	009a      	lsls	r2, r3, #2
 8002c06:	441a      	add	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	fbb2 f5f3 	udiv	r5, r2, r3
 8002c12:	f7fe f935 	bl	8000e80 <HAL_RCC_GetPCLK2Freq>
 8002c16:	4602      	mov	r2, r0
 8002c18:	4613      	mov	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	009a      	lsls	r2, r3, #2
 8002c20:	441a      	add	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c2c:	4a93      	ldr	r2, [pc, #588]	; (8002e7c <UART_SetConfig+0x32c>)
 8002c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c32:	095b      	lsrs	r3, r3, #5
 8002c34:	2264      	movs	r2, #100	; 0x64
 8002c36:	fb02 f303 	mul.w	r3, r2, r3
 8002c3a:	1aeb      	subs	r3, r5, r3
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	3332      	adds	r3, #50	; 0x32
 8002c40:	4a8e      	ldr	r2, [pc, #568]	; (8002e7c <UART_SetConfig+0x32c>)
 8002c42:	fba2 2303 	umull	r2, r3, r2, r3
 8002c46:	095b      	lsrs	r3, r3, #5
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c4e:	441c      	add	r4, r3
 8002c50:	f7fe f916 	bl	8000e80 <HAL_RCC_GetPCLK2Freq>
 8002c54:	4602      	mov	r2, r0
 8002c56:	4613      	mov	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	009a      	lsls	r2, r3, #2
 8002c5e:	441a      	add	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	fbb2 f5f3 	udiv	r5, r2, r3
 8002c6a:	f7fe f909 	bl	8000e80 <HAL_RCC_GetPCLK2Freq>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	4613      	mov	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	009a      	lsls	r2, r3, #2
 8002c78:	441a      	add	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c84:	4a7d      	ldr	r2, [pc, #500]	; (8002e7c <UART_SetConfig+0x32c>)
 8002c86:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8a:	095b      	lsrs	r3, r3, #5
 8002c8c:	2264      	movs	r2, #100	; 0x64
 8002c8e:	fb02 f303 	mul.w	r3, r2, r3
 8002c92:	1aeb      	subs	r3, r5, r3
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	3332      	adds	r3, #50	; 0x32
 8002c98:	4a78      	ldr	r2, [pc, #480]	; (8002e7c <UART_SetConfig+0x32c>)
 8002c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9e:	095b      	lsrs	r3, r3, #5
 8002ca0:	f003 0207 	and.w	r2, r3, #7
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4422      	add	r2, r4
 8002caa:	609a      	str	r2, [r3, #8]
 8002cac:	e154      	b.n	8002f58 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002cae:	f7fe f8d3 	bl	8000e58 <HAL_RCC_GetPCLK1Freq>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	009a      	lsls	r2, r3, #2
 8002cbc:	441a      	add	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc8:	4a6c      	ldr	r2, [pc, #432]	; (8002e7c <UART_SetConfig+0x32c>)
 8002cca:	fba2 2303 	umull	r2, r3, r2, r3
 8002cce:	095b      	lsrs	r3, r3, #5
 8002cd0:	011c      	lsls	r4, r3, #4
 8002cd2:	f7fe f8c1 	bl	8000e58 <HAL_RCC_GetPCLK1Freq>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	4613      	mov	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4413      	add	r3, r2
 8002cde:	009a      	lsls	r2, r3, #2
 8002ce0:	441a      	add	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	fbb2 f5f3 	udiv	r5, r2, r3
 8002cec:	f7fe f8b4 	bl	8000e58 <HAL_RCC_GetPCLK1Freq>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	009a      	lsls	r2, r3, #2
 8002cfa:	441a      	add	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d06:	4a5d      	ldr	r2, [pc, #372]	; (8002e7c <UART_SetConfig+0x32c>)
 8002d08:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0c:	095b      	lsrs	r3, r3, #5
 8002d0e:	2264      	movs	r2, #100	; 0x64
 8002d10:	fb02 f303 	mul.w	r3, r2, r3
 8002d14:	1aeb      	subs	r3, r5, r3
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	3332      	adds	r3, #50	; 0x32
 8002d1a:	4a58      	ldr	r2, [pc, #352]	; (8002e7c <UART_SetConfig+0x32c>)
 8002d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d20:	095b      	lsrs	r3, r3, #5
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d28:	441c      	add	r4, r3
 8002d2a:	f7fe f895 	bl	8000e58 <HAL_RCC_GetPCLK1Freq>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	4613      	mov	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	009a      	lsls	r2, r3, #2
 8002d38:	441a      	add	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	fbb2 f5f3 	udiv	r5, r2, r3
 8002d44:	f7fe f888 	bl	8000e58 <HAL_RCC_GetPCLK1Freq>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	009a      	lsls	r2, r3, #2
 8002d52:	441a      	add	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5e:	4a47      	ldr	r2, [pc, #284]	; (8002e7c <UART_SetConfig+0x32c>)
 8002d60:	fba2 2303 	umull	r2, r3, r2, r3
 8002d64:	095b      	lsrs	r3, r3, #5
 8002d66:	2264      	movs	r2, #100	; 0x64
 8002d68:	fb02 f303 	mul.w	r3, r2, r3
 8002d6c:	1aeb      	subs	r3, r5, r3
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	3332      	adds	r3, #50	; 0x32
 8002d72:	4a42      	ldr	r2, [pc, #264]	; (8002e7c <UART_SetConfig+0x32c>)
 8002d74:	fba2 2303 	umull	r2, r3, r2, r3
 8002d78:	095b      	lsrs	r3, r3, #5
 8002d7a:	f003 0207 	and.w	r2, r3, #7
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4422      	add	r2, r4
 8002d84:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002d86:	e0e7      	b.n	8002f58 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a39      	ldr	r2, [pc, #228]	; (8002e74 <UART_SetConfig+0x324>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d004      	beq.n	8002d9c <UART_SetConfig+0x24c>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a38      	ldr	r2, [pc, #224]	; (8002e78 <UART_SetConfig+0x328>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d171      	bne.n	8002e80 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002d9c:	f7fe f870 	bl	8000e80 <HAL_RCC_GetPCLK2Freq>
 8002da0:	4602      	mov	r2, r0
 8002da2:	4613      	mov	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4413      	add	r3, r2
 8002da8:	009a      	lsls	r2, r3, #2
 8002daa:	441a      	add	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db6:	4a31      	ldr	r2, [pc, #196]	; (8002e7c <UART_SetConfig+0x32c>)
 8002db8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbc:	095b      	lsrs	r3, r3, #5
 8002dbe:	011c      	lsls	r4, r3, #4
 8002dc0:	f7fe f85e 	bl	8000e80 <HAL_RCC_GetPCLK2Freq>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	009a      	lsls	r2, r3, #2
 8002dce:	441a      	add	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	fbb2 f5f3 	udiv	r5, r2, r3
 8002dda:	f7fe f851 	bl	8000e80 <HAL_RCC_GetPCLK2Freq>
 8002dde:	4602      	mov	r2, r0
 8002de0:	4613      	mov	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	009a      	lsls	r2, r3, #2
 8002de8:	441a      	add	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df4:	4a21      	ldr	r2, [pc, #132]	; (8002e7c <UART_SetConfig+0x32c>)
 8002df6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfa:	095b      	lsrs	r3, r3, #5
 8002dfc:	2264      	movs	r2, #100	; 0x64
 8002dfe:	fb02 f303 	mul.w	r3, r2, r3
 8002e02:	1aeb      	subs	r3, r5, r3
 8002e04:	011b      	lsls	r3, r3, #4
 8002e06:	3332      	adds	r3, #50	; 0x32
 8002e08:	4a1c      	ldr	r2, [pc, #112]	; (8002e7c <UART_SetConfig+0x32c>)
 8002e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0e:	095b      	lsrs	r3, r3, #5
 8002e10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e14:	441c      	add	r4, r3
 8002e16:	f7fe f833 	bl	8000e80 <HAL_RCC_GetPCLK2Freq>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	009a      	lsls	r2, r3, #2
 8002e24:	441a      	add	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	fbb2 f5f3 	udiv	r5, r2, r3
 8002e30:	f7fe f826 	bl	8000e80 <HAL_RCC_GetPCLK2Freq>
 8002e34:	4602      	mov	r2, r0
 8002e36:	4613      	mov	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	009a      	lsls	r2, r3, #2
 8002e3e:	441a      	add	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e4a:	4a0c      	ldr	r2, [pc, #48]	; (8002e7c <UART_SetConfig+0x32c>)
 8002e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e50:	095b      	lsrs	r3, r3, #5
 8002e52:	2264      	movs	r2, #100	; 0x64
 8002e54:	fb02 f303 	mul.w	r3, r2, r3
 8002e58:	1aeb      	subs	r3, r5, r3
 8002e5a:	011b      	lsls	r3, r3, #4
 8002e5c:	3332      	adds	r3, #50	; 0x32
 8002e5e:	4a07      	ldr	r2, [pc, #28]	; (8002e7c <UART_SetConfig+0x32c>)
 8002e60:	fba2 2303 	umull	r2, r3, r2, r3
 8002e64:	095b      	lsrs	r3, r3, #5
 8002e66:	f003 020f 	and.w	r2, r3, #15
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4422      	add	r2, r4
 8002e70:	609a      	str	r2, [r3, #8]
 8002e72:	e071      	b.n	8002f58 <UART_SetConfig+0x408>
 8002e74:	40011000 	.word	0x40011000
 8002e78:	40011400 	.word	0x40011400
 8002e7c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002e80:	f7fd ffea 	bl	8000e58 <HAL_RCC_GetPCLK1Freq>
 8002e84:	4602      	mov	r2, r0
 8002e86:	4613      	mov	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	4413      	add	r3, r2
 8002e8c:	009a      	lsls	r2, r3, #2
 8002e8e:	441a      	add	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e9a:	4a31      	ldr	r2, [pc, #196]	; (8002f60 <UART_SetConfig+0x410>)
 8002e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea0:	095b      	lsrs	r3, r3, #5
 8002ea2:	011c      	lsls	r4, r3, #4
 8002ea4:	f7fd ffd8 	bl	8000e58 <HAL_RCC_GetPCLK1Freq>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	4613      	mov	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4413      	add	r3, r2
 8002eb0:	009a      	lsls	r2, r3, #2
 8002eb2:	441a      	add	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	fbb2 f5f3 	udiv	r5, r2, r3
 8002ebe:	f7fd ffcb 	bl	8000e58 <HAL_RCC_GetPCLK1Freq>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4413      	add	r3, r2
 8002eca:	009a      	lsls	r2, r3, #2
 8002ecc:	441a      	add	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed8:	4a21      	ldr	r2, [pc, #132]	; (8002f60 <UART_SetConfig+0x410>)
 8002eda:	fba2 2303 	umull	r2, r3, r2, r3
 8002ede:	095b      	lsrs	r3, r3, #5
 8002ee0:	2264      	movs	r2, #100	; 0x64
 8002ee2:	fb02 f303 	mul.w	r3, r2, r3
 8002ee6:	1aeb      	subs	r3, r5, r3
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	3332      	adds	r3, #50	; 0x32
 8002eec:	4a1c      	ldr	r2, [pc, #112]	; (8002f60 <UART_SetConfig+0x410>)
 8002eee:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef2:	095b      	lsrs	r3, r3, #5
 8002ef4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ef8:	441c      	add	r4, r3
 8002efa:	f7fd ffad 	bl	8000e58 <HAL_RCC_GetPCLK1Freq>
 8002efe:	4602      	mov	r2, r0
 8002f00:	4613      	mov	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4413      	add	r3, r2
 8002f06:	009a      	lsls	r2, r3, #2
 8002f08:	441a      	add	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	fbb2 f5f3 	udiv	r5, r2, r3
 8002f14:	f7fd ffa0 	bl	8000e58 <HAL_RCC_GetPCLK1Freq>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	009a      	lsls	r2, r3, #2
 8002f22:	441a      	add	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f2e:	4a0c      	ldr	r2, [pc, #48]	; (8002f60 <UART_SetConfig+0x410>)
 8002f30:	fba2 2303 	umull	r2, r3, r2, r3
 8002f34:	095b      	lsrs	r3, r3, #5
 8002f36:	2264      	movs	r2, #100	; 0x64
 8002f38:	fb02 f303 	mul.w	r3, r2, r3
 8002f3c:	1aeb      	subs	r3, r5, r3
 8002f3e:	011b      	lsls	r3, r3, #4
 8002f40:	3332      	adds	r3, #50	; 0x32
 8002f42:	4a07      	ldr	r2, [pc, #28]	; (8002f60 <UART_SetConfig+0x410>)
 8002f44:	fba2 2303 	umull	r2, r3, r2, r3
 8002f48:	095b      	lsrs	r3, r3, #5
 8002f4a:	f003 020f 	and.w	r2, r3, #15
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4422      	add	r2, r4
 8002f54:	609a      	str	r2, [r3, #8]
}
 8002f56:	e7ff      	b.n	8002f58 <UART_SetConfig+0x408>
 8002f58:	bf00      	nop
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bdb0      	pop	{r4, r5, r7, pc}
 8002f60:	51eb851f 	.word	0x51eb851f

08002f64 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b08a      	sub	sp, #40	; 0x28
 8002f68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f6a:	f107 0314 	add.w	r3, r7, #20
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	605a      	str	r2, [r3, #4]
 8002f74:	609a      	str	r2, [r3, #8]
 8002f76:	60da      	str	r2, [r3, #12]
 8002f78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	613b      	str	r3, [r7, #16]
 8002f7e:	4b4f      	ldr	r3, [pc, #316]	; (80030bc <MX_GPIO_Init+0x158>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	4a4e      	ldr	r2, [pc, #312]	; (80030bc <MX_GPIO_Init+0x158>)
 8002f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f88:	6313      	str	r3, [r2, #48]	; 0x30
 8002f8a:	4b4c      	ldr	r3, [pc, #304]	; (80030bc <MX_GPIO_Init+0x158>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f92:	613b      	str	r3, [r7, #16]
 8002f94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f96:	2300      	movs	r3, #0
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	4b48      	ldr	r3, [pc, #288]	; (80030bc <MX_GPIO_Init+0x158>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	4a47      	ldr	r2, [pc, #284]	; (80030bc <MX_GPIO_Init+0x158>)
 8002fa0:	f043 0304 	orr.w	r3, r3, #4
 8002fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fa6:	4b45      	ldr	r3, [pc, #276]	; (80030bc <MX_GPIO_Init+0x158>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	f003 0304 	and.w	r3, r3, #4
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60bb      	str	r3, [r7, #8]
 8002fb6:	4b41      	ldr	r3, [pc, #260]	; (80030bc <MX_GPIO_Init+0x158>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	4a40      	ldr	r2, [pc, #256]	; (80030bc <MX_GPIO_Init+0x158>)
 8002fbc:	f043 0301 	orr.w	r3, r3, #1
 8002fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc2:	4b3e      	ldr	r3, [pc, #248]	; (80030bc <MX_GPIO_Init+0x158>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	60bb      	str	r3, [r7, #8]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fce:	2300      	movs	r3, #0
 8002fd0:	607b      	str	r3, [r7, #4]
 8002fd2:	4b3a      	ldr	r3, [pc, #232]	; (80030bc <MX_GPIO_Init+0x158>)
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd6:	4a39      	ldr	r2, [pc, #228]	; (80030bc <MX_GPIO_Init+0x158>)
 8002fd8:	f043 0302 	orr.w	r3, r3, #2
 8002fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002fde:	4b37      	ldr	r3, [pc, #220]	; (80030bc <MX_GPIO_Init+0x158>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	607b      	str	r3, [r7, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fea:	2300      	movs	r3, #0
 8002fec:	603b      	str	r3, [r7, #0]
 8002fee:	4b33      	ldr	r3, [pc, #204]	; (80030bc <MX_GPIO_Init+0x158>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	4a32      	ldr	r2, [pc, #200]	; (80030bc <MX_GPIO_Init+0x158>)
 8002ff4:	f043 0308 	orr.w	r3, r3, #8
 8002ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8002ffa:	4b30      	ldr	r3, [pc, #192]	; (80030bc <MX_GPIO_Init+0x158>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	f003 0308 	and.w	r3, r3, #8
 8003002:	603b      	str	r3, [r7, #0]
 8003004:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin 
 8003006:	2200      	movs	r2, #0
 8003008:	f240 313f 	movw	r1, #831	; 0x33f
 800300c:	482c      	ldr	r0, [pc, #176]	; (80030c0 <MX_GPIO_Init+0x15c>)
 800300e:	f7fd fdb1 	bl	8000b74 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|dir2_Pin|dir3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8003012:	2200      	movs	r2, #0
 8003014:	2160      	movs	r1, #96	; 0x60
 8003016:	482b      	ldr	r0, [pc, #172]	; (80030c4 <MX_GPIO_Init+0x160>)
 8003018:	f7fd fdac 	bl	8000b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13 
 800301c:	2200      	movs	r2, #0
 800301e:	f24f 0106 	movw	r1, #61446	; 0xf006
 8003022:	4829      	ldr	r0, [pc, #164]	; (80030c8 <MX_GPIO_Init+0x164>)
 8003024:	f7fd fda6 	bl	8000b74 <HAL_GPIO_WritePin>
                          |dir0_Pin|dir1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PC4 PC5 PCPin PCPin */
  GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin 
 8003028:	f240 333f 	movw	r3, #831	; 0x33f
 800302c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|dir2_Pin|dir3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800302e:	2301      	movs	r3, #1
 8003030:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003032:	2300      	movs	r3, #0
 8003034:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003036:	2300      	movs	r3, #0
 8003038:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800303a:	f107 0314 	add.w	r3, r7, #20
 800303e:	4619      	mov	r1, r3
 8003040:	481f      	ldr	r0, [pc, #124]	; (80030c0 <MX_GPIO_Init+0x15c>)
 8003042:	f7fd fc05 	bl	8000850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 8003046:	2390      	movs	r3, #144	; 0x90
 8003048:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800304a:	2300      	movs	r3, #0
 800304c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304e:	2300      	movs	r3, #0
 8003050:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003052:	f107 0314 	add.w	r3, r7, #20
 8003056:	4619      	mov	r1, r3
 8003058:	481a      	ldr	r0, [pc, #104]	; (80030c4 <MX_GPIO_Init+0x160>)
 800305a:	f7fd fbf9 	bl	8000850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800305e:	2360      	movs	r3, #96	; 0x60
 8003060:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003062:	2301      	movs	r3, #1
 8003064:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003066:	2300      	movs	r3, #0
 8003068:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800306a:	2300      	movs	r3, #0
 800306c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800306e:	f107 0314 	add.w	r3, r7, #20
 8003072:	4619      	mov	r1, r3
 8003074:	4813      	ldr	r0, [pc, #76]	; (80030c4 <MX_GPIO_Init+0x160>)
 8003076:	f7fd fbeb 	bl	8000850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10;
 800307a:	f240 4301 	movw	r3, #1025	; 0x401
 800307e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003080:	2300      	movs	r3, #0
 8003082:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003084:	2300      	movs	r3, #0
 8003086:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003088:	f107 0314 	add.w	r3, r7, #20
 800308c:	4619      	mov	r1, r3
 800308e:	480e      	ldr	r0, [pc, #56]	; (80030c8 <MX_GPIO_Init+0x164>)
 8003090:	f7fd fbde 	bl	8000850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13 
                           PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13 
 8003094:	f24f 0306 	movw	r3, #61446	; 0xf006
 8003098:	617b      	str	r3, [r7, #20]
                          |dir0_Pin|dir1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800309a:	2301      	movs	r3, #1
 800309c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309e:	2300      	movs	r3, #0
 80030a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a2:	2300      	movs	r3, #0
 80030a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030a6:	f107 0314 	add.w	r3, r7, #20
 80030aa:	4619      	mov	r1, r3
 80030ac:	4806      	ldr	r0, [pc, #24]	; (80030c8 <MX_GPIO_Init+0x164>)
 80030ae:	f7fd fbcf 	bl	8000850 <HAL_GPIO_Init>

}
 80030b2:	bf00      	nop
 80030b4:	3728      	adds	r7, #40	; 0x28
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40023800 	.word	0x40023800
 80030c0:	40020800 	.word	0x40020800
 80030c4:	40020000 	.word	0x40020000
 80030c8:	40020400 	.word	0x40020400

080030cc <HAL_TIM_PeriodElapsedCallback>:

COUNTERS g_counters;


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a0a      	ldr	r2, [pc, #40]	; (8003104 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d104      	bne.n	80030e8 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1);
 80030de:	2103      	movs	r1, #3
 80030e0:	4809      	ldr	r0, [pc, #36]	; (8003108 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80030e2:	f7fd fd60 	bl	8000ba6 <HAL_GPIO_TogglePin>
	}
	else if(htim->Instance == TIM7)
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_2|GPIO_PIN_2);
	}
}
 80030e6:	e008      	b.n	80030fa <HAL_TIM_PeriodElapsedCallback+0x2e>
	else if(htim->Instance == TIM7)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a07      	ldr	r2, [pc, #28]	; (800310c <HAL_TIM_PeriodElapsedCallback+0x40>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d103      	bne.n	80030fa <HAL_TIM_PeriodElapsedCallback+0x2e>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_2|GPIO_PIN_2);
 80030f2:	2104      	movs	r1, #4
 80030f4:	4804      	ldr	r0, [pc, #16]	; (8003108 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80030f6:	f7fd fd56 	bl	8000ba6 <HAL_GPIO_TogglePin>
}
 80030fa:	bf00      	nop
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40001000 	.word	0x40001000
 8003108:	40020800 	.word	0x40020800
 800310c:	40001400 	.word	0x40001400

08003110 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a06      	ldr	r2, [pc, #24]	; (8003138 <HAL_UART_TxCpltCallback+0x28>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d104      	bne.n	800312c <HAL_UART_TxCpltCallback+0x1c>
	{
		g_counters.usart2TxCounter++;
 8003122:	4b06      	ldr	r3, [pc, #24]	; (800313c <HAL_UART_TxCpltCallback+0x2c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	3301      	adds	r3, #1
 8003128:	4a04      	ldr	r2, [pc, #16]	; (800313c <HAL_UART_TxCpltCallback+0x2c>)
 800312a:	6013      	str	r3, [r2, #0]
	}
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	40004400 	.word	0x40004400
 800313c:	2000003c 	.word	0x2000003c

08003140 <HAL_UART_RxCpltCallback>:
extern uint8_t rxData[5];
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a08      	ldr	r2, [pc, #32]	; (8003170 <HAL_UART_RxCpltCallback+0x30>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d109      	bne.n	8003166 <HAL_UART_RxCpltCallback+0x26>
	{
		g_counters.usart2RxCounter++;
 8003152:	4b08      	ldr	r3, [pc, #32]	; (8003174 <HAL_UART_RxCpltCallback+0x34>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	3301      	adds	r3, #1
 8003158:	4a06      	ldr	r2, [pc, #24]	; (8003174 <HAL_UART_RxCpltCallback+0x34>)
 800315a:	6053      	str	r3, [r2, #4]

	    HAL_UART_Receive_IT(&huart2, rxData, 1);
 800315c:	2201      	movs	r2, #1
 800315e:	4906      	ldr	r1, [pc, #24]	; (8003178 <HAL_UART_RxCpltCallback+0x38>)
 8003160:	4806      	ldr	r0, [pc, #24]	; (800317c <HAL_UART_RxCpltCallback+0x3c>)
 8003162:	f7ff fa2e 	bl	80025c2 <HAL_UART_Receive_IT>
	}
}
 8003166:	bf00      	nop
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	40004400 	.word	0x40004400
 8003174:	2000003c 	.word	0x2000003c
 8003178:	20000030 	.word	0x20000030
 800317c:	200002a0 	.word	0x200002a0

08003180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003186:	f7fd f9bd 	bl	8000504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800318a:	f000 f875 	bl	8003278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800318e:	f7ff fee9 	bl	8002f64 <MX_GPIO_Init>
  MX_TIM1_Init();
 8003192:	f000 f9b7 	bl	8003504 <MX_TIM1_Init>
  MX_TIM3_Init();
 8003196:	f000 fa5d 	bl	8003654 <MX_TIM3_Init>
  MX_TIM4_Init();
 800319a:	f000 faaf 	bl	80036fc <MX_TIM4_Init>
  MX_TIM5_Init();
 800319e:	f000 fb01 	bl	80037a4 <MX_TIM5_Init>
  MX_TIM8_Init();
 80031a2:	f000 fbbf 	bl	8003924 <MX_TIM8_Init>
  MX_UART4_Init();
 80031a6:	f000 fd9d 	bl	8003ce4 <MX_UART4_Init>
  MX_UART5_Init();
 80031aa:	f000 fdc5 	bl	8003d38 <MX_UART5_Init>
  MX_USART2_UART_Init();
 80031ae:	f000 fded 	bl	8003d8c <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80031b2:	f000 fb4b 	bl	800384c <MX_TIM6_Init>
  MX_TIM7_Init();
 80031b6:	f000 fb7f 	bl	80038b8 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim6);
 80031ba:	4828      	ldr	r0, [pc, #160]	; (800325c <main+0xdc>)
 80031bc:	f7fe fa97 	bl	80016ee <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 80031c0:	4827      	ldr	r0, [pc, #156]	; (8003260 <main+0xe0>)
 80031c2:	f7fe fa94 	bl	80016ee <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80031c6:	2100      	movs	r1, #0
 80031c8:	4826      	ldr	r0, [pc, #152]	; (8003264 <main+0xe4>)
 80031ca:	f7fe fadf 	bl	800178c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80031ce:	2100      	movs	r1, #0
 80031d0:	4824      	ldr	r0, [pc, #144]	; (8003264 <main+0xe4>)
 80031d2:	f7ff f816 	bl	8002202 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80031d6:	2104      	movs	r1, #4
 80031d8:	4822      	ldr	r0, [pc, #136]	; (8003264 <main+0xe4>)
 80031da:	f7fe fad7 	bl	800178c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80031de:	2104      	movs	r1, #4
 80031e0:	4820      	ldr	r0, [pc, #128]	; (8003264 <main+0xe4>)
 80031e2:	f7ff f80e 	bl	8002202 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80031e6:	2108      	movs	r1, #8
 80031e8:	481e      	ldr	r0, [pc, #120]	; (8003264 <main+0xe4>)
 80031ea:	f7fe facf 	bl	800178c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80031ee:	2108      	movs	r1, #8
 80031f0:	481c      	ldr	r0, [pc, #112]	; (8003264 <main+0xe4>)
 80031f2:	f7ff f806 	bl	8002202 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80031f6:	210c      	movs	r1, #12
 80031f8:	481a      	ldr	r0, [pc, #104]	; (8003264 <main+0xe4>)
 80031fa:	f7fe fac7 	bl	800178c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_4);
 80031fe:	210c      	movs	r1, #12
 8003200:	4818      	ldr	r0, [pc, #96]	; (8003264 <main+0xe4>)
 8003202:	f7fe fffe 	bl	8002202 <HAL_TIMEx_PWMN_Start>

  uint32_t current_tick = 0;
 8003206:	2300      	movs	r3, #0
 8003208:	603b      	str	r3, [r7, #0]
  uint32_t past_tick = 0;
 800320a:	2300      	movs	r3, #0
 800320c:	607b      	str	r3, [r7, #4]


  TIM1->CCR1 = 100;
 800320e:	4b16      	ldr	r3, [pc, #88]	; (8003268 <main+0xe8>)
 8003210:	2264      	movs	r2, #100	; 0x64
 8003212:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 300;
 8003214:	4b14      	ldr	r3, [pc, #80]	; (8003268 <main+0xe8>)
 8003216:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800321a:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 700;
 800321c:	4b12      	ldr	r3, [pc, #72]	; (8003268 <main+0xe8>)
 800321e:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8003222:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM1->CCR4 = 900;
 8003224:	4b10      	ldr	r3, [pc, #64]	; (8003268 <main+0xe8>)
 8003226:	f44f 7261 	mov.w	r2, #900	; 0x384
 800322a:	641a      	str	r2, [r3, #64]	; 0x40
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_UART_Receive_IT(&huart2, rxData, 1);
 800322c:	2201      	movs	r2, #1
 800322e:	490f      	ldr	r1, [pc, #60]	; (800326c <main+0xec>)
 8003230:	480f      	ldr	r0, [pc, #60]	; (8003270 <main+0xf0>)
 8003232:	f7ff f9c6 	bl	80025c2 <HAL_UART_Receive_IT>

	  current_tick = HAL_GetTick();
 8003236:	f7fd f9cb 	bl	80005d0 <HAL_GetTick>
 800323a:	6038      	str	r0, [r7, #0]

	  if(current_tick - past_tick >= 2)
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b01      	cmp	r3, #1
 8003244:	d9f2      	bls.n	800322c <main+0xac>
	  {
		  HAL_UART_Transmit(&huart2, sendData, sizeof(sendData), 0xFFFF);
 8003246:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800324a:	2205      	movs	r2, #5
 800324c:	4909      	ldr	r1, [pc, #36]	; (8003274 <main+0xf4>)
 800324e:	4808      	ldr	r0, [pc, #32]	; (8003270 <main+0xf0>)
 8003250:	f7ff f91e 	bl	8002490 <HAL_UART_Transmit>
		  past_tick = current_tick;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	607b      	str	r3, [r7, #4]
	  HAL_UART_Receive_IT(&huart2, rxData, 1);
 8003258:	e7e8      	b.n	800322c <main+0xac>
 800325a:	bf00      	nop
 800325c:	20000160 	.word	0x20000160
 8003260:	200001e0 	.word	0x200001e0
 8003264:	200001a0 	.word	0x200001a0
 8003268:	40010000 	.word	0x40010000
 800326c:	20000030 	.word	0x20000030
 8003270:	200002a0 	.word	0x200002a0
 8003274:	20000008 	.word	0x20000008

08003278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b094      	sub	sp, #80	; 0x50
 800327c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800327e:	f107 031c 	add.w	r3, r7, #28
 8003282:	2234      	movs	r2, #52	; 0x34
 8003284:	2100      	movs	r1, #0
 8003286:	4618      	mov	r0, r3
 8003288:	f000 fee4 	bl	8004054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800328c:	f107 0308 	add.w	r3, r7, #8
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	605a      	str	r2, [r3, #4]
 8003296:	609a      	str	r2, [r3, #8]
 8003298:	60da      	str	r2, [r3, #12]
 800329a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800329c:	2300      	movs	r3, #0
 800329e:	607b      	str	r3, [r7, #4]
 80032a0:	4b2c      	ldr	r3, [pc, #176]	; (8003354 <SystemClock_Config+0xdc>)
 80032a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a4:	4a2b      	ldr	r2, [pc, #172]	; (8003354 <SystemClock_Config+0xdc>)
 80032a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032aa:	6413      	str	r3, [r2, #64]	; 0x40
 80032ac:	4b29      	ldr	r3, [pc, #164]	; (8003354 <SystemClock_Config+0xdc>)
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b4:	607b      	str	r3, [r7, #4]
 80032b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80032b8:	2300      	movs	r3, #0
 80032ba:	603b      	str	r3, [r7, #0]
 80032bc:	4b26      	ldr	r3, [pc, #152]	; (8003358 <SystemClock_Config+0xe0>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a25      	ldr	r2, [pc, #148]	; (8003358 <SystemClock_Config+0xe0>)
 80032c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032c6:	6013      	str	r3, [r2, #0]
 80032c8:	4b23      	ldr	r3, [pc, #140]	; (8003358 <SystemClock_Config+0xe0>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80032d0:	603b      	str	r3, [r7, #0]
 80032d2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80032d4:	2302      	movs	r3, #2
 80032d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80032d8:	2301      	movs	r3, #1
 80032da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80032dc:	2310      	movs	r3, #16
 80032de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032e0:	2302      	movs	r3, #2
 80032e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80032e4:	2300      	movs	r3, #0
 80032e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80032e8:	2308      	movs	r3, #8
 80032ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80032ec:	23b4      	movs	r3, #180	; 0xb4
 80032ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80032f0:	2302      	movs	r3, #2
 80032f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80032f4:	2302      	movs	r3, #2
 80032f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80032f8:	2302      	movs	r3, #2
 80032fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032fc:	f107 031c 	add.w	r3, r7, #28
 8003300:	4618      	mov	r0, r3
 8003302:	f7fd ff6f 	bl	80011e4 <HAL_RCC_OscConfig>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800330c:	f000 f826 	bl	800335c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003310:	f7fd fc64 	bl	8000bdc <HAL_PWREx_EnableOverDrive>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800331a:	f000 f81f 	bl	800335c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800331e:	230f      	movs	r3, #15
 8003320:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003322:	2302      	movs	r3, #2
 8003324:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003326:	2300      	movs	r3, #0
 8003328:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800332a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800332e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003330:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003334:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003336:	f107 0308 	add.w	r3, r7, #8
 800333a:	2105      	movs	r1, #5
 800333c:	4618      	mov	r0, r3
 800333e:	f7fd fc9d 	bl	8000c7c <HAL_RCC_ClockConfig>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8003348:	f000 f808 	bl	800335c <Error_Handler>
  }
}
 800334c:	bf00      	nop
 800334e:	3750      	adds	r7, #80	; 0x50
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	40023800 	.word	0x40023800
 8003358:	40007000 	.word	0x40007000

0800335c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003360:	bf00      	nop
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
	...

0800336c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003372:	2300      	movs	r3, #0
 8003374:	607b      	str	r3, [r7, #4]
 8003376:	4b13      	ldr	r3, [pc, #76]	; (80033c4 <HAL_MspInit+0x58>)
 8003378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337a:	4a12      	ldr	r2, [pc, #72]	; (80033c4 <HAL_MspInit+0x58>)
 800337c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003380:	6453      	str	r3, [r2, #68]	; 0x44
 8003382:	4b10      	ldr	r3, [pc, #64]	; (80033c4 <HAL_MspInit+0x58>)
 8003384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800338a:	607b      	str	r3, [r7, #4]
 800338c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800338e:	2300      	movs	r3, #0
 8003390:	603b      	str	r3, [r7, #0]
 8003392:	4b0c      	ldr	r3, [pc, #48]	; (80033c4 <HAL_MspInit+0x58>)
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	4a0b      	ldr	r2, [pc, #44]	; (80033c4 <HAL_MspInit+0x58>)
 8003398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800339c:	6413      	str	r3, [r2, #64]	; 0x40
 800339e:	4b09      	ldr	r3, [pc, #36]	; (80033c4 <HAL_MspInit+0x58>)
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a6:	603b      	str	r3, [r7, #0]
 80033a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80033aa:	2200      	movs	r2, #0
 80033ac:	2100      	movs	r1, #0
 80033ae:	2005      	movs	r0, #5
 80033b0:	f7fd f9f5 	bl	800079e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80033b4:	2005      	movs	r0, #5
 80033b6:	f7fd fa0e 	bl	80007d6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033ba:	bf00      	nop
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	40023800 	.word	0x40023800

080033c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80033cc:	bf00      	nop
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr

080033d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033d6:	b480      	push	{r7}
 80033d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033da:	e7fe      	b.n	80033da <HardFault_Handler+0x4>

080033dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033e0:	e7fe      	b.n	80033e0 <MemManage_Handler+0x4>

080033e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033e2:	b480      	push	{r7}
 80033e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033e6:	e7fe      	b.n	80033e6 <BusFault_Handler+0x4>

080033e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033ec:	e7fe      	b.n	80033ec <UsageFault_Handler+0x4>

080033ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033ee:	b480      	push	{r7}
 80033f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033f2:	bf00      	nop
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003400:	bf00      	nop
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800340a:	b480      	push	{r7}
 800340c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800340e:	bf00      	nop
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800341c:	f7fd f8c4 	bl	80005a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003420:	bf00      	nop
 8003422:	bd80      	pop	{r7, pc}

08003424 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003428:	bf00      	nop
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
	...

08003434 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003438:	4802      	ldr	r0, [pc, #8]	; (8003444 <USART2_IRQHandler+0x10>)
 800343a:	f7ff f917 	bl	800266c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800343e:	bf00      	nop
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	200002a0 	.word	0x200002a0

08003448 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800344c:	4802      	ldr	r0, [pc, #8]	; (8003458 <UART4_IRQHandler+0x10>)
 800344e:	f7ff f90d 	bl	800266c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003452:	bf00      	nop
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	20000260 	.word	0x20000260

0800345c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003460:	4802      	ldr	r0, [pc, #8]	; (800346c <UART5_IRQHandler+0x10>)
 8003462:	f7ff f903 	bl	800266c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003466:	bf00      	nop
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	20000220 	.word	0x20000220

08003470 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003474:	4802      	ldr	r0, [pc, #8]	; (8003480 <TIM6_DAC_IRQHandler+0x10>)
 8003476:	f7fe fa59 	bl	800192c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800347a:	bf00      	nop
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	20000160 	.word	0x20000160

08003484 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003488:	4802      	ldr	r0, [pc, #8]	; (8003494 <TIM7_IRQHandler+0x10>)
 800348a:	f7fe fa4f 	bl	800192c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800348e:	bf00      	nop
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	200001e0 	.word	0x200001e0

08003498 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800349c:	4b16      	ldr	r3, [pc, #88]	; (80034f8 <SystemInit+0x60>)
 800349e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a2:	4a15      	ldr	r2, [pc, #84]	; (80034f8 <SystemInit+0x60>)
 80034a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80034ac:	4b13      	ldr	r3, [pc, #76]	; (80034fc <SystemInit+0x64>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a12      	ldr	r2, [pc, #72]	; (80034fc <SystemInit+0x64>)
 80034b2:	f043 0301 	orr.w	r3, r3, #1
 80034b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80034b8:	4b10      	ldr	r3, [pc, #64]	; (80034fc <SystemInit+0x64>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80034be:	4b0f      	ldr	r3, [pc, #60]	; (80034fc <SystemInit+0x64>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a0e      	ldr	r2, [pc, #56]	; (80034fc <SystemInit+0x64>)
 80034c4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80034c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034cc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80034ce:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <SystemInit+0x64>)
 80034d0:	4a0b      	ldr	r2, [pc, #44]	; (8003500 <SystemInit+0x68>)
 80034d2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80034d4:	4b09      	ldr	r3, [pc, #36]	; (80034fc <SystemInit+0x64>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a08      	ldr	r2, [pc, #32]	; (80034fc <SystemInit+0x64>)
 80034da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034de:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80034e0:	4b06      	ldr	r3, [pc, #24]	; (80034fc <SystemInit+0x64>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80034e6:	4b04      	ldr	r3, [pc, #16]	; (80034f8 <SystemInit+0x60>)
 80034e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80034ec:	609a      	str	r2, [r3, #8]
#endif
}
 80034ee:	bf00      	nop
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	e000ed00 	.word	0xe000ed00
 80034fc:	40023800 	.word	0x40023800
 8003500:	24003010 	.word	0x24003010

08003504 <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b092      	sub	sp, #72	; 0x48
 8003508:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800350a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	605a      	str	r2, [r3, #4]
 800351e:	609a      	str	r2, [r3, #8]
 8003520:	60da      	str	r2, [r3, #12]
 8003522:	611a      	str	r2, [r3, #16]
 8003524:	615a      	str	r2, [r3, #20]
 8003526:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003528:	1d3b      	adds	r3, r7, #4
 800352a:	2220      	movs	r2, #32
 800352c:	2100      	movs	r1, #0
 800352e:	4618      	mov	r0, r3
 8003530:	f000 fd90 	bl	8004054 <memset>

  htim1.Instance = TIM1;
 8003534:	4b45      	ldr	r3, [pc, #276]	; (800364c <MX_TIM1_Init+0x148>)
 8003536:	4a46      	ldr	r2, [pc, #280]	; (8003650 <MX_TIM1_Init+0x14c>)
 8003538:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1799;
 800353a:	4b44      	ldr	r3, [pc, #272]	; (800364c <MX_TIM1_Init+0x148>)
 800353c:	f240 7207 	movw	r2, #1799	; 0x707
 8003540:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003542:	4b42      	ldr	r3, [pc, #264]	; (800364c <MX_TIM1_Init+0x148>)
 8003544:	2200      	movs	r2, #0
 8003546:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8003548:	4b40      	ldr	r3, [pc, #256]	; (800364c <MX_TIM1_Init+0x148>)
 800354a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800354e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003550:	4b3e      	ldr	r3, [pc, #248]	; (800364c <MX_TIM1_Init+0x148>)
 8003552:	2200      	movs	r2, #0
 8003554:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003556:	4b3d      	ldr	r3, [pc, #244]	; (800364c <MX_TIM1_Init+0x148>)
 8003558:	2200      	movs	r2, #0
 800355a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800355c:	4b3b      	ldr	r3, [pc, #236]	; (800364c <MX_TIM1_Init+0x148>)
 800355e:	2280      	movs	r2, #128	; 0x80
 8003560:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003562:	483a      	ldr	r0, [pc, #232]	; (800364c <MX_TIM1_Init+0x148>)
 8003564:	f7fe f8e7 	bl	8001736 <HAL_TIM_PWM_Init>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800356e:	f7ff fef5 	bl	800335c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003572:	2300      	movs	r3, #0
 8003574:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003576:	2300      	movs	r3, #0
 8003578:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800357a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800357e:	4619      	mov	r1, r3
 8003580:	4832      	ldr	r0, [pc, #200]	; (800364c <MX_TIM1_Init+0x148>)
 8003582:	f7fe fe68 	bl	8002256 <HAL_TIMEx_MasterConfigSynchronization>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 800358c:	f7ff fee6 	bl	800335c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003590:	2360      	movs	r3, #96	; 0x60
 8003592:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 100;
 8003594:	2364      	movs	r3, #100	; 0x64
 8003596:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003598:	2300      	movs	r3, #0
 800359a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800359c:	2300      	movs	r3, #0
 800359e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035a0:	2300      	movs	r3, #0
 80035a2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80035a4:	2300      	movs	r3, #0
 80035a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80035a8:	2300      	movs	r3, #0
 80035aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80035ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035b0:	2200      	movs	r2, #0
 80035b2:	4619      	mov	r1, r3
 80035b4:	4825      	ldr	r0, [pc, #148]	; (800364c <MX_TIM1_Init+0x148>)
 80035b6:	f7fe fac1 	bl	8001b3c <HAL_TIM_PWM_ConfigChannel>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80035c0:	f7ff fecc 	bl	800335c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80035c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035c8:	2204      	movs	r2, #4
 80035ca:	4619      	mov	r1, r3
 80035cc:	481f      	ldr	r0, [pc, #124]	; (800364c <MX_TIM1_Init+0x148>)
 80035ce:	f7fe fab5 	bl	8001b3c <HAL_TIM_PWM_ConfigChannel>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 80035d8:	f7ff fec0 	bl	800335c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80035dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035e0:	2208      	movs	r2, #8
 80035e2:	4619      	mov	r1, r3
 80035e4:	4819      	ldr	r0, [pc, #100]	; (800364c <MX_TIM1_Init+0x148>)
 80035e6:	f7fe faa9 	bl	8001b3c <HAL_TIM_PWM_ConfigChannel>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80035f0:	f7ff feb4 	bl	800335c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80035f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035f8:	220c      	movs	r2, #12
 80035fa:	4619      	mov	r1, r3
 80035fc:	4813      	ldr	r0, [pc, #76]	; (800364c <MX_TIM1_Init+0x148>)
 80035fe:	f7fe fa9d 	bl	8001b3c <HAL_TIM_PWM_ConfigChannel>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d001      	beq.n	800360c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8003608:	f7ff fea8 	bl	800335c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800360c:	2300      	movs	r3, #0
 800360e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003610:	2300      	movs	r3, #0
 8003612:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003614:	2300      	movs	r3, #0
 8003616:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003618:	2300      	movs	r3, #0
 800361a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800361c:	2300      	movs	r3, #0
 800361e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003620:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003624:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003626:	2300      	movs	r3, #0
 8003628:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800362a:	1d3b      	adds	r3, r7, #4
 800362c:	4619      	mov	r1, r3
 800362e:	4807      	ldr	r0, [pc, #28]	; (800364c <MX_TIM1_Init+0x148>)
 8003630:	f7fe fe56 	bl	80022e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 800363a:	f7ff fe8f 	bl	800335c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800363e:	4803      	ldr	r0, [pc, #12]	; (800364c <MX_TIM1_Init+0x148>)
 8003640:	f000 fb16 	bl	8003c70 <HAL_TIM_MspPostInit>

}
 8003644:	bf00      	nop
 8003646:	3748      	adds	r7, #72	; 0x48
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	200001a0 	.word	0x200001a0
 8003650:	40010000 	.word	0x40010000

08003654 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b08c      	sub	sp, #48	; 0x30
 8003658:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800365a:	f107 030c 	add.w	r3, r7, #12
 800365e:	2224      	movs	r2, #36	; 0x24
 8003660:	2100      	movs	r1, #0
 8003662:	4618      	mov	r0, r3
 8003664:	f000 fcf6 	bl	8004054 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003668:	1d3b      	adds	r3, r7, #4
 800366a:	2200      	movs	r2, #0
 800366c:	601a      	str	r2, [r3, #0]
 800366e:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8003670:	4b20      	ldr	r3, [pc, #128]	; (80036f4 <MX_TIM3_Init+0xa0>)
 8003672:	4a21      	ldr	r2, [pc, #132]	; (80036f8 <MX_TIM3_Init+0xa4>)
 8003674:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003676:	4b1f      	ldr	r3, [pc, #124]	; (80036f4 <MX_TIM3_Init+0xa0>)
 8003678:	2200      	movs	r2, #0
 800367a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800367c:	4b1d      	ldr	r3, [pc, #116]	; (80036f4 <MX_TIM3_Init+0xa0>)
 800367e:	2200      	movs	r2, #0
 8003680:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8003682:	4b1c      	ldr	r3, [pc, #112]	; (80036f4 <MX_TIM3_Init+0xa0>)
 8003684:	2200      	movs	r2, #0
 8003686:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003688:	4b1a      	ldr	r3, [pc, #104]	; (80036f4 <MX_TIM3_Init+0xa0>)
 800368a:	2200      	movs	r2, #0
 800368c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800368e:	4b19      	ldr	r3, [pc, #100]	; (80036f4 <MX_TIM3_Init+0xa0>)
 8003690:	2200      	movs	r2, #0
 8003692:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003694:	2301      	movs	r3, #1
 8003696:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003698:	2300      	movs	r3, #0
 800369a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800369c:	2301      	movs	r3, #1
 800369e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80036a0:	2300      	movs	r3, #0
 80036a2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80036a4:	2300      	movs	r3, #0
 80036a6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80036a8:	2300      	movs	r3, #0
 80036aa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80036ac:	2301      	movs	r3, #1
 80036ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80036b0:	2300      	movs	r3, #0
 80036b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80036b4:	2300      	movs	r3, #0
 80036b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80036b8:	f107 030c 	add.w	r3, r7, #12
 80036bc:	4619      	mov	r1, r3
 80036be:	480d      	ldr	r0, [pc, #52]	; (80036f4 <MX_TIM3_Init+0xa0>)
 80036c0:	f7fe f8a2 	bl	8001808 <HAL_TIM_Encoder_Init>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80036ca:	f7ff fe47 	bl	800335c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036ce:	2300      	movs	r3, #0
 80036d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036d2:	2300      	movs	r3, #0
 80036d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80036d6:	1d3b      	adds	r3, r7, #4
 80036d8:	4619      	mov	r1, r3
 80036da:	4806      	ldr	r0, [pc, #24]	; (80036f4 <MX_TIM3_Init+0xa0>)
 80036dc:	f7fe fdbb 	bl	8002256 <HAL_TIMEx_MasterConfigSynchronization>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80036e6:	f7ff fe39 	bl	800335c <Error_Handler>
  }

}
 80036ea:	bf00      	nop
 80036ec:	3730      	adds	r7, #48	; 0x30
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	20000120 	.word	0x20000120
 80036f8:	40000400 	.word	0x40000400

080036fc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b08c      	sub	sp, #48	; 0x30
 8003700:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8003702:	f107 030c 	add.w	r3, r7, #12
 8003706:	2224      	movs	r2, #36	; 0x24
 8003708:	2100      	movs	r1, #0
 800370a:	4618      	mov	r0, r3
 800370c:	f000 fca2 	bl	8004054 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003710:	1d3b      	adds	r3, r7, #4
 8003712:	2200      	movs	r2, #0
 8003714:	601a      	str	r2, [r3, #0]
 8003716:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8003718:	4b20      	ldr	r3, [pc, #128]	; (800379c <MX_TIM4_Init+0xa0>)
 800371a:	4a21      	ldr	r2, [pc, #132]	; (80037a0 <MX_TIM4_Init+0xa4>)
 800371c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800371e:	4b1f      	ldr	r3, [pc, #124]	; (800379c <MX_TIM4_Init+0xa0>)
 8003720:	2200      	movs	r2, #0
 8003722:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003724:	4b1d      	ldr	r3, [pc, #116]	; (800379c <MX_TIM4_Init+0xa0>)
 8003726:	2200      	movs	r2, #0
 8003728:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 800372a:	4b1c      	ldr	r3, [pc, #112]	; (800379c <MX_TIM4_Init+0xa0>)
 800372c:	2200      	movs	r2, #0
 800372e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003730:	4b1a      	ldr	r3, [pc, #104]	; (800379c <MX_TIM4_Init+0xa0>)
 8003732:	2200      	movs	r2, #0
 8003734:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003736:	4b19      	ldr	r3, [pc, #100]	; (800379c <MX_TIM4_Init+0xa0>)
 8003738:	2200      	movs	r2, #0
 800373a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800373c:	2301      	movs	r3, #1
 800373e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003740:	2300      	movs	r3, #0
 8003742:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003744:	2301      	movs	r3, #1
 8003746:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003748:	2300      	movs	r3, #0
 800374a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800374c:	2300      	movs	r3, #0
 800374e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003750:	2300      	movs	r3, #0
 8003752:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003754:	2301      	movs	r3, #1
 8003756:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003758:	2300      	movs	r3, #0
 800375a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800375c:	2300      	movs	r3, #0
 800375e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003760:	f107 030c 	add.w	r3, r7, #12
 8003764:	4619      	mov	r1, r3
 8003766:	480d      	ldr	r0, [pc, #52]	; (800379c <MX_TIM4_Init+0xa0>)
 8003768:	f7fe f84e 	bl	8001808 <HAL_TIM_Encoder_Init>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8003772:	f7ff fdf3 	bl	800335c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003776:	2300      	movs	r3, #0
 8003778:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800377a:	2300      	movs	r3, #0
 800377c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800377e:	1d3b      	adds	r3, r7, #4
 8003780:	4619      	mov	r1, r3
 8003782:	4806      	ldr	r0, [pc, #24]	; (800379c <MX_TIM4_Init+0xa0>)
 8003784:	f7fe fd67 	bl	8002256 <HAL_TIMEx_MasterConfigSynchronization>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800378e:	f7ff fde5 	bl	800335c <Error_Handler>
  }

}
 8003792:	bf00      	nop
 8003794:	3730      	adds	r7, #48	; 0x30
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	200000a0 	.word	0x200000a0
 80037a0:	40000800 	.word	0x40000800

080037a4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b08c      	sub	sp, #48	; 0x30
 80037a8:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80037aa:	f107 030c 	add.w	r3, r7, #12
 80037ae:	2224      	movs	r2, #36	; 0x24
 80037b0:	2100      	movs	r1, #0
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 fc4e 	bl	8004054 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037b8:	1d3b      	adds	r3, r7, #4
 80037ba:	2200      	movs	r2, #0
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 80037c0:	4b20      	ldr	r3, [pc, #128]	; (8003844 <MX_TIM5_Init+0xa0>)
 80037c2:	4a21      	ldr	r2, [pc, #132]	; (8003848 <MX_TIM5_Init+0xa4>)
 80037c4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80037c6:	4b1f      	ldr	r3, [pc, #124]	; (8003844 <MX_TIM5_Init+0xa0>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037cc:	4b1d      	ldr	r3, [pc, #116]	; (8003844 <MX_TIM5_Init+0xa0>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 80037d2:	4b1c      	ldr	r3, [pc, #112]	; (8003844 <MX_TIM5_Init+0xa0>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037d8:	4b1a      	ldr	r3, [pc, #104]	; (8003844 <MX_TIM5_Init+0xa0>)
 80037da:	2200      	movs	r2, #0
 80037dc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037de:	4b19      	ldr	r3, [pc, #100]	; (8003844 <MX_TIM5_Init+0xa0>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80037e4:	2301      	movs	r3, #1
 80037e6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80037e8:	2300      	movs	r3, #0
 80037ea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80037ec:	2301      	movs	r3, #1
 80037ee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80037f0:	2300      	movs	r3, #0
 80037f2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80037f4:	2300      	movs	r3, #0
 80037f6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80037f8:	2300      	movs	r3, #0
 80037fa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80037fc:	2301      	movs	r3, #1
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003800:	2300      	movs	r3, #0
 8003802:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003804:	2300      	movs	r3, #0
 8003806:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003808:	f107 030c 	add.w	r3, r7, #12
 800380c:	4619      	mov	r1, r3
 800380e:	480d      	ldr	r0, [pc, #52]	; (8003844 <MX_TIM5_Init+0xa0>)
 8003810:	f7fd fffa 	bl	8001808 <HAL_TIM_Encoder_Init>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
 800381a:	f7ff fd9f 	bl	800335c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800381e:	2300      	movs	r3, #0
 8003820:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003822:	2300      	movs	r3, #0
 8003824:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003826:	1d3b      	adds	r3, r7, #4
 8003828:	4619      	mov	r1, r3
 800382a:	4806      	ldr	r0, [pc, #24]	; (8003844 <MX_TIM5_Init+0xa0>)
 800382c:	f7fe fd13 	bl	8002256 <HAL_TIMEx_MasterConfigSynchronization>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 8003836:	f7ff fd91 	bl	800335c <Error_Handler>
  }

}
 800383a:	bf00      	nop
 800383c:	3730      	adds	r7, #48	; 0x30
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	200000e0 	.word	0x200000e0
 8003848:	40000c00 	.word	0x40000c00

0800384c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003852:	463b      	mov	r3, r7
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 800385a:	4b15      	ldr	r3, [pc, #84]	; (80038b0 <MX_TIM6_Init+0x64>)
 800385c:	4a15      	ldr	r2, [pc, #84]	; (80038b4 <MX_TIM6_Init+0x68>)
 800385e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 899;
 8003860:	4b13      	ldr	r3, [pc, #76]	; (80038b0 <MX_TIM6_Init+0x64>)
 8003862:	f240 3283 	movw	r2, #899	; 0x383
 8003866:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003868:	4b11      	ldr	r3, [pc, #68]	; (80038b0 <MX_TIM6_Init+0x64>)
 800386a:	2200      	movs	r2, #0
 800386c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 800386e:	4b10      	ldr	r3, [pc, #64]	; (80038b0 <MX_TIM6_Init+0x64>)
 8003870:	2263      	movs	r2, #99	; 0x63
 8003872:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003874:	4b0e      	ldr	r3, [pc, #56]	; (80038b0 <MX_TIM6_Init+0x64>)
 8003876:	2200      	movs	r2, #0
 8003878:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800387a:	480d      	ldr	r0, [pc, #52]	; (80038b0 <MX_TIM6_Init+0x64>)
 800387c:	f7fd ff0c 	bl	8001698 <HAL_TIM_Base_Init>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003886:	f7ff fd69 	bl	800335c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800388a:	2300      	movs	r3, #0
 800388c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800388e:	2300      	movs	r3, #0
 8003890:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003892:	463b      	mov	r3, r7
 8003894:	4619      	mov	r1, r3
 8003896:	4806      	ldr	r0, [pc, #24]	; (80038b0 <MX_TIM6_Init+0x64>)
 8003898:	f7fe fcdd 	bl	8002256 <HAL_TIMEx_MasterConfigSynchronization>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80038a2:	f7ff fd5b 	bl	800335c <Error_Handler>
  }

}
 80038a6:	bf00      	nop
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	20000160 	.word	0x20000160
 80038b4:	40001000 	.word	0x40001000

080038b8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038be:	463b      	mov	r3, r7
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 80038c6:	4b15      	ldr	r3, [pc, #84]	; (800391c <MX_TIM7_Init+0x64>)
 80038c8:	4a15      	ldr	r2, [pc, #84]	; (8003920 <MX_TIM7_Init+0x68>)
 80038ca:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 899;
 80038cc:	4b13      	ldr	r3, [pc, #76]	; (800391c <MX_TIM7_Init+0x64>)
 80038ce:	f240 3283 	movw	r2, #899	; 0x383
 80038d2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038d4:	4b11      	ldr	r3, [pc, #68]	; (800391c <MX_TIM7_Init+0x64>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 80038da:	4b10      	ldr	r3, [pc, #64]	; (800391c <MX_TIM7_Init+0x64>)
 80038dc:	2263      	movs	r2, #99	; 0x63
 80038de:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038e0:	4b0e      	ldr	r3, [pc, #56]	; (800391c <MX_TIM7_Init+0x64>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80038e6:	480d      	ldr	r0, [pc, #52]	; (800391c <MX_TIM7_Init+0x64>)
 80038e8:	f7fd fed6 	bl	8001698 <HAL_TIM_Base_Init>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80038f2:	f7ff fd33 	bl	800335c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038f6:	2300      	movs	r3, #0
 80038f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038fa:	2300      	movs	r3, #0
 80038fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80038fe:	463b      	mov	r3, r7
 8003900:	4619      	mov	r1, r3
 8003902:	4806      	ldr	r0, [pc, #24]	; (800391c <MX_TIM7_Init+0x64>)
 8003904:	f7fe fca7 	bl	8002256 <HAL_TIMEx_MasterConfigSynchronization>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800390e:	f7ff fd25 	bl	800335c <Error_Handler>
  }

}
 8003912:	bf00      	nop
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	200001e0 	.word	0x200001e0
 8003920:	40001400 	.word	0x40001400

08003924 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b08c      	sub	sp, #48	; 0x30
 8003928:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800392a:	f107 030c 	add.w	r3, r7, #12
 800392e:	2224      	movs	r2, #36	; 0x24
 8003930:	2100      	movs	r1, #0
 8003932:	4618      	mov	r0, r3
 8003934:	f000 fb8e 	bl	8004054 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003938:	1d3b      	adds	r3, r7, #4
 800393a:	2200      	movs	r2, #0
 800393c:	601a      	str	r2, [r3, #0]
 800393e:	605a      	str	r2, [r3, #4]

  htim8.Instance = TIM8;
 8003940:	4b21      	ldr	r3, [pc, #132]	; (80039c8 <MX_TIM8_Init+0xa4>)
 8003942:	4a22      	ldr	r2, [pc, #136]	; (80039cc <MX_TIM8_Init+0xa8>)
 8003944:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003946:	4b20      	ldr	r3, [pc, #128]	; (80039c8 <MX_TIM8_Init+0xa4>)
 8003948:	2200      	movs	r2, #0
 800394a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800394c:	4b1e      	ldr	r3, [pc, #120]	; (80039c8 <MX_TIM8_Init+0xa4>)
 800394e:	2200      	movs	r2, #0
 8003950:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 8003952:	4b1d      	ldr	r3, [pc, #116]	; (80039c8 <MX_TIM8_Init+0xa4>)
 8003954:	2200      	movs	r2, #0
 8003956:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003958:	4b1b      	ldr	r3, [pc, #108]	; (80039c8 <MX_TIM8_Init+0xa4>)
 800395a:	2200      	movs	r2, #0
 800395c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800395e:	4b1a      	ldr	r3, [pc, #104]	; (80039c8 <MX_TIM8_Init+0xa4>)
 8003960:	2200      	movs	r2, #0
 8003962:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003964:	4b18      	ldr	r3, [pc, #96]	; (80039c8 <MX_TIM8_Init+0xa4>)
 8003966:	2200      	movs	r2, #0
 8003968:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800396a:	2301      	movs	r3, #1
 800396c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800396e:	2300      	movs	r3, #0
 8003970:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003972:	2301      	movs	r3, #1
 8003974:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003976:	2300      	movs	r3, #0
 8003978:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800397a:	2300      	movs	r3, #0
 800397c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800397e:	2300      	movs	r3, #0
 8003980:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003982:	2301      	movs	r3, #1
 8003984:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003986:	2300      	movs	r3, #0
 8003988:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800398a:	2300      	movs	r3, #0
 800398c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800398e:	f107 030c 	add.w	r3, r7, #12
 8003992:	4619      	mov	r1, r3
 8003994:	480c      	ldr	r0, [pc, #48]	; (80039c8 <MX_TIM8_Init+0xa4>)
 8003996:	f7fd ff37 	bl	8001808 <HAL_TIM_Encoder_Init>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <MX_TIM8_Init+0x80>
  {
    Error_Handler();
 80039a0:	f7ff fcdc 	bl	800335c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039a4:	2300      	movs	r3, #0
 80039a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039a8:	2300      	movs	r3, #0
 80039aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80039ac:	1d3b      	adds	r3, r7, #4
 80039ae:	4619      	mov	r1, r3
 80039b0:	4805      	ldr	r0, [pc, #20]	; (80039c8 <MX_TIM8_Init+0xa4>)
 80039b2:	f7fe fc50 	bl	8002256 <HAL_TIMEx_MasterConfigSynchronization>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <MX_TIM8_Init+0x9c>
  {
    Error_Handler();
 80039bc:	f7ff fcce 	bl	800335c <Error_Handler>
  }

}
 80039c0:	bf00      	nop
 80039c2:	3730      	adds	r7, #48	; 0x30
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	20000060 	.word	0x20000060
 80039cc:	40010400 	.word	0x40010400

080039d0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a0b      	ldr	r2, [pc, #44]	; (8003a0c <HAL_TIM_PWM_MspInit+0x3c>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d10d      	bne.n	80039fe <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039e2:	2300      	movs	r3, #0
 80039e4:	60fb      	str	r3, [r7, #12]
 80039e6:	4b0a      	ldr	r3, [pc, #40]	; (8003a10 <HAL_TIM_PWM_MspInit+0x40>)
 80039e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ea:	4a09      	ldr	r2, [pc, #36]	; (8003a10 <HAL_TIM_PWM_MspInit+0x40>)
 80039ec:	f043 0301 	orr.w	r3, r3, #1
 80039f0:	6453      	str	r3, [r2, #68]	; 0x44
 80039f2:	4b07      	ldr	r3, [pc, #28]	; (8003a10 <HAL_TIM_PWM_MspInit+0x40>)
 80039f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80039fe:	bf00      	nop
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	40010000 	.word	0x40010000
 8003a10:	40023800 	.word	0x40023800

08003a14 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b090      	sub	sp, #64	; 0x40
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a20:	2200      	movs	r2, #0
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	605a      	str	r2, [r3, #4]
 8003a26:	609a      	str	r2, [r3, #8]
 8003a28:	60da      	str	r2, [r3, #12]
 8003a2a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a64      	ldr	r2, [pc, #400]	; (8003bc4 <HAL_TIM_Encoder_MspInit+0x1b0>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d12c      	bne.n	8003a90 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a36:	2300      	movs	r3, #0
 8003a38:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a3a:	4b63      	ldr	r3, [pc, #396]	; (8003bc8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	4a62      	ldr	r2, [pc, #392]	; (8003bc8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003a40:	f043 0302 	orr.w	r3, r3, #2
 8003a44:	6413      	str	r3, [r2, #64]	; 0x40
 8003a46:	4b60      	ldr	r3, [pc, #384]	; (8003bc8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a52:	2300      	movs	r3, #0
 8003a54:	627b      	str	r3, [r7, #36]	; 0x24
 8003a56:	4b5c      	ldr	r3, [pc, #368]	; (8003bc8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5a:	4a5b      	ldr	r2, [pc, #364]	; (8003bc8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003a5c:	f043 0302 	orr.w	r3, r3, #2
 8003a60:	6313      	str	r3, [r2, #48]	; 0x30
 8003a62:	4b59      	ldr	r3, [pc, #356]	; (8003bc8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = encoder2_ch1_Pin|encoder2_ch2_Pin;
 8003a6e:	2330      	movs	r3, #48	; 0x30
 8003a70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a72:	2302      	movs	r3, #2
 8003a74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a76:	2300      	movs	r3, #0
 8003a78:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003a7e:	2302      	movs	r3, #2
 8003a80:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a86:	4619      	mov	r1, r3
 8003a88:	4850      	ldr	r0, [pc, #320]	; (8003bcc <HAL_TIM_Encoder_MspInit+0x1b8>)
 8003a8a:	f7fc fee1 	bl	8000850 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003a8e:	e094      	b.n	8003bba <HAL_TIM_Encoder_MspInit+0x1a6>
  else if(tim_encoderHandle->Instance==TIM4)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a4e      	ldr	r2, [pc, #312]	; (8003bd0 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d12c      	bne.n	8003af4 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	623b      	str	r3, [r7, #32]
 8003a9e:	4b4a      	ldr	r3, [pc, #296]	; (8003bc8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	4a49      	ldr	r2, [pc, #292]	; (8003bc8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003aa4:	f043 0304 	orr.w	r3, r3, #4
 8003aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8003aaa:	4b47      	ldr	r3, [pc, #284]	; (8003bc8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	f003 0304 	and.w	r3, r3, #4
 8003ab2:	623b      	str	r3, [r7, #32]
 8003ab4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	61fb      	str	r3, [r7, #28]
 8003aba:	4b43      	ldr	r3, [pc, #268]	; (8003bc8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abe:	4a42      	ldr	r2, [pc, #264]	; (8003bc8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003ac0:	f043 0302 	orr.w	r3, r3, #2
 8003ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ac6:	4b40      	ldr	r3, [pc, #256]	; (8003bc8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	61fb      	str	r3, [r7, #28]
 8003ad0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = encoder3_ch1_Pin|encoder3_ch2_Pin;
 8003ad2:	23c0      	movs	r3, #192	; 0xc0
 8003ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ada:	2300      	movs	r3, #0
 8003adc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ae6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003aea:	4619      	mov	r1, r3
 8003aec:	4837      	ldr	r0, [pc, #220]	; (8003bcc <HAL_TIM_Encoder_MspInit+0x1b8>)
 8003aee:	f7fc feaf 	bl	8000850 <HAL_GPIO_Init>
}
 8003af2:	e062      	b.n	8003bba <HAL_TIM_Encoder_MspInit+0x1a6>
  else if(tim_encoderHandle->Instance==TIM5)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a36      	ldr	r2, [pc, #216]	; (8003bd4 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d12c      	bne.n	8003b58 <HAL_TIM_Encoder_MspInit+0x144>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003afe:	2300      	movs	r3, #0
 8003b00:	61bb      	str	r3, [r7, #24]
 8003b02:	4b31      	ldr	r3, [pc, #196]	; (8003bc8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	4a30      	ldr	r2, [pc, #192]	; (8003bc8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003b08:	f043 0308 	orr.w	r3, r3, #8
 8003b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b0e:	4b2e      	ldr	r3, [pc, #184]	; (8003bc8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	f003 0308 	and.w	r3, r3, #8
 8003b16:	61bb      	str	r3, [r7, #24]
 8003b18:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	617b      	str	r3, [r7, #20]
 8003b1e:	4b2a      	ldr	r3, [pc, #168]	; (8003bc8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b22:	4a29      	ldr	r2, [pc, #164]	; (8003bc8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003b24:	f043 0301 	orr.w	r3, r3, #1
 8003b28:	6313      	str	r3, [r2, #48]	; 0x30
 8003b2a:	4b27      	ldr	r3, [pc, #156]	; (8003bc8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	617b      	str	r3, [r7, #20]
 8003b34:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = encoder0_ch1_Pin|encoder0_ch2_Pin;
 8003b36:	2303      	movs	r3, #3
 8003b38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b42:	2300      	movs	r3, #0
 8003b44:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003b46:	2302      	movs	r3, #2
 8003b48:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b4e:	4619      	mov	r1, r3
 8003b50:	4821      	ldr	r0, [pc, #132]	; (8003bd8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003b52:	f7fc fe7d 	bl	8000850 <HAL_GPIO_Init>
}
 8003b56:	e030      	b.n	8003bba <HAL_TIM_Encoder_MspInit+0x1a6>
  else if(tim_encoderHandle->Instance==TIM8)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a1f      	ldr	r2, [pc, #124]	; (8003bdc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d12b      	bne.n	8003bba <HAL_TIM_Encoder_MspInit+0x1a6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003b62:	2300      	movs	r3, #0
 8003b64:	613b      	str	r3, [r7, #16]
 8003b66:	4b18      	ldr	r3, [pc, #96]	; (8003bc8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6a:	4a17      	ldr	r2, [pc, #92]	; (8003bc8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003b6c:	f043 0302 	orr.w	r3, r3, #2
 8003b70:	6453      	str	r3, [r2, #68]	; 0x44
 8003b72:	4b15      	ldr	r3, [pc, #84]	; (8003bc8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	613b      	str	r3, [r7, #16]
 8003b7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60fb      	str	r3, [r7, #12]
 8003b82:	4b11      	ldr	r3, [pc, #68]	; (8003bc8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b86:	4a10      	ldr	r2, [pc, #64]	; (8003bc8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003b88:	f043 0304 	orr.w	r3, r3, #4
 8003b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b8e:	4b0e      	ldr	r3, [pc, #56]	; (8003bc8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b92:	f003 0304 	and.w	r3, r3, #4
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = encoder1_ch1_Pin|encoder1_ch2_Pin;
 8003b9a:	23c0      	movs	r3, #192	; 0xc0
 8003b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003baa:	2303      	movs	r3, #3
 8003bac:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	480a      	ldr	r0, [pc, #40]	; (8003be0 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003bb6:	f7fc fe4b 	bl	8000850 <HAL_GPIO_Init>
}
 8003bba:	bf00      	nop
 8003bbc:	3740      	adds	r7, #64	; 0x40
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	40000400 	.word	0x40000400
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	40020400 	.word	0x40020400
 8003bd0:	40000800 	.word	0x40000800
 8003bd4:	40000c00 	.word	0x40000c00
 8003bd8:	40020000 	.word	0x40020000
 8003bdc:	40010400 	.word	0x40010400
 8003be0:	40020800 	.word	0x40020800

08003be4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a1c      	ldr	r2, [pc, #112]	; (8003c64 <HAL_TIM_Base_MspInit+0x80>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d116      	bne.n	8003c24 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60fb      	str	r3, [r7, #12]
 8003bfa:	4b1b      	ldr	r3, [pc, #108]	; (8003c68 <HAL_TIM_Base_MspInit+0x84>)
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	4a1a      	ldr	r2, [pc, #104]	; (8003c68 <HAL_TIM_Base_MspInit+0x84>)
 8003c00:	f043 0310 	orr.w	r3, r3, #16
 8003c04:	6413      	str	r3, [r2, #64]	; 0x40
 8003c06:	4b18      	ldr	r3, [pc, #96]	; (8003c68 <HAL_TIM_Base_MspInit+0x84>)
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	f003 0310 	and.w	r3, r3, #16
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003c12:	2200      	movs	r2, #0
 8003c14:	2100      	movs	r1, #0
 8003c16:	2036      	movs	r0, #54	; 0x36
 8003c18:	f7fc fdc1 	bl	800079e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003c1c:	2036      	movs	r0, #54	; 0x36
 8003c1e:	f7fc fdda 	bl	80007d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8003c22:	e01a      	b.n	8003c5a <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM7)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a10      	ldr	r2, [pc, #64]	; (8003c6c <HAL_TIM_Base_MspInit+0x88>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d115      	bne.n	8003c5a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60bb      	str	r3, [r7, #8]
 8003c32:	4b0d      	ldr	r3, [pc, #52]	; (8003c68 <HAL_TIM_Base_MspInit+0x84>)
 8003c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c36:	4a0c      	ldr	r2, [pc, #48]	; (8003c68 <HAL_TIM_Base_MspInit+0x84>)
 8003c38:	f043 0320 	orr.w	r3, r3, #32
 8003c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c3e:	4b0a      	ldr	r3, [pc, #40]	; (8003c68 <HAL_TIM_Base_MspInit+0x84>)
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	f003 0320 	and.w	r3, r3, #32
 8003c46:	60bb      	str	r3, [r7, #8]
 8003c48:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	2037      	movs	r0, #55	; 0x37
 8003c50:	f7fc fda5 	bl	800079e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003c54:	2037      	movs	r0, #55	; 0x37
 8003c56:	f7fc fdbe 	bl	80007d6 <HAL_NVIC_EnableIRQ>
}
 8003c5a:	bf00      	nop
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	40001000 	.word	0x40001000
 8003c68:	40023800 	.word	0x40023800
 8003c6c:	40001400 	.word	0x40001400

08003c70 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b088      	sub	sp, #32
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c78:	f107 030c 	add.w	r3, r7, #12
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	605a      	str	r2, [r3, #4]
 8003c82:	609a      	str	r2, [r3, #8]
 8003c84:	60da      	str	r2, [r3, #12]
 8003c86:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a12      	ldr	r2, [pc, #72]	; (8003cd8 <HAL_TIM_MspPostInit+0x68>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d11e      	bne.n	8003cd0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c92:	2300      	movs	r3, #0
 8003c94:	60bb      	str	r3, [r7, #8]
 8003c96:	4b11      	ldr	r3, [pc, #68]	; (8003cdc <HAL_TIM_MspPostInit+0x6c>)
 8003c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9a:	4a10      	ldr	r2, [pc, #64]	; (8003cdc <HAL_TIM_MspPostInit+0x6c>)
 8003c9c:	f043 0301 	orr.w	r3, r3, #1
 8003ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ca2:	4b0e      	ldr	r3, [pc, #56]	; (8003cdc <HAL_TIM_MspPostInit+0x6c>)
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	60bb      	str	r3, [r7, #8]
 8003cac:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = pwm0_Pin|pwm1_Pin|pwm2_Pin|pwm3_Pin;
 8003cae:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003cb2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cc4:	f107 030c 	add.w	r3, r7, #12
 8003cc8:	4619      	mov	r1, r3
 8003cca:	4805      	ldr	r0, [pc, #20]	; (8003ce0 <HAL_TIM_MspPostInit+0x70>)
 8003ccc:	f7fc fdc0 	bl	8000850 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003cd0:	bf00      	nop
 8003cd2:	3720      	adds	r7, #32
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	40010000 	.word	0x40010000
 8003cdc:	40023800 	.word	0x40023800
 8003ce0:	40020000 	.word	0x40020000

08003ce4 <MX_UART4_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8003ce8:	4b11      	ldr	r3, [pc, #68]	; (8003d30 <MX_UART4_Init+0x4c>)
 8003cea:	4a12      	ldr	r2, [pc, #72]	; (8003d34 <MX_UART4_Init+0x50>)
 8003cec:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8003cee:	4b10      	ldr	r3, [pc, #64]	; (8003d30 <MX_UART4_Init+0x4c>)
 8003cf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003cf4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003cf6:	4b0e      	ldr	r3, [pc, #56]	; (8003d30 <MX_UART4_Init+0x4c>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003cfc:	4b0c      	ldr	r3, [pc, #48]	; (8003d30 <MX_UART4_Init+0x4c>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003d02:	4b0b      	ldr	r3, [pc, #44]	; (8003d30 <MX_UART4_Init+0x4c>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003d08:	4b09      	ldr	r3, [pc, #36]	; (8003d30 <MX_UART4_Init+0x4c>)
 8003d0a:	220c      	movs	r2, #12
 8003d0c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d0e:	4b08      	ldr	r3, [pc, #32]	; (8003d30 <MX_UART4_Init+0x4c>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d14:	4b06      	ldr	r3, [pc, #24]	; (8003d30 <MX_UART4_Init+0x4c>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003d1a:	4805      	ldr	r0, [pc, #20]	; (8003d30 <MX_UART4_Init+0x4c>)
 8003d1c:	f7fe fb6b 	bl	80023f6 <HAL_UART_Init>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8003d26:	f7ff fb19 	bl	800335c <Error_Handler>
  }

}
 8003d2a:	bf00      	nop
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	20000260 	.word	0x20000260
 8003d34:	40004c00 	.word	0x40004c00

08003d38 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 8003d3c:	4b11      	ldr	r3, [pc, #68]	; (8003d84 <MX_UART5_Init+0x4c>)
 8003d3e:	4a12      	ldr	r2, [pc, #72]	; (8003d88 <MX_UART5_Init+0x50>)
 8003d40:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8003d42:	4b10      	ldr	r3, [pc, #64]	; (8003d84 <MX_UART5_Init+0x4c>)
 8003d44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d48:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003d4a:	4b0e      	ldr	r3, [pc, #56]	; (8003d84 <MX_UART5_Init+0x4c>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003d50:	4b0c      	ldr	r3, [pc, #48]	; (8003d84 <MX_UART5_Init+0x4c>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003d56:	4b0b      	ldr	r3, [pc, #44]	; (8003d84 <MX_UART5_Init+0x4c>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003d5c:	4b09      	ldr	r3, [pc, #36]	; (8003d84 <MX_UART5_Init+0x4c>)
 8003d5e:	220c      	movs	r2, #12
 8003d60:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d62:	4b08      	ldr	r3, [pc, #32]	; (8003d84 <MX_UART5_Init+0x4c>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d68:	4b06      	ldr	r3, [pc, #24]	; (8003d84 <MX_UART5_Init+0x4c>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003d6e:	4805      	ldr	r0, [pc, #20]	; (8003d84 <MX_UART5_Init+0x4c>)
 8003d70:	f7fe fb41 	bl	80023f6 <HAL_UART_Init>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8003d7a:	f7ff faef 	bl	800335c <Error_Handler>
  }

}
 8003d7e:	bf00      	nop
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	20000220 	.word	0x20000220
 8003d88:	40005000 	.word	0x40005000

08003d8c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003d90:	4b10      	ldr	r3, [pc, #64]	; (8003dd4 <MX_USART2_UART_Init+0x48>)
 8003d92:	4a11      	ldr	r2, [pc, #68]	; (8003dd8 <MX_USART2_UART_Init+0x4c>)
 8003d94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8003d96:	4b0f      	ldr	r3, [pc, #60]	; (8003dd4 <MX_USART2_UART_Init+0x48>)
 8003d98:	4a10      	ldr	r2, [pc, #64]	; (8003ddc <MX_USART2_UART_Init+0x50>)
 8003d9a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003d9c:	4b0d      	ldr	r3, [pc, #52]	; (8003dd4 <MX_USART2_UART_Init+0x48>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003da2:	4b0c      	ldr	r3, [pc, #48]	; (8003dd4 <MX_USART2_UART_Init+0x48>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003da8:	4b0a      	ldr	r3, [pc, #40]	; (8003dd4 <MX_USART2_UART_Init+0x48>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003dae:	4b09      	ldr	r3, [pc, #36]	; (8003dd4 <MX_USART2_UART_Init+0x48>)
 8003db0:	220c      	movs	r2, #12
 8003db2:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003db4:	4b07      	ldr	r3, [pc, #28]	; (8003dd4 <MX_USART2_UART_Init+0x48>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003dba:	4b06      	ldr	r3, [pc, #24]	; (8003dd4 <MX_USART2_UART_Init+0x48>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003dc0:	4804      	ldr	r0, [pc, #16]	; (8003dd4 <MX_USART2_UART_Init+0x48>)
 8003dc2:	f7fe fb18 	bl	80023f6 <HAL_UART_Init>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d001      	beq.n	8003dd0 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8003dcc:	f7ff fac6 	bl	800335c <Error_Handler>
  }

}
 8003dd0:	bf00      	nop
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	200002a0 	.word	0x200002a0
 8003dd8:	40004400 	.word	0x40004400
 8003ddc:	000f4240 	.word	0x000f4240

08003de0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b08e      	sub	sp, #56	; 0x38
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003dec:	2200      	movs	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	605a      	str	r2, [r3, #4]
 8003df2:	609a      	str	r2, [r3, #8]
 8003df4:	60da      	str	r2, [r3, #12]
 8003df6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a67      	ldr	r2, [pc, #412]	; (8003f9c <HAL_UART_MspInit+0x1bc>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d135      	bne.n	8003e6e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003e02:	2300      	movs	r3, #0
 8003e04:	623b      	str	r3, [r7, #32]
 8003e06:	4b66      	ldr	r3, [pc, #408]	; (8003fa0 <HAL_UART_MspInit+0x1c0>)
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	4a65      	ldr	r2, [pc, #404]	; (8003fa0 <HAL_UART_MspInit+0x1c0>)
 8003e0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e10:	6413      	str	r3, [r2, #64]	; 0x40
 8003e12:	4b63      	ldr	r3, [pc, #396]	; (8003fa0 <HAL_UART_MspInit+0x1c0>)
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e1a:	623b      	str	r3, [r7, #32]
 8003e1c:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e1e:	2300      	movs	r3, #0
 8003e20:	61fb      	str	r3, [r7, #28]
 8003e22:	4b5f      	ldr	r3, [pc, #380]	; (8003fa0 <HAL_UART_MspInit+0x1c0>)
 8003e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e26:	4a5e      	ldr	r2, [pc, #376]	; (8003fa0 <HAL_UART_MspInit+0x1c0>)
 8003e28:	f043 0304 	orr.w	r3, r3, #4
 8003e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e2e:	4b5c      	ldr	r3, [pc, #368]	; (8003fa0 <HAL_UART_MspInit+0x1c0>)
 8003e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e32:	f003 0304 	and.w	r3, r3, #4
 8003e36:	61fb      	str	r3, [r7, #28]
 8003e38:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration    
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003e3a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003e3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e40:	2302      	movs	r3, #2
 8003e42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e44:	2301      	movs	r3, #1
 8003e46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003e4c:	2308      	movs	r3, #8
 8003e4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e54:	4619      	mov	r1, r3
 8003e56:	4853      	ldr	r0, [pc, #332]	; (8003fa4 <HAL_UART_MspInit+0x1c4>)
 8003e58:	f7fc fcfa 	bl	8000850 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	2100      	movs	r1, #0
 8003e60:	2034      	movs	r0, #52	; 0x34
 8003e62:	f7fc fc9c 	bl	800079e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003e66:	2034      	movs	r0, #52	; 0x34
 8003e68:	f7fc fcb5 	bl	80007d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003e6c:	e091      	b.n	8003f92 <HAL_UART_MspInit+0x1b2>
  else if(uartHandle->Instance==UART5)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a4d      	ldr	r2, [pc, #308]	; (8003fa8 <HAL_UART_MspInit+0x1c8>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d153      	bne.n	8003f20 <HAL_UART_MspInit+0x140>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003e78:	2300      	movs	r3, #0
 8003e7a:	61bb      	str	r3, [r7, #24]
 8003e7c:	4b48      	ldr	r3, [pc, #288]	; (8003fa0 <HAL_UART_MspInit+0x1c0>)
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e80:	4a47      	ldr	r2, [pc, #284]	; (8003fa0 <HAL_UART_MspInit+0x1c0>)
 8003e82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e86:	6413      	str	r3, [r2, #64]	; 0x40
 8003e88:	4b45      	ldr	r3, [pc, #276]	; (8003fa0 <HAL_UART_MspInit+0x1c0>)
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e90:	61bb      	str	r3, [r7, #24]
 8003e92:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e94:	2300      	movs	r3, #0
 8003e96:	617b      	str	r3, [r7, #20]
 8003e98:	4b41      	ldr	r3, [pc, #260]	; (8003fa0 <HAL_UART_MspInit+0x1c0>)
 8003e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9c:	4a40      	ldr	r2, [pc, #256]	; (8003fa0 <HAL_UART_MspInit+0x1c0>)
 8003e9e:	f043 0304 	orr.w	r3, r3, #4
 8003ea2:	6313      	str	r3, [r2, #48]	; 0x30
 8003ea4:	4b3e      	ldr	r3, [pc, #248]	; (8003fa0 <HAL_UART_MspInit+0x1c0>)
 8003ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea8:	f003 0304 	and.w	r3, r3, #4
 8003eac:	617b      	str	r3, [r7, #20]
 8003eae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	613b      	str	r3, [r7, #16]
 8003eb4:	4b3a      	ldr	r3, [pc, #232]	; (8003fa0 <HAL_UART_MspInit+0x1c0>)
 8003eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb8:	4a39      	ldr	r2, [pc, #228]	; (8003fa0 <HAL_UART_MspInit+0x1c0>)
 8003eba:	f043 0308 	orr.w	r3, r3, #8
 8003ebe:	6313      	str	r3, [r2, #48]	; 0x30
 8003ec0:	4b37      	ldr	r3, [pc, #220]	; (8003fa0 <HAL_UART_MspInit+0x1c0>)
 8003ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec4:	f003 0308 	and.w	r3, r3, #8
 8003ec8:	613b      	str	r3, [r7, #16]
 8003eca:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003ecc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ed0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eda:	2303      	movs	r3, #3
 8003edc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003ede:	2308      	movs	r3, #8
 8003ee0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ee2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	482e      	ldr	r0, [pc, #184]	; (8003fa4 <HAL_UART_MspInit+0x1c4>)
 8003eea:	f7fc fcb1 	bl	8000850 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003eee:	2304      	movs	r3, #4
 8003ef0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003efa:	2303      	movs	r3, #3
 8003efc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003efe:	2308      	movs	r3, #8
 8003f00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f06:	4619      	mov	r1, r3
 8003f08:	4828      	ldr	r0, [pc, #160]	; (8003fac <HAL_UART_MspInit+0x1cc>)
 8003f0a:	f7fc fca1 	bl	8000850 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8003f0e:	2200      	movs	r2, #0
 8003f10:	2100      	movs	r1, #0
 8003f12:	2035      	movs	r0, #53	; 0x35
 8003f14:	f7fc fc43 	bl	800079e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003f18:	2035      	movs	r0, #53	; 0x35
 8003f1a:	f7fc fc5c 	bl	80007d6 <HAL_NVIC_EnableIRQ>
}
 8003f1e:	e038      	b.n	8003f92 <HAL_UART_MspInit+0x1b2>
  else if(uartHandle->Instance==USART2)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a22      	ldr	r2, [pc, #136]	; (8003fb0 <HAL_UART_MspInit+0x1d0>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d133      	bne.n	8003f92 <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60fb      	str	r3, [r7, #12]
 8003f2e:	4b1c      	ldr	r3, [pc, #112]	; (8003fa0 <HAL_UART_MspInit+0x1c0>)
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	4a1b      	ldr	r2, [pc, #108]	; (8003fa0 <HAL_UART_MspInit+0x1c0>)
 8003f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f38:	6413      	str	r3, [r2, #64]	; 0x40
 8003f3a:	4b19      	ldr	r3, [pc, #100]	; (8003fa0 <HAL_UART_MspInit+0x1c0>)
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f42:	60fb      	str	r3, [r7, #12]
 8003f44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f46:	2300      	movs	r3, #0
 8003f48:	60bb      	str	r3, [r7, #8]
 8003f4a:	4b15      	ldr	r3, [pc, #84]	; (8003fa0 <HAL_UART_MspInit+0x1c0>)
 8003f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4e:	4a14      	ldr	r2, [pc, #80]	; (8003fa0 <HAL_UART_MspInit+0x1c0>)
 8003f50:	f043 0301 	orr.w	r3, r3, #1
 8003f54:	6313      	str	r3, [r2, #48]	; 0x30
 8003f56:	4b12      	ldr	r3, [pc, #72]	; (8003fa0 <HAL_UART_MspInit+0x1c0>)
 8003f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	60bb      	str	r3, [r7, #8]
 8003f60:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003f62:	230c      	movs	r3, #12
 8003f64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f66:	2302      	movs	r3, #2
 8003f68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003f72:	2307      	movs	r3, #7
 8003f74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	480d      	ldr	r0, [pc, #52]	; (8003fb4 <HAL_UART_MspInit+0x1d4>)
 8003f7e:	f7fc fc67 	bl	8000850 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003f82:	2200      	movs	r2, #0
 8003f84:	2100      	movs	r1, #0
 8003f86:	2026      	movs	r0, #38	; 0x26
 8003f88:	f7fc fc09 	bl	800079e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003f8c:	2026      	movs	r0, #38	; 0x26
 8003f8e:	f7fc fc22 	bl	80007d6 <HAL_NVIC_EnableIRQ>
}
 8003f92:	bf00      	nop
 8003f94:	3738      	adds	r7, #56	; 0x38
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	40004c00 	.word	0x40004c00
 8003fa0:	40023800 	.word	0x40023800
 8003fa4:	40020800 	.word	0x40020800
 8003fa8:	40005000 	.word	0x40005000
 8003fac:	40020c00 	.word	0x40020c00
 8003fb0:	40004400 	.word	0x40004400
 8003fb4:	40020000 	.word	0x40020000

08003fb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003fb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ff0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003fbc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003fbe:	e003      	b.n	8003fc8 <LoopCopyDataInit>

08003fc0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003fc0:	4b0c      	ldr	r3, [pc, #48]	; (8003ff4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003fc2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003fc4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003fc6:	3104      	adds	r1, #4

08003fc8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003fc8:	480b      	ldr	r0, [pc, #44]	; (8003ff8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003fca:	4b0c      	ldr	r3, [pc, #48]	; (8003ffc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003fcc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003fce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003fd0:	d3f6      	bcc.n	8003fc0 <CopyDataInit>
  ldr  r2, =_sbss
 8003fd2:	4a0b      	ldr	r2, [pc, #44]	; (8004000 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003fd4:	e002      	b.n	8003fdc <LoopFillZerobss>

08003fd6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003fd6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003fd8:	f842 3b04 	str.w	r3, [r2], #4

08003fdc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003fdc:	4b09      	ldr	r3, [pc, #36]	; (8004004 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003fde:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003fe0:	d3f9      	bcc.n	8003fd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003fe2:	f7ff fa59 	bl	8003498 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003fe6:	f000 f811 	bl	800400c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003fea:	f7ff f8c9 	bl	8003180 <main>
  bx  lr    
 8003fee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003ff0:	2001ffff 	.word	0x2001ffff
  ldr  r3, =_sidata
 8003ff4:	080040a4 	.word	0x080040a4
  ldr  r0, =_sdata
 8003ff8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003ffc:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8004000:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8004004:	200002e0 	.word	0x200002e0

08004008 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004008:	e7fe      	b.n	8004008 <ADC_IRQHandler>
	...

0800400c <__libc_init_array>:
 800400c:	b570      	push	{r4, r5, r6, lr}
 800400e:	4e0d      	ldr	r6, [pc, #52]	; (8004044 <__libc_init_array+0x38>)
 8004010:	4c0d      	ldr	r4, [pc, #52]	; (8004048 <__libc_init_array+0x3c>)
 8004012:	1ba4      	subs	r4, r4, r6
 8004014:	10a4      	asrs	r4, r4, #2
 8004016:	2500      	movs	r5, #0
 8004018:	42a5      	cmp	r5, r4
 800401a:	d109      	bne.n	8004030 <__libc_init_array+0x24>
 800401c:	4e0b      	ldr	r6, [pc, #44]	; (800404c <__libc_init_array+0x40>)
 800401e:	4c0c      	ldr	r4, [pc, #48]	; (8004050 <__libc_init_array+0x44>)
 8004020:	f000 f820 	bl	8004064 <_init>
 8004024:	1ba4      	subs	r4, r4, r6
 8004026:	10a4      	asrs	r4, r4, #2
 8004028:	2500      	movs	r5, #0
 800402a:	42a5      	cmp	r5, r4
 800402c:	d105      	bne.n	800403a <__libc_init_array+0x2e>
 800402e:	bd70      	pop	{r4, r5, r6, pc}
 8004030:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004034:	4798      	blx	r3
 8004036:	3501      	adds	r5, #1
 8004038:	e7ee      	b.n	8004018 <__libc_init_array+0xc>
 800403a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800403e:	4798      	blx	r3
 8004040:	3501      	adds	r5, #1
 8004042:	e7f2      	b.n	800402a <__libc_init_array+0x1e>
 8004044:	0800409c 	.word	0x0800409c
 8004048:	0800409c 	.word	0x0800409c
 800404c:	0800409c 	.word	0x0800409c
 8004050:	080040a0 	.word	0x080040a0

08004054 <memset>:
 8004054:	4402      	add	r2, r0
 8004056:	4603      	mov	r3, r0
 8004058:	4293      	cmp	r3, r2
 800405a:	d100      	bne.n	800405e <memset+0xa>
 800405c:	4770      	bx	lr
 800405e:	f803 1b01 	strb.w	r1, [r3], #1
 8004062:	e7f9      	b.n	8004058 <memset+0x4>

08004064 <_init>:
 8004064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004066:	bf00      	nop
 8004068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800406a:	bc08      	pop	{r3}
 800406c:	469e      	mov	lr, r3
 800406e:	4770      	bx	lr

08004070 <_fini>:
 8004070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004072:	bf00      	nop
 8004074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004076:	bc08      	pop	{r3}
 8004078:	469e      	mov	lr, r3
 800407a:	4770      	bx	lr
